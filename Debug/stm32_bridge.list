
stm32_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011af8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002250  08011c98  08011c98  00021c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013ee8  08013ee8  00023ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013ef0  08013ef0  00023ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013ef4  08013ef4  00023ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003b0  20000000  08013ef8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009cf8  200003b0  080142a8  000303b0  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  2000a0a8  080142a8  0003a0a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000503c8  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000699e  00000000  00000000  000807a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000226f5  00000000  00000000  00087146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f98  00000000  00000000  000a9840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002320  00000000  00000000  000ab7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001efe2  00000000  00000000  000adaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000332a3  00000000  00000000  000ccada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a5cc5  00000000  00000000  000ffd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001a5a42  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007564  00000000  00000000  001a5a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003b0 	.word	0x200003b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011c6c 	.word	0x08011c6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003b4 	.word	0x200003b4
 80001dc:	08011c6c 	.word	0x08011c6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c86:	f000 b9ef 	b.w	8001068 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f883 	bl	8000da4 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f876 	bl	8000da4 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f865 	bl	8000da4 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f857 	bl	8000da4 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d1c:	f000 b9a4 	b.w	8001068 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f83c 	bl	8000da4 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fee3 	bl	8000b0c <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc59 	bl	8000628 <__aeabi_dmul>
 8000d76:	f7ff ff07 	bl	8000b88 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbda 	bl	8000534 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc50 	bl	8000628 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa92 	bl	80002b8 <__aeabi_dsub>
 8000d94:	f7ff fef8 	bl	8000b88 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468c      	mov	ip, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 8083 	bne.w	8000eba <__udivmoddi4+0x116>
 8000db4:	428a      	cmp	r2, r1
 8000db6:	4617      	mov	r7, r2
 8000db8:	d947      	bls.n	8000e4a <__udivmoddi4+0xa6>
 8000dba:	fab2 f282 	clz	r2, r2
 8000dbe:	b142      	cbz	r2, 8000dd2 <__udivmoddi4+0x2e>
 8000dc0:	f1c2 0020 	rsb	r0, r2, #32
 8000dc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	4097      	lsls	r7, r2
 8000dcc:	ea40 0c01 	orr.w	ip, r0, r1
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dd6:	0c23      	lsrs	r3, r4, #16
 8000dd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000ddc:	fa1f fe87 	uxth.w	lr, r7
 8000de0:	fb08 c116 	mls	r1, r8, r6, ip
 8000de4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x60>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000df6:	f080 8119 	bcs.w	800102c <__udivmoddi4+0x288>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 8116 	bls.w	800102c <__udivmoddi4+0x288>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d909      	bls.n	8000e30 <__udivmoddi4+0x8c>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e22:	f080 8105 	bcs.w	8001030 <__udivmoddi4+0x28c>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f240 8102 	bls.w	8001030 <__udivmoddi4+0x28c>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e34:	eba4 040e 	sub.w	r4, r4, lr
 8000e38:	2600      	movs	r6, #0
 8000e3a:	b11d      	cbz	r5, 8000e44 <__udivmoddi4+0xa0>
 8000e3c:	40d4      	lsrs	r4, r2
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e9c5 4300 	strd	r4, r3, [r5]
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	b902      	cbnz	r2, 8000e4e <__udivmoddi4+0xaa>
 8000e4c:	deff      	udf	#255	; 0xff
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d150      	bne.n	8000ef8 <__udivmoddi4+0x154>
 8000e56:	1bcb      	subs	r3, r1, r7
 8000e58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5c:	fa1f f887 	uxth.w	r8, r7
 8000e60:	2601      	movs	r6, #1
 8000e62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e66:	0c21      	lsrs	r1, r4, #16
 8000e68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb08 f30c 	mul.w	r3, r8, ip
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0xe4>
 8000e78:	1879      	adds	r1, r7, r1
 8000e7a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0xe2>
 8000e80:	428b      	cmp	r3, r1
 8000e82:	f200 80e9 	bhi.w	8001058 <__udivmoddi4+0x2b4>
 8000e86:	4684      	mov	ip, r0
 8000e88:	1ac9      	subs	r1, r1, r3
 8000e8a:	b2a3      	uxth	r3, r4
 8000e8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e98:	fb08 f800 	mul.w	r8, r8, r0
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x10c>
 8000ea0:	193c      	adds	r4, r7, r4
 8000ea2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x10a>
 8000ea8:	45a0      	cmp	r8, r4
 8000eaa:	f200 80d9 	bhi.w	8001060 <__udivmoddi4+0x2bc>
 8000eae:	4618      	mov	r0, r3
 8000eb0:	eba4 0408 	sub.w	r4, r4, r8
 8000eb4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb8:	e7bf      	b.n	8000e3a <__udivmoddi4+0x96>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d909      	bls.n	8000ed2 <__udivmoddi4+0x12e>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	f000 80b1 	beq.w	8001026 <__udivmoddi4+0x282>
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eca:	4630      	mov	r0, r6
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	fab3 f683 	clz	r6, r3
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d14a      	bne.n	8000f70 <__udivmoddi4+0x1cc>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0x140>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 80b8 	bhi.w	8001054 <__udivmoddi4+0x2b0>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	468c      	mov	ip, r1
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0a8      	beq.n	8000e44 <__udivmoddi4+0xa0>
 8000ef2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ef6:	e7a5      	b.n	8000e44 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f603 	lsr.w	r6, r0, r3
 8000f00:	4097      	lsls	r7, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f0a:	40d9      	lsrs	r1, r3
 8000f0c:	4330      	orrs	r0, r6
 8000f0e:	0c03      	lsrs	r3, r0, #16
 8000f10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f14:	fa1f f887 	uxth.w	r8, r7
 8000f18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f20:	fb06 f108 	mul.w	r1, r6, r8
 8000f24:	4299      	cmp	r1, r3
 8000f26:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2a:	d909      	bls.n	8000f40 <__udivmoddi4+0x19c>
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f32:	f080 808d 	bcs.w	8001050 <__udivmoddi4+0x2ac>
 8000f36:	4299      	cmp	r1, r3
 8000f38:	f240 808a 	bls.w	8001050 <__udivmoddi4+0x2ac>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	443b      	add	r3, r7
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	b281      	uxth	r1, r0
 8000f44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f50:	fb00 f308 	mul.w	r3, r0, r8
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d907      	bls.n	8000f68 <__udivmoddi4+0x1c4>
 8000f58:	1879      	adds	r1, r7, r1
 8000f5a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f5e:	d273      	bcs.n	8001048 <__udivmoddi4+0x2a4>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d971      	bls.n	8001048 <__udivmoddi4+0x2a4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4439      	add	r1, r7
 8000f68:	1acb      	subs	r3, r1, r3
 8000f6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f6e:	e778      	b.n	8000e62 <__udivmoddi4+0xbe>
 8000f70:	f1c6 0c20 	rsb	ip, r6, #32
 8000f74:	fa03 f406 	lsl.w	r4, r3, r6
 8000f78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f7c:	431c      	orrs	r4, r3
 8000f7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f82:	fa01 f306 	lsl.w	r3, r1, r6
 8000f86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f8e:	431f      	orrs	r7, r3
 8000f90:	0c3b      	lsrs	r3, r7, #16
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fa1f f884 	uxth.w	r8, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fa2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fa6:	458a      	cmp	sl, r1
 8000fa8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fac:	fa00 f306 	lsl.w	r3, r0, r6
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x220>
 8000fb2:	1861      	adds	r1, r4, r1
 8000fb4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fb8:	d248      	bcs.n	800104c <__udivmoddi4+0x2a8>
 8000fba:	458a      	cmp	sl, r1
 8000fbc:	d946      	bls.n	800104c <__udivmoddi4+0x2a8>
 8000fbe:	f1a9 0902 	sub.w	r9, r9, #2
 8000fc2:	4421      	add	r1, r4
 8000fc4:	eba1 010a 	sub.w	r1, r1, sl
 8000fc8:	b2bf      	uxth	r7, r7
 8000fca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fce:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fd2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fd6:	fb00 f808 	mul.w	r8, r0, r8
 8000fda:	45b8      	cmp	r8, r7
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x24a>
 8000fde:	19e7      	adds	r7, r4, r7
 8000fe0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fe4:	d22e      	bcs.n	8001044 <__udivmoddi4+0x2a0>
 8000fe6:	45b8      	cmp	r8, r7
 8000fe8:	d92c      	bls.n	8001044 <__udivmoddi4+0x2a0>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4427      	add	r7, r4
 8000fee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ff2:	eba7 0708 	sub.w	r7, r7, r8
 8000ff6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ffa:	454f      	cmp	r7, r9
 8000ffc:	46c6      	mov	lr, r8
 8000ffe:	4649      	mov	r1, r9
 8001000:	d31a      	bcc.n	8001038 <__udivmoddi4+0x294>
 8001002:	d017      	beq.n	8001034 <__udivmoddi4+0x290>
 8001004:	b15d      	cbz	r5, 800101e <__udivmoddi4+0x27a>
 8001006:	ebb3 020e 	subs.w	r2, r3, lr
 800100a:	eb67 0701 	sbc.w	r7, r7, r1
 800100e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001012:	40f2      	lsrs	r2, r6
 8001014:	ea4c 0202 	orr.w	r2, ip, r2
 8001018:	40f7      	lsrs	r7, r6
 800101a:	e9c5 2700 	strd	r2, r7, [r5]
 800101e:	2600      	movs	r6, #0
 8001020:	4631      	mov	r1, r6
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e70b      	b.n	8000e44 <__udivmoddi4+0xa0>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e9      	b.n	8000e04 <__udivmoddi4+0x60>
 8001030:	4618      	mov	r0, r3
 8001032:	e6fd      	b.n	8000e30 <__udivmoddi4+0x8c>
 8001034:	4543      	cmp	r3, r8
 8001036:	d2e5      	bcs.n	8001004 <__udivmoddi4+0x260>
 8001038:	ebb8 0e02 	subs.w	lr, r8, r2
 800103c:	eb69 0104 	sbc.w	r1, r9, r4
 8001040:	3801      	subs	r0, #1
 8001042:	e7df      	b.n	8001004 <__udivmoddi4+0x260>
 8001044:	4608      	mov	r0, r1
 8001046:	e7d2      	b.n	8000fee <__udivmoddi4+0x24a>
 8001048:	4660      	mov	r0, ip
 800104a:	e78d      	b.n	8000f68 <__udivmoddi4+0x1c4>
 800104c:	4681      	mov	r9, r0
 800104e:	e7b9      	b.n	8000fc4 <__udivmoddi4+0x220>
 8001050:	4666      	mov	r6, ip
 8001052:	e775      	b.n	8000f40 <__udivmoddi4+0x19c>
 8001054:	4630      	mov	r0, r6
 8001056:	e74a      	b.n	8000eee <__udivmoddi4+0x14a>
 8001058:	f1ac 0c02 	sub.w	ip, ip, #2
 800105c:	4439      	add	r1, r7
 800105e:	e713      	b.n	8000e88 <__udivmoddi4+0xe4>
 8001060:	3802      	subs	r0, #2
 8001062:	443c      	add	r4, r7
 8001064:	e724      	b.n	8000eb0 <__udivmoddi4+0x10c>
 8001066:	bf00      	nop

08001068 <__aeabi_idiv0>:
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <ONEWIRE_DELAY>:

//******************************************************************************************

void ONEWIRE_DELAY(uint16_t time_us)
{
	tmrDS18B20->Instance->CNT = 0;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <ONEWIRE_DELAY+0x14>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	2100      	movs	r1, #0
 8001074:	6259      	str	r1, [r3, #36]	; 0x24

	while (tmrDS18B20->Instance->CNT <= time_us);
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	4283      	cmp	r3, r0
 800107c:	d9fb      	bls.n	8001076 <ONEWIRE_DELAY+0xa>
}
 800107e:	4770      	bx	lr
 8001080:	2000012c 	.word	0x2000012c

08001084 <ONEWIRE_LOW>:
//----------------------------------------------------------------------------------
void ONEWIRE_LOW(OneWire_t *gp)
{
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001084:	8883      	ldrh	r3, [r0, #4]
 8001086:	6802      	ldr	r2, [r0, #0]
 8001088:	041b      	lsls	r3, r3, #16
 800108a:	6193      	str	r3, [r2, #24]
}
 800108c:	4770      	bx	lr

0800108e <ONEWIRE_HIGH>:
//----------------------------------------------------------------------------------
void ONEWIRE_HIGH(OneWire_t *gp)
{
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 800108e:	6803      	ldr	r3, [r0, #0]
 8001090:	8882      	ldrh	r2, [r0, #4]
 8001092:	619a      	str	r2, [r3, #24]
}
 8001094:	4770      	bx	lr

08001096 <ONEWIRE_INPUT>:
//----------------------------------------------------------------------------------
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8001096:	b500      	push	{lr}
 8001098:	b087      	sub	sp, #28
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	9302      	str	r3, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 800109e:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;
 80010a4:	8883      	ldrh	r3, [r0, #4]
 80010a6:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx, &gpinit);
 80010a8:	a901      	add	r1, sp, #4
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f006 faac 	bl	8007608 <HAL_GPIO_Init>
}
 80010b0:	b007      	add	sp, #28
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4

080010b6 <ONEWIRE_OUTPUT>:
//----------------------------------------------------------------------------------
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80010b6:	b500      	push	{lr}
 80010b8:	b087      	sub	sp, #28
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80010ba:	2311      	movs	r3, #17
 80010bc:	9302      	str	r3, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	2302      	movs	r3, #2
 80010c4:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;
 80010c6:	8883      	ldrh	r3, [r0, #4]
 80010c8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx, &gpinit);
 80010ca:	a901      	add	r1, sp, #4
 80010cc:	6800      	ldr	r0, [r0, #0]
 80010ce:	f006 fa9b 	bl	8007608 <HAL_GPIO_Init>
}
 80010d2:	b007      	add	sp, #28
 80010d4:	f85d fb04 	ldr.w	pc, [sp], #4

080010d8 <OneWire_Init>:
//----------------------------------------------------------------------------------
void OneWire_Init(OneWire_t *OneWireStruct, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	4604      	mov	r4, r0
 80010dc:	460e      	mov	r6, r1
 80010de:	4615      	mov	r5, r2
	HAL_TIM_Base_Start(tmrDS18B20);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <OneWire_Init+0x48>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f009 fba3 	bl	800a82e <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 80010e8:	6026      	str	r6, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80010ea:	80a5      	strh	r5, [r4, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff ffe2 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff ffcb 	bl	800108e <ONEWIRE_HIGH>
	OneWireDelay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fc:	f00a fa2a 	bl	800b554 <osDelay>
	ONEWIRE_LOW(OneWireStruct);
 8001100:	4620      	mov	r0, r4
 8001102:	f7ff ffbf 	bl	8001084 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110a:	f00a fa23 	bl	800b554 <osDelay>
	ONEWIRE_HIGH(OneWireStruct);
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff ffbd 	bl	800108e <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8001114:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001118:	f00a fa1c 	bl	800b554 <osDelay>
}
 800111c:	bd70      	pop	{r4, r5, r6, pc}
 800111e:	bf00      	nop
 8001120:	2000012c 	.word	0x2000012c

08001124 <OneWire_WriteByte>:
	// Return bit value
	return bit;
}
//----------------------------------------------------------------------------------
void OneWire_WriteByte(OneWire_t *OneWireStruct, uint8_t byte)
{
 8001124:	b570      	push	{r4, r5, r6, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460e      	mov	r6, r1
uint8_t i = 8;
 800112a:	2208      	movs	r2, #8

	// Write 8 bits
	while (i--) {
 800112c:	e013      	b.n	8001156 <OneWire_WriteByte+0x32>
		ONEWIRE_LOW(OneWireStruct);
 800112e:	4628      	mov	r0, r5
 8001130:	f7ff ffa8 	bl	8001084 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001134:	4628      	mov	r0, r5
 8001136:	f7ff ffbe 	bl	80010b6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 800113a:	2041      	movs	r0, #65	; 0x41
 800113c:	f7ff ff96 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001140:	4628      	mov	r0, r5
 8001142:	f7ff ffa8 	bl	8001096 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001146:	2005      	movs	r0, #5
 8001148:	f7ff ff90 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 800114c:	4628      	mov	r0, r5
 800114e:	f7ff ffa2 	bl	8001096 <ONEWIRE_INPUT>
		// LSB bit is first
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
 8001152:	0876      	lsrs	r6, r6, #1
	while (i--) {
 8001154:	4622      	mov	r2, r4
 8001156:	1e53      	subs	r3, r2, #1
 8001158:	b2dc      	uxtb	r4, r3
 800115a:	b1aa      	cbz	r2, 8001188 <OneWire_WriteByte+0x64>
	if (bit) {
 800115c:	f016 0f01 	tst.w	r6, #1
 8001160:	d0e5      	beq.n	800112e <OneWire_WriteByte+0xa>
		ONEWIRE_LOW(OneWireStruct);
 8001162:	4628      	mov	r0, r5
 8001164:	f7ff ff8e 	bl	8001084 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001168:	4628      	mov	r0, r5
 800116a:	f7ff ffa4 	bl	80010b6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff ff7c 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001174:	4628      	mov	r0, r5
 8001176:	f7ff ff8e 	bl	8001096 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(55);
 800117a:	2037      	movs	r0, #55	; 0x37
 800117c:	f7ff ff76 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001180:	4628      	mov	r0, r5
 8001182:	f7ff ff88 	bl	8001096 <ONEWIRE_INPUT>
 8001186:	e7e4      	b.n	8001152 <OneWire_WriteByte+0x2e>
	}
}
 8001188:	bd70      	pop	{r4, r5, r6, pc}

0800118a <OneWire_ReadByte>:
//----------------------------------------------------------------------------------
uint8_t OneWire_ReadByte(OneWire_t *OneWireStruct)
{
 800118a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118c:	4605      	mov	r5, r0
uint8_t i = 8, byte = 0;
 800118e:	2000      	movs	r0, #0
 8001190:	2208      	movs	r2, #8

	while (i--) {
 8001192:	e006      	b.n	80011a2 <OneWire_ReadByte+0x18>
	ONEWIRE_DELAY(50);
 8001194:	2032      	movs	r0, #50	; 0x32
 8001196:	f7ff ff69 	bl	800106c <ONEWIRE_DELAY>
		byte >>= 1;
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 800119a:	ea44 10c7 	orr.w	r0, r4, r7, lsl #7
 800119e:	b2c0      	uxtb	r0, r0
	while (i--) {
 80011a0:	4632      	mov	r2, r6
 80011a2:	1e53      	subs	r3, r2, #1
 80011a4:	b2de      	uxtb	r6, r3
 80011a6:	b1c2      	cbz	r2, 80011da <OneWire_ReadByte+0x50>
		byte >>= 1;
 80011a8:	0844      	lsrs	r4, r0, #1
	ONEWIRE_LOW(OneWireStruct);
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff ff6a 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80011b0:	4628      	mov	r0, r5
 80011b2:	f7ff ff80 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff ff58 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80011bc:	4628      	mov	r0, r5
 80011be:	f7ff ff6a 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f7ff ff52 	bl	800106c <ONEWIRE_DELAY>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) bit = 1;// Bit is HIGH
 80011c8:	88a9      	ldrh	r1, [r5, #4]
 80011ca:	6828      	ldr	r0, [r5, #0]
 80011cc:	f006 faf0 	bl	80077b0 <HAL_GPIO_ReadPin>
 80011d0:	4607      	mov	r7, r0
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d0de      	beq.n	8001194 <OneWire_ReadByte+0xa>
 80011d6:	2701      	movs	r7, #1
 80011d8:	e7dc      	b.n	8001194 <OneWire_ReadByte+0xa>
	}

	return byte;
}
 80011da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011dc <OneWire_ResetSearch>:
}
//----------------------------------------------------------------------------------
void OneWire_ResetSearch(OneWire_t *OneWireStruct)
{
	// Reset the search state
	OneWireStruct->LastDiscrepancy = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	7183      	strb	r3, [r0, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80011e0:	7203      	strb	r3, [r0, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80011e2:	71c3      	strb	r3, [r0, #7]
}
 80011e4:	4770      	bx	lr

080011e6 <OneWire_Search>:
//----------------------------------------------------------------------------------
uint8_t OneWire_Search(OneWire_t *OneWireStruct, uint8_t command)
{
 80011e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ea:	4604      	mov	r4, r0
uint8_t last_zero = 0, rom_byte_number = 0, search_result = 0;
uint8_t id_bit, cmp_id_bit;
uint8_t rom_byte_mask = 1, search_direction;

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag) {
 80011ec:	7a05      	ldrb	r5, [r0, #8]
 80011ee:	b13d      	cbz	r5, 8001200 <OneWire_Search+0x1a>
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
		OneWireStruct->LastDiscrepancy = 0;
 80011f0:	2000      	movs	r0, #0
 80011f2:	71a0      	strb	r0, [r4, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80011f4:	7220      	strb	r0, [r4, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80011f6:	71e0      	strb	r0, [r4, #7]
		search_result = 0;
 80011f8:	4605      	mov	r5, r0
	}

	return search_result;
}
 80011fa:	4628      	mov	r0, r5
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	460e      	mov	r6, r1
	ONEWIRE_LOW(OneWireStruct);
 8001202:	f7ff ff3f 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff ff55 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800120c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001210:	f7ff ff2c 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001214:	2014      	movs	r0, #20
 8001216:	f7ff ff29 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff ff3b 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001220:	2046      	movs	r0, #70	; 0x46
 8001222:	f7ff ff23 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001226:	88a1      	ldrh	r1, [r4, #4]
 8001228:	6820      	ldr	r0, [r4, #0]
 800122a:	f006 fac1 	bl	80077b0 <HAL_GPIO_ReadPin>
 800122e:	4681      	mov	r9, r0
	ONEWIRE_DELAY(410);
 8001230:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001234:	f7ff ff1a 	bl	800106c <ONEWIRE_DELAY>
		if (OneWire_Reset(OneWireStruct)) {
 8001238:	f1b9 0f00 	cmp.w	r9, #0
 800123c:	d004      	beq.n	8001248 <OneWire_Search+0x62>
			OneWireStruct->LastDiscrepancy = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	71a3      	strb	r3, [r4, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8001242:	7223      	strb	r3, [r4, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8001244:	71e3      	strb	r3, [r4, #7]
			return 0;
 8001246:	e7d8      	b.n	80011fa <OneWire_Search+0x14>
		OneWire_WriteByte(OneWireStruct, command);
 8001248:	4631      	mov	r1, r6
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff ff6a 	bl	8001124 <OneWire_WriteByte>
uint8_t last_zero = 0, rom_byte_number = 0, search_result = 0;
 8001250:	46c8      	mov	r8, r9
uint8_t rom_byte_mask = 1, search_direction;
 8001252:	2601      	movs	r6, #1
uint8_t id_bit_number = 1;
 8001254:	4637      	mov	r7, r6
 8001256:	e044      	b.n	80012e2 <OneWire_Search+0xfc>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001258:	f1ba 0f01 	cmp.w	sl, #1
 800125c:	d176      	bne.n	800134c <OneWire_Search+0x166>
		if (!(id_bit_number < 65)) {
 800125e:	2f40      	cmp	r7, #64	; 0x40
 8001260:	d9c6      	bls.n	80011f0 <OneWire_Search+0xa>
			OneWireStruct->LastDiscrepancy = last_zero;
 8001262:	f884 9006 	strb.w	r9, [r4, #6]
			if (!OneWireStruct->LastDiscrepancy) OneWireStruct->LastDeviceFlag = 1;
 8001266:	f1b9 0f00 	cmp.w	r9, #0
 800126a:	d101      	bne.n	8001270 <OneWire_Search+0x8a>
 800126c:	2301      	movs	r3, #1
 800126e:	7223      	strb	r3, [r4, #8]
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8001270:	7a63      	ldrb	r3, [r4, #9]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0bc      	beq.n	80011f0 <OneWire_Search+0xa>
			search_result = 1;
 8001276:	2501      	movs	r5, #1
 8001278:	e7bf      	b.n	80011fa <OneWire_Search+0x14>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800127a:	79a5      	ldrb	r5, [r4, #6]
 800127c:	42bd      	cmp	r5, r7
 800127e:	d90d      	bls.n	800129c <OneWire_Search+0xb6>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001280:	eb04 0308 	add.w	r3, r4, r8
 8001284:	7a5b      	ldrb	r3, [r3, #9]
 8001286:	4233      	tst	r3, r6
 8001288:	bf14      	ite	ne
 800128a:	2501      	movne	r5, #1
 800128c:	2500      	moveq	r5, #0
					if (!search_direction) {
 800128e:	2d00      	cmp	r5, #0
 8001290:	d15e      	bne.n	8001350 <OneWire_Search+0x16a>
						if (last_zero < 9) OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8001292:	2f08      	cmp	r7, #8
 8001294:	d807      	bhi.n	80012a6 <OneWire_Search+0xc0>
 8001296:	71e7      	strb	r7, [r4, #7]
						last_zero = id_bit_number;
 8001298:	46b9      	mov	r9, r7
 800129a:	e059      	b.n	8001350 <OneWire_Search+0x16a>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 800129c:	42bd      	cmp	r5, r7
 800129e:	bf14      	ite	ne
 80012a0:	2500      	movne	r5, #0
 80012a2:	2501      	moveq	r5, #1
 80012a4:	e7f3      	b.n	800128e <OneWire_Search+0xa8>
						last_zero = id_bit_number;
 80012a6:	46b9      	mov	r9, r7
 80012a8:	e052      	b.n	8001350 <OneWire_Search+0x16a>
				if (search_direction == 1) OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80012aa:	eb04 0208 	add.w	r2, r4, r8
 80012ae:	7a53      	ldrb	r3, [r2, #9]
 80012b0:	4333      	orrs	r3, r6
 80012b2:	7253      	strb	r3, [r2, #9]
 80012b4:	e054      	b.n	8001360 <OneWire_Search+0x17a>
		ONEWIRE_LOW(OneWireStruct);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fee4 	bl	8001084 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fefa 	bl	80010b6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 80012c2:	2041      	movs	r0, #65	; 0x41
 80012c4:	f7ff fed2 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fee4 	bl	8001096 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 80012ce:	2005      	movs	r0, #5
 80012d0:	f7ff fecc 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fede 	bl	8001096 <ONEWIRE_INPUT>
 80012da:	e055      	b.n	8001388 <OneWire_Search+0x1a2>
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80012dc:	f1b8 0f07 	cmp.w	r8, #7
 80012e0:	d8bd      	bhi.n	800125e <OneWire_Search+0x78>
	ONEWIRE_LOW(OneWireStruct);
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff fece 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff fee4 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7ff febc 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff fece 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f7ff feb6 	bl	800106c <ONEWIRE_DELAY>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) bit = 1;// Bit is HIGH
 8001300:	88a1      	ldrh	r1, [r4, #4]
 8001302:	6820      	ldr	r0, [r4, #0]
 8001304:	f006 fa54 	bl	80077b0 <HAL_GPIO_ReadPin>
 8001308:	4605      	mov	r5, r0
 800130a:	b100      	cbz	r0, 800130e <OneWire_Search+0x128>
 800130c:	2501      	movs	r5, #1
	ONEWIRE_DELAY(50);
 800130e:	2032      	movs	r0, #50	; 0x32
 8001310:	f7ff feac 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_LOW(OneWireStruct);
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff feb5 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fecb 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff fea3 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff feb5 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 800132c:	200a      	movs	r0, #10
 800132e:	f7ff fe9d 	bl	800106c <ONEWIRE_DELAY>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) bit = 1;// Bit is HIGH
 8001332:	88a1      	ldrh	r1, [r4, #4]
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f006 fa3b 	bl	80077b0 <HAL_GPIO_ReadPin>
 800133a:	4682      	mov	sl, r0
 800133c:	b108      	cbz	r0, 8001342 <OneWire_Search+0x15c>
 800133e:	f04f 0a01 	mov.w	sl, #1
	ONEWIRE_DELAY(50);
 8001342:	2032      	movs	r0, #50	; 0x32
 8001344:	f7ff fe92 	bl	800106c <ONEWIRE_DELAY>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001348:	2d01      	cmp	r5, #1
 800134a:	d085      	beq.n	8001258 <OneWire_Search+0x72>
				if (id_bit != cmp_id_bit) {
 800134c:	45aa      	cmp	sl, r5
 800134e:	d094      	beq.n	800127a <OneWire_Search+0x94>
				if (search_direction == 1) OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8001350:	2d01      	cmp	r5, #1
 8001352:	d0aa      	beq.n	80012aa <OneWire_Search+0xc4>
									  else OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001354:	eb04 0208 	add.w	r2, r4, r8
 8001358:	7a53      	ldrb	r3, [r2, #9]
 800135a:	ea23 0306 	bic.w	r3, r3, r6
 800135e:	7253      	strb	r3, [r2, #9]
	if (bit) {
 8001360:	2d00      	cmp	r5, #0
 8001362:	d0a8      	beq.n	80012b6 <OneWire_Search+0xd0>
		ONEWIRE_LOW(OneWireStruct);
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff fe8d 	bl	8001084 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fea3 	bl	80010b6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f7ff fe7b 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff fe8d 	bl	8001096 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(55);
 800137c:	2037      	movs	r0, #55	; 0x37
 800137e:	f7ff fe75 	bl	800106c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff fe87 	bl	8001096 <ONEWIRE_INPUT>
				id_bit_number++;
 8001388:	3701      	adds	r7, #1
 800138a:	b2ff      	uxtb	r7, r7
				rom_byte_mask <<= 1;
 800138c:	0076      	lsls	r6, r6, #1
				if (!rom_byte_mask) {
 800138e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8001392:	d1a3      	bne.n	80012dc <OneWire_Search+0xf6>
					rom_byte_number++;
 8001394:	f108 0801 	add.w	r8, r8, #1
 8001398:	fa5f f888 	uxtb.w	r8, r8
					rom_byte_mask = 1;
 800139c:	2601      	movs	r6, #1
 800139e:	e79d      	b.n	80012dc <OneWire_Search+0xf6>

080013a0 <OneWire_First>:
{
 80013a0:	b510      	push	{r4, lr}
 80013a2:	4604      	mov	r4, r0
	OneWire_ResetSearch(OneWireStruct);// Reset search values
 80013a4:	f7ff ff1a 	bl	80011dc <OneWire_ResetSearch>
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);// Start with searching
 80013a8:	21f0      	movs	r1, #240	; 0xf0
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ff1b 	bl	80011e6 <OneWire_Search>
}
 80013b0:	bd10      	pop	{r4, pc}

080013b2 <OneWire_Next>:
{
 80013b2:	b508      	push	{r3, lr}
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80013b4:	21f0      	movs	r1, #240	; 0xf0
 80013b6:	f7ff ff16 	bl	80011e6 <OneWire_Search>
}
 80013ba:	bd08      	pop	{r3, pc}

080013bc <OneWire_SelectWithPointer>:

	for (i = 0; i < 8; i++) OneWire_WriteByte(OneWireStruct, *(addr + i));
}
//----------------------------------------------------------------------------------
void OneWire_SelectWithPointer(OneWire_t *OneWireStruct, uint8_t *ROM)
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4606      	mov	r6, r0
 80013c0:	460d      	mov	r5, r1
uint8_t i;

	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80013c2:	2155      	movs	r1, #85	; 0x55
 80013c4:	f7ff feae 	bl	8001124 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80013c8:	2400      	movs	r4, #0
 80013ca:	e005      	b.n	80013d8 <OneWire_SelectWithPointer+0x1c>
 80013cc:	5d29      	ldrb	r1, [r5, r4]
 80013ce:	4630      	mov	r0, r6
 80013d0:	f7ff fea8 	bl	8001124 <OneWire_WriteByte>
 80013d4:	3401      	adds	r4, #1
 80013d6:	b2e4      	uxtb	r4, r4
 80013d8:	2c07      	cmp	r4, #7
 80013da:	d9f7      	bls.n	80013cc <OneWire_SelectWithPointer+0x10>
}
 80013dc:	bd70      	pop	{r4, r5, r6, pc}

080013de <OneWire_GetFullROM>:
//----------------------------------------------------------------------------------
void OneWire_GetFullROM(OneWire_t *OneWireStruct, uint8_t *firstIndex)
{
uint8_t i;

	for (i = 0; i < 8; i++) *(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80013de:	2300      	movs	r3, #0
 80013e0:	e004      	b.n	80013ec <OneWire_GetFullROM+0xe>
 80013e2:	18c2      	adds	r2, r0, r3
 80013e4:	7a52      	ldrb	r2, [r2, #9]
 80013e6:	54ca      	strb	r2, [r1, r3]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9f8      	bls.n	80013e2 <OneWire_GetFullROM+0x4>
}
 80013f0:	4770      	bx	lr

080013f2 <OneWire_CRC8>:
//----------------------------------------------------------------------------------
uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len)
{
 80013f2:	b430      	push	{r4, r5}
 80013f4:	4605      	mov	r5, r0
uint8_t crc = 0, inbyte, i, mix;
 80013f6:	2000      	movs	r0, #0

	while (len--) {
 80013f8:	460b      	mov	r3, r1
 80013fa:	3901      	subs	r1, #1
 80013fc:	b2c9      	uxtb	r1, r1
 80013fe:	b19b      	cbz	r3, 8001428 <OneWire_CRC8+0x36>
		inbyte = *addr++;
 8001400:	f815 4b01 	ldrb.w	r4, [r5], #1
		for (i = 8; i; i--) {
 8001404:	2308      	movs	r3, #8
 8001406:	e002      	b.n	800140e <OneWire_CRC8+0x1c>
			mix = (crc ^ inbyte) & 0x01;
			crc >>= 1;
			if (mix) crc ^= 0x8C;
			inbyte >>= 1;
 8001408:	0864      	lsrs	r4, r4, #1
		for (i = 8; i; i--) {
 800140a:	3b01      	subs	r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f2      	beq.n	80013f8 <OneWire_CRC8+0x6>
			mix = (crc ^ inbyte) & 0x01;
 8001412:	ea80 0204 	eor.w	r2, r0, r4
			if (mix) crc ^= 0x8C;
 8001416:	f012 0f01 	tst.w	r2, #1
 800141a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800141e:	d0f3      	beq.n	8001408 <OneWire_CRC8+0x16>
 8001420:	f080 008c 	eor.w	r0, r0, #140	; 0x8c
 8001424:	b2c0      	uxtb	r0, r0
 8001426:	e7ef      	b.n	8001408 <OneWire_CRC8+0x16>
		}
	}

	// Return calculated CRC
	return crc;
}
 8001428:	bc30      	pop	{r4, r5}
 800142a:	4770      	bx	lr

0800142c <DS18B20_StartAll>:

	return 1;
}
//----------------------------------------------------------------------------------
void DS18B20_StartAll(OneWire_t *OneWire)
{
 800142c:	b510      	push	{r4, lr}
 800142e:	4604      	mov	r4, r0
	ONEWIRE_LOW(OneWireStruct);
 8001430:	f7ff fe28 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff fe3e 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800143a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800143e:	f7ff fe15 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001442:	2014      	movs	r0, #20
 8001444:	f7ff fe12 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fe24 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 800144e:	2046      	movs	r0, #70	; 0x46
 8001450:	f7ff fe0c 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001454:	88a1      	ldrh	r1, [r4, #4]
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	f006 f9aa 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 800145c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001460:	f7ff fe04 	bl	800106c <ONEWIRE_DELAY>
	OneWire_Reset(OneWire);// Reset pulse

	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);// Skip rom
 8001464:	21cc      	movs	r1, #204	; 0xcc
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fe5c 	bl	8001124 <OneWire_WriteByte>

	// Start conversion on all connected devices
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800146c:	2144      	movs	r1, #68	; 0x44
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff fe58 	bl	8001124 <OneWire_WriteByte>
}
 8001474:	bd10      	pop	{r4, pc}

08001476 <DS18B20_Is>:
	return 1;
}
//----------------------------------------------------------------------------------
uint8_t DS18B20_Is(uint8_t *ROM)
{
	if (*ROM == DS18B20_FAMILY_CODE) return 1; else return 0;
 8001476:	7803      	ldrb	r3, [r0, #0]
 8001478:	2b28      	cmp	r3, #40	; 0x28
 800147a:	d001      	beq.n	8001480 <DS18B20_Is+0xa>
 800147c:	2000      	movs	r0, #0
}
 800147e:	4770      	bx	lr
	if (*ROM == DS18B20_FAMILY_CODE) return 1; else return 0;
 8001480:	2001      	movs	r0, #1
 8001482:	4770      	bx	lr

08001484 <DS18B20_Read>:
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	4605      	mov	r5, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4616      	mov	r6, r2
	if (!DS18B20_Is(ROM)) return false;
 800148e:	4608      	mov	r0, r1
 8001490:	f7ff fff1 	bl	8001476 <DS18B20_Is>
 8001494:	b910      	cbnz	r0, 800149c <DS18B20_Read+0x18>
 8001496:	2000      	movs	r0, #0
}
 8001498:	b005      	add	sp, #20
 800149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ONEWIRE_LOW(OneWireStruct);
 800149c:	4628      	mov	r0, r5
 800149e:	f7ff fdf1 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80014a2:	4628      	mov	r0, r5
 80014a4:	f7ff fe07 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 80014a8:	2002      	movs	r0, #2
 80014aa:	f7ff fddf 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80014ae:	4628      	mov	r0, r5
 80014b0:	f7ff fdf1 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f7ff fdd9 	bl	800106c <ONEWIRE_DELAY>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) bit = 1;// Bit is HIGH
 80014ba:	88a9      	ldrh	r1, [r5, #4]
 80014bc:	6828      	ldr	r0, [r5, #0]
 80014be:	f006 f977 	bl	80077b0 <HAL_GPIO_ReadPin>
 80014c2:	4607      	mov	r7, r0
 80014c4:	b100      	cbz	r0, 80014c8 <DS18B20_Read+0x44>
 80014c6:	2701      	movs	r7, #1
	ONEWIRE_DELAY(50);
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f7ff fdcf 	bl	800106c <ONEWIRE_DELAY>
	if (!OneWire_ReadBit(OneWire)) return false;// Conversion is not finished yet
 80014ce:	b90f      	cbnz	r7, 80014d4 <DS18B20_Read+0x50>
 80014d0:	2000      	movs	r0, #0
 80014d2:	e7e1      	b.n	8001498 <DS18B20_Read+0x14>
	ONEWIRE_LOW(OneWireStruct);
 80014d4:	4628      	mov	r0, r5
 80014d6:	f7ff fdd5 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80014da:	4628      	mov	r0, r5
 80014dc:	f7ff fdeb 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 80014e0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80014e4:	f7ff fdc2 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 80014e8:	2014      	movs	r0, #20
 80014ea:	f7ff fdbf 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80014ee:	4628      	mov	r0, r5
 80014f0:	f7ff fdd1 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 80014f4:	2046      	movs	r0, #70	; 0x46
 80014f6:	f7ff fdb9 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80014fa:	88a9      	ldrh	r1, [r5, #4]
 80014fc:	6828      	ldr	r0, [r5, #0]
 80014fe:	f006 f957 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 8001502:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001506:	f7ff fdb1 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 800150a:	4621      	mov	r1, r4
 800150c:	4628      	mov	r0, r5
 800150e:	f7ff ff55 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);// Read scratchpad command by onewire protocol
 8001512:	21be      	movs	r1, #190	; 0xbe
 8001514:	4628      	mov	r0, r5
 8001516:	f7ff fe05 	bl	8001124 <OneWire_WriteByte>
	for (i = 0; i < 9; i++) data[i] = OneWire_ReadByte(OneWire);// Read byte by byte
 800151a:	2400      	movs	r4, #0
 800151c:	e008      	b.n	8001530 <DS18B20_Read+0xac>
 800151e:	4628      	mov	r0, r5
 8001520:	f7ff fe33 	bl	800118a <OneWire_ReadByte>
 8001524:	ab04      	add	r3, sp, #16
 8001526:	4423      	add	r3, r4
 8001528:	f803 0c0c 	strb.w	r0, [r3, #-12]
 800152c:	3401      	adds	r4, #1
 800152e:	b2e4      	uxtb	r4, r4
 8001530:	2c08      	cmp	r4, #8
 8001532:	d9f4      	bls.n	800151e <DS18B20_Read+0x9a>
	uint8_t crc = OneWire_CRC8(data, 8);// Calculate CRC
 8001534:	2108      	movs	r1, #8
 8001536:	a801      	add	r0, sp, #4
 8001538:	f7ff ff5b 	bl	80013f2 <OneWire_CRC8>
	if (crc != data[8]) return 0;// CRC invalid
 800153c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001540:	4283      	cmp	r3, r0
 8001542:	d001      	beq.n	8001548 <DS18B20_Read+0xc4>
 8001544:	2000      	movs	r0, #0
 8001546:	e7a7      	b.n	8001498 <DS18B20_Read+0x14>
	temperature = data[0] | (data[1] << 8);
 8001548:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800154c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001550:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001554:	b227      	sxth	r7, r4
	ONEWIRE_LOW(OneWireStruct);
 8001556:	4628      	mov	r0, r5
 8001558:	f7ff fd94 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800155c:	4628      	mov	r0, r5
 800155e:	f7ff fdaa 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8001562:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001566:	f7ff fd81 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 800156a:	2014      	movs	r0, #20
 800156c:	f7ff fd7e 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 8001570:	4628      	mov	r0, r5
 8001572:	f7ff fd90 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001576:	2046      	movs	r0, #70	; 0x46
 8001578:	f7ff fd78 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800157c:	88a9      	ldrh	r1, [r5, #4]
 800157e:	6828      	ldr	r0, [r5, #0]
 8001580:	f006 f916 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 8001584:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001588:	f7ff fd70 	bl	800106c <ONEWIRE_DELAY>
	if (temperature & 0x8000) {
 800158c:	2f00      	cmp	r7, #0
 800158e:	db12      	blt.n	80015b6 <DS18B20_Read+0x132>
int8_t digit, minus = 0;
 8001590:	2000      	movs	r0, #0
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001592:	f89d 1008 	ldrb.w	r1, [sp, #8]
	digit = temperature >> 4;
 8001596:	f344 1307 	sbfx	r3, r4, #4, #8
	digit |= ((temperature >> 8) & 0x7) << 4;
 800159a:	0a22      	lsrs	r2, r4, #8
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
	switch (resolution) {
 80015a6:	f3c1 1241 	ubfx	r2, r1, #5, #2
 80015aa:	2a03      	cmp	r2, #3
 80015ac:	d841      	bhi.n	8001632 <DS18B20_Read+0x1ae>
 80015ae:	e8df f002 	tbb	[pc, r2]
 80015b2:	1f06      	.short	0x1f06
 80015b4:	352a      	.short	0x352a
		temperature = ~temperature + 1;
 80015b6:	4264      	negs	r4, r4
 80015b8:	b2a4      	uxth	r4, r4
		minus = 1;
 80015ba:	2001      	movs	r0, #1
 80015bc:	e7e9      	b.n	8001592 <DS18B20_Read+0x10e>
			decimal = (temperature >> 3) & 0x01;
 80015be:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 80015c2:	ee07 2a90 	vmov	s15, r2
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80015ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015ce:	ee27 7a87 	vmul.f32	s14, s15, s14
	decimal = digit + decimal;
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (minus) decimal = 0 - decimal;
 80015de:	b118      	cbz	r0, 80015e8 <DS18B20_Read+0x164>
 80015e0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800163c <DS18B20_Read+0x1b8>
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
	*destination = decimal;// Set to pointer
 80015e8:	edc6 7a00 	vstr	s15, [r6]
	return true;// Return 1, temperature valid
 80015ec:	2001      	movs	r0, #1
 80015ee:	e753      	b.n	8001498 <DS18B20_Read+0x14>
			decimal = (temperature >> 2) & 0x03;
 80015f0:	f3c4 0281 	ubfx	r2, r4, #2, #2
 80015f4:	ee07 2a90 	vmov	s15, r2
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 80015fc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001600:	ee27 7a87 	vmul.f32	s14, s15, s14
		 break;
 8001604:	e7e5      	b.n	80015d2 <DS18B20_Read+0x14e>
			decimal = (temperature >> 1) & 0x07;
 8001606:	f3c4 0242 	ubfx	r2, r4, #1, #3
 800160a:	ee07 2a90 	vmov	s15, r2
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8001612:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001616:	ee27 7a87 	vmul.f32	s14, s15, s14
		break;
 800161a:	e7da      	b.n	80015d2 <DS18B20_Read+0x14e>
			decimal = temperature & 0x0F;
 800161c:	f004 020f 	and.w	r2, r4, #15
 8001620:	ee07 2a90 	vmov	s15, r2
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8001628:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001640 <DS18B20_Read+0x1bc>
 800162c:	ee27 7a87 	vmul.f32	s14, s15, s14
		 break;
 8001630:	e7cf      	b.n	80015d2 <DS18B20_Read+0x14e>
	digit |= ((temperature >> 8) & 0x7) << 4;
 8001632:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001644 <DS18B20_Read+0x1c0>
 8001636:	2300      	movs	r3, #0
 8001638:	e7cb      	b.n	80015d2 <DS18B20_Read+0x14e>
 800163a:	bf00      	nop
 800163c:	00000000 	.word	0x00000000
 8001640:	3d800000 	.word	0x3d800000
 8001644:	437f0000 	.word	0x437f0000

08001648 <DS18B20_SetResolution>:
{
 8001648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800164c:	4604      	mov	r4, r0
 800164e:	460d      	mov	r5, r1
 8001650:	4616      	mov	r6, r2
	if (!DS18B20_Is(ROM)) return 0;
 8001652:	4608      	mov	r0, r1
 8001654:	f7ff ff0f 	bl	8001476 <DS18B20_Is>
 8001658:	b908      	cbnz	r0, 800165e <DS18B20_SetResolution+0x16>
}
 800165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ONEWIRE_LOW(OneWireStruct);
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fd10 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fd26 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800166a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800166e:	f7ff fcfd 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001672:	2014      	movs	r0, #20
 8001674:	f7ff fcfa 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fd0c 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 800167e:	2046      	movs	r0, #70	; 0x46
 8001680:	f7ff fcf4 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001684:	88a1      	ldrh	r1, [r4, #4]
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	f006 f892 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 800168c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001690:	f7ff fcec 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 8001694:	4629      	mov	r1, r5
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fe90 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800169c:	21be      	movs	r1, #190	; 0xbe
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fd40 	bl	8001124 <OneWire_WriteByte>
	OneWire_ReadByte(OneWire);
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fd70 	bl	800118a <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff fd6d 	bl	800118a <OneWire_ReadByte>
	uint8_t th = OneWire_ReadByte(OneWire);
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff fd6a 	bl	800118a <OneWire_ReadByte>
 80016b6:	4681      	mov	r9, r0
	uint8_t tl = OneWire_ReadByte(OneWire);
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fd66 	bl	800118a <OneWire_ReadByte>
 80016be:	4680      	mov	r8, r0
	uint8_t conf = OneWire_ReadByte(OneWire);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fd62 	bl	800118a <OneWire_ReadByte>
 80016c6:	4607      	mov	r7, r0
	if (resolution == DS18B20_Resolution_9bits) {
 80016c8:	2e09      	cmp	r6, #9
 80016ca:	d009      	beq.n	80016e0 <DS18B20_SetResolution+0x98>
	} else if (resolution == DS18B20_Resolution_10bits) {
 80016cc:	2e0a      	cmp	r6, #10
 80016ce:	d05d      	beq.n	800178c <DS18B20_SetResolution+0x144>
	} else if (resolution == DS18B20_Resolution_11bits) {
 80016d0:	2e0b      	cmp	r6, #11
 80016d2:	d060      	beq.n	8001796 <DS18B20_SetResolution+0x14e>
	} else if (resolution == DS18B20_Resolution_12bits) {
 80016d4:	2e0c      	cmp	r6, #12
 80016d6:	d105      	bne.n	80016e4 <DS18B20_SetResolution+0x9c>
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80016d8:	f040 0760 	orr.w	r7, r0, #96	; 0x60
 80016dc:	b2ff      	uxtb	r7, r7
 80016de:	e001      	b.n	80016e4 <DS18B20_SetResolution+0x9c>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80016e0:	f000 079f 	and.w	r7, r0, #159	; 0x9f
	ONEWIRE_LOW(OneWireStruct);
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff fccd 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fce3 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 80016f0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80016f4:	f7ff fcba 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 80016f8:	2014      	movs	r0, #20
 80016fa:	f7ff fcb7 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff fcc9 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001704:	2046      	movs	r0, #70	; 0x46
 8001706:	f7ff fcb1 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800170a:	88a1      	ldrh	r1, [r4, #4]
 800170c:	6820      	ldr	r0, [r4, #0]
 800170e:	f006 f84f 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 8001712:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001716:	f7ff fca9 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 800171a:	4629      	mov	r1, r5
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fe4d 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001722:	214e      	movs	r1, #78	; 0x4e
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fcfd 	bl	8001124 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, th);
 800172a:	4649      	mov	r1, r9
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fcf9 	bl	8001124 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001732:	4641      	mov	r1, r8
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff fcf5 	bl	8001124 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800173a:	4639      	mov	r1, r7
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fcf1 	bl	8001124 <OneWire_WriteByte>
	ONEWIRE_LOW(OneWireStruct);
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff fc9e 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff fcb4 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800174e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001752:	f7ff fc8b 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001756:	2014      	movs	r0, #20
 8001758:	f7ff fc88 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff fc9a 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001762:	2046      	movs	r0, #70	; 0x46
 8001764:	f7ff fc82 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001768:	88a1      	ldrh	r1, [r4, #4]
 800176a:	6820      	ldr	r0, [r4, #0]
 800176c:	f006 f820 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 8001770:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001774:	f7ff fc7a 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 8001778:	4629      	mov	r1, r5
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff fe1e 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001780:	2148      	movs	r1, #72	; 0x48
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff fcce 	bl	8001124 <OneWire_WriteByte>
	return 1;
 8001788:	2001      	movs	r0, #1
 800178a:	e766      	b.n	800165a <DS18B20_SetResolution+0x12>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800178c:	f000 07bf 	and.w	r7, r0, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001790:	f047 0720 	orr.w	r7, r7, #32
 8001794:	e7a6      	b.n	80016e4 <DS18B20_SetResolution+0x9c>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001796:	f000 07df 	and.w	r7, r0, #223	; 0xdf
 800179a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800179e:	e7a1      	b.n	80016e4 <DS18B20_SetResolution+0x9c>

080017a0 <DS18B20_DisableAlarmTemperature>:

	return 1;
}
//----------------------------------------------------------------------------------
uint8_t DS18B20_DisableAlarmTemperature(OneWire_t *OneWire, uint8_t *ROM)
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
	if (!DS18B20_Is(ROM)) return 0;
 80017a6:	4608      	mov	r0, r1
 80017a8:	f7ff fe65 	bl	8001476 <DS18B20_Is>
 80017ac:	b900      	cbnz	r0, 80017b0 <DS18B20_DisableAlarmTemperature+0x10>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
	// Copy scratchpad to EEPROM of DS18B20
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);

	return 1;
}
 80017ae:	bd70      	pop	{r4, r5, r6, pc}
	ONEWIRE_LOW(OneWireStruct);
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff fc67 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fc7d 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 80017bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80017c0:	f7ff fc54 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 80017c4:	2014      	movs	r0, #20
 80017c6:	f7ff fc51 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff fc63 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 80017d0:	2046      	movs	r0, #70	; 0x46
 80017d2:	f7ff fc4b 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80017d6:	88a1      	ldrh	r1, [r4, #4]
 80017d8:	6820      	ldr	r0, [r4, #0]
 80017da:	f005 ffe9 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 80017de:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80017e2:	f7ff fc43 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 80017e6:	4629      	mov	r1, r5
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff fde7 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80017ee:	21be      	movs	r1, #190	; 0xbe
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fc97 	bl	8001124 <OneWire_WriteByte>
	OneWire_ReadByte(OneWire);
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fcc7 	bl	800118a <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fcc4 	bl	800118a <OneWire_ReadByte>
	uint8_t th   = OneWire_ReadByte(OneWire);
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fcc1 	bl	800118a <OneWire_ReadByte>
	uint8_t tl   = OneWire_ReadByte(OneWire);
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fcbe 	bl	800118a <OneWire_ReadByte>
	uint8_t conf = OneWire_ReadByte(OneWire);
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fcbb 	bl	800118a <OneWire_ReadByte>
 8001814:	4606      	mov	r6, r0
	ONEWIRE_LOW(OneWireStruct);
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff fc34 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fc4a 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8001822:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001826:	f7ff fc21 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 800182a:	2014      	movs	r0, #20
 800182c:	f7ff fc1e 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff fc30 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001836:	2046      	movs	r0, #70	; 0x46
 8001838:	f7ff fc18 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800183c:	88a1      	ldrh	r1, [r4, #4]
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	f005 ffb6 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 8001844:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001848:	f7ff fc10 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 800184c:	4629      	mov	r1, r5
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fdb4 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001854:	214e      	movs	r1, #78	; 0x4e
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff fc64 	bl	8001124 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, th);
 800185c:	217d      	movs	r1, #125	; 0x7d
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fc60 	bl	8001124 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001864:	21c9      	movs	r1, #201	; 0xc9
 8001866:	4620      	mov	r0, r4
 8001868:	f7ff fc5c 	bl	8001124 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 800186c:	4631      	mov	r1, r6
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fc58 	bl	8001124 <OneWire_WriteByte>
	ONEWIRE_LOW(OneWireStruct);
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff fc05 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff fc1b 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8001880:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001884:	f7ff fbf2 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001888:	2014      	movs	r0, #20
 800188a:	f7ff fbef 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff fc01 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001894:	2046      	movs	r0, #70	; 0x46
 8001896:	f7ff fbe9 	bl	800106c <ONEWIRE_DELAY>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800189a:	88a1      	ldrh	r1, [r4, #4]
 800189c:	6820      	ldr	r0, [r4, #0]
 800189e:	f005 ff87 	bl	80077b0 <HAL_GPIO_ReadPin>
	ONEWIRE_DELAY(410);
 80018a2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80018a6:	f7ff fbe1 	bl	800106c <ONEWIRE_DELAY>
	OneWire_SelectWithPointer(OneWire, ROM);// Select ROM number
 80018aa:	4629      	mov	r1, r5
 80018ac:	4620      	mov	r0, r4
 80018ae:	f7ff fd85 	bl	80013bc <OneWire_SelectWithPointer>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80018b2:	2148      	movs	r1, #72	; 0x48
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff fc35 	bl	8001124 <OneWire_WriteByte>
	return 1;
 80018ba:	2001      	movs	r0, #1
 80018bc:	e777      	b.n	80017ae <DS18B20_DisableAlarmTemperature+0xe>

080018be <DS18B20_AllDone>:
{
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);// Start alarm search
}
//----------------------------------------------------------------------------------
uint8_t DS18B20_AllDone(OneWire_t *OneWire)
{
 80018be:	b510      	push	{r4, lr}
 80018c0:	4604      	mov	r4, r0
	ONEWIRE_LOW(OneWireStruct);
 80018c2:	f7ff fbdf 	bl	8001084 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fbf5 	bl	80010b6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7ff fbcd 	bl	800106c <ONEWIRE_DELAY>
	ONEWIRE_INPUT(OneWireStruct);
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff fbdf 	bl	8001096 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f7ff fbc7 	bl	800106c <ONEWIRE_DELAY>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) bit = 1;// Bit is HIGH
 80018de:	88a1      	ldrh	r1, [r4, #4]
 80018e0:	6820      	ldr	r0, [r4, #0]
 80018e2:	f005 ff65 	bl	80077b0 <HAL_GPIO_ReadPin>
 80018e6:	4604      	mov	r4, r0
 80018e8:	b100      	cbz	r0, 80018ec <DS18B20_AllDone+0x2e>
 80018ea:	2401      	movs	r4, #1
	ONEWIRE_DELAY(50);
 80018ec:	2032      	movs	r0, #50	; 0x32
 80018ee:	f7ff fbbd 	bl	800106c <ONEWIRE_DELAY>
	// If read bit is low, then device is not finished yet with calculation temperature
	return OneWire_ReadBit(OneWire);
}
 80018f2:	4620      	mov	r0, r4
 80018f4:	bd10      	pop	{r4, pc}
	...

080018f8 <floatPart>:

//-----------------------------------------------------------------------------
#ifdef SET_FLOAT_PART
void floatPart(float val, s_float_t *part)
{
	part->cel = (uint32_t)val;
 80018f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80018fc:	edc0 7a00 	vstr	s15, [r0]
	part->dro = (val - part->cel) * 1000000;
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001908:	eddf 7a04 	vldr	s15, [pc, #16]	; 800191c <floatPart+0x24>
 800190c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001910:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8001914:	ed80 0a01 	vstr	s0, [r0, #4]
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	49742400 	.word	0x49742400

08001920 <get_secCounter>:
//     Функции формирования временных интервалов,
//      а также контроля за этими интервалами
//
uint32_t get_secCounter()
{
	return secCounter;
 8001920:	4b01      	ldr	r3, [pc, #4]	; (8001928 <get_secCounter+0x8>)
 8001922:	6818      	ldr	r0, [r3, #0]
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20001ed8 	.word	0x20001ed8

0800192c <inc_secCounter>:
	secCounter = sec;
}
//----------------------------------------------
void inc_secCounter()
{
	secCounter++;
 800192c:	4a02      	ldr	r2, [pc, #8]	; (8001938 <inc_secCounter+0xc>)
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20001ed8 	.word	0x20001ed8

0800193c <get_hsCounter>:
//----------------------------------------------
uint32_t get_hsCounter()
{
	return HalfSecCounter;
 800193c:	4b01      	ldr	r3, [pc, #4]	; (8001944 <get_hsCounter+0x8>)
 800193e:	6818      	ldr	r0, [r3, #0]
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000ebc 	.word	0x20000ebc

08001948 <get_tmr10>:
{
	HalfSecCounter++;
}
//----------------------------------------------
uint32_t get_tmr10(uint32_t ms)
{
 8001948:	b510      	push	{r4, lr}
 800194a:	4604      	mov	r4, r0
	return (get_hsCounter() + ms);
 800194c:	f7ff fff6 	bl	800193c <get_hsCounter>
}
 8001950:	4420      	add	r0, r4
 8001952:	bd10      	pop	{r4, pc}

08001954 <check_tmr10>:
//----------------------------------------------
bool check_tmr10(uint32_t ms)
{
 8001954:	b510      	push	{r4, lr}
 8001956:	4604      	mov	r4, r0
	return (get_hsCounter() >= ms ? true : false);
 8001958:	f7ff fff0 	bl	800193c <get_hsCounter>
}
 800195c:	42a0      	cmp	r0, r4
 800195e:	bf34      	ite	cc
 8001960:	2000      	movcc	r0, #0
 8001962:	2001      	movcs	r0, #1
 8001964:	bd10      	pop	{r4, pc}

08001966 <get_tmr>:
//----------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001966:	b510      	push	{r4, lr}
 8001968:	4604      	mov	r4, r0
	return (get_secCounter() + sec);
 800196a:	f7ff ffd9 	bl	8001920 <get_secCounter>
}
 800196e:	4420      	add	r0, r4
 8001970:	bd10      	pop	{r4, pc}

08001972 <check_tmr>:
//----------------------------------------------
bool check_tmr(uint32_t sec)
{
 8001972:	b510      	push	{r4, lr}
 8001974:	4604      	mov	r4, r0
	return (get_secCounter() >= sec ? true : false);
 8001976:	f7ff ffd3 	bl	8001920 <get_secCounter>
}
 800197a:	42a0      	cmp	r0, r4
 800197c:	bf34      	ite	cc
 800197e:	2000      	movcc	r0, #0
 8001980:	2001      	movcs	r0, #1
 8001982:	bd10      	pop	{r4, pc}

08001984 <initRECQ>:
//-----------------------------------------------------------------------------------------
//        Функция инициализации очереди сообщений
//
bool initRECQ(s_recq_t *q)//s_recq_t recq;
{
	q->put = q->get = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	7083      	strb	r3, [r0, #2]
 8001988:	7043      	strb	r3, [r0, #1]
	q->lock = 0;
 800198a:	7003      	strb	r3, [r0, #0]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80b      	bhi.n	80019a8 <initRECQ+0x24>
		q->rec[i].id = i;
 8001990:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001994:	4402      	add	r2, r0
 8001996:	70d3      	strb	r3, [r2, #3]
		q->rec[i].adr = NULL;
 8001998:	2100      	movs	r1, #0
 800199a:	7111      	strb	r1, [r2, #4]
 800199c:	7151      	strb	r1, [r2, #5]
 800199e:	7191      	strb	r1, [r2, #6]
 80019a0:	71d1      	strb	r1, [r2, #7]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e7f1      	b.n	800198c <initRECQ+0x8>
	}

	return true;
}
 80019a8:	2001      	movs	r0, #1
 80019aa:	4770      	bx	lr

080019ac <putRECQ>:
//
int8_t putRECQ(char *adr, s_recq_t *q)
{
int8_t ret = -1;

	while (q->lock) {}
 80019ac:	780b      	ldrb	r3, [r1, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1fc      	bne.n	80019ac <putRECQ>
	q->lock = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	700b      	strb	r3, [r1, #0]

	if (q->rec[q->put].adr == NULL) {
 80019b6:	784b      	ldrb	r3, [r1, #1]
 80019b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80019bc:	440a      	add	r2, r1
 80019be:	6852      	ldr	r2, [r2, #4]
 80019c0:	b97a      	cbnz	r2, 80019e2 <putRECQ+0x36>
		q->rec[q->put].adr = adr;
 80019c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80019c6:	440a      	add	r2, r1
 80019c8:	6050      	str	r0, [r2, #4]
		ret = q->rec[q->put].id;
 80019ca:	f992 0003 	ldrsb.w	r0, [r2, #3]
		q->put++;   if (q->put >= MAX_QREC) q->put = 0;
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	704b      	strb	r3, [r1, #1]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d901      	bls.n	80019dc <putRECQ+0x30>
 80019d8:	2300      	movs	r3, #0
 80019da:	704b      	strb	r3, [r1, #1]
	}

	q->lock = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	700b      	strb	r3, [r1, #0]

	return ret;
}
 80019e0:	4770      	bx	lr
int8_t ret = -1;
 80019e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e6:	e7f9      	b.n	80019dc <putRECQ+0x30>

080019e8 <getRECQ>:
//-----------------------------------------------------------------------------
//            Функция извлекает сообщение из очереди
//       освобождая при этом динамическую символьную строку
//
int8_t getRECQ(char *dat, s_recq_t *q)
{
 80019e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ec:	4606      	mov	r6, r0
 80019ee:	460c      	mov	r4, r1
int8_t ret = -1;
int len = 0;

	while (q->lock) {}
 80019f0:	7823      	ldrb	r3, [r4, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1fc      	bne.n	80019f0 <getRECQ+0x8>
	q->lock = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	7023      	strb	r3, [r4, #0]

	if (q->rec[q->get].adr != NULL) {
 80019fa:	78a5      	ldrb	r5, [r4, #2]
 80019fc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001a00:	4423      	add	r3, r4
 8001a02:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8001a06:	f1b8 0f00 	cmp.w	r8, #0
 8001a0a:	d02c      	beq.n	8001a66 <getRECQ+0x7e>
		len = strlen(q->rec[q->get].adr);
 8001a0c:	4640      	mov	r0, r8
 8001a0e:	f7fe fbf1 	bl	80001f4 <strlen>
 8001a12:	4607      	mov	r7, r0
		ret = q->rec[q->get].id;
 8001a14:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001a18:	4425      	add	r5, r4
 8001a1a:	f995 5003 	ldrsb.w	r5, [r5, #3]
		memcpy(dat, q->rec[q->get].adr, len);
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4641      	mov	r1, r8
 8001a22:	4630      	mov	r0, r6
 8001a24:	f00c f97e 	bl	800dd24 <memcpy>
		free(q->rec[q->get].adr);//freeMem(q->rec[q->get].adr);
 8001a28:	78a3      	ldrb	r3, [r4, #2]
 8001a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a2e:	4423      	add	r3, r4
 8001a30:	6858      	ldr	r0, [r3, #4]
 8001a32:	f00c f96f 	bl	800dd14 <free>
		q->rec[q->get].adr = NULL;
 8001a36:	78a3      	ldrb	r3, [r4, #2]
 8001a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a3c:	4423      	add	r3, r4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	711a      	strb	r2, [r3, #4]
 8001a42:	715a      	strb	r2, [r3, #5]
 8001a44:	719a      	strb	r2, [r3, #6]
 8001a46:	71da      	strb	r2, [r3, #7]
	}

	if (ret >= 0) {
 8001a48:	4295      	cmp	r5, r2
 8001a4a:	db07      	blt.n	8001a5c <getRECQ+0x74>
		*(dat + len) = '\0';
 8001a4c:	55f2      	strb	r2, [r6, r7]
		q->get++;   if (q->get >= MAX_QREC) q->get = 0;
 8001a4e:	78a3      	ldrb	r3, [r4, #2]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	70a3      	strb	r3, [r4, #2]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d900      	bls.n	8001a5c <getRECQ+0x74>
 8001a5a:	70a2      	strb	r2, [r4, #2]
	}

	q->lock = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	7023      	strb	r3, [r4, #0]

	return ret;
}
 8001a60:	4628      	mov	r0, r5
 8001a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int8_t ret = -1;
 8001a66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001a6a:	e7f7      	b.n	8001a5c <getRECQ+0x74>

08001a6c <set_Date>:
}
//------------------------------------------------------------------------------------------
//        Функция устанавливает время (в формате unix timestamp) в модуле RTC контроллера
//
void set_Date(time_t ep)
{
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	b092      	sub	sp, #72	; 0x48
 8001a70:	e9cd 0100 	strd	r0, r1, [sp]
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
struct tm ts;
bool os_core = false;

	gmtime_r(&ep, &ts);
 8001a74:	a903      	add	r1, sp, #12
 8001a76:	4668      	mov	r0, sp
 8001a78:	f00c f870 	bl	800db5c <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 8001a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a7e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	sDate.Month   = ts.tm_mon + 1;
 8001a82:	9b07      	ldr	r3, [sp, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	sDate.Date    = ts.tm_mday;
 8001a8a:	9b06      	ldr	r3, [sp, #24]
 8001a8c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	sDate.Year    = ts.tm_year;
 8001a90:	9b08      	ldr	r3, [sp, #32]
 8001a92:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sTime.Hours   = ts.tm_hour + tZone;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <set_Date+0xa8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	9a05      	ldr	r2, [sp, #20]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	sTime.Minutes = ts.tm_min;
 8001aa2:	9b04      	ldr	r3, [sp, #16]
 8001aa4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	sTime.Seconds = ts.tm_sec;
 8001aa8:	9b03      	ldr	r3, [sp, #12]
 8001aaa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

	if (coreStatus == osOK) os_core = true;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <set_Date+0xac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b133      	cbz	r3, 8001ac2 <set_Date+0x56>
bool yes = false;
 8001ab4:	2400      	movs	r4, #0
			osMutexRelease(rtcMutexHandle);
		}
	}
#endif

	if (yes) setDate= true;
 8001ab6:	b114      	cbz	r4, 8001abe <set_Date+0x52>
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <set_Date+0xb0>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]

}
 8001abe:	b012      	add	sp, #72	; 0x48
 8001ac0:	bd10      	pop	{r4, pc}
		if (osMutexAcquire(rtcMutexHandle, waitRTC) == osOK) {
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <set_Date+0xb4>)
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <set_Date+0xb8>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f009 fdb9 	bl	800b640 <osMutexAcquire>
		if (HAL_RTC_SetDate(portRTC, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001ace:	2200      	movs	r2, #0
 8001ad0:	a90c      	add	r1, sp, #48	; 0x30
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <set_Date+0xbc>)
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	f007 ffae 	bl	8009a36 <HAL_RTC_SetDate>
 8001ada:	b150      	cbz	r0, 8001af2 <set_Date+0x86>
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <set_Date+0xc0>)
 8001ade:	7813      	ldrb	r3, [r2, #0]
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	7013      	strb	r3, [r2, #0]
bool yes = false;
 8001ae6:	2400      	movs	r4, #0
			osMutexRelease(rtcMutexHandle);
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <set_Date+0xb8>)
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	f009 fde6 	bl	800b6bc <osMutexRelease>
 8001af0:	e7e1      	b.n	8001ab6 <set_Date+0x4a>
			if (HAL_RTC_SetTime(portRTC, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001af2:	2200      	movs	r2, #0
 8001af4:	a90d      	add	r1, sp, #52	; 0x34
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <set_Date+0xbc>)
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f007 ff1d 	bl	8009938 <HAL_RTC_SetTime>
 8001afe:	b130      	cbz	r0, 8001b0e <set_Date+0xa2>
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <set_Date+0xc0>)
 8001b02:	7813      	ldrb	r3, [r2, #0]
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	7013      	strb	r3, [r2, #0]
bool yes = false;
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	e7ec      	b.n	8001ae8 <set_Date+0x7c>
				yes = true;
 8001b0e:	2401      	movs	r4, #1
 8001b10:	e7ea      	b.n	8001ae8 <set_Date+0x7c>
 8001b12:	bf00      	nop
 8001b14:	2000002c 	.word	0x2000002c
 8001b18:	20000084 	.word	0x20000084
 8001b1c:	20000c24 	.word	0x20000c24
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20007a8c 	.word	0x20007a8c
 8001b28:	20000130 	.word	0x20000130
 8001b2c:	200003e5 	.word	0x200003e5

08001b30 <sec_to_string>:
//----------------------------------------------------------------------------------------
//   Функция формирует символьную строку с датой и временем из значения epochtime
//         и возвращает длинну сформированной символьной строки
//
int sec_to_string(char *stx)
{
 8001b30:	b530      	push	{r4, r5, lr}
 8001b32:	b08b      	sub	sp, #44	; 0x2c
 8001b34:	4604      	mov	r4, r0
bool yes = false;

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
#ifdef USED_FREERTOS
	if (osMutexAcquire(rtcMutexHandle, waitRTC) == osOK) {
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <sec_to_string+0x94>)
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <sec_to_string+0x98>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f009 fd7f 	bl	800b640 <osMutexAcquire>
 8001b42:	b158      	cbz	r0, 8001b5c <sec_to_string+0x2c>
bool yes = false;
 8001b44:	2500      	movs	r5, #0
		}
#ifdef USED_FREERTOS
		osMutexRelease(rtcMutexHandle);
	}
#endif
	if (sTime.Hours > 23) sTime.Hours -= 20;
 8001b46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001b4a:	2b17      	cmp	r3, #23
 8001b4c:	d902      	bls.n	8001b54 <sec_to_string+0x24>
 8001b4e:	3b14      	subs	r3, #20
 8001b50:	f88d 3014 	strb.w	r3, [sp, #20]
	if (yes) ret = sprintf(stx, "%02u.%02u %02u:%02u:%02u ",
 8001b54:	bb25      	cbnz	r5, 8001ba0 <sec_to_string+0x70>
int ret = 0;
 8001b56:	2000      	movs	r0, #0
								sTime.Hours, sTime.Minutes, sTime.Seconds);



    return ret;
}
 8001b58:	b00b      	add	sp, #44	; 0x2c
 8001b5a:	bd30      	pop	{r4, r5, pc}
		if (HAL_RTC_GetDate(portRTC, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	a904      	add	r1, sp, #16
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <sec_to_string+0x9c>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	f008 f805 	bl	8009b72 <HAL_RTC_GetDate>
 8001b68:	b150      	cbz	r0, 8001b80 <sec_to_string+0x50>
 8001b6a:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <sec_to_string+0xa0>)
 8001b6c:	7813      	ldrb	r3, [r2, #0]
 8001b6e:	f043 0308 	orr.w	r3, r3, #8
 8001b72:	7013      	strb	r3, [r2, #0]
bool yes = false;
 8001b74:	2500      	movs	r5, #0
		osMutexRelease(rtcMutexHandle);
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <sec_to_string+0x98>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	f009 fd9f 	bl	800b6bc <osMutexRelease>
 8001b7e:	e7e2      	b.n	8001b46 <sec_to_string+0x16>
			if (HAL_RTC_GetTime(portRTC, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001b80:	2200      	movs	r2, #0
 8001b82:	a905      	add	r1, sp, #20
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <sec_to_string+0x9c>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	f007 ffcb 	bl	8009b22 <HAL_RTC_GetTime>
 8001b8c:	b130      	cbz	r0, 8001b9c <sec_to_string+0x6c>
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <sec_to_string+0xa0>)
 8001b90:	7813      	ldrb	r3, [r2, #0]
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	7013      	strb	r3, [r2, #0]
bool yes = false;
 8001b98:	2500      	movs	r5, #0
 8001b9a:	e7ec      	b.n	8001b76 <sec_to_string+0x46>
				yes = true;
 8001b9c:	2501      	movs	r5, #1
 8001b9e:	e7ea      	b.n	8001b76 <sec_to_string+0x46>
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ba0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001ba4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001ba8:	f89d 1016 	ldrb.w	r1, [sp, #22]
	if (yes) ret = sprintf(stx, "%02u.%02u %02u:%02u:%02u ",
 8001bac:	9102      	str	r1, [sp, #8]
 8001bae:	9201      	str	r2, [sp, #4]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001bb6:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001bba:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <sec_to_string+0xa4>)
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f00c fba7 	bl	800e310 <siprintf>
 8001bc2:	e7c9      	b.n	8001b58 <sec_to_string+0x28>
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20007a8c 	.word	0x20007a8c
 8001bcc:	20000130 	.word	0x20000130
 8001bd0:	200003e5 	.word	0x200003e5
 8001bd4:	08012e98 	.word	0x08012e98

08001bd8 <Report>:
//------------------------------------------------------------------------------------------
//   Функция вывода символьной строки в локальный канал управления (portLOG)
//
uint8_t Report(const char *tag, bool addTime, const char *fmt, ...)
{
 8001bd8:	b40c      	push	{r2, r3}
 8001bda:	b570      	push	{r4, r5, r6, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);//OFF err_led
	}*/

#ifdef SET_STATIC_MEM
	char *buff = &PrnBuf[0];
	buff[0] = 0;
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <Report+0x98>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
#else
	char *buff = (char *)getMem(len);
	if (buff) {
#endif
		if (addTime) dl = sec_to_string(buff);
 8001be6:	2900      	cmp	r1, #0
 8001be8:	d136      	bne.n	8001c58 <Report+0x80>
int dl = 0;
 8001bea:	2400      	movs	r4, #0

		if (tag) dl += sprintf(buff+strlen(buff), "[%s] ", tag);
 8001bec:	b14d      	cbz	r5, 8001c02 <Report+0x2a>
 8001bee:	4e20      	ldr	r6, [pc, #128]	; (8001c70 <Report+0x98>)
 8001bf0:	4630      	mov	r0, r6
 8001bf2:	f7fe faff 	bl	80001f4 <strlen>
 8001bf6:	462a      	mov	r2, r5
 8001bf8:	491e      	ldr	r1, [pc, #120]	; (8001c74 <Report+0x9c>)
 8001bfa:	4430      	add	r0, r6
 8001bfc:	f00c fb88 	bl	800e310 <siprintf>
 8001c00:	4404      	add	r4, r0
		va_start(args, fmt);
 8001c02:	ab07      	add	r3, sp, #28
 8001c04:	9301      	str	r3, [sp, #4]
		vsnprintf(buff + dl, len - dl, fmt, args);
 8001c06:	4d1a      	ldr	r5, [pc, #104]	; (8001c70 <Report+0x98>)
 8001c08:	9a06      	ldr	r2, [sp, #24]
 8001c0a:	f5c4 7168 	rsb	r1, r4, #928	; 0x3a0
 8001c0e:	1928      	adds	r0, r5, r4
 8001c10:	f00d fb5a 	bl	800f2c8 <vsniprintf>
		uartRdy = 0;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <Report+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(portLOG, (uint8_t *)buff, strlen(buff)) != HAL_OK) devError |= devUART;
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f7fe faea 	bl	80001f4 <strlen>
 8001c20:	b282      	uxth	r2, r0
 8001c22:	4629      	mov	r1, r5
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <Report+0xa4>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f009 f9a2 	bl	800af70 <HAL_UART_Transmit_DMA>
 8001c2c:	b120      	cbz	r0, 8001c38 <Report+0x60>
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <Report+0xa8>)
 8001c30:	7813      	ldrb	r3, [r2, #0]
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	7013      	strb	r3, [r2, #0]
		while (HAL_UART_GetState(portLOG) != HAL_UART_STATE_READY) {
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <Report+0xa4>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	f009 fb22 	bl	800b284 <HAL_UART_GetState>
 8001c40:	2820      	cmp	r0, #32
 8001c42:	d00e      	beq.n	8001c62 <Report+0x8a>
			if (HAL_UART_GetState(portLOG) == HAL_UART_STATE_BUSY_RX) break;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <Report+0xa4>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	f009 fb1c 	bl	800b284 <HAL_UART_GetState>
 8001c4c:	2822      	cmp	r0, #34	; 0x22
 8001c4e:	d008      	beq.n	8001c62 <Report+0x8a>
			HAL_Delay(1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f005 fa4f 	bl	80070f4 <HAL_Delay>
 8001c56:	e7ef      	b.n	8001c38 <Report+0x60>
		if (addTime) dl = sec_to_string(buff);
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff69 	bl	8001b30 <sec_to_string>
 8001c5e:	4604      	mov	r4, r0
 8001c60:	e7c4      	b.n	8001bec <Report+0x14>
		freeMem(buff);
	}
#endif

	return 0;
}
 8001c62:	2000      	movs	r0, #0
 8001c64:	b002      	add	sp, #8
 8001c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c6a:	b002      	add	sp, #8
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20001f48 	.word	0x20001f48
 8001c74:	08012eb4 	.word	0x08012eb4
 8001c78:	20000070 	.word	0x20000070
 8001c7c:	20000078 	.word	0x20000078
 8001c80:	200003e5 	.word	0x200003e5

08001c84 <errLedOn>:
{
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);//LED ON
 8001c88:	4d0a      	ldr	r5, [pc, #40]	; (8001cb4 <errLedOn+0x30>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f005 fd95 	bl	80077be <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8001c94:	2019      	movs	r0, #25
 8001c96:	f005 fa2d 	bl	80070f4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);//LED OFF
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	f005 fd8d 	bl	80077be <HAL_GPIO_WritePin>
	if (from) Report(NULL, true, "Error in function '%s'\r\n", from);
 8001ca4:	b12c      	cbz	r4, 8001cb2 <errLedOn+0x2e>
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <errLedOn+0x34>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff ff93 	bl	8001bd8 <Report>
}
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	08012ebc 	.word	0x08012ebc

08001cbc <set_DT>:
//------------------------------------------------------------------------------------------
//  Функция устанавливает в модуле RTC дату и время, полученные от sntp сервера
//
bool set_DT()
{
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	b086      	sub	sp, #24
bool ret = false;

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	f88d 3000 	strb.w	r3, [sp]
	sDate.Month   = DT.mon;
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <set_DT+0x94>)
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	f88d 2001 	strb.w	r2, [sp, #1]
	sDate.Date    = DT.day;
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	f88d 2002 	strb.w	r2, [sp, #2]
	sDate.Year    = DT.year;
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	f88d 2003 	strb.w	r2, [sp, #3]

	sTime.Hours   = DT.hour;// + tZone;
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	f88d 2004 	strb.w	r2, [sp, #4]
	sTime.Minutes = DT.min;
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	f88d 2005 	strb.w	r2, [sp, #5]
	sTime.Seconds = DT.sec;
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f88d 3006 	strb.w	r3, [sp, #6]
#ifdef USED_FREERTOS
	if (osMutexAcquire(rtcMutexHandle, waitRTC) == osOK) {
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <set_DT+0x98>)
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <set_DT+0x9c>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	f009 fca4 	bl	800b640 <osMutexAcquire>
 8001cf8:	b118      	cbz	r0, 8001d02 <set_DT+0x46>
bool ret = false;
 8001cfa:	2400      	movs	r4, #0
#endif

	if (ret) setDate = true;

	return ret;
}
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	b006      	add	sp, #24
 8001d00:	bd10      	pop	{r4, pc}
		if (HAL_RTC_SetDate(portRTC, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001d02:	2200      	movs	r2, #0
 8001d04:	4669      	mov	r1, sp
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <set_DT+0xa0>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f007 fe94 	bl	8009a36 <HAL_RTC_SetDate>
 8001d0e:	b178      	cbz	r0, 8001d30 <set_DT+0x74>
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <set_DT+0xa4>)
 8001d12:	7813      	ldrb	r3, [r2, #0]
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	7013      	strb	r3, [r2, #0]
bool ret = false;
 8001d1a:	2400      	movs	r4, #0
		osMutexRelease(rtcMutexHandle);
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <set_DT+0x9c>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	f009 fccc 	bl	800b6bc <osMutexRelease>
	if (ret) setDate = true;
 8001d24:	2c00      	cmp	r4, #0
 8001d26:	d0e9      	beq.n	8001cfc <set_DT+0x40>
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <set_DT+0xa8>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e7e5      	b.n	8001cfc <set_DT+0x40>
			if (HAL_RTC_SetTime(portRTC, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001d30:	2200      	movs	r2, #0
 8001d32:	a901      	add	r1, sp, #4
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <set_DT+0xa0>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f007 fdfe 	bl	8009938 <HAL_RTC_SetTime>
 8001d3c:	b130      	cbz	r0, 8001d4c <set_DT+0x90>
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <set_DT+0xa4>)
 8001d40:	7813      	ldrb	r3, [r2, #0]
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	7013      	strb	r3, [r2, #0]
bool ret = false;
 8001d48:	2400      	movs	r4, #0
 8001d4a:	e7e7      	b.n	8001d1c <set_DT+0x60>
				ret = true;
 8001d4c:	2401      	movs	r4, #1
 8001d4e:	e7e5      	b.n	8001d1c <set_DT+0x60>
 8001d50:	20007a44 	.word	0x20007a44
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20007a8c 	.word	0x20007a8c
 8001d5c:	20000130 	.word	0x20000130
 8001d60:	200003e5 	.word	0x200003e5
 8001d64:	20000c24 	.word	0x20000c24

08001d68 <prnFlags>:
//------------------------------------------------------------------------------------------
//   Функция печатает (выдаёт в локальный канал управления) значения всех служебных данных
//
void prnFlags(void *g)
{
 8001d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d6c:	b0a1      	sub	sp, #132	; 0x84
 8001d6e:	4601      	mov	r1, r0
	Report(NULL,
		   true,
		   "Flags:\n\trdy:%u\n\tcFun:%u\n\tcPin:%u\n\tCallReady:%u\n\tSMSReady:%u\n\tbegin:%u\n\treg:%u\n\tcGat:%u\n\tcmee:%u\n"
		   "\tcntp:%u\n\tokDT:%u\n\tstate:%s\n\tconnect:%u\n\tfail:%u\n\tclosed:%u\n\tshut:%u\n\tbusy:%u\n\tack:%u\n\tplay:%u\n"
		   "\terror:%u\n\tok:%u\n\tsntpSRV:'%s'\n\tsntpDT:'%s'\n\timei:%s\n\tVcc:%u mv\r\n",
		   gf->rdy, gf->cFun, gf->cPin, gf->cReady, gf->sReady, gf->begin, gf->reg, gf->cGat, gf->cmee,
 8001d70:	7803      	ldrb	r3, [r0, #0]
 8001d72:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001d76:	9218      	str	r2, [sp, #96]	; 0x60
 8001d78:	f3c3 0080 	ubfx	r0, r3, #2, #1
 8001d7c:	9019      	str	r0, [sp, #100]	; 0x64
 8001d7e:	f3c3 04c0 	ubfx	r4, r3, #3, #1
 8001d82:	941a      	str	r4, [sp, #104]	; 0x68
 8001d84:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8001d88:	951b      	str	r5, [sp, #108]	; 0x6c
 8001d8a:	f3c3 1640 	ubfx	r6, r3, #5, #1
 8001d8e:	961c      	str	r6, [sp, #112]	; 0x70
 8001d90:	f3c3 1780 	ubfx	r7, r3, #6, #1
 8001d94:	971d      	str	r7, [sp, #116]	; 0x74
 8001d96:	09da      	lsrs	r2, r3, #7
 8001d98:	921e      	str	r2, [sp, #120]	; 0x78
 8001d9a:	784c      	ldrb	r4, [r1, #1]
 8001d9c:	f004 0c03 	and.w	ip, r4, #3
 8001da0:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
		   gf->tReady, gf->okDT, gsmState[gf->state], gf->connect,
 8001da4:	f3c4 0580 	ubfx	r5, r4, #2, #1
 8001da8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001dac:	788a      	ldrb	r2, [r1, #2]
 8001dae:	f002 0607 	and.w	r6, r2, #7
 8001db2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
		   gf->fail, gf->closed, gf->shut, gf->busy, gf->ack, gf->play, gf->error, gf->ok,
 8001db6:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8001dba:	f3c2 1c40 	ubfx	ip, r2, #5, #1
 8001dbe:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8001dc2:	78c9      	ldrb	r1, [r1, #3]
 8001dc4:	f3c1 0e80 	ubfx	lr, r1, #2, #1
 8001dc8:	f3c1 08c0 	ubfx	r8, r1, #3, #1
 8001dcc:	f3c1 1900 	ubfx	r9, r1, #4, #1
 8001dd0:	f3c1 1a40 	ubfx	sl, r1, #5, #1
 8001dd4:	f3c1 1180 	ubfx	r1, r1, #6, #1
	Report(NULL,
 8001dd8:	f8df b084 	ldr.w	fp, [pc, #132]	; 8001e60 <prnFlags+0xf8>
 8001ddc:	f8bb b000 	ldrh.w	fp, [fp]
 8001de0:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 8001de4:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8001e64 <prnFlags+0xfc>
 8001de8:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 8001dec:	f8df b078 	ldr.w	fp, [pc, #120]	; 8001e68 <prnFlags+0x100>
 8001df0:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 8001df4:	f8df b074 	ldr.w	fp, [pc, #116]	; 8001e6c <prnFlags+0x104>
 8001df8:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8001dfc:	9113      	str	r1, [sp, #76]	; 0x4c
 8001dfe:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8001e02:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8001e06:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8001e0a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8001e0e:	920e      	str	r2, [sp, #56]	; 0x38
 8001e10:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8001e14:	900c      	str	r0, [sp, #48]	; 0x30
 8001e16:	970b      	str	r7, [sp, #44]	; 0x2c
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <prnFlags+0xf0>)
 8001e1a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8001e1e:	920a      	str	r2, [sp, #40]	; 0x28
 8001e20:	9409      	str	r4, [sp, #36]	; 0x24
 8001e22:	9508      	str	r5, [sp, #32]
 8001e24:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001e26:	9107      	str	r1, [sp, #28]
 8001e28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001e2a:	9106      	str	r1, [sp, #24]
 8001e2c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8001e2e:	9705      	str	r7, [sp, #20]
 8001e30:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8001e32:	9604      	str	r6, [sp, #16]
 8001e34:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001e36:	9503      	str	r5, [sp, #12]
 8001e38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8001e3a:	9402      	str	r4, [sp, #8]
 8001e3c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001e3e:	9001      	str	r0, [sp, #4]
 8001e40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001e42:	9200      	str	r2, [sp, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <prnFlags+0xf4>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fec3 	bl	8001bd8 <Report>
		   cntpSRV, sntpDT, gsmIMEI, VCC);
}
 8001e52:	b021      	add	sp, #132	; 0x84
 8001e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e58:	20000114 	.word	0x20000114
 8001e5c:	08012ed8 	.word	0x08012ed8
 8001e60:	20001f24 	.word	0x20001f24
 8001e64:	20000400 	.word	0x20000400
 8001e68:	20001f0c 	.word	0x20001f0c
 8001e6c:	20000424 	.word	0x20000424

08001e70 <prnRList>:
//------------------------------------------------------------------------------------------
//   Функция печатает (выдаёт в локальный канал управления) список
//         просканированных частот ФМ-радиостанций
//
void prnRList()
{
 8001e70:	b510      	push	{r4, lr}
 8001e72:	b094      	sub	sp, #80	; 0x50
char tp[(MAX_FREQ_LIST * 8) + 1] = {0};
 8001e74:	2400      	movs	r4, #0
 8001e76:	9403      	str	r4, [sp, #12]
 8001e78:	223d      	movs	r2, #61	; 0x3d
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	a804      	add	r0, sp, #16
 8001e7e:	f00b ff5f 	bl	800dd40 <memset>
int8_t i = -1;
s_float_t flo = {0,0};
 8001e82:	9401      	str	r4, [sp, #4]
 8001e84:	9402      	str	r4, [sp, #8]
int8_t i = -1;
 8001e86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
float freq = 0.0;

	while (++i < MAX_FREQ_LIST) {
 8001e8a:	e01a      	b.n	8001ec2 <prnRList+0x52>
		if (freqList[i]) {
			freq = freqList[i];
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
			floatPart(freq / 10, &flo);
 8001e94:	a801      	add	r0, sp, #4
 8001e96:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001e9a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001e9e:	f7ff fd2b 	bl	80018f8 <floatPart>
			sprintf(tp+strlen(tp), "%lu.%01lu ", flo.cel, flo.dro / 100000);
 8001ea2:	a803      	add	r0, sp, #12
 8001ea4:	f7fe f9a6 	bl	80001f4 <strlen>
 8001ea8:	9b02      	ldr	r3, [sp, #8]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <prnRList+0x94>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	09db      	lsrs	r3, r3, #7
 8001eb4:	9a01      	ldr	r2, [sp, #4]
 8001eb6:	4914      	ldr	r1, [pc, #80]	; (8001f08 <prnRList+0x98>)
 8001eb8:	f10d 0c0c 	add.w	ip, sp, #12
 8001ebc:	4460      	add	r0, ip
 8001ebe:	f00c fa27 	bl	800e310 <siprintf>
	while (++i < MAX_FREQ_LIST) {
 8001ec2:	3401      	adds	r4, #1
 8001ec4:	b264      	sxtb	r4, r4
 8001ec6:	2c07      	cmp	r4, #7
 8001ec8:	dc05      	bgt.n	8001ed6 <prnRList+0x66>
		if (freqList[i]) {
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <prnRList+0x9c>)
 8001ecc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f6      	beq.n	8001ec2 <prnRList+0x52>
 8001ed4:	e7da      	b.n	8001e8c <prnRList+0x1c>
		}
	}
	int dl = strlen(tp);
 8001ed6:	a803      	add	r0, sp, #12
 8001ed8:	f7fe f98c 	bl	80001f4 <strlen>

	if (dl) {
 8001edc:	b160      	cbz	r0, 8001ef8 <prnRList+0x88>
		tp[dl - 1] = '\0';
 8001ede:	1e43      	subs	r3, r0, #1
 8001ee0:	aa14      	add	r2, sp, #80	; 0x50
 8001ee2:	4413      	add	r3, r2
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f803 0c44 	strb.w	r0, [r3, #-68]
		Report(NULL, true, "Radio freq_list MHz:[%s]\r\n", tp);
 8001eea:	ab03      	add	r3, sp, #12
 8001eec:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <prnRList+0xa0>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f7ff fe72 	bl	8001bd8 <Report>
	} else {
		Report(NULL, true, "Radio freq_list is empty\r\n");
	}
}
 8001ef4:	b014      	add	sp, #80	; 0x50
 8001ef6:	bd10      	pop	{r4, pc}
		Report(NULL, true, "Radio freq_list is empty\r\n");
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <prnRList+0xa4>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff fe6b 	bl	8001bd8 <Report>
}
 8001f02:	e7f7      	b.n	8001ef4 <prnRList+0x84>
 8001f04:	0a7c5ac5 	.word	0x0a7c5ac5
 8001f08:	08012fdc 	.word	0x08012fdc
 8001f0c:	200003e8 	.word	0x200003e8
 8001f10:	08012fe8 	.word	0x08012fe8
 8001f14:	08013004 	.word	0x08013004

08001f18 <checkDT>:
//------------------------------------------------------------------------------------------
//  Функция парсит символьную строку с датой и временем, полученными от sntp сервера
//
bool checkDT(char *str)//21/11/01,12:49:31+02
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	4604      	mov	r4, r0
bool ret = false;
//int8_t cnt = 0;

	if (strchr(str, '+')) {
 8001f1e:	212b      	movs	r1, #43	; 0x2b
 8001f20:	f00c fa96 	bl	800e450 <strchr>
 8001f24:	b1c0      	cbz	r0, 8001f58 <checkDT+0x40>
		if (sscanf(str, "%02d/%02d/%02d,%02d:%02d:%02d+%02d", &DT.year, &DT.mon, &DT.day, &DT.hour, &DT.min, &DT.sec, &DT.tz) == 7) ret = true;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <checkDT+0x88>)
 8001f28:	f1a3 0114 	sub.w	r1, r3, #20
 8001f2c:	9104      	str	r1, [sp, #16]
 8001f2e:	f1a3 0210 	sub.w	r2, r3, #16
 8001f32:	9203      	str	r2, [sp, #12]
 8001f34:	f1a3 020c 	sub.w	r2, r3, #12
 8001f38:	9202      	str	r2, [sp, #8]
 8001f3a:	f1a3 0208 	sub.w	r2, r3, #8
 8001f3e:	9201      	str	r2, [sp, #4]
 8001f40:	1d19      	adds	r1, r3, #4
 8001f42:	9100      	str	r1, [sp, #0]
 8001f44:	1f1a      	subs	r2, r3, #4
 8001f46:	4917      	ldr	r1, [pc, #92]	; (8001fa4 <checkDT+0x8c>)
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f00c fa01 	bl	800e350 <siscanf>
 8001f4e:	2807      	cmp	r0, #7
 8001f50:	d01f      	beq.n	8001f92 <checkDT+0x7a>
bool ret = false;
 8001f52:	2000      	movs	r0, #0
		}
	}
*/

	return ret;
}
 8001f54:	b006      	add	sp, #24
 8001f56:	bd10      	pop	{r4, pc}
	} else if (strchr(str, '-')) {
 8001f58:	212d      	movs	r1, #45	; 0x2d
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f00c fa78 	bl	800e450 <strchr>
 8001f60:	b1c8      	cbz	r0, 8001f96 <checkDT+0x7e>
		if (sscanf(str, "%02d/%02d/%02d,%02d:%02d:%02d-%02d", &DT.year, &DT.mon, &DT.day, &DT.hour, &DT.min, &DT.sec, &DT.tz) == 7) ret = true;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <checkDT+0x88>)
 8001f64:	f1a3 0114 	sub.w	r1, r3, #20
 8001f68:	9104      	str	r1, [sp, #16]
 8001f6a:	f1a3 0210 	sub.w	r2, r3, #16
 8001f6e:	9203      	str	r2, [sp, #12]
 8001f70:	f1a3 020c 	sub.w	r2, r3, #12
 8001f74:	9202      	str	r2, [sp, #8]
 8001f76:	f1a3 0208 	sub.w	r2, r3, #8
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	1d19      	adds	r1, r3, #4
 8001f7e:	9100      	str	r1, [sp, #0]
 8001f80:	1f1a      	subs	r2, r3, #4
 8001f82:	4909      	ldr	r1, [pc, #36]	; (8001fa8 <checkDT+0x90>)
 8001f84:	4620      	mov	r0, r4
 8001f86:	f00c f9e3 	bl	800e350 <siscanf>
 8001f8a:	2807      	cmp	r0, #7
 8001f8c:	d005      	beq.n	8001f9a <checkDT+0x82>
bool ret = false;
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e7e0      	b.n	8001f54 <checkDT+0x3c>
		if (sscanf(str, "%02d/%02d/%02d,%02d:%02d:%02d+%02d", &DT.year, &DT.mon, &DT.day, &DT.hour, &DT.min, &DT.sec, &DT.tz) == 7) ret = true;
 8001f92:	2001      	movs	r0, #1
 8001f94:	e7de      	b.n	8001f54 <checkDT+0x3c>
bool ret = false;
 8001f96:	2000      	movs	r0, #0
 8001f98:	e7dc      	b.n	8001f54 <checkDT+0x3c>
		if (sscanf(str, "%02d/%02d/%02d,%02d:%02d:%02d-%02d", &DT.year, &DT.mon, &DT.day, &DT.hour, &DT.min, &DT.sec, &DT.tz) == 7) ret = true;
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	e7da      	b.n	8001f54 <checkDT+0x3c>
 8001f9e:	bf00      	nop
 8001fa0:	20007a58 	.word	0x20007a58
 8001fa4:	08013020 	.word	0x08013020
 8001fa8:	08013044 	.word	0x08013044

08001fac <parseEvent>:
//-----------------------------------------------------------------------------------------
//  Функция парсит сообщения от GSM модуля и устанавливает соответственные флаги состояния,
//  а также инициализирует, при необходимости, запуск соответствующей реакции на сообщение
//
int8_t parseEvent(char *in, void *g)
{
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb0:	b088      	sub	sp, #32
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	460e      	mov	r6, r1
int8_t id = -1, ret = -1;
int i, j, k;

	gsmFlags_t *gf = (gsmFlags_t *)g;

	for (int8_t i = 0; i < gsmEventMax; i++) {
 8001fb6:	2400      	movs	r4, #0
 8001fb8:	2c19      	cmp	r4, #25
 8001fba:	dc09      	bgt.n	8001fd0 <parseEvent+0x24>
		if (strstr(in, gsmEvent[i])) {
 8001fbc:	4ba9      	ldr	r3, [pc, #676]	; (8002264 <parseEvent+0x2b8>)
 8001fbe:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	f00c fa7e 	bl	800e4c4 <strstr>
 8001fc8:	b920      	cbnz	r0, 8001fd4 <parseEvent+0x28>
	for (int8_t i = 0; i < gsmEventMax; i++) {
 8001fca:	3401      	adds	r4, #1
 8001fcc:	b264      	sxtb	r4, r4
 8001fce:	e7f3      	b.n	8001fb8 <parseEvent+0xc>
int8_t id = -1, ret = -1;
 8001fd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			id = i;
			break;
		}
	}

	if (id != -1) {
 8001fd4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001fd8:	f000 8272 	beq.w	80024c0 <parseEvent+0x514>
		uks = in + strlen(gsmEvent[id]);
 8001fdc:	4ba1      	ldr	r3, [pc, #644]	; (8002264 <parseEvent+0x2b8>)
 8001fde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001fe2:	f7fe f907 	bl	80001f4 <strlen>
 8001fe6:	4607      	mov	r7, r0
 8001fe8:	eb05 0800 	add.w	r8, r5, r0
		switch (id) {
 8001fec:	2c19      	cmp	r4, #25
 8001fee:	f200 8340 	bhi.w	8002672 <parseEvent+0x6c6>
 8001ff2:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001ff6:	001a      	.short	0x001a
 8001ff8:	00370021 	.word	0x00370021
 8001ffc:	0051004a 	.word	0x0051004a
 8002000:	00720062 	.word	0x00720062
 8002004:	009d0085 	.word	0x009d0085
 8002008:	00b3033e 	.word	0x00b3033e
 800200c:	011600d1 	.word	0x011600d1
 8002010:	014b012c 	.word	0x014b012c
 8002014:	01910191 	.word	0x01910191
 8002018:	01d101b1 	.word	0x01d101b1
 800201c:	01f401ea 	.word	0x01f401ea
 8002020:	02190202 	.word	0x02190202
 8002024:	02310224 	.word	0x02310224
 8002028:	0243      	.short	0x0243
			case _RDY:
				gf->rdy = 1;
 800202a:	7833      	ldrb	r3, [r6, #0]
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002032:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 8002036:	e2c5      	b.n	80025c4 <parseEvent+0x618>
			case _CFUN:
				if (*uks == '1') gf->cFun = 1;
 8002038:	5c2b      	ldrb	r3, [r5, r0]
 800203a:	2b31      	cmp	r3, #49	; 0x31
 800203c:	d004      	beq.n	8002048 <parseEvent+0x9c>
				else
				if (*uks == '0') gf->cFun = 0;
 800203e:	2b30      	cmp	r3, #48	; 0x30
 8002040:	d009      	beq.n	8002056 <parseEvent+0xaa>
int8_t id = -1, ret = -1;
 8002042:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002046:	e2bd      	b.n	80025c4 <parseEvent+0x618>
				if (*uks == '1') gf->cFun = 1;
 8002048:	7833      	ldrb	r3, [r6, #0]
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002054:	e2b6      	b.n	80025c4 <parseEvent+0x618>
				if (*uks == '0') gf->cFun = 0;
 8002056:	7833      	ldrb	r3, [r6, #0]
 8002058:	f36f 0341 	bfc	r3, #1, #1
 800205c:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 800205e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002062:	e2af      	b.n	80025c4 <parseEvent+0x618>
			break;
			case _CPIN:
				if (!strcmp(uks, "READY")) gf->cPin = 1; else gf->cPin = 0;
 8002064:	4980      	ldr	r1, [pc, #512]	; (8002268 <parseEvent+0x2bc>)
 8002066:	4640      	mov	r0, r8
 8002068:	f7fe f8ba 	bl	80001e0 <strcmp>
 800206c:	b930      	cbnz	r0, 800207c <parseEvent+0xd0>
 800206e:	7833      	ldrb	r3, [r6, #0]
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002076:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800207a:	e2a3      	b.n	80025c4 <parseEvent+0x618>
				if (!strcmp(uks, "READY")) gf->cPin = 1; else gf->cPin = 0;
 800207c:	7833      	ldrb	r3, [r6, #0]
 800207e:	f36f 0382 	bfc	r3, #2, #1
 8002082:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002088:	e29c      	b.n	80025c4 <parseEvent+0x618>
			break;
			case _CallReady:
				gf->cReady = 1;
 800208a:	7833      	ldrb	r3, [r6, #0]
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002092:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 8002096:	e295      	b.n	80025c4 <parseEvent+0x618>
			case _SMSReady:
				if (gf->sReady) gf->begin = 1;
 8002098:	7833      	ldrb	r3, [r6, #0]
 800209a:	f013 0f10 	tst.w	r3, #16
 800209e:	d005      	beq.n	80020ac <parseEvent+0x100>
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 80020a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020aa:	e28b      	b.n	80025c4 <parseEvent+0x618>
				else
				gf->sReady = 1;
 80020ac:	7833      	ldrb	r3, [r6, #0]
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 80020b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020b8:	e284      	b.n	80025c4 <parseEvent+0x618>
			break;
			case _Revision:
				if (strlen(uks) > 2) {
 80020ba:	4640      	mov	r0, r8
 80020bc:	f7fe f89a 	bl	80001f4 <strlen>
 80020c0:	2802      	cmp	r0, #2
 80020c2:	d802      	bhi.n	80020ca <parseEvent+0x11e>
int8_t id = -1, ret = -1;
 80020c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020c8:	e27c      	b.n	80025c4 <parseEvent+0x618>
					strncpy(gsmREV, uks, sizeof(gsmREV) - 1);
 80020ca:	221f      	movs	r2, #31
 80020cc:	4641      	mov	r1, r8
 80020ce:	4867      	ldr	r0, [pc, #412]	; (800226c <parseEvent+0x2c0>)
 80020d0:	f00c f9e5 	bl	800e49e <strncpy>
int8_t id = -1, ret = -1;
 80020d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020d8:	e274      	b.n	80025c4 <parseEvent+0x618>
				}
			break;
			case _CSQ://+CSQ: 14,0
				if ((uki = strchr(uks, ',')) != NULL) *uki = '\0';
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	4640      	mov	r0, r8
 80020de:	f00c f9b7 	bl	800e450 <strchr>
 80020e2:	b108      	cbz	r0, 80020e8 <parseEvent+0x13c>
 80020e4:	2200      	movs	r2, #0
 80020e6:	7002      	strb	r2, [r0, #0]
				gsmRSSI = dBmRSSI[atoi(uks) & 0x1f];
 80020e8:	4640      	mov	r0, r8
 80020ea:	f00b fd20 	bl	800db2e <atoi>
 80020ee:	f000 031f 	and.w	r3, r0, #31
 80020f2:	4a5f      	ldr	r2, [pc, #380]	; (8002270 <parseEvent+0x2c4>)
 80020f4:	56d2      	ldrsb	r2, [r2, r3]
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <parseEvent+0x2c8>)
 80020f8:	701a      	strb	r2, [r3, #0]
int8_t id = -1, ret = -1;
 80020fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 80020fe:	e261      	b.n	80025c4 <parseEvent+0x618>
			case _CREG://+CREG: 0,1
				if ((uki = strchr(uks, ',')) != NULL) {
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	4640      	mov	r0, r8
 8002104:	f00c f9a4 	bl	800e450 <strchr>
 8002108:	2800      	cmp	r0, #0
 800210a:	f000 82b5 	beq.w	8002678 <parseEvent+0x6cc>
					if (*(uki + 1) == '1') gf->reg = 1; else gf->reg = 0;
 800210e:	7843      	ldrb	r3, [r0, #1]
 8002110:	2b31      	cmp	r3, #49	; 0x31
 8002112:	d006      	beq.n	8002122 <parseEvent+0x176>
 8002114:	7833      	ldrb	r3, [r6, #0]
 8002116:	f36f 1386 	bfc	r3, #6, #1
 800211a:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 800211c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002120:	e250      	b.n	80025c4 <parseEvent+0x618>
					if (*(uki + 1) == '1') gf->reg = 1; else gf->reg = 0;
 8002122:	7833      	ldrb	r3, [r6, #0]
 8002124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002128:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 800212a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800212e:	e249      	b.n	80025c4 <parseEvent+0x618>
				}
			break;
			case _CGATT://+CGATT: 1
				if (*uks == '1') gf->cGat = 1;
 8002130:	5c2b      	ldrb	r3, [r5, r0]
 8002132:	2b31      	cmp	r3, #49	; 0x31
 8002134:	d004      	beq.n	8002140 <parseEvent+0x194>
				else
				if (*uks == '0') gf->cGat = 0;
 8002136:	2b30      	cmp	r3, #48	; 0x30
 8002138:	d009      	beq.n	800214e <parseEvent+0x1a2>
int8_t id = -1, ret = -1;
 800213a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800213e:	e241      	b.n	80025c4 <parseEvent+0x618>
				if (*uks == '1') gf->cGat = 1;
 8002140:	7833      	ldrb	r3, [r6, #0]
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002148:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800214c:	e23a      	b.n	80025c4 <parseEvent+0x618>
				if (*uks == '0') gf->cGat = 0;
 800214e:	7833      	ldrb	r3, [r6, #0]
 8002150:	f36f 13c7 	bfc	r3, #7, #1
 8002154:	7033      	strb	r3, [r6, #0]
int8_t id = -1, ret = -1;
 8002156:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800215a:	e233      	b.n	80025c4 <parseEvent+0x618>
			break;
			case _CLBS:
			break;
			case _CNTP://+CNTP: 1         || 202.120.2.101,32
				if (strlen(uks) > 4) {
 800215c:	4640      	mov	r0, r8
 800215e:	f7fe f849 	bl	80001f4 <strlen>
 8002162:	2804      	cmp	r0, #4
 8002164:	d809      	bhi.n	800217a <parseEvent+0x1ce>
					strncpy(cntpSRV, uks, sizeof(cntpSRV) - 1);
				} else {
					if (*uks == '1') {
 8002166:	5deb      	ldrb	r3, [r5, r7]
 8002168:	2b31      	cmp	r3, #49	; 0x31
 800216a:	d00e      	beq.n	800218a <parseEvent+0x1de>
						gf->tReady = 1;
					} else {
						gf->tReady = 0;
 800216c:	7873      	ldrb	r3, [r6, #1]
 800216e:	f36f 0382 	bfc	r3, #2, #1
 8002172:	7073      	strb	r3, [r6, #1]
int8_t id = -1, ret = -1;
 8002174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002178:	e224      	b.n	80025c4 <parseEvent+0x618>
					strncpy(cntpSRV, uks, sizeof(cntpSRV) - 1);
 800217a:	223f      	movs	r2, #63	; 0x3f
 800217c:	4641      	mov	r1, r8
 800217e:	483e      	ldr	r0, [pc, #248]	; (8002278 <parseEvent+0x2cc>)
 8002180:	f00c f98d 	bl	800e49e <strncpy>
int8_t id = -1, ret = -1;
 8002184:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002188:	e21c      	b.n	80025c4 <parseEvent+0x618>
						gf->tReady = 1;
 800218a:	7873      	ldrb	r3, [r6, #1]
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	7073      	strb	r3, [r6, #1]
int8_t id = -1, ret = -1;
 8002192:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002196:	e215      	b.n	80025c4 <parseEvent+0x618>
					}
				}
			break;
			case _CCLK://+CCLK: "21/11/01,12:49:31+02"
				if (strlen(uks) > 12) {
 8002198:	4640      	mov	r0, r8
 800219a:	f7fe f82b 	bl	80001f4 <strlen>
 800219e:	280c      	cmp	r0, #12
 80021a0:	f240 826d 	bls.w	800267e <parseEvent+0x6d2>
					gf->okDT = 0;
 80021a4:	7873      	ldrb	r3, [r6, #1]
					gf->reqDT = 1;
 80021a6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80021aa:	f043 0308 	orr.w	r3, r3, #8
 80021ae:	7073      	strb	r3, [r6, #1]
					uks++;
 80021b0:	f108 0801 	add.w	r8, r8, #1
					char *uki = strchr(uks, '"');
 80021b4:	2122      	movs	r1, #34	; 0x22
 80021b6:	4640      	mov	r0, r8
 80021b8:	f00c f94a 	bl	800e450 <strchr>
					if (uki) *uki = '\0';
 80021bc:	b108      	cbz	r0, 80021c2 <parseEvent+0x216>
 80021be:	2200      	movs	r2, #0
 80021c0:	7002      	strb	r2, [r0, #0]
					strncpy(sntpDT, uks, sizeof(sntpDT) - 1);
 80021c2:	4c2e      	ldr	r4, [pc, #184]	; (800227c <parseEvent+0x2d0>)
 80021c4:	2217      	movs	r2, #23
 80021c6:	4641      	mov	r1, r8
 80021c8:	4620      	mov	r0, r4
 80021ca:	f00c f968 	bl	800e49e <strncpy>
					//
					//if (gf->tReady) {
						if (checkDT(sntpDT)) {
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fea2 	bl	8001f18 <checkDT>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	f000 8255 	beq.w	8002684 <parseEvent+0x6d8>
							gf->reqDT = 1;
 80021da:	7873      	ldrb	r3, [r6, #1]
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	7073      	strb	r3, [r6, #1]
							if (set_DT()) {
 80021e2:	f7ff fd6b 	bl	8001cbc <set_DT>
 80021e6:	b910      	cbnz	r0, 80021ee <parseEvent+0x242>
int8_t id = -1, ret = -1;
 80021e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021ec:	e1ea      	b.n	80025c4 <parseEvent+0x618>
								gf->okDT = 1;
 80021ee:	7873      	ldrb	r3, [r6, #1]
 80021f0:	f043 0310 	orr.w	r3, r3, #16
 80021f4:	7073      	strb	r3, [r6, #1]
								Report(NULL, false,
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <parseEvent+0x2d4>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	9205      	str	r2, [sp, #20]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	9204      	str	r2, [sp, #16]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	9203      	str	r2, [sp, #12]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	9202      	str	r2, [sp, #8]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	9200      	str	r2, [sp, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <parseEvent+0x2d8>)
 8002214:	2100      	movs	r1, #0
 8002216:	4608      	mov	r0, r1
 8002218:	f7ff fcde 	bl	8001bd8 <Report>
int8_t id = -1, ret = -1;
 800221c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002220:	e1d0      	b.n	80025c4 <parseEvent+0x618>
					//}
					//
				}
			break;
			case _CBC://+CBC: 0,65,3928
				if ((uki = strchr(uks, ',')) != NULL) {
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	4640      	mov	r0, r8
 8002226:	f00c f913 	bl	800e450 <strchr>
 800222a:	2800      	cmp	r0, #0
 800222c:	f000 822d 	beq.w	800268a <parseEvent+0x6de>
					uks = uki + 1;
					uki = strchr(uks, ',');
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	3001      	adds	r0, #1
 8002234:	f00c f90c 	bl	800e450 <strchr>
					if (uki) VCC = atoi(uki + 1);
 8002238:	2800      	cmp	r0, #0
 800223a:	f000 8229 	beq.w	8002690 <parseEvent+0x6e4>
 800223e:	3001      	adds	r0, #1
 8002240:	f00b fc75 	bl	800db2e <atoi>
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <parseEvent+0x2dc>)
 8002246:	8018      	strh	r0, [r3, #0]
int8_t id = -1, ret = -1;
 8002248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800224c:	e1ba      	b.n	80025c4 <parseEvent+0x618>
				}
			break;
			case _CMEE://+CMEE: 1
				gf->cmee = atoi(uks);
 800224e:	4640      	mov	r0, r8
 8002250:	f00b fc6d 	bl	800db2e <atoi>
 8002254:	7873      	ldrb	r3, [r6, #1]
 8002256:	f360 0301 	bfi	r3, r0, #0, #2
 800225a:	7073      	strb	r3, [r6, #1]
int8_t id = -1, ret = -1;
 800225c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 8002260:	e1b0      	b.n	80025c4 <parseEvent+0x618>
 8002262:	bf00      	nop
 8002264:	200000ac 	.word	0x200000ac
 8002268:	08013068 	.word	0x08013068
 800226c:	20001f28 	.word	0x20001f28
 8002270:	08012dcc 	.word	0x08012dcc
 8002274:	200003fc 	.word	0x200003fc
 8002278:	20000424 	.word	0x20000424
 800227c:	20001f0c 	.word	0x20001f0c
 8002280:	20007a44 	.word	0x20007a44
 8002284:	08013070 	.word	0x08013070
 8002288:	20001f24 	.word	0x20001f24
			case _CUSD://"+CUSD: ",//+CUSD: 0, "003200300030002E003000300020 .... 340023", 72
#ifdef SET_SMS
				uks += 4;//uk to begin ucs2 string
 800228c:	f108 0804 	add.w	r8, r8, #4
				char *uke = strstr(uks, "\", 72");
 8002290:	4983      	ldr	r1, [pc, #524]	; (80024a0 <parseEvent+0x4f4>)
 8002292:	4640      	mov	r0, r8
 8002294:	f00c f916 	bl	800e4c4 <strstr>
				if (uke) {
 8002298:	4607      	mov	r7, r0
 800229a:	2800      	cmp	r0, #0
 800229c:	f000 81fb 	beq.w	8002696 <parseEvent+0x6ea>
					if (!cusd) cusd = (char *)calloc(1, SMS_BUF_LEN);
 80022a0:	4b80      	ldr	r3, [pc, #512]	; (80024a4 <parseEvent+0x4f8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b1fb      	cbz	r3, 80022e6 <parseEvent+0x33a>
					if (cusd) {
 80022a6:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <parseEvent+0x4f8>)
 80022a8:	681c      	ldr	r4, [r3, #0]
 80022aa:	b36c      	cbz	r4, 8002308 <parseEvent+0x35c>
						memset(SMS_text, 0, SMS_BUF_LEN);
 80022ac:	4d7e      	ldr	r5, [pc, #504]	; (80024a8 <parseEvent+0x4fc>)
 80022ae:	f44f 7620 	mov.w	r6, #640	; 0x280
 80022b2:	4632      	mov	r2, r6
 80022b4:	2100      	movs	r1, #0
 80022b6:	4628      	mov	r0, r5
 80022b8:	f00b fd42 	bl	800dd40 <memset>
						memset(cusd, 0, SMS_BUF_LEN);
 80022bc:	4632      	mov	r2, r6
 80022be:	2100      	movs	r1, #0
 80022c0:	4620      	mov	r0, r4
 80022c2:	f00b fd3d 	bl	800dd40 <memset>
						memcpy(cusd, uks, uke - uks);
 80022c6:	4c77      	ldr	r4, [pc, #476]	; (80024a4 <parseEvent+0x4f8>)
 80022c8:	eba7 0208 	sub.w	r2, r7, r8
 80022cc:	4641      	mov	r1, r8
 80022ce:	6820      	ldr	r0, [r4, #0]
 80022d0:	f00b fd28 	bl	800dd24 <memcpy>
						if (ucs2_to_utf8(cusd, NULL, (uint8_t *)SMS_text)) Report(NULL, false, "%s\r\n", SMS_text);
 80022d4:	462a      	mov	r2, r5
 80022d6:	2100      	movs	r1, #0
 80022d8:	6820      	ldr	r0, [r4, #0]
 80022da:	f002 fe61 	bl	8004fa0 <ucs2_to_utf8>
 80022de:	b950      	cbnz	r0, 80022f6 <parseEvent+0x34a>
int8_t id = -1, ret = -1;
 80022e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022e4:	e16e      	b.n	80025c4 <parseEvent+0x618>
					if (!cusd) cusd = (char *)calloc(1, SMS_BUF_LEN);
 80022e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80022ea:	2001      	movs	r0, #1
 80022ec:	f00b fc28 	bl	800db40 <calloc>
 80022f0:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <parseEvent+0x4f8>)
 80022f2:	6018      	str	r0, [r3, #0]
 80022f4:	e7d7      	b.n	80022a6 <parseEvent+0x2fa>
						if (ucs2_to_utf8(cusd, NULL, (uint8_t *)SMS_text)) Report(NULL, false, "%s\r\n", SMS_text);
 80022f6:	462b      	mov	r3, r5
 80022f8:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <parseEvent+0x500>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4608      	mov	r0, r1
 80022fe:	f7ff fc6b 	bl	8001bd8 <Report>
int8_t id = -1, ret = -1;
 8002302:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002306:	e15d      	b.n	80025c4 <parseEvent+0x618>
					} else devError |= devMem;
 8002308:	4a69      	ldr	r2, [pc, #420]	; (80024b0 <parseEvent+0x504>)
 800230a:	7813      	ldrb	r3, [r2, #0]
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	7013      	strb	r3, [r2, #0]
int8_t id = -1, ret = -1;
 8002312:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002316:	e155      	b.n	80025c4 <parseEvent+0x618>
#endif
			break;
			case _CMT:
			case _SCLASS0:
#ifdef SET_SMS
				gf->sms = 1;
 8002318:	7873      	ldrb	r3, [r6, #1]
 800231a:	f043 0320 	orr.w	r3, r3, #32
 800231e:	7073      	strb	r3, [r6, #1]
				memset(SMS_text, 0, SMS_BUF_LEN);
 8002320:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002324:	2100      	movs	r1, #0
 8002326:	4860      	ldr	r0, [pc, #384]	; (80024a8 <parseEvent+0x4fc>)
 8002328:	f00b fd0a 	bl	800dd40 <memset>
				k = strlen(in);
 800232c:	4628      	mov	r0, r5
 800232e:	f7fd ff61 	bl	80001f4 <strlen>
 8002332:	4602      	mov	r2, r0
				if (k > SMS_BUF_LEN - 3) k = SMS_BUF_LEN - 3;
 8002334:	f240 237d 	movw	r3, #637	; 0x27d
 8002338:	4298      	cmp	r0, r3
 800233a:	dd00      	ble.n	800233e <parseEvent+0x392>
 800233c:	461a      	mov	r2, r3
				strncpy(SMS_text, in, k);
 800233e:	4c5a      	ldr	r4, [pc, #360]	; (80024a8 <parseEvent+0x4fc>)
 8002340:	4629      	mov	r1, r5
 8002342:	4620      	mov	r0, r4
 8002344:	f00c f8ab 	bl	800e49e <strncpy>
				strcat(SMS_text, eol);
 8002348:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <parseEvent+0x508>)
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	4620      	mov	r0, r4
 800234e:	f00c f870 	bl	800e432 <strcat>
int8_t id = -1, ret = -1;
 8002352:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
#endif
			break;
 8002356:	e135      	b.n	80025c4 <parseEvent+0x618>
		uks = in + strlen(gsmEvent[id]);
 8002358:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			case _STATE:
			{
				int8_t j = -1;
				while (++j < gsmStateMax) {
 800235c:	3401      	adds	r4, #1
 800235e:	b2e5      	uxtb	r5, r4
 8002360:	b264      	sxtb	r4, r4
 8002362:	2c05      	cmp	r4, #5
 8002364:	dc0b      	bgt.n	800237e <parseEvent+0x3d2>
					if (strstr(uks, gsmState[j])) {
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <parseEvent+0x50c>)
 8002368:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800236c:	4640      	mov	r0, r8
 800236e:	f00c f8a9 	bl	800e4c4 <strstr>
 8002372:	2800      	cmp	r0, #0
 8002374:	d0f2      	beq.n	800235c <parseEvent+0x3b0>
						gf->state = j;
 8002376:	78b3      	ldrb	r3, [r6, #2]
 8002378:	f365 0302 	bfi	r3, r5, #0, #3
 800237c:	70b3      	strb	r3, [r6, #2]
						break;
					}
				}
				if (j == gsmStateMax)  gf->state = gsmStateMax - 1;
 800237e:	2c06      	cmp	r4, #6
 8002380:	d002      	beq.n	8002388 <parseEvent+0x3dc>
int8_t id = -1, ret = -1;
 8002382:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002386:	e11d      	b.n	80025c4 <parseEvent+0x618>
				if (j == gsmStateMax)  gf->state = gsmStateMax - 1;
 8002388:	78b3      	ldrb	r3, [r6, #2]
 800238a:	2205      	movs	r2, #5
 800238c:	f362 0302 	bfi	r3, r2, #0, #3
 8002390:	70b3      	strb	r3, [r6, #2]
int8_t id = -1, ret = -1;
 8002392:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002396:	e115      	b.n	80025c4 <parseEvent+0x618>
			}
			break;
			case _CONNECTOK:
				gf->connect = gf->busy = 1;
 8002398:	78f2      	ldrb	r2, [r6, #3]
 800239a:	78b3      	ldrb	r3, [r6, #2]
				gf->send = 0;
 800239c:	f042 0204 	orr.w	r2, r2, #4
				gf->fail = gf->closed = 0;
 80023a0:	f043 0308 	orr.w	r3, r3, #8
				gf->shut = gf->error = 0;
 80023a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023a8:	f36f 1245 	bfc	r2, #5, #1
 80023ac:	70f2      	strb	r2, [r6, #3]
 80023ae:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 80023b2:	f36f 1386 	bfc	r3, #6, #1
 80023b6:	70b3      	strb	r3, [r6, #2]
				HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023be:	483f      	ldr	r0, [pc, #252]	; (80024bc <parseEvent+0x510>)
 80023c0:	f005 f9fd 	bl	80077be <HAL_GPIO_WritePin>
int8_t id = -1, ret = -1;
 80023c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 80023c8:	e0fc      	b.n	80025c4 <parseEvent+0x618>
			case _CONNECTFAIL:
				gf->fail = 1;
 80023ca:	78b3      	ldrb	r3, [r6, #2]
				gf->connect = gf->shut = 0;
 80023cc:	f043 0310 	orr.w	r3, r3, #16
				gf->prompt = 0;
 80023d0:	f003 03b7 	and.w	r3, r3, #183	; 0xb7
 80023d4:	f36f 13c7 	bfc	r3, #7, #1
 80023d8:	70b3      	strb	r3, [r6, #2]
				ret = cCIPSHUT;
 80023da:	2408      	movs	r4, #8
			break;
 80023dc:	e0f2      	b.n	80025c4 <parseEvent+0x618>
			case _CLOSED:
				gf->closed = 1;
 80023de:	78b3      	ldrb	r3, [r6, #2]
				gf->connect = gf->prompt = 0;
 80023e0:	f043 0320 	orr.w	r3, r3, #32
 80023e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e8:	f36f 03c3 	bfc	r3, #3, #1
 80023ec:	70b3      	strb	r3, [r6, #2]
				gf->error = 0;
 80023ee:	78f3      	ldrb	r3, [r6, #3]
 80023f0:	f36f 1345 	bfc	r3, #5, #1
 80023f4:	70f3      	strb	r3, [r6, #3]
				ret = cCIPSHUT;
 80023f6:	2408      	movs	r4, #8
			break;
 80023f8:	e0e4      	b.n	80025c4 <parseEvent+0x618>
			case _SHUTOK:
				gf->shut = 1;
 80023fa:	78b3      	ldrb	r3, [r6, #2]
				gf->connect = gf->prompt = 0;
 80023fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002404:	f36f 03c3 	bfc	r3, #3, #1
 8002408:	70b3      	strb	r3, [r6, #2]
				gf->error = gf->busy = 0;
 800240a:	78f3      	ldrb	r3, [r6, #3]
 800240c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8002410:	f36f 1345 	bfc	r3, #5, #1
 8002414:	70f3      	strb	r3, [r6, #3]
				HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800241c:	4827      	ldr	r0, [pc, #156]	; (80024bc <parseEvent+0x510>)
 800241e:	f005 f9ce 	bl	80077be <HAL_GPIO_WritePin>
int8_t id = -1, ret = -1;
 8002422:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 8002426:	e0cd      	b.n	80025c4 <parseEvent+0x618>
			case _PROMPT:
				gf->prompt = 1;
 8002428:	78b3      	ldrb	r3, [r6, #2]
 800242a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242e:	70b3      	strb	r3, [r6, #2]
				gf->sendOK = 0;
 8002430:	78f3      	ldrb	r3, [r6, #3]
 8002432:	f36f 0341 	bfc	r3, #1, #1
 8002436:	70f3      	strb	r3, [r6, #3]
int8_t id = -1, ret = -1;
 8002438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 800243c:	e0c2      	b.n	80025c4 <parseEvent+0x618>
			case _SENDOK:
				gf->sendOK = 1;
 800243e:	78f3      	ldrb	r3, [r6, #3]
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	70f3      	strb	r3, [r6, #3]
				HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800244c:	481b      	ldr	r0, [pc, #108]	; (80024bc <parseEvent+0x510>)
 800244e:	f005 f9b6 	bl	80077be <HAL_GPIO_WritePin>
int8_t id = -1, ret = -1;
 8002452:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			break;
 8002456:	e0b5      	b.n	80025c4 <parseEvent+0x618>
			case _ERROR:
				gf->error = 1;
 8002458:	78f3      	ldrb	r3, [r6, #3]
				gf->ok = 0;
 800245a:	f043 0320 	orr.w	r3, r3, #32
 800245e:	f36f 1386 	bfc	r3, #6, #1
 8002462:	70f3      	strb	r3, [r6, #3]
				if (gf->rlist) gf->rlist = 0;
 8002464:	7873      	ldrb	r3, [r6, #1]
 8002466:	f013 0f40 	tst.w	r3, #64	; 0x40
 800246a:	f000 8117 	beq.w	800269c <parseEvent+0x6f0>
 800246e:	7873      	ldrb	r3, [r6, #1]
 8002470:	f36f 1386 	bfc	r3, #6, #1
 8002474:	7073      	strb	r3, [r6, #1]
int8_t id = -1, ret = -1;
 8002476:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800247a:	e0a3      	b.n	80025c4 <parseEvent+0x618>
			break;
			case _OK:
				gf->ok = 1;
 800247c:	78f3      	ldrb	r3, [r6, #3]
				gf->error = 0;
 800247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002482:	f36f 1345 	bfc	r3, #5, #1
 8002486:	70f3      	strb	r3, [r6, #3]
				if (gf->rlist) gf->rlist = 0;
 8002488:	7873      	ldrb	r3, [r6, #1]
 800248a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800248e:	f000 8108 	beq.w	80026a2 <parseEvent+0x6f6>
 8002492:	7873      	ldrb	r3, [r6, #1]
 8002494:	f36f 1386 	bfc	r3, #6, #1
 8002498:	7073      	strb	r3, [r6, #1]
int8_t id = -1, ret = -1;
 800249a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800249e:	e091      	b.n	80025c4 <parseEvent+0x618>
 80024a0:	080130a8 	.word	0x080130a8
 80024a4:	20000ec4 	.word	0x20000ec4
 80024a8:	200076d0 	.word	0x200076d0
 80024ac:	080130b0 	.word	0x080130b0
 80024b0:	200003e5 	.word	0x200003e5
 80024b4:	20000018 	.word	0x20000018
 80024b8:	20000114 	.word	0x20000114
 80024bc:	40020400 	.word	0x40020400
			break;
		}
	} else {
#ifdef SET_SMS
		//-------------------- Блок обработки принятой смс -----------------------
		if (gf->sms) {
 80024c0:	7873      	ldrb	r3, [r6, #1]
 80024c2:	f013 0f20 	tst.w	r3, #32
 80024c6:	f000 80ad 	beq.w	8002624 <parseEvent+0x678>
			gf->sms = 0;
 80024ca:	7873      	ldrb	r3, [r6, #1]
 80024cc:	f36f 1345 	bfc	r3, #5, #1
 80024d0:	7073      	strb	r3, [r6, #1]
			//
			j = strlen(SMS_text);
 80024d2:	4875      	ldr	r0, [pc, #468]	; (80026a8 <parseEvent+0x6fc>)
 80024d4:	f7fd fe8e 	bl	80001f4 <strlen>
 80024d8:	4606      	mov	r6, r0
			i = strlen(in);
 80024da:	4628      	mov	r0, r5
 80024dc:	f7fd fe8a 	bl	80001f4 <strlen>
			if ((j + i + 2) < SMS_BUF_LEN) {
 80024e0:	1833      	adds	r3, r6, r0
 80024e2:	f240 227d 	movw	r2, #637	; 0x27d
 80024e6:	4293      	cmp	r3, r2
 80024e8:	f300 8095 	bgt.w	8002616 <parseEvent+0x66a>
				strcat(SMS_text, in);
 80024ec:	4e6e      	ldr	r6, [pc, #440]	; (80026a8 <parseEvent+0x6fc>)
 80024ee:	4629      	mov	r1, r5
 80024f0:	4630      	mov	r0, r6
 80024f2:	f00b ff9e 	bl	800e432 <strcat>
				strcat(SMS_text, eol);
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <parseEvent+0x700>)
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	4630      	mov	r0, r6
 80024fc:	f00b ff99 	bl	800e432 <strcat>
				memset(abcd, 0, sizeof(abcd));
 8002500:	4f6b      	ldr	r7, [pc, #428]	; (80026b0 <parseEvent+0x704>)
 8002502:	2500      	movs	r5, #0
 8002504:	603d      	str	r5, [r7, #0]
 8002506:	713d      	strb	r5, [r7, #4]
				memset(fromNum, 0, sizeof(fromNum));
 8002508:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80026e0 <parseEvent+0x734>
 800250c:	2220      	movs	r2, #32
 800250e:	4629      	mov	r1, r5
 8002510:	4640      	mov	r0, r8
 8002512:	f00b fc15 	bl	800dd40 <memset>
				sms_num = 0;
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <parseEvent+0x708>)
 8002518:	801d      	strh	r5, [r3, #0]
				// Преобразование смс из формата UCS2 в текстовый формат
				sms_len = conv_ucs2_text((uint8_t *)SMS_text, fromNum, abcd, 0);
 800251a:	462b      	mov	r3, r5
 800251c:	463a      	mov	r2, r7
 800251e:	4641      	mov	r1, r8
 8002520:	4630      	mov	r0, r6
 8002522:	f002 fe89 	bl	8005238 <conv_ucs2_text>
 8002526:	b283      	uxth	r3, r0
 8002528:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <parseEvent+0x70c>)
 800252a:	8013      	strh	r3, [r2, #0]
				if (sms_len > 0) {
 800252c:	2b00      	cmp	r3, #0
 800252e:	d049      	beq.n	80025c4 <parseEvent+0x618>
					Report(NULL, true, "[SMS] len=%u udhi=[%02X%02X%02X%02X%02X] from='%s' body:\r\n%.*s\r\n",
							sms_len, abcd[0], abcd[1], abcd[2], abcd[3], abcd[4], fromNum, sms_len, SMS_text);
 8002530:	463d      	mov	r5, r7
 8002532:	783a      	ldrb	r2, [r7, #0]
 8002534:	7879      	ldrb	r1, [r7, #1]
 8002536:	78b8      	ldrb	r0, [r7, #2]
 8002538:	78fe      	ldrb	r6, [r7, #3]
 800253a:	793f      	ldrb	r7, [r7, #4]
					Report(NULL, true, "[SMS] len=%u udhi=[%02X%02X%02X%02X%02X] from='%s' body:\r\n%.*s\r\n",
 800253c:	f8df c168 	ldr.w	ip, [pc, #360]	; 80026a8 <parseEvent+0x6fc>
 8002540:	f8cd c01c 	str.w	ip, [sp, #28]
 8002544:	9306      	str	r3, [sp, #24]
 8002546:	f8cd 8014 	str.w	r8, [sp, #20]
 800254a:	9704      	str	r7, [sp, #16]
 800254c:	9603      	str	r6, [sp, #12]
 800254e:	9002      	str	r0, [sp, #8]
 8002550:	9101      	str	r1, [sp, #4]
 8002552:	9200      	str	r2, [sp, #0]
 8002554:	4a59      	ldr	r2, [pc, #356]	; (80026bc <parseEvent+0x710>)
 8002556:	2101      	movs	r1, #1
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff fb3d 	bl	8001bd8 <Report>
					//
					if ((abcd[0] == 1) && abcd[3]) {//with_UDHI and total > 0
 800255e:	782b      	ldrb	r3, [r5, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d12f      	bne.n	80025c4 <parseEvent+0x618>
 8002564:	78ee      	ldrb	r6, [r5, #3]
 8002566:	b36e      	cbz	r6, 80025c4 <parseEvent+0x618>
						memset((uint8_t *)&reco, 0, sizeof(s_udhi_t));
 8002568:	4d55      	ldr	r5, [pc, #340]	; (80026c0 <parseEvent+0x714>)
 800256a:	22a4      	movs	r2, #164	; 0xa4
 800256c:	2100      	movs	r1, #0
 800256e:	4628      	mov	r0, r5
 8002570:	f00b fbe6 	bl	800dd40 <memset>
						memcpy((uint8_t *)&reco, abcd, sizeof(abcd));
 8002574:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <parseEvent+0x704>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f845 2c04 	str.w	r2, [r5, #-4]
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	702b      	strb	r3, [r5, #0]
						if (reco.total <= maxSMSPart) {
 8002580:	2e08      	cmp	r6, #8
 8002582:	d81f      	bhi.n	80025c4 <parseEvent+0x618>
							if (sms_len >= MaxBodyLen) sms_len = MaxBodyLen - 1;
 8002584:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <parseEvent+0x70c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	2ba0      	cmp	r3, #160	; 0xa0
 800258a:	d902      	bls.n	8002592 <parseEvent+0x5e6>
 800258c:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <parseEvent+0x70c>)
 800258e:	22a0      	movs	r2, #160	; 0xa0
 8002590:	801a      	strh	r2, [r3, #0]
							memcpy(reco.txt, SMS_text, sms_len);
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <parseEvent+0x70c>)
 8002594:	881e      	ldrh	r6, [r3, #0]
 8002596:	4d4b      	ldr	r5, [pc, #300]	; (80026c4 <parseEvent+0x718>)
 8002598:	4632      	mov	r2, r6
 800259a:	4943      	ldr	r1, [pc, #268]	; (80026a8 <parseEvent+0x6fc>)
 800259c:	4628      	mov	r0, r5
 800259e:	f00b fbc1 	bl	800dd24 <memcpy>
							reco.len = sms_len;
 80025a2:	f825 6c02 	strh.w	r6, [r5, #-2]
							if (PutSMSList(&reco) != 255) {
 80025a6:	1fe8      	subs	r0, r5, #7
 80025a8:	f002 fd40 	bl	800502c <PutSMSList>
 80025ac:	28ff      	cmp	r0, #255	; 0xff
 80025ae:	d009      	beq.n	80025c4 <parseEvent+0x618>
								if (!wait_sms) wait_sms = get_tmr(wait_sms_time);//set timer for wait all patrs recv.
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <parseEvent+0x71c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b153      	cbz	r3, 80025cc <parseEvent+0x620>
								if (LookAllPart(reco.total) == reco.total) {//all parts are present -> concat begin
 80025b6:	4d45      	ldr	r5, [pc, #276]	; (80026cc <parseEvent+0x720>)
 80025b8:	78e8      	ldrb	r0, [r5, #3]
 80025ba:	f002 fd4d 	bl	8005058 <LookAllPart>
 80025be:	78e9      	ldrb	r1, [r5, #3]
 80025c0:	4288      	cmp	r0, r1
 80025c2:	d009      	beq.n	80025d8 <parseEvent+0x62c>
		}
#endif
	}

	return ret;
}
 80025c4:	4620      	mov	r0, r4
 80025c6:	b008      	add	sp, #32
 80025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
								if (!wait_sms) wait_sms = get_tmr(wait_sms_time);//set timer for wait all patrs recv.
 80025cc:	20b4      	movs	r0, #180	; 0xb4
 80025ce:	f7ff f9ca 	bl	8001966 <get_tmr>
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <parseEvent+0x71c>)
 80025d4:	6018      	str	r0, [r3, #0]
 80025d6:	e7ee      	b.n	80025b6 <parseEvent+0x60a>
									*SMS_text = '\0';
 80025d8:	4833      	ldr	r0, [pc, #204]	; (80026a8 <parseEvent+0x6fc>)
 80025da:	2300      	movs	r3, #0
 80025dc:	7003      	strb	r3, [r0, #0]
									if (ConcatSMS(SMS_text, reco.total, &sms_num, &sms_len) == reco.total) {
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <parseEvent+0x70c>)
 80025e0:	4a34      	ldr	r2, [pc, #208]	; (80026b4 <parseEvent+0x708>)
 80025e2:	f002 fd55 	bl	8005090 <ConcatSMS>
 80025e6:	78eb      	ldrb	r3, [r5, #3]
 80025e8:	4298      	cmp	r0, r3
 80025ea:	d005      	beq.n	80025f8 <parseEvent+0x64c>
									InitSMSList();
 80025ec:	f002 fd14 	bl	8005018 <InitSMSList>
									wait_sms = 0;
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <parseEvent+0x71c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e7e5      	b.n	80025c4 <parseEvent+0x618>
										Report(NULL, true, "[SMS] Concat message #%u (len=%u parts=%u) done:\r\n%.*s\r\n",
 80025f8:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <parseEvent+0x70c>)
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	492a      	ldr	r1, [pc, #168]	; (80026a8 <parseEvent+0x6fc>)
 80025fe:	9103      	str	r1, [sp, #12]
 8002600:	9202      	str	r2, [sp, #8]
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <parseEvent+0x708>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <parseEvent+0x724>)
 800260c:	2101      	movs	r1, #1
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fae2 	bl	8001bd8 <Report>
 8002614:	e7ea      	b.n	80025ec <parseEvent+0x640>
			} else Report(NULL, true, "Too long string - %d bytes\r\n", j + i + 2);
 8002616:	3302      	adds	r3, #2
 8002618:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <parseEvent+0x728>)
 800261a:	2101      	movs	r1, #1
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fadb 	bl	8001bd8 <Report>
 8002622:	e7cf      	b.n	80025c4 <parseEvent+0x618>
		} else if (gf->rlist) {// добавляем в список частоты ФМ-радиостанций
 8002624:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002628:	d017      	beq.n	800265a <parseEvent+0x6ae>
			int dl = strlen(in);
 800262a:	4628      	mov	r0, r5
 800262c:	f7fd fde2 	bl	80001f4 <strlen>
			if ((dl >= 3) && (dl <= 4)) {
 8002630:	1ec3      	subs	r3, r0, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d8c6      	bhi.n	80025c4 <parseEvent+0x618>
				if (indList < MAX_FREQ_LIST) {
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <parseEvent+0x72c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b07      	cmp	r3, #7
 800263c:	d904      	bls.n	8002648 <parseEvent+0x69c>
				indList++;
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <parseEvent+0x72c>)
 8002640:	7813      	ldrb	r3, [r2, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	7013      	strb	r3, [r2, #0]
 8002646:	e7bd      	b.n	80025c4 <parseEvent+0x618>
					freqList[indList] = (uint16_t)atoi(in);
 8002648:	4628      	mov	r0, r5
 800264a:	f00b fa70 	bl	800db2e <atoi>
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <parseEvent+0x72c>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <parseEvent+0x730>)
 8002654:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
 8002658:	e7f1      	b.n	800263e <parseEvent+0x692>
		} else if (gf->sendOK) {
 800265a:	78f3      	ldrb	r3, [r6, #3]
 800265c:	f013 0f02 	tst.w	r3, #2
 8002660:	d0b0      	beq.n	80025c4 <parseEvent+0x618>
			if (strlen(in)) gf->ack = 1;
 8002662:	782b      	ldrb	r3, [r5, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ad      	beq.n	80025c4 <parseEvent+0x618>
 8002668:	78f3      	ldrb	r3, [r6, #3]
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	70f3      	strb	r3, [r6, #3]
 8002670:	e7a8      	b.n	80025c4 <parseEvent+0x618>
		uks = in + strlen(gsmEvent[id]);
 8002672:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002676:	e7a5      	b.n	80025c4 <parseEvent+0x618>
int8_t id = -1, ret = -1;
 8002678:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800267c:	e7a2      	b.n	80025c4 <parseEvent+0x618>
 800267e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002682:	e79f      	b.n	80025c4 <parseEvent+0x618>
 8002684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002688:	e79c      	b.n	80025c4 <parseEvent+0x618>
 800268a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800268e:	e799      	b.n	80025c4 <parseEvent+0x618>
 8002690:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002694:	e796      	b.n	80025c4 <parseEvent+0x618>
 8002696:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800269a:	e793      	b.n	80025c4 <parseEvent+0x618>
 800269c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026a0:	e790      	b.n	80025c4 <parseEvent+0x618>
 80026a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026a6:	e78d      	b.n	80025c4 <parseEvent+0x618>
 80026a8:	200076d0 	.word	0x200076d0
 80026ac:	20000018 	.word	0x20000018
 80026b0:	20001ee0 	.word	0x20001ee0
 80026b4:	20007a90 	.word	0x20007a90
 80026b8:	200076cc 	.word	0x200076cc
 80026bc:	080130b8 	.word	0x080130b8
 80026c0:	20007954 	.word	0x20007954
 80026c4:	20007957 	.word	0x20007957
 80026c8:	20000464 	.word	0x20000464
 80026cc:	20007950 	.word	0x20007950
 80026d0:	080130fc 	.word	0x080130fc
 80026d4:	08013138 	.word	0x08013138
 80026d8:	200003e6 	.word	0x200003e6
 80026dc:	200003e8 	.word	0x200003e8
 80026e0:	20001ee8 	.word	0x20001ee8

080026e4 <toUppers>:
//-----------------------------------------------------------------------------------------
//         Функция приводит к верхнему регистру все символы строки
//
void toUppers(char *st)
{
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4605      	mov	r5, r0
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 80026e8:	2400      	movs	r4, #0
 80026ea:	e001      	b.n	80026f0 <toUppers+0xc>
 80026ec:	700b      	strb	r3, [r1, #0]
 80026ee:	3401      	adds	r4, #1
 80026f0:	4628      	mov	r0, r5
 80026f2:	f7fd fd7f 	bl	80001f4 <strlen>
 80026f6:	42a0      	cmp	r0, r4
 80026f8:	d909      	bls.n	800270e <toUppers+0x2a>
 80026fa:	1929      	adds	r1, r5, r4
 80026fc:	5d2b      	ldrb	r3, [r5, r4]
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <toUppers+0x2c>)
 8002700:	5c9a      	ldrb	r2, [r3, r2]
 8002702:	f002 0203 	and.w	r2, r2, #3
 8002706:	2a02      	cmp	r2, #2
 8002708:	d1f0      	bne.n	80026ec <toUppers+0x8>
 800270a:	3b20      	subs	r3, #32
 800270c:	e7ee      	b.n	80026ec <toUppers+0x8>
}
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	08013a89 	.word	0x08013a89

08002714 <mkData>:
//   Функция формирует символьную строку с данными для передачи на сторонний сервер
//        			(значение температуры и данные геолокации)
//         			и возвращает длинну сформированной строки
//
uint16_t mkData(char *data)
{
 8002714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002716:	b083      	sub	sp, #12
 8002718:	4604      	mov	r4, r0
s_float_t flo = {0, 0};
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	9301      	str	r3, [sp, #4]
//"MsgType": "+CGNSINF",
	sprintf(data, "{\"DevName\":\"%s\",\"PackNumber\":%lu", dev_name, ++packNumber);
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <mkData+0x118>)
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4a41      	ldr	r2, [pc, #260]	; (8002830 <mkData+0x11c>)
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4941      	ldr	r1, [pc, #260]	; (8002834 <mkData+0x120>)
 800272e:	f00b fdef 	bl	800e310 <siprintf>
#ifdef SET_TEMP_SENSOR
	floatPart(temp, &flo); sprintf(data+strlen(data), ",\"temp\":%lu.%lu", flo.cel, flo.dro / 10000);
 8002732:	4668      	mov	r0, sp
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <mkData+0x124>)
 8002736:	ed93 0a00 	vldr	s0, [r3]
 800273a:	f7ff f8dd 	bl	80018f8 <floatPart>
 800273e:	4620      	mov	r0, r4
 8002740:	f7fd fd58 	bl	80001f4 <strlen>
 8002744:	4e3d      	ldr	r6, [pc, #244]	; (800283c <mkData+0x128>)
 8002746:	9b01      	ldr	r3, [sp, #4]
 8002748:	fba6 2303 	umull	r2, r3, r6, r3
 800274c:	0b5b      	lsrs	r3, r3, #13
 800274e:	9a00      	ldr	r2, [sp, #0]
 8002750:	493b      	ldr	r1, [pc, #236]	; (8002840 <mkData+0x12c>)
 8002752:	4420      	add	r0, r4
 8002754:	f00b fddc 	bl	800e310 <siprintf>
#endif
#ifdef SET_GPS
	floatPart(GPS.dec_latitude, &flo); sprintf(data+strlen(data),",\"lat\":%02lu.%04lu",  flo.cel, flo.dro / 100);
 8002758:	4d3a      	ldr	r5, [pc, #232]	; (8002844 <mkData+0x130>)
 800275a:	686b      	ldr	r3, [r5, #4]
 800275c:	ee00 3a10 	vmov	s0, r3
 8002760:	4668      	mov	r0, sp
 8002762:	f7ff f8c9 	bl	80018f8 <floatPart>
 8002766:	4620      	mov	r0, r4
 8002768:	f7fd fd44 	bl	80001f4 <strlen>
 800276c:	4f36      	ldr	r7, [pc, #216]	; (8002848 <mkData+0x134>)
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	fba7 2303 	umull	r2, r3, r7, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	9a00      	ldr	r2, [sp, #0]
 8002778:	4934      	ldr	r1, [pc, #208]	; (800284c <mkData+0x138>)
 800277a:	4420      	add	r0, r4
 800277c:	f00b fdc8 	bl	800e310 <siprintf>
	floatPart(GPS.dec_longitude,&flo); sprintf(data+strlen(data),",\"lon\":%02lu.%04lu", flo.cel, flo.dro / 100);
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	ee00 3a10 	vmov	s0, r3
 8002786:	4668      	mov	r0, sp
 8002788:	f7ff f8b6 	bl	80018f8 <floatPart>
 800278c:	4620      	mov	r0, r4
 800278e:	f7fd fd31 	bl	80001f4 <strlen>
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	fba7 2303 	umull	r2, r3, r7, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	9a00      	ldr	r2, [sp, #0]
 800279c:	492c      	ldr	r1, [pc, #176]	; (8002850 <mkData+0x13c>)
 800279e:	4420      	add	r0, r4
 80027a0:	f00b fdb6 	bl	800e310 <siprintf>
	floatPart(GPS.msl_altitude, &flo); sprintf(data+strlen(data),",\"sat\":%d,\"alt\":%lu", GPS.satelites, flo.cel);
 80027a4:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 80027a8:	ee00 3a10 	vmov	s0, r3
 80027ac:	4668      	mov	r0, sp
 80027ae:	f7ff f8a3 	bl	80018f8 <floatPart>
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7fd fd1e 	bl	80001f4 <strlen>
 80027b8:	9b00      	ldr	r3, [sp, #0]
 80027ba:	f8d5 201e 	ldr.w	r2, [r5, #30]
 80027be:	4925      	ldr	r1, [pc, #148]	; (8002854 <mkData+0x140>)
 80027c0:	4420      	add	r0, r4
 80027c2:	f00b fda5 	bl	800e310 <siprintf>
	floatPart(GPS.speed_k, &flo);      sprintf(data+strlen(data), ",\"spd\":%lu.%02lu", flo.cel, flo.dro/10000);
 80027c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80027c8:	ee00 3a10 	vmov	s0, r3
 80027cc:	4668      	mov	r0, sp
 80027ce:	f7ff f893 	bl	80018f8 <floatPart>
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7fd fd0e 	bl	80001f4 <strlen>
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	fba6 2303 	umull	r2, r3, r6, r3
 80027de:	0b5b      	lsrs	r3, r3, #13
 80027e0:	9a00      	ldr	r2, [sp, #0]
 80027e2:	491d      	ldr	r1, [pc, #116]	; (8002858 <mkData+0x144>)
 80027e4:	4420      	add	r0, r4
 80027e6:	f00b fd93 	bl	800e310 <siprintf>
	floatPart(GPS.course_d, &flo);     sprintf(data+strlen(data), ",\"dir\":%lu.%02lu", flo.cel, flo.dro/10000);
 80027ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027ec:	ee00 3a10 	vmov	s0, r3
 80027f0:	4668      	mov	r0, sp
 80027f2:	f7ff f881 	bl	80018f8 <floatPart>
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7fd fcfc 	bl	80001f4 <strlen>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	fba6 2303 	umull	r2, r3, r6, r3
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	9a00      	ldr	r2, [sp, #0]
 8002806:	4915      	ldr	r1, [pc, #84]	; (800285c <mkData+0x148>)
 8002808:	4420      	add	r0, r4
 800280a:	f00b fd81 	bl	800e310 <siprintf>
#endif
	sprintf(data+strlen(data), "}\r\n%c", CTRL_Z);
 800280e:	4620      	mov	r0, r4
 8002810:	f7fd fcf0 	bl	80001f4 <strlen>
 8002814:	221a      	movs	r2, #26
 8002816:	4912      	ldr	r1, [pc, #72]	; (8002860 <mkData+0x14c>)
 8002818:	4420      	add	r0, r4
 800281a:	f00b fd79 	bl	800e310 <siprintf>

	return (uint16_t)strlen(data);
 800281e:	4620      	mov	r0, r4
 8002820:	f7fd fce8 	bl	80001f4 <strlen>
}
 8002824:	b280      	uxth	r0, r0
 8002826:	b003      	add	sp, #12
 8002828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282a:	bf00      	nop
 800282c:	20001f08 	.word	0x20001f08
 8002830:	200000a0 	.word	0x200000a0
 8002834:	08013158 	.word	0x08013158
 8002838:	200003e0 	.word	0x200003e0
 800283c:	d1b71759 	.word	0xd1b71759
 8002840:	0801317c 	.word	0x0801317c
 8002844:	200079fc 	.word	0x200079fc
 8002848:	51eb851f 	.word	0x51eb851f
 800284c:	0801318c 	.word	0x0801318c
 8002850:	080131a0 	.word	0x080131a0
 8002854:	080131b4 	.word	0x080131b4
 8002858:	080131c8 	.word	0x080131c8
 800285c:	080131dc 	.word	0x080131dc
 8002860:	080131f0 	.word	0x080131f0

08002864 <parseACK>:
// Функция анализа данных от стороннего tcp сервера
//
void parseACK(char *buf)
{
	//Report(__func__, true, "%s%s", buf, eol);
}
 8002864:	4770      	bx	lr
	...

08002868 <findCmd>:
//-----------------------------------------------------------------------------------------
//          Функция поиска номера группа и индекса в группе для АТ команды
//  При успешном поиске возвращает адрес строки с ожидаемым ответом в противном случае NULL
//
const char *findCmd(char *buf, int8_t *grp, int8_t *cur)
{
 8002868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286c:	4607      	mov	r7, r0
 800286e:	468b      	mov	fp, r1
 8002870:	4692      	mov	sl, r2
int8_t i, k;
const char *adr = NULL;

	char *uk = strstr(buf, eol);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <findCmd+0x94>)
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	f00b fe25 	bl	800e4c4 <strstr>
	int len = uk ? uk - buf : strlen(buf);
 800287a:	b308      	cbz	r0, 80028c0 <findCmd+0x58>
 800287c:	eba0 0807 	sub.w	r8, r0, r7

	for (k = 0; k < MAX_CMD_INFO; k++) {
 8002880:	f04f 0900 	mov.w	r9, #0
 8002884:	f1b9 0f04 	cmp.w	r9, #4
 8002888:	dc36      	bgt.n	80028f8 <findCmd+0x90>
		adr = cmd_info[k].cmd;
 800288a:	464e      	mov	r6, r9
 800288c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <findCmd+0x98>)
 8002892:	f852 5013 	ldr.w	r5, [r2, r3, lsl #1]
		i = -1;
 8002896:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (++i < cmd_info[k].total) {
 800289a:	3401      	adds	r4, #1
 800289c:	b264      	sxtb	r4, r4
 800289e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <findCmd+0x98>)
 80028a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80028a8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	dd1e      	ble.n	80028ee <findCmd+0x86>
			if (!strncmp(buf, adr, len)) {
 80028b0:	4642      	mov	r2, r8
 80028b2:	4629      	mov	r1, r5
 80028b4:	4638      	mov	r0, r7
 80028b6:	f00b fde0 	bl	800e47a <strncmp>
 80028ba:	b130      	cbz	r0, 80028ca <findCmd+0x62>
				*grp = cmd_info[k].grp;
				*cur = i;
				return adr + (i * sizeof(ats_t)) + CMD_LEN;
			} else adr += sizeof(ats_t);
 80028bc:	3548      	adds	r5, #72	; 0x48
 80028be:	e7ec      	b.n	800289a <findCmd+0x32>
	int len = uk ? uk - buf : strlen(buf);
 80028c0:	4638      	mov	r0, r7
 80028c2:	f7fd fc97 	bl	80001f4 <strlen>
 80028c6:	4680      	mov	r8, r0
 80028c8:	e7da      	b.n	8002880 <findCmd+0x18>
				*grp = cmd_info[k].grp;
 80028ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <findCmd+0x98>)
 80028d0:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80028d4:	f996 3004 	ldrsb.w	r3, [r6, #4]
 80028d8:	f88b 3000 	strb.w	r3, [fp]
				*cur = i;
 80028dc:	f88a 4000 	strb.w	r4, [sl]
				return adr + (i * sizeof(ats_t)) + CMD_LEN;
 80028e0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80028e4:	00c0      	lsls	r0, r0, #3
 80028e6:	3028      	adds	r0, #40	; 0x28
 80028e8:	4428      	add	r0, r5
		}
	}

	return NULL;
}
 80028ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < MAX_CMD_INFO; k++) {
 80028ee:	f109 0901 	add.w	r9, r9, #1
 80028f2:	fa4f f989 	sxtb.w	r9, r9
 80028f6:	e7c5      	b.n	8002884 <findCmd+0x1c>
	return NULL;
 80028f8:	2000      	movs	r0, #0
 80028fa:	e7f6      	b.n	80028ea <findCmd+0x82>
 80028fc:	20000018 	.word	0x20000018
 8002900:	08012dec 	.word	0x08012dec

08002904 <gpsValidate>:

//-----------------------------------------------------------------------------
//  Функция проверяет на валидность строку на соответствие NMEA формату
//
int gpsValidate(char *str)
{
 8002904:	b538      	push	{r3, r4, r5, lr}
char check[3] = {0};
char calcCRCstr[3] = {0};
int i = 0;
int calcCRC = 0;

    if (str[i] != '$') return 0; else i++;
 8002906:	7803      	ldrb	r3, [r0, #0]
 8002908:	2b24      	cmp	r3, #36	; 0x24
 800290a:	d116      	bne.n	800293a <gpsValidate+0x36>
 800290c:	4605      	mov	r5, r0

    int8_t j = -1;
    for (int8_t k = 0; k < MAX_NMEA_MSG; k++) {
 800290e:	2400      	movs	r4, #0
 8002910:	2c01      	cmp	r4, #1
 8002912:	dc09      	bgt.n	8002928 <gpsValidate+0x24>
    	if (strstr(str, nmea[k])) {
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <gpsValidate+0x3c>)
 8002916:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800291a:	4628      	mov	r0, r5
 800291c:	f00b fdd2 	bl	800e4c4 <strstr>
 8002920:	b920      	cbnz	r0, 800292c <gpsValidate+0x28>
    for (int8_t k = 0; k < MAX_NMEA_MSG; k++) {
 8002922:	3401      	adds	r4, #1
 8002924:	b264      	sxtb	r4, r4
 8002926:	e7f3      	b.n	8002910 <gpsValidate+0xc>
    int8_t j = -1;
 8002928:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    		j = k;
    		break;
    	}
    }
    if (j == -1) return 0; else return 1;
 800292c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002930:	d001      	beq.n	8002936 <gpsValidate+0x32>
 8002932:	2001      	movs	r0, #1
 8002934:	e002      	b.n	800293c <gpsValidate+0x38>
 8002936:	2000      	movs	r0, #0
 8002938:	e000      	b.n	800293c <gpsValidate+0x38>
    if (str[i] != '$') return 0; else i++;
 800293a:	2000      	movs	r0, #0

        return ((calcCRCstr[0] == check[0]) && (calcCRCstr[1] == check[1])) ? 1 : 0 ;
    }

    return 0;
}
 800293c:	bd38      	pop	{r3, r4, r5, pc}
 800293e:	bf00      	nop
 8002940:	20000004 	.word	0x20000004

08002944 <gpsToDec>:
//-----------------------------------------------------------------------------
//            Пересчет данных геолокации в градусы
//
float gpsToDec(float deg, char nsew)
{
    int degree = (int)(deg / 100);
 8002944:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002984 <gpsToDec+0x40>
 8002948:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800294c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    float minutes = deg - degree * 100;
 8002950:	2364      	movs	r3, #100	; 0x64
 8002952:	ee17 2a90 	vmov	r2, s15
 8002956:	fb03 f302 	mul.w	r3, r3, r2
 800295a:	ee07 3a10 	vmov	s14, r3
 800295e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002962:	ee30 0a47 	vsub.f32	s0, s0, s14
    float dec_deg = minutes / 60;
 8002966:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002988 <gpsToDec+0x44>
 800296a:	ee80 7a26 	vdiv.f32	s14, s0, s13
    float decimal = degree + dec_deg;
 800296e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002972:	ee30 0a07 	vadd.f32	s0, s0, s14
    if (nsew == 'S' || nsew == 'W') decimal *= -1;
 8002976:	2853      	cmp	r0, #83	; 0x53
 8002978:	d001      	beq.n	800297e <gpsToDec+0x3a>
 800297a:	2857      	cmp	r0, #87	; 0x57
 800297c:	d101      	bne.n	8002982 <gpsToDec+0x3e>
 800297e:	eeb1 0a40 	vneg.f32	s0, s0

    return decimal;
}
 8002982:	4770      	bx	lr
 8002984:	42c80000 	.word	0x42c80000
 8002988:	42700000 	.word	0x42700000

0800298c <hexToBin>:
//
uint8_t hexToBin(char *sc)
{
char st = 0, ml = 0;

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 800298c:	7803      	ldrb	r3, [r0, #0]
 800298e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	2a09      	cmp	r2, #9
 8002996:	d907      	bls.n	80029a8 <hexToBin+0x1c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8002998:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	2a05      	cmp	r2, #5
 80029a0:	d816      	bhi.n	80029d0 <hexToBin+0x44>
 80029a2:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 80029a6:	b2d2      	uxtb	r2, r2
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 80029a8:	7841      	ldrb	r1, [r0, #1]
 80029aa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	d907      	bls.n	80029c4 <hexToBin+0x38>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 80029b4:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d813      	bhi.n	80029e6 <hexToBin+0x5a>
 80029be:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80029c2:	b2db      	uxtb	r3, r3
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);

	return ((st << 4) | (ml & 0x0f));
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	ea43 1002 	orr.w	r0, r3, r2, lsl #4

}
 80029cc:	b2c0      	uxtb	r0, r0
 80029ce:	4770      	bx	lr
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 80029d0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	2a05      	cmp	r2, #5
 80029d8:	d803      	bhi.n	80029e2 <hexToBin+0x56>
 80029da:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	e7e2      	b.n	80029a8 <hexToBin+0x1c>
char st = 0, ml = 0;
 80029e2:	2200      	movs	r2, #0
 80029e4:	e7e0      	b.n	80029a8 <hexToBin+0x1c>
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 80029e6:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d803      	bhi.n	80029f8 <hexToBin+0x6c>
 80029f0:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e7e5      	b.n	80029c4 <hexToBin+0x38>
char st = 0, ml = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e7e3      	b.n	80029c4 <hexToBin+0x38>

080029fc <gpsParse>:
//----------------------------------------------------------------------------- -u_scanf_float
//   Парсер валидных NMEA сообщений и заполнение структуры данными геолокации
//
bool gpsParse(char *str)
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b08b      	sub	sp, #44	; 0x2c
 8002a00:	4605      	mov	r5, r0
bool ret = false;
int8_t idx = -1;

	for (int8_t i = 0; i < MAX_NMEA_MSG; i++) {
 8002a02:	2400      	movs	r4, #0
 8002a04:	2c01      	cmp	r4, #1
 8002a06:	dc0a      	bgt.n	8002a1e <gpsParse+0x22>
		if (!strncmp(str, nmea[i], NMEA_TYPE_LEN)) {
 8002a08:	2206      	movs	r2, #6
 8002a0a:	4b55      	ldr	r3, [pc, #340]	; (8002b60 <gpsParse+0x164>)
 8002a0c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002a10:	4628      	mov	r0, r5
 8002a12:	f00b fd32 	bl	800e47a <strncmp>
 8002a16:	b120      	cbz	r0, 8002a22 <gpsParse+0x26>
	for (int8_t i = 0; i < MAX_NMEA_MSG; i++) {
 8002a18:	3401      	adds	r4, #1
 8002a1a:	b264      	sxtb	r4, r4
 8002a1c:	e7f2      	b.n	8002a04 <gpsParse+0x8>
int8_t idx = -1;
 8002a1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			idx = i;
			break;
		}
	}

	if (idx == -1) return ret;
 8002a22:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002a26:	f000 8094 	beq.w	8002b52 <gpsParse+0x156>

	//  Подсчет контрольной суммы NMEA сообщения
	char sc[2] = {0};
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	uint8_t crc_in = 255, crc_calc = 0;
	char *uk = strchr(str, '*');
 8002a30:	212a      	movs	r1, #42	; 0x2a
 8002a32:	4628      	mov	r0, r5
 8002a34:	f00b fd0c 	bl	800e450 <strchr>
	if (uk) {
 8002a38:	4606      	mov	r6, r0
 8002a3a:	b1d0      	cbz	r0, 8002a72 <gpsParse+0x76>
		memcpy(sc, uk + 1, 2);
 8002a3c:	f8b0 3001 	ldrh.w	r3, [r0, #1]
 8002a40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		crc_in = hexToBin(sc);
 8002a44:	a809      	add	r0, sp, #36	; 0x24
 8002a46:	f7ff ffa1 	bl	800298c <hexToBin>
 8002a4a:	4607      	mov	r7, r0
		char *us = strchr(str, '$');
 8002a4c:	2124      	movs	r1, #36	; 0x24
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f00b fcfe 	bl	800e450 <strchr>
		if (us) {
 8002a54:	4603      	mov	r3, r0
 8002a56:	b1c0      	cbz	r0, 8002a8a <gpsParse+0x8e>
			us++;
 8002a58:	3301      	adds	r3, #1
			if (uk > us) {
 8002a5a:	429e      	cmp	r6, r3
 8002a5c:	d807      	bhi.n	8002a6e <gpsParse+0x72>
	uint8_t crc_in = 255, crc_calc = 0;
 8002a5e:	2200      	movs	r2, #0
 8002a60:	e009      	b.n	8002a76 <gpsParse+0x7a>
				while(us < uk) crc_calc ^= *us++;
 8002a62:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002a66:	404a      	eors	r2, r1
 8002a68:	42b3      	cmp	r3, r6
 8002a6a:	d3fa      	bcc.n	8002a62 <gpsParse+0x66>
 8002a6c:	e003      	b.n	8002a76 <gpsParse+0x7a>
	uint8_t crc_in = 255, crc_calc = 0;
 8002a6e:	2200      	movs	r2, #0
 8002a70:	e7fa      	b.n	8002a68 <gpsParse+0x6c>
 8002a72:	2200      	movs	r2, #0
 8002a74:	27ff      	movs	r7, #255	; 0xff
			}
		}
	}
	//  Проверка контрольной суммы
	if (crc_in != crc_calc) {
 8002a76:	4297      	cmp	r7, r2
 8002a78:	d009      	beq.n	8002a8e <gpsParse+0x92>
		devError |= devCRC;
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	; (8002b64 <gpsParse+0x168>)
 8002a7c:	7813      	ldrb	r3, [r2, #0]
 8002a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a82:	7013      	strb	r3, [r2, #0]
		return ret;
 8002a84:	2000      	movs	r0, #0
					&GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1) ret = true;
		break;*/
	}

    return ret;
}
 8002a86:	b00b      	add	sp, #44	; 0x2c
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t crc_in = 255, crc_calc = 0;
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	e7f3      	b.n	8002a76 <gpsParse+0x7a>
		if (devError & devCRC) devError &= ~devCRC;
 8002a8e:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <gpsParse+0x168>)
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	f993 3000 	ldrsb.w	r3, [r3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db04      	blt.n	8002aa4 <gpsParse+0xa8>
	switch (idx) {
 8002a9a:	b144      	cbz	r4, 8002aae <gpsParse+0xb2>
 8002a9c:	2c01      	cmp	r4, #1
 8002a9e:	d027      	beq.n	8002af0 <gpsParse+0xf4>
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e7f0      	b.n	8002a86 <gpsParse+0x8a>
		if (devError & devCRC) devError &= ~devCRC;
 8002aa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <gpsParse+0x168>)
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e7f5      	b.n	8002a9a <gpsParse+0x9e>
			if (sscanf(str, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8002aae:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <gpsParse+0x16c>)
 8002ab0:	f103 021a 	add.w	r2, r3, #26
 8002ab4:	9207      	str	r2, [sp, #28]
 8002ab6:	f103 0216 	add.w	r2, r3, #22
 8002aba:	9206      	str	r2, [sp, #24]
 8002abc:	f103 0212 	add.w	r2, r3, #18
 8002ac0:	9205      	str	r2, [sp, #20]
 8002ac2:	f103 020e 	add.w	r2, r3, #14
 8002ac6:	9204      	str	r2, [sp, #16]
 8002ac8:	f103 020a 	add.w	r2, r3, #10
 8002acc:	9203      	str	r2, [sp, #12]
 8002ace:	f103 0209 	add.w	r2, r3, #9
 8002ad2:	9202      	str	r2, [sp, #8]
 8002ad4:	1f1a      	subs	r2, r3, #4
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	f103 0208 	add.w	r2, r3, #8
 8002adc:	9200      	str	r2, [sp, #0]
 8002ade:	1d1a      	adds	r2, r3, #4
 8002ae0:	4922      	ldr	r1, [pc, #136]	; (8002b6c <gpsParse+0x170>)
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f00b fc34 	bl	800e350 <siscanf>
 8002ae8:	2808      	cmp	r0, #8
 8002aea:	dc34      	bgt.n	8002b56 <gpsParse+0x15a>
bool ret = false;
 8002aec:	2000      	movs	r0, #0
 8002aee:	e7ca      	b.n	8002a86 <gpsParse+0x8a>
			if (sscanf(str, "$GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d",
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <gpsParse+0x174>)
 8002af2:	f103 0209 	add.w	r2, r3, #9
 8002af6:	9206      	str	r2, [sp, #24]
 8002af8:	1d5a      	adds	r2, r3, #5
 8002afa:	9205      	str	r2, [sp, #20]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	9204      	str	r2, [sp, #16]
 8002b00:	f1a3 0212 	sub.w	r2, r3, #18
 8002b04:	9203      	str	r2, [sp, #12]
 8002b06:	f1a3 021f 	sub.w	r2, r3, #31
 8002b0a:	9202      	str	r2, [sp, #8]
 8002b0c:	f1a3 0213 	sub.w	r2, r3, #19
 8002b10:	9201      	str	r2, [sp, #4]
 8002b12:	f1a3 021b 	sub.w	r2, r3, #27
 8002b16:	9200      	str	r2, [sp, #0]
 8002b18:	f1a3 0217 	sub.w	r2, r3, #23
 8002b1c:	4915      	ldr	r1, [pc, #84]	; (8002b74 <gpsParse+0x178>)
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f00b fc16 	bl	800e350 <siscanf>
 8002b24:	2808      	cmp	r0, #8
 8002b26:	dd18      	ble.n	8002b5a <gpsParse+0x15e>
					GPS.dec_latitude  = gpsToDec(GPS.nmea_latitude,  GPS.ns);
 8002b28:	4c13      	ldr	r4, [pc, #76]	; (8002b78 <gpsParse+0x17c>)
 8002b2a:	6923      	ldr	r3, [r4, #16]
 8002b2c:	ee00 3a10 	vmov	s0, r3
 8002b30:	7e20      	ldrb	r0, [r4, #24]
 8002b32:	f7ff ff07 	bl	8002944 <gpsToDec>
 8002b36:	ee10 3a10 	vmov	r3, s0
 8002b3a:	6063      	str	r3, [r4, #4]
					GPS.dec_longitude = gpsToDec(GPS.nmea_longitude, GPS.ew);
 8002b3c:	68e3      	ldr	r3, [r4, #12]
 8002b3e:	ee00 3a10 	vmov	s0, r3
 8002b42:	7e60      	ldrb	r0, [r4, #25]
 8002b44:	f7ff fefe 	bl	8002944 <gpsToDec>
 8002b48:	ee10 3a10 	vmov	r3, s0
 8002b4c:	6023      	str	r3, [r4, #0]
					ret = true;
 8002b4e:	2001      	movs	r0, #1
 8002b50:	e799      	b.n	8002a86 <gpsParse+0x8a>
	if (idx == -1) return ret;
 8002b52:	2000      	movs	r0, #0
 8002b54:	e797      	b.n	8002a86 <gpsParse+0x8a>
    					ret = true;
 8002b56:	2001      	movs	r0, #1
 8002b58:	e795      	b.n	8002a86 <gpsParse+0x8a>
bool ret = false;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	e793      	b.n	8002a86 <gpsParse+0x8a>
 8002b5e:	bf00      	nop
 8002b60:	20000004 	.word	0x20000004
 8002b64:	200003e5 	.word	0x200003e5
 8002b68:	20007a0c 	.word	0x20007a0c
 8002b6c:	080131f8 	.word	0x080131f8
 8002b70:	20007a27 	.word	0x20007a27
 8002b74:	08013220 	.word	0x08013220
 8002b78:	200079fc 	.word	0x200079fc

08002b7c <gpsPrint>:
//-----------------------------------------------------------------------------
//        Функция формирует символьную строку с данными геолокации
// с использованием функции разделения целой и дробной частей числа типа float
//
char *gpsPrint(char *str)
{
 8002b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b80:	b088      	sub	sp, #32
	if (str) {
 8002b82:	4604      	mov	r4, r0
 8002b84:	2800      	cmp	r0, #0
 8002b86:	f000 8091 	beq.w	8002cac <gpsPrint+0x130>
#ifdef SET_FLOAT_PART
		s_float_t flo = {0,0};
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	9305      	str	r3, [sp, #20]
		char tmp[8] = {0};
 8002b90:	9306      	str	r3, [sp, #24]
 8002b92:	9307      	str	r3, [sp, #28]
		sprintf(tmp, "%06d", GPS.date);
 8002b94:	4d47      	ldr	r5, [pc, #284]	; (8002cb4 <gpsPrint+0x138>)
 8002b96:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002b98:	4947      	ldr	r1, [pc, #284]	; (8002cb8 <gpsPrint+0x13c>)
 8002b9a:	a806      	add	r0, sp, #24
 8002b9c:	f00b fbb8 	bl	800e310 <siprintf>
		sprintf(str, "date:%.*s/%.*s/%.*s", 2, &tmp[0], 2, &tmp[2], 2, &tmp[4]);
 8002ba0:	af07      	add	r7, sp, #28
 8002ba2:	9703      	str	r7, [sp, #12]
 8002ba4:	f04f 0802 	mov.w	r8, #2
 8002ba8:	f8cd 8008 	str.w	r8, [sp, #8]
 8002bac:	f10d 061a 	add.w	r6, sp, #26
 8002bb0:	9601      	str	r6, [sp, #4]
 8002bb2:	f8cd 8000 	str.w	r8, [sp]
 8002bb6:	ab06      	add	r3, sp, #24
 8002bb8:	4642      	mov	r2, r8
 8002bba:	4940      	ldr	r1, [pc, #256]	; (8002cbc <gpsPrint+0x140>)
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f00b fba7 	bl	800e310 <siprintf>
		floatPart(GPS.utc_time, &flo); sprintf(tmp, "%06lu", flo.cel);
 8002bc2:	696b      	ldr	r3, [r5, #20]
 8002bc4:	ee00 3a10 	vmov	s0, r3
 8002bc8:	a804      	add	r0, sp, #16
 8002bca:	f7fe fe95 	bl	80018f8 <floatPart>
 8002bce:	9a04      	ldr	r2, [sp, #16]
 8002bd0:	493b      	ldr	r1, [pc, #236]	; (8002cc0 <gpsPrint+0x144>)
 8002bd2:	a806      	add	r0, sp, #24
 8002bd4:	f00b fb9c 	bl	800e310 <siprintf>
		sprintf(str+strlen(str), " time:%.*s:%.*s:%.*s", 2, &tmp[0], 2, &tmp[2], 2, &tmp[4]);
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fd fb0b 	bl	80001f4 <strlen>
 8002bde:	9703      	str	r7, [sp, #12]
 8002be0:	f8cd 8008 	str.w	r8, [sp, #8]
 8002be4:	9601      	str	r6, [sp, #4]
 8002be6:	f8cd 8000 	str.w	r8, [sp]
 8002bea:	ab06      	add	r3, sp, #24
 8002bec:	4642      	mov	r2, r8
 8002bee:	4935      	ldr	r1, [pc, #212]	; (8002cc4 <gpsPrint+0x148>)
 8002bf0:	4420      	add	r0, r4
 8002bf2:	f00b fb8d 	bl	800e310 <siprintf>
		floatPart(GPS.dec_latitude, &flo);  sprintf(str+strlen(str), " lat:%lu.%lu", flo.cel, flo.dro);
 8002bf6:	686b      	ldr	r3, [r5, #4]
 8002bf8:	ee00 3a10 	vmov	s0, r3
 8002bfc:	a804      	add	r0, sp, #16
 8002bfe:	f7fe fe7b 	bl	80018f8 <floatPart>
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7fd faf6 	bl	80001f4 <strlen>
 8002c08:	9b05      	ldr	r3, [sp, #20]
 8002c0a:	9a04      	ldr	r2, [sp, #16]
 8002c0c:	492e      	ldr	r1, [pc, #184]	; (8002cc8 <gpsPrint+0x14c>)
 8002c0e:	4420      	add	r0, r4
 8002c10:	f00b fb7e 	bl	800e310 <siprintf>
		floatPart(GPS.dec_longitude, &flo); sprintf(str+strlen(str), " lon:%lu.%lu sat:%d", flo.cel, flo.dro, GPS.satelites);
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	ee00 3a10 	vmov	s0, r3
 8002c1a:	a804      	add	r0, sp, #16
 8002c1c:	f7fe fe6c 	bl	80018f8 <floatPart>
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7fd fae7 	bl	80001f4 <strlen>
 8002c26:	f8d5 301e 	ldr.w	r3, [r5, #30]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	9b05      	ldr	r3, [sp, #20]
 8002c2e:	9a04      	ldr	r2, [sp, #16]
 8002c30:	4926      	ldr	r1, [pc, #152]	; (8002ccc <gpsPrint+0x150>)
 8002c32:	4420      	add	r0, r4
 8002c34:	f00b fb6c 	bl	800e310 <siprintf>
		floatPart(GPS.msl_altitude, &flo);  sprintf(str+strlen(str), " alt:%lu.%01lu", flo.cel, flo.dro/100000);
 8002c38:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 8002c3c:	ee00 3a10 	vmov	s0, r3
 8002c40:	a804      	add	r0, sp, #16
 8002c42:	f7fe fe59 	bl	80018f8 <floatPart>
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fd fad4 	bl	80001f4 <strlen>
 8002c4c:	9b05      	ldr	r3, [sp, #20]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <gpsPrint+0x154>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	9a04      	ldr	r2, [sp, #16]
 8002c5a:	491e      	ldr	r1, [pc, #120]	; (8002cd4 <gpsPrint+0x158>)
 8002c5c:	4420      	add	r0, r4
 8002c5e:	f00b fb57 	bl	800e310 <siprintf>
		floatPart(GPS.speed_k, &flo);       sprintf(str+strlen(str), " spd:%lu.%02lu", flo.cel, flo.dro/10000);
 8002c62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002c64:	ee00 3a10 	vmov	s0, r3
 8002c68:	a804      	add	r0, sp, #16
 8002c6a:	f7fe fe45 	bl	80018f8 <floatPart>
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7fd fac0 	bl	80001f4 <strlen>
 8002c74:	4e18      	ldr	r6, [pc, #96]	; (8002cd8 <gpsPrint+0x15c>)
 8002c76:	9b05      	ldr	r3, [sp, #20]
 8002c78:	fba6 2303 	umull	r2, r3, r6, r3
 8002c7c:	0b5b      	lsrs	r3, r3, #13
 8002c7e:	9a04      	ldr	r2, [sp, #16]
 8002c80:	4916      	ldr	r1, [pc, #88]	; (8002cdc <gpsPrint+0x160>)
 8002c82:	4420      	add	r0, r4
 8002c84:	f00b fb44 	bl	800e310 <siprintf>
		floatPart(GPS.course_d, &flo);      sprintf(str+strlen(str), " dir:%lu.%02lu", flo.cel, flo.dro/10000);
 8002c88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c8a:	ee00 3a10 	vmov	s0, r3
 8002c8e:	a804      	add	r0, sp, #16
 8002c90:	f7fe fe32 	bl	80018f8 <floatPart>
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7fd faad 	bl	80001f4 <strlen>
 8002c9a:	9b05      	ldr	r3, [sp, #20]
 8002c9c:	fba6 2303 	umull	r2, r3, r6, r3
 8002ca0:	0b5b      	lsrs	r3, r3, #13
 8002ca2:	9a04      	ldr	r2, [sp, #16]
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <gpsPrint+0x164>)
 8002ca6:	4420      	add	r0, r4
 8002ca8:	f00b fb32 	bl	800e310 <siprintf>
				GPS.satelites, GPS.msl_altitude, GPS.speed_km, GPS.course_m);
#endif
	}

	return str;
}
 8002cac:	4620      	mov	r0, r4
 8002cae:	b008      	add	sp, #32
 8002cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb4:	200079fc 	.word	0x200079fc
 8002cb8:	08013244 	.word	0x08013244
 8002cbc:	0801324c 	.word	0x0801324c
 8002cc0:	08013260 	.word	0x08013260
 8002cc4:	08013268 	.word	0x08013268
 8002cc8:	08013280 	.word	0x08013280
 8002ccc:	08013290 	.word	0x08013290
 8002cd0:	0a7c5ac5 	.word	0x0a7c5ac5
 8002cd4:	080132a4 	.word	0x080132a4
 8002cd8:	d1b71759 	.word	0xd1b71759
 8002cdc:	080132b4 	.word	0x080132b4
 8002ce0:	080132c4 	.word	0x080132c4

08002ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	2400      	movs	r4, #0
 8002cea:	9405      	str	r4, [sp, #20]
 8002cec:	9406      	str	r4, [sp, #24]
 8002cee:	9407      	str	r4, [sp, #28]
 8002cf0:	9408      	str	r4, [sp, #32]
 8002cf2:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf4:	9401      	str	r4, [sp, #4]
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <MX_GPIO_Init+0xd0>)
 8002cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfa:	f042 0204 	orr.w	r2, r2, #4
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8002d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d02:	f002 0204 	and.w	r2, r2, #4
 8002d06:	9201      	str	r2, [sp, #4]
 8002d08:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0a:	9402      	str	r4, [sp, #8]
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002d1a:	9202      	str	r2, [sp, #8]
 8002d1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	9403      	str	r4, [sp, #12]
 8002d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
 8002d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2a:	f002 0201 	and.w	r2, r2, #1
 8002d2e:	9203      	str	r2, [sp, #12]
 8002d30:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	9404      	str	r4, [sp, #16]
 8002d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d36:	f042 0202 	orr.w	r2, r2, #2
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	9304      	str	r3, [sp, #16]
 8002d44:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002d46:	4f1c      	ldr	r7, [pc, #112]	; (8002db8 <MX_GPIO_Init+0xd4>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	f004 fd36 	bl	80077be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ERROR_Pin|LED_Pin|CON_LED_Pin, GPIO_PIN_RESET);
 8002d52:	4d1a      	ldr	r5, [pc, #104]	; (8002dbc <MX_GPIO_Init+0xd8>)
 8002d54:	4622      	mov	r2, r4
 8002d56:	f240 6101 	movw	r1, #1537	; 0x601
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f004 fd2f 	bl	80077be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 8002d60:	2201      	movs	r2, #1
 8002d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d66:	4628      	mov	r0, r5
 8002d68:	f004 fd29 	bl	80077be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2601      	movs	r6, #1
 8002d72:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d74:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	a905      	add	r1, sp, #20
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	f004 fc43 	bl	8007608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ERROR_Pin LED_Pin CON_LED_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_Pin|CON_LED_Pin;
 8002d82:	f240 6301 	movw	r3, #1537	; 0x601
 8002d86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d88:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	a905      	add	r1, sp, #20
 8002d90:	4628      	mov	r0, r5
 8002d92:	f004 fc39 	bl	8007608 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8002d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d9c:	2311      	movs	r3, #17
 8002d9e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da2:	2302      	movs	r3, #2
 8002da4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8002da6:	a905      	add	r1, sp, #20
 8002da8:	4628      	mov	r0, r5
 8002daa:	f004 fc2d 	bl	8007608 <HAL_GPIO_Init>

}
 8002dae:	b00b      	add	sp, #44	; 0x2c
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020400 	.word	0x40020400

08002dc0 <MX_DMA_Init>:
{
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dc4:	2400      	movs	r4, #0
 8002dc6:	9400      	str	r4, [sp, #0]
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_DMA_Init+0x84>)
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002dd8:	9200      	str	r2, [sp, #0]
 8002dda:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ddc:	9401      	str	r4, [sp, #4]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8002df0:	4622      	mov	r2, r4
 8002df2:	2103      	movs	r1, #3
 8002df4:	2011      	movs	r0, #17
 8002df6:	f004 f9a3 	bl	8007140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002dfa:	2011      	movs	r0, #17
 8002dfc:	f004 f9d4 	bl	80071a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002e00:	4622      	mov	r2, r4
 8002e02:	2105      	movs	r1, #5
 8002e04:	202f      	movs	r0, #47	; 0x2f
 8002e06:	f004 f99b 	bl	8007140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002e0a:	202f      	movs	r0, #47	; 0x2f
 8002e0c:	f004 f9cc 	bl	80071a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8002e10:	4622      	mov	r2, r4
 8002e12:	2102      	movs	r1, #2
 8002e14:	2038      	movs	r0, #56	; 0x38
 8002e16:	f004 f993 	bl	8007140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e1a:	2038      	movs	r0, #56	; 0x38
 8002e1c:	f004 f9c4 	bl	80071a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8002e20:	4622      	mov	r2, r4
 8002e22:	2102      	movs	r1, #2
 8002e24:	203b      	movs	r0, #59	; 0x3b
 8002e26:	f004 f98b 	bl	8007140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002e2a:	203b      	movs	r0, #59	; 0x3b
 8002e2c:	f004 f9bc 	bl	80071a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8002e30:	4622      	mov	r2, r4
 8002e32:	2104      	movs	r1, #4
 8002e34:	2046      	movs	r0, #70	; 0x46
 8002e36:	f004 f983 	bl	8007140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e3a:	2046      	movs	r0, #70	; 0x46
 8002e3c:	f004 f9b4 	bl	80071a8 <HAL_NVIC_EnableIRQ>
}
 8002e40:	b002      	add	sp, #8
 8002e42:	bd10      	pop	{r4, pc}
 8002e44:	40023800 	.word	0x40023800

08002e48 <StartTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemp */
void StartTemp(void *argument)
{
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//---------------------------------------------------------------------

#ifdef SET_TEMP_SENSOR
  /* Infinite loop */

	Report(__func__, true, "Start sensor thread...(%lu)\r\n", xPortGetFreeHeapSize());
 8002e4a:	f00a fe41 	bl	800dad0 <xPortGetFreeHeapSize>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4a60      	ldr	r2, [pc, #384]	; (8002fd4 <StartTemp+0x18c>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	4860      	ldr	r0, [pc, #384]	; (8002fd8 <StartTemp+0x190>)
 8002e56:	f7fe febf 	bl	8001bd8 <Report>

	uint8_t	Ds18b20TryToFind = 5;
 8002e5a:	2405      	movs	r4, #5
 8002e5c:	e033      	b.n	8002ec6 <StartTemp+0x7e>
	do
	{
		OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin);
		TempSensorCount = 0;

		while (HAL_GetTick() < 3000) Ds18b20Delay(50);
 8002e5e:	2032      	movs	r0, #50	; 0x32
 8002e60:	f008 fb78 	bl	800b554 <osDelay>
 8002e64:	f004 f940 	bl	80070e8 <HAL_GetTick>
 8002e68:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002e6c:	4298      	cmp	r0, r3
 8002e6e:	d9f6      	bls.n	8002e5e <StartTemp+0x16>

		OneWireDevices = OneWire_First(&OneWire);
 8002e70:	485a      	ldr	r0, [pc, #360]	; (8002fdc <StartTemp+0x194>)
 8002e72:	f7fe fa95 	bl	80013a0 <OneWire_First>
 8002e76:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <StartTemp+0x198>)
 8002e78:	7018      	strb	r0, [r3, #0]
		while (OneWireDevices) {
 8002e7a:	e017      	b.n	8002eac <StartTemp+0x64>
			Ds18b20Delay(100);
 8002e7c:	2064      	movs	r0, #100	; 0x64
 8002e7e:	f008 fb69 	bl	800b554 <osDelay>
			TempSensorCount++;
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <StartTemp+0x19c>)
 8002e84:	7813      	ldrb	r3, [r2, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	7013      	strb	r3, [r2, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount - 1].Address);
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002e92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002e96:	4d51      	ldr	r5, [pc, #324]	; (8002fdc <StartTemp+0x194>)
 8002e98:	4953      	ldr	r1, [pc, #332]	; (8002fe8 <StartTemp+0x1a0>)
 8002e9a:	4419      	add	r1, r3
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f7fe fa9e 	bl	80013de <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f7fe fa85 	bl	80013b2 <OneWire_Next>
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <StartTemp+0x198>)
 8002eaa:	7018      	strb	r0, [r3, #0]
		while (OneWireDevices) {
 8002eac:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <StartTemp+0x198>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e3      	bne.n	8002e7c <StartTemp+0x34>
		}
		if (TempSensorCount > 0) break;
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <StartTemp+0x19c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b97b      	cbnz	r3, 8002eda <StartTemp+0x92>
		Ds18b20TryToFind--;
 8002eba:	3c01      	subs	r4, #1
 8002ebc:	b2e4      	uxtb	r4, r4

		if (restart_flag) break;
 8002ebe:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <StartTemp+0x1a4>)
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	b952      	cbnz	r2, 8002eda <StartTemp+0x92>

	} while (Ds18b20TryToFind > 0);
 8002ec4:	b14c      	cbz	r4, 8002eda <StartTemp+0x92>
		OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin);
 8002ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eca:	4949      	ldr	r1, [pc, #292]	; (8002ff0 <StartTemp+0x1a8>)
 8002ecc:	4843      	ldr	r0, [pc, #268]	; (8002fdc <StartTemp+0x194>)
 8002ece:	f7fe f903 	bl	80010d8 <OneWire_Init>
		TempSensorCount = 0;
 8002ed2:	4b44      	ldr	r3, [pc, #272]	; (8002fe4 <StartTemp+0x19c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
		while (HAL_GetTick() < 3000) Ds18b20Delay(50);
 8002ed8:	e7c4      	b.n	8002e64 <StartTemp+0x1c>
	//--------------------------------------------------------------


	if (TempSensorCount > 0) sensPresent = true;//  Датчик обнаружен !!!
 8002eda:	b113      	cbz	r3, 8002ee2 <StartTemp+0x9a>
 8002edc:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <StartTemp+0x1ac>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]


	//  Цикл чтения данных и преобразования значения температуры в градусы Цельсия
	while (!restart_flag && sensPresent) {//Ds18b20TryToFind)
 8002ee2:	4b42      	ldr	r3, [pc, #264]	; (8002fec <StartTemp+0x1a4>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8002eea:	b913      	cbnz	r3, 8002ef2 <StartTemp+0xaa>
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <StartTemp+0x1ac>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b9f3      	cbnz	r3, 8002f30 <StartTemp+0xe8>
	}

#endif


  	osThreadExit();
 8002ef2:	f008 fb29 	bl	800b548 <osThreadExit>
			osDelay(50);
 8002ef6:	2032      	movs	r0, #50	; 0x32
 8002ef8:	f008 fb2c 	bl	800b554 <osDelay>
			DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002efc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8002f00:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <StartTemp+0x1a0>)
 8002f06:	441e      	add	r6, r3
 8002f08:	4f34      	ldr	r7, [pc, #208]	; (8002fdc <StartTemp+0x194>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	4631      	mov	r1, r6
 8002f0e:	4638      	mov	r0, r7
 8002f10:	f7fe fb9a 	bl	8001648 <DS18B20_SetResolution>
			osDelay(50);
 8002f14:	2032      	movs	r0, #50	; 0x32
 8002f16:	f008 fb1d 	bl	800b554 <osDelay>
			DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	f7fe fc3f 	bl	80017a0 <DS18B20_DisableAlarmTemperature>
		for (uint8_t i = 0; i < TempSensorCount; i++) {
 8002f22:	3401      	adds	r4, #1
 8002f24:	b2e4      	uxtb	r4, r4
 8002f26:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <StartTemp+0x19c>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	d8e3      	bhi.n	8002ef6 <StartTemp+0xae>
 8002f2e:	e025      	b.n	8002f7c <StartTemp+0x134>
 8002f30:	462c      	mov	r4, r5
 8002f32:	e7f8      	b.n	8002f26 <StartTemp+0xde>
				for (uint8_t i = 0; i < TempSensorCount; i++) {
 8002f34:	462c      	mov	r4, r5
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <StartTemp+0x19c>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	42a3      	cmp	r3, r4
 8002f3c:	d913      	bls.n	8002f66 <StartTemp+0x11e>
					osDelay(1000);
 8002f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f42:	f008 fb07 	bl	800b554 <osDelay>
					ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002f46:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002f4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002f4e:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <StartTemp+0x1a0>)
 8002f50:	189e      	adds	r6, r3, r2
 8002f52:	3308      	adds	r3, #8
 8002f54:	441a      	add	r2, r3
 8002f56:	4631      	mov	r1, r6
 8002f58:	4820      	ldr	r0, [pc, #128]	; (8002fdc <StartTemp+0x194>)
 8002f5a:	f7fe fa93 	bl	8001484 <DS18B20_Read>
 8002f5e:	7330      	strb	r0, [r6, #12]
				for (uint8_t i = 0; i < TempSensorCount; i++) {
 8002f60:	3401      	adds	r4, #1
 8002f62:	b2e4      	uxtb	r4, r4
 8002f64:	e7e7      	b.n	8002f36 <StartTemp+0xee>
			fTemp = ds18b20[0].Temperature;// Глобальная переменная для хранения значения температуры !!!
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <StartTemp+0x1a0>)
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <StartTemp+0x1b0>)
 8002f6c:	601a      	str	r2, [r3, #0]
			Ds18b20StartConvert = 0;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <StartTemp+0x1b4>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
			osDelay(2000);//_DS18B20_UPDATE_INTERVAL_MS);
 8002f74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f78:	f008 faec 	bl	800b554 <osDelay>
			Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002f7c:	4b20      	ldr	r3, [pc, #128]	; (8003000 <StartTemp+0x1b8>)
 8002f7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f82:	801a      	strh	r2, [r3, #0]
			DS18B20_StartAll(&OneWire);
 8002f84:	4815      	ldr	r0, [pc, #84]	; (8002fdc <StartTemp+0x194>)
 8002f86:	f7fe fa51 	bl	800142c <DS18B20_StartAll>
			osDelay(100);
 8002f8a:	2064      	movs	r0, #100	; 0x64
 8002f8c:	f008 fae2 	bl	800b554 <osDelay>
			while (!DS18B20_AllDone(&OneWire)) {
 8002f90:	4812      	ldr	r0, [pc, #72]	; (8002fdc <StartTemp+0x194>)
 8002f92:	f7fe fc94 	bl	80018be <DS18B20_AllDone>
 8002f96:	b948      	cbnz	r0, 8002fac <StartTemp+0x164>
				osDelay(10);
 8002f98:	200a      	movs	r0, #10
 8002f9a:	f008 fadb 	bl	800b554 <osDelay>
				Ds18b20Timeout -= 1;
 8002f9e:	4a18      	ldr	r2, [pc, #96]	; (8003000 <StartTemp+0x1b8>)
 8002fa0:	8813      	ldrh	r3, [r2, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	8013      	strh	r3, [r2, #0]
				if (!Ds18b20Timeout) break;
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f1      	bne.n	8002f90 <StartTemp+0x148>
			if (Ds18b20Timeout > 0) {
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <StartTemp+0x1b8>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1bf      	bne.n	8002f34 <StartTemp+0xec>
				for (uint8_t i = 0; i < TempSensorCount; i++) ds18b20[i].DataIsValid = false;
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <StartTemp+0x19c>)
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d9d3      	bls.n	8002f66 <StartTemp+0x11e>
 8002fbe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002fc2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <StartTemp+0x1a0>)
 8002fc8:	440a      	add	r2, r1
 8002fca:	2100      	movs	r1, #0
 8002fcc:	7311      	strb	r1, [r2, #12]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e7f0      	b.n	8002fb6 <StartTemp+0x16e>
 8002fd4:	080132e4 	.word	0x080132e4
 8002fd8:	08012098 	.word	0x08012098
 8002fdc:	20007a94 	.word	0x20007a94
 8002fe0:	200079f8 	.word	0x200079f8
 8002fe4:	200003d8 	.word	0x200003d8
 8002fe8:	20007a34 	.word	0x20007a34
 8002fec:	200003dc 	.word	0x200003dc
 8002ff0:	40020400 	.word	0x40020400
 8002ff4:	200003d0 	.word	0x200003d0
 8002ff8:	200003d4 	.word	0x200003d4
 8002ffc:	200003cc 	.word	0x200003cc
 8003000:	200003ce 	.word	0x200003ce

08003004 <errNameStr>:
{
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	4605      	mov	r5, r0
 8003008:	460c      	mov	r4, r1
	*st = '\0';
 800300a:	2300      	movs	r3, #0
 800300c:	700b      	strb	r3, [r1, #0]
	if (er & devSPI)  strcat(st, "SPI");//case devSPI://  = 1,
 800300e:	f010 0f01 	tst.w	r0, #1
 8003012:	d118      	bne.n	8003046 <errNameStr+0x42>
	if (er & devUART) strcat(st, " UART");// = 2,
 8003014:	f015 0f02 	tst.w	r5, #2
 8003018:	d11d      	bne.n	8003056 <errNameStr+0x52>
	if (er & devI2C)  strcat(st, " I2C");//  = 4,
 800301a:	f015 0f04 	tst.w	r5, #4
 800301e:	d125      	bne.n	800306c <errNameStr+0x68>
	if (er & devRTC)  strcat(st, " RTC");//  = 8,
 8003020:	f015 0f08 	tst.w	r5, #8
 8003024:	d12d      	bne.n	8003082 <errNameStr+0x7e>
	if (er & devMem)  strcat(st, " Mem");//  = 0x10,
 8003026:	f015 0f10 	tst.w	r5, #16
 800302a:	d135      	bne.n	8003098 <errNameStr+0x94>
	if (er & devGSM)  strcat(st, " GSM");//  = 0X20,
 800302c:	f015 0f20 	tst.w	r5, #32
 8003030:	d13d      	bne.n	80030ae <errNameStr+0xaa>
	if (er & devQue)  strcat(st, " Que");// = 0x40
 8003032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003036:	d145      	bne.n	80030c4 <errNameStr+0xc0>
	if (er & devCRC)  strcat(st, " CRC");//  = 0x100
 8003038:	f015 0f80 	tst.w	r5, #128	; 0x80
 800303c:	d14d      	bne.n	80030da <errNameStr+0xd6>
	if (!strlen(st)) sprintf(st,"err : 0x%02X", er);
 800303e:	7823      	ldrb	r3, [r4, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d055      	beq.n	80030f0 <errNameStr+0xec>
}
 8003044:	bd38      	pop	{r3, r4, r5, pc}
	if (er & devSPI)  strcat(st, "SPI");//case devSPI://  = 1,
 8003046:	4608      	mov	r0, r1
 8003048:	f7fd f8d4 	bl	80001f4 <strlen>
 800304c:	4603      	mov	r3, r0
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <errNameStr+0xf8>)
 8003050:	6810      	ldr	r0, [r2, #0]
 8003052:	50e0      	str	r0, [r4, r3]
 8003054:	e7de      	b.n	8003014 <errNameStr+0x10>
	if (er & devUART) strcat(st, " UART");// = 2,
 8003056:	4620      	mov	r0, r4
 8003058:	f7fd f8cc 	bl	80001f4 <strlen>
 800305c:	4603      	mov	r3, r0
 800305e:	1821      	adds	r1, r4, r0
 8003060:	4a27      	ldr	r2, [pc, #156]	; (8003100 <errNameStr+0xfc>)
 8003062:	6810      	ldr	r0, [r2, #0]
 8003064:	50e0      	str	r0, [r4, r3]
 8003066:	8893      	ldrh	r3, [r2, #4]
 8003068:	808b      	strh	r3, [r1, #4]
 800306a:	e7d6      	b.n	800301a <errNameStr+0x16>
	if (er & devI2C)  strcat(st, " I2C");//  = 4,
 800306c:	4620      	mov	r0, r4
 800306e:	f7fd f8c1 	bl	80001f4 <strlen>
 8003072:	4603      	mov	r3, r0
 8003074:	1821      	adds	r1, r4, r0
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <errNameStr+0x100>)
 8003078:	6810      	ldr	r0, [r2, #0]
 800307a:	50e0      	str	r0, [r4, r3]
 800307c:	7913      	ldrb	r3, [r2, #4]
 800307e:	710b      	strb	r3, [r1, #4]
 8003080:	e7ce      	b.n	8003020 <errNameStr+0x1c>
	if (er & devRTC)  strcat(st, " RTC");//  = 8,
 8003082:	4620      	mov	r0, r4
 8003084:	f7fd f8b6 	bl	80001f4 <strlen>
 8003088:	4603      	mov	r3, r0
 800308a:	1821      	adds	r1, r4, r0
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <errNameStr+0x104>)
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	50e0      	str	r0, [r4, r3]
 8003092:	7913      	ldrb	r3, [r2, #4]
 8003094:	710b      	strb	r3, [r1, #4]
 8003096:	e7c6      	b.n	8003026 <errNameStr+0x22>
	if (er & devMem)  strcat(st, " Mem");//  = 0x10,
 8003098:	4620      	mov	r0, r4
 800309a:	f7fd f8ab 	bl	80001f4 <strlen>
 800309e:	4603      	mov	r3, r0
 80030a0:	1821      	adds	r1, r4, r0
 80030a2:	4a1a      	ldr	r2, [pc, #104]	; (800310c <errNameStr+0x108>)
 80030a4:	6810      	ldr	r0, [r2, #0]
 80030a6:	50e0      	str	r0, [r4, r3]
 80030a8:	7913      	ldrb	r3, [r2, #4]
 80030aa:	710b      	strb	r3, [r1, #4]
 80030ac:	e7be      	b.n	800302c <errNameStr+0x28>
	if (er & devGSM)  strcat(st, " GSM");//  = 0X20,
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7fd f8a0 	bl	80001f4 <strlen>
 80030b4:	4603      	mov	r3, r0
 80030b6:	1821      	adds	r1, r4, r0
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <errNameStr+0x10c>)
 80030ba:	6810      	ldr	r0, [r2, #0]
 80030bc:	50e0      	str	r0, [r4, r3]
 80030be:	7913      	ldrb	r3, [r2, #4]
 80030c0:	710b      	strb	r3, [r1, #4]
 80030c2:	e7b6      	b.n	8003032 <errNameStr+0x2e>
	if (er & devQue)  strcat(st, " Que");// = 0x40
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7fd f895 	bl	80001f4 <strlen>
 80030ca:	4603      	mov	r3, r0
 80030cc:	1821      	adds	r1, r4, r0
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <errNameStr+0x110>)
 80030d0:	6810      	ldr	r0, [r2, #0]
 80030d2:	50e0      	str	r0, [r4, r3]
 80030d4:	7913      	ldrb	r3, [r2, #4]
 80030d6:	710b      	strb	r3, [r1, #4]
 80030d8:	e7ae      	b.n	8003038 <errNameStr+0x34>
	if (er & devCRC)  strcat(st, " CRC");//  = 0x100
 80030da:	4620      	mov	r0, r4
 80030dc:	f7fd f88a 	bl	80001f4 <strlen>
 80030e0:	4603      	mov	r3, r0
 80030e2:	1821      	adds	r1, r4, r0
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <errNameStr+0x114>)
 80030e6:	6810      	ldr	r0, [r2, #0]
 80030e8:	50e0      	str	r0, [r4, r3]
 80030ea:	7913      	ldrb	r3, [r2, #4]
 80030ec:	710b      	strb	r3, [r1, #4]
 80030ee:	e7a6      	b.n	800303e <errNameStr+0x3a>
	if (!strlen(st)) sprintf(st,"err : 0x%02X", er);
 80030f0:	462a      	mov	r2, r5
 80030f2:	490a      	ldr	r1, [pc, #40]	; (800311c <errNameStr+0x118>)
 80030f4:	4620      	mov	r0, r4
 80030f6:	f00b f90b 	bl	800e310 <siprintf>
}
 80030fa:	e7a3      	b.n	8003044 <errNameStr+0x40>
 80030fc:	08013304 	.word	0x08013304
 8003100:	08013308 	.word	0x08013308
 8003104:	08013310 	.word	0x08013310
 8003108:	08013318 	.word	0x08013318
 800310c:	08013320 	.word	0x08013320
 8003110:	08013328 	.word	0x08013328
 8003114:	08013330 	.word	0x08013330
 8003118:	08013338 	.word	0x08013338
 800311c:	08013340 	.word	0x08013340

08003120 <StartDefaultTask>:
{
 8003120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003124:	f2ad 6df4 	subw	sp, sp, #1780	; 0x6f4
	Report(__func__, true, "Start main thread...(%lu)\r\n", xPortGetFreeHeapSize());
 8003128:	f00a fcd2 	bl	800dad0 <xPortGetFreeHeapSize>
 800312c:	4603      	mov	r3, r0
 800312e:	4ab2      	ldr	r2, [pc, #712]	; (80033f8 <StartDefaultTask+0x2d8>)
 8003130:	2101      	movs	r1, #1
 8003132:	48b2      	ldr	r0, [pc, #712]	; (80033fc <StartDefaultTask+0x2dc>)
 8003134:	f7fe fd50 	bl	8001bd8 <Report>
	char buf[MAX_GSM_BUF] = {0};
 8003138:	2600      	movs	r6, #0
 800313a:	f8cd 64f0 	str.w	r6, [sp, #1264]	; 0x4f0
 800313e:	f44f 74fe 	mov.w	r4, #508	; 0x1fc
 8003142:	4622      	mov	r2, r4
 8003144:	4631      	mov	r1, r6
 8003146:	f20d 40f4 	addw	r0, sp, #1268	; 0x4f4
 800314a:	f00a fdf9 	bl	800dd40 <memset>
	char buf2[MAX_GSM_BUF] = {0};
 800314e:	96bc      	str	r6, [sp, #752]	; 0x2f0
 8003150:	4622      	mov	r2, r4
 8003152:	4631      	mov	r1, r6
 8003154:	a8bd      	add	r0, sp, #756	; 0x2f4
 8003156:	f00a fdf3 	bl	800dd40 <memset>
	char scr[MAX_GSM_BUF] = {0};
 800315a:	963c      	str	r6, [sp, #240]	; 0xf0
 800315c:	4622      	mov	r2, r4
 800315e:	4631      	mov	r1, r6
 8003160:	a83d      	add	r0, sp, #244	; 0xf4
 8003162:	f00a fded 	bl	800dd40 <memset>
	char cmdBuf[MAX_CMD_BUF] = {0};
 8003166:	9614      	str	r6, [sp, #80]	; 0x50
 8003168:	229c      	movs	r2, #156	; 0x9c
 800316a:	4631      	mov	r1, r6
 800316c:	a815      	add	r0, sp, #84	; 0x54
 800316e:	f00a fde7 	bl	800dd40 <memset>
	int8_t cur_cmd = -1;
 8003172:	23ff      	movs	r3, #255	; 0xff
 8003174:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
	int8_t grp_cmd = -1;
 8003178:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	uint32_t tmr_cmd = get_tmr(5);
 800317c:	2005      	movs	r0, #5
 800317e:	f7fe fbf2 	bl	8001966 <get_tmr>
 8003182:	9009      	str	r0, [sp, #36]	; 0x24
	uint32_t gps_tmr = get_tmr10(1);
 8003184:	2001      	movs	r0, #1
 8003186:	f7fe fbdf 	bl	8001948 <get_tmr10>
 800318a:	900d      	str	r0, [sp, #52]	; 0x34
	uint32_t cur_sec = get_tmr10(1);
 800318c:	2001      	movs	r0, #1
 800318e:	f7fe fbdb 	bl	8001948 <get_tmr10>
 8003192:	900b      	str	r0, [sp, #44]	; 0x2c
	uint8_t sch = 0;
 8003194:	960e      	str	r6, [sp, #56]	; 0x38
	bool dsOK = false;
 8003196:	960f      	str	r6, [sp, #60]	; 0x3c
	int8_t result = -1;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800319c:	930a      	str	r3, [sp, #40]	; 0x28
	uint8_t atTotal = 0;
 800319e:	9608      	str	r6, [sp, #32]
	uint32_t tmr_ack = 0;
 80031a0:	46b0      	mov	r8, r6
	uint32_t tmr_next = 0;
 80031a2:	9606      	str	r6, [sp, #24]
	bool at_auto = false;
 80031a4:	46b1      	mov	r9, r6
	bool next_cmd = true;
 80031a6:	2301      	movs	r3, #1
 80031a8:	9305      	str	r3, [sp, #20]
	const char *uk_ack = NULL;
 80031aa:	9607      	str	r6, [sp, #28]
	uint8_t cmd_err = CMD_REPEAT;
 80031ac:	f04f 0a05 	mov.w	sl, #5
	int8_t slin = 3, elin = 4, clin = 3, at_line = 2, err_line = 8, temp_line = 5;
 80031b0:	2303      	movs	r3, #3
 80031b2:	930c      	str	r3, [sp, #48]	; 0x30
	while (!restart_flag) {
 80031b4:	f000 bebd 	b.w	8003f32 <StartDefaultTask+0xe12>
			cur_sec = get_tmr10(_900ms);
 80031b8:	205a      	movs	r0, #90	; 0x5a
 80031ba:	f7fe fbc5 	bl	8001948 <get_tmr10>
 80031be:	900b      	str	r0, [sp, #44]	; 0x2c
			sec_to_string(scr);
 80031c0:	a83c      	add	r0, sp, #240	; 0xf0
 80031c2:	f7fe fcb5 	bl	8001b30 <sec_to_string>
			i2c_ssd1306_text_xy(mkLineCenter(scr, FONT_WIDTH), 1, 1, true);
 80031c6:	2108      	movs	r1, #8
 80031c8:	a83c      	add	r0, sp, #240	; 0xf0
 80031ca:	f003 f861 	bl	8006290 <mkLineCenter>
 80031ce:	2301      	movs	r3, #1
 80031d0:	461a      	mov	r2, r3
 80031d2:	4619      	mov	r1, r3
 80031d4:	f002 ffba 	bl	800614c <i2c_ssd1306_text_xy>
			if (dsOK != sensPresent) {
 80031d8:	4b89      	ldr	r3, [pc, #548]	; (8003400 <StartDefaultTask+0x2e0>)
 80031da:	781d      	ldrb	r5, [r3, #0]
 80031dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031de:	429d      	cmp	r5, r3
 80031e0:	d12b      	bne.n	800323a <StartDefaultTask+0x11a>
				if (temp != fTemp) {
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <StartDefaultTask+0x2e4>)
 80031e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031e8:	4b87      	ldr	r3, [pc, #540]	; (8003408 <StartDefaultTask+0x2e8>)
 80031ea:	ed93 0a00 	vldr	s0, [r3]
 80031ee:	eef4 7a40 	vcmp.f32	s15, s0
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	f000 86a9 	beq.w	8003f4c <StartDefaultTask+0xe2c>
					temp = fTemp;
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <StartDefaultTask+0x2e4>)
 80031fc:	ed83 0a01 	vstr	s0, [r3, #4]
					s_float_t flo = {0, 0};
 8003200:	2500      	movs	r5, #0
 8003202:	9511      	str	r5, [sp, #68]	; 0x44
 8003204:	9512      	str	r5, [sp, #72]	; 0x48
					floatPart(temp, &flo);
 8003206:	a811      	add	r0, sp, #68	; 0x44
 8003208:	f7fe fb76 	bl	80018f8 <floatPart>
					sprintf(scr, "temp:%lu.%lu%c", flo.cel, flo.dro / 10000, 31);
 800320c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800320e:	231f      	movs	r3, #31
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f242 7310 	movw	r3, #10000	; 0x2710
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800321c:	497b      	ldr	r1, [pc, #492]	; (800340c <StartDefaultTask+0x2ec>)
 800321e:	a83c      	add	r0, sp, #240	; 0xf0
 8003220:	f00b f876 	bl	800e310 <siprintf>
					i2c_ssd1306_text_xy(mkLineCenter(scr, FONT_WIDTH), 1, temp_line, false);
 8003224:	2108      	movs	r1, #8
 8003226:	a83c      	add	r0, sp, #240	; 0xf0
 8003228:	f003 f832 	bl	8006290 <mkLineCenter>
 800322c:	462b      	mov	r3, r5
 800322e:	2205      	movs	r2, #5
 8003230:	2101      	movs	r1, #1
 8003232:	f002 ff8b 	bl	800614c <i2c_ssd1306_text_xy>
 8003236:	f000 be89 	b.w	8003f4c <StartDefaultTask+0xe2c>
				strcpy(scr, "DS18B20 present");
 800323a:	ae3c      	add	r6, sp, #240	; 0xf0
 800323c:	4b74      	ldr	r3, [pc, #464]	; (8003410 <StartDefaultTask+0x2f0>)
 800323e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003240:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
				i2c_ssd1306_text_xy(mkLineCenter(scr, FONT_WIDTH), 1, temp_line, false);
 8003244:	2108      	movs	r1, #8
 8003246:	4630      	mov	r0, r6
 8003248:	f003 f822 	bl	8006290 <mkLineCenter>
 800324c:	2300      	movs	r3, #0
 800324e:	2205      	movs	r2, #5
 8003250:	2101      	movs	r1, #1
 8003252:	f002 ff7b 	bl	800614c <i2c_ssd1306_text_xy>
				dsOK = sensPresent;
 8003256:	950f      	str	r5, [sp, #60]	; 0x3c
 8003258:	f000 be78 	b.w	8003f4c <StartDefaultTask+0xe2c>
			if (getRECQ(buf, &gsmTo) >= 0) {
 800325c:	496d      	ldr	r1, [pc, #436]	; (8003414 <StartDefaultTask+0x2f4>)
 800325e:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 8003262:	f7fe fbc1 	bl	80019e8 <getRECQ>
 8003266:	2800      	cmp	r0, #0
 8003268:	f2c0 8675 	blt.w	8003f56 <StartDefaultTask+0xe36>
				if (HAL_UART_Transmit_DMA(portGSM, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 800326c:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 8003270:	f7fc ffc0 	bl	80001f4 <strlen>
 8003274:	b282      	uxth	r2, r0
 8003276:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <StartDefaultTask+0x2f8>)
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f007 fe77 	bl	800af70 <HAL_UART_Transmit_DMA>
 8003282:	b368      	cbz	r0, 80032e0 <StartDefaultTask+0x1c0>
 8003284:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <StartDefaultTask+0x2e4>)
 8003286:	7a53      	ldrb	r3, [r2, #9]
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	7253      	strb	r3, [r2, #9]
				if (prn_cmd) Report(NULL, false, "%s", buf);
 800328e:	4b62      	ldr	r3, [pc, #392]	; (8003418 <StartDefaultTask+0x2f8>)
 8003290:	791b      	ldrb	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d138      	bne.n	8003308 <StartDefaultTask+0x1e8>
				strcpy(scr, buf);
 8003296:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
 800329a:	a83c      	add	r0, sp, #240	; 0xf0
 800329c:	f00b f8e5 	bl	800e46a <strcpy>
				i2c_ssd1306_clear_line(at_line);
 80032a0:	2002      	movs	r0, #2
 80032a2:	f002 fdb9 	bl	8005e18 <i2c_ssd1306_clear_line>
				if (strlen(scr) > MAX_FONT_CHAR) scr[MAX_FONT_CHAR] = '\0';
 80032a6:	a83c      	add	r0, sp, #240	; 0xf0
 80032a8:	f7fc ffa4 	bl	80001f4 <strlen>
 80032ac:	2810      	cmp	r0, #16
 80032ae:	d902      	bls.n	80032b6 <StartDefaultTask+0x196>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
				i2c_ssd1306_text_xy(scr, 1, at_line, false);
 80032b6:	2300      	movs	r3, #0
 80032b8:	2202      	movs	r2, #2
 80032ba:	2101      	movs	r1, #1
 80032bc:	a83c      	add	r0, sp, #240	; 0xf0
 80032be:	f002 ff45 	bl	800614c <i2c_ssd1306_text_xy>
				if (!at_auto) {
 80032c2:	f1b9 0f00 	cmp.w	r9, #0
 80032c6:	f040 8646 	bne.w	8003f56 <StartDefaultTask+0xe36>
					if ((uk_ack = findCmd(buf, &grp_cmd, &cur_cmd)) != NULL) {
 80032ca:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 80032ce:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 80032d2:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 80032d6:	f7ff fac7 	bl	8002868 <findCmd>
 80032da:	9007      	str	r0, [sp, #28]
 80032dc:	f000 be3b 	b.w	8003f56 <StartDefaultTask+0xe36>
					if (strstr(buf, cmd_radio[fSCAN].cmd)) {
 80032e0:	494e      	ldr	r1, [pc, #312]	; (800341c <StartDefaultTask+0x2fc>)
 80032e2:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 80032e6:	f00b f8ed 	bl	800e4c4 <strstr>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0cf      	beq.n	800328e <StartDefaultTask+0x16e>
						gsmFlags.rlist = 1;
 80032ee:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <StartDefaultTask+0x300>)
 80032f0:	7853      	ldrb	r3, [r2, #1]
 80032f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f6:	7053      	strb	r3, [r2, #1]
						indList = 0;
 80032f8:	4942      	ldr	r1, [pc, #264]	; (8003404 <StartDefaultTask+0x2e4>)
 80032fa:	2300      	movs	r3, #0
 80032fc:	728b      	strb	r3, [r1, #10]
						memset((uint8_t *)&freqList, 0, MAX_FREQ_LIST * sizeof(uint16_t));
 80032fe:	60cb      	str	r3, [r1, #12]
 8003300:	610b      	str	r3, [r1, #16]
 8003302:	614b      	str	r3, [r1, #20]
 8003304:	618b      	str	r3, [r1, #24]
 8003306:	e7c2      	b.n	800328e <StartDefaultTask+0x16e>
				if (prn_cmd) Report(NULL, false, "%s", buf);
 8003308:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800330c:	4a45      	ldr	r2, [pc, #276]	; (8003424 <StartDefaultTask+0x304>)
 800330e:	2100      	movs	r1, #0
 8003310:	4608      	mov	r0, r1
 8003312:	f7fe fc61 	bl	8001bd8 <Report>
 8003316:	e7be      	b.n	8003296 <StartDefaultTask+0x176>
			if (getRECQ(buf2, &gsmFrom) >= 0) {
 8003318:	4943      	ldr	r1, [pc, #268]	; (8003428 <StartDefaultTask+0x308>)
 800331a:	a8bc      	add	r0, sp, #752	; 0x2f0
 800331c:	f7fe fb64 	bl	80019e8 <getRECQ>
 8003320:	2800      	cmp	r0, #0
 8003322:	f2c0 861d 	blt.w	8003f60 <StartDefaultTask+0xe40>
				if (clin > elin) {
 8003326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003328:	2b04      	cmp	r3, #4
 800332a:	dc5e      	bgt.n	80033ea <StartDefaultTask+0x2ca>
				strncpy(scr, buf2, sizeof(scr) - 1);
 800332c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003330:	a9bc      	add	r1, sp, #752	; 0x2f0
 8003332:	a83c      	add	r0, sp, #240	; 0xf0
 8003334:	f00b f8b3 	bl	800e49e <strncpy>
				if (strlen(scr) > MAX_FONT_CHAR) scr[MAX_FONT_CHAR] = '\0';
 8003338:	a83c      	add	r0, sp, #240	; 0xf0
 800333a:	f7fc ff5b 	bl	80001f4 <strlen>
 800333e:	2810      	cmp	r0, #16
 8003340:	d902      	bls.n	8003348 <StartDefaultTask+0x228>
 8003342:	2300      	movs	r3, #0
 8003344:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
				i2c_ssd1306_text_xy(scr, 1, clin++, false);
 8003348:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800334c:	1c53      	adds	r3, r2, #1
 800334e:	b25b      	sxtb	r3, r3
 8003350:	930c      	str	r3, [sp, #48]	; 0x30
 8003352:	2300      	movs	r3, #0
 8003354:	2101      	movs	r1, #1
 8003356:	a83c      	add	r0, sp, #240	; 0xf0
 8003358:	f002 fef8 	bl	800614c <i2c_ssd1306_text_xy>
				Report(NULL, false, "%s", buf2);
 800335c:	abbc      	add	r3, sp, #752	; 0x2f0
 800335e:	4a31      	ldr	r2, [pc, #196]	; (8003424 <StartDefaultTask+0x304>)
 8003360:	2100      	movs	r1, #0
 8003362:	4608      	mov	r0, r1
 8003364:	f7fe fc38 	bl	8001bd8 <Report>
				if ((uks = strstr(buf2, "\r\n")) != NULL) *uks = '\0';
 8003368:	4930      	ldr	r1, [pc, #192]	; (800342c <StartDefaultTask+0x30c>)
 800336a:	a8bc      	add	r0, sp, #752	; 0x2f0
 800336c:	f00b f8aa 	bl	800e4c4 <strstr>
 8003370:	b108      	cbz	r0, 8003376 <StartDefaultTask+0x256>
 8003372:	2200      	movs	r2, #0
 8003374:	7002      	strb	r2, [r0, #0]
				result = parseEvent(buf2, (void *)&gsmFlags);// Анализ сообщения от модуля GSM
 8003376:	4e2a      	ldr	r6, [pc, #168]	; (8003420 <StartDefaultTask+0x300>)
 8003378:	4631      	mov	r1, r6
 800337a:	a8bc      	add	r0, sp, #752	; 0x2f0
 800337c:	f7fe fe16 	bl	8001fac <parseEvent>
 8003380:	900a      	str	r0, [sp, #40]	; 0x28
				if (gsmFlags.begin) {//  Начать работу нитки с самого начала (по события 'SMS Ready')
 8003382:	7833      	ldrb	r3, [r6, #0]
 8003384:	f013 0f20 	tst.w	r3, #32
 8003388:	d152      	bne.n	8003430 <StartDefaultTask+0x310>
				if (gsmFlags.connect) {
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <StartDefaultTask+0x300>)
 800338c:	789b      	ldrb	r3, [r3, #2]
 800338e:	f013 0f08 	tst.w	r3, #8
 8003392:	d004      	beq.n	800339e <StartDefaultTask+0x27e>
					if (gsmFlags.ack) {
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <StartDefaultTask+0x300>)
 8003396:	78db      	ldrb	r3, [r3, #3]
 8003398:	f013 0f08 	tst.w	r3, #8
 800339c:	d17a      	bne.n	8003494 <StartDefaultTask+0x374>
				if (gsmFlags.prompt) {//send json_data to external tcp server
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <StartDefaultTask+0x300>)
 80033a0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db7e      	blt.n	80034a6 <StartDefaultTask+0x386>
					if (uk_ack) {
 80033a8:	9b07      	ldr	r3, [sp, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 85d8 	beq.w	8003f60 <StartDefaultTask+0xe40>
						if (strstr(buf2, uk_ack)) {
 80033b0:	4619      	mov	r1, r3
 80033b2:	a8bc      	add	r0, sp, #752	; 0x2f0
 80033b4:	f00b f886 	bl	800e4c4 <strstr>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	f000 80e8 	beq.w	800358e <StartDefaultTask+0x46e>
							if (at_auto) {
 80033be:	f1b9 0f00 	cmp.w	r9, #0
 80033c2:	f040 809a 	bne.w	80034fa <StartDefaultTask+0x3da>
							switch (cur_cmd) {
 80033c6:	f99d 304f 	ldrsb.w	r3, [sp, #79]	; 0x4f
 80033ca:	3b02      	subs	r3, #2
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	f200 85c7 	bhi.w	8003f60 <StartDefaultTask+0xe40>
 80033d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033d6:	00ce      	.short	0x00ce
 80033d8:	05c505c5 	.word	0x05c505c5
 80033dc:	05c505c5 	.word	0x05c505c5
 80033e0:	05c505c5 	.word	0x05c505c5
 80033e4:	009900b0 	.word	0x009900b0
 80033e8:	00c1      	.short	0x00c1
					i2c_ssd1306_clear_lines(clin, elin);
 80033ea:	2104      	movs	r1, #4
 80033ec:	2003      	movs	r0, #3
 80033ee:	f002 fda3 	bl	8005f38 <i2c_ssd1306_clear_lines>
					clin = slin;
 80033f2:	2303      	movs	r3, #3
 80033f4:	930c      	str	r3, [sp, #48]	; 0x30
 80033f6:	e799      	b.n	800332c <StartDefaultTask+0x20c>
 80033f8:	08013350 	.word	0x08013350
 80033fc:	080120a4 	.word	0x080120a4
 8003400:	200003d0 	.word	0x200003d0
 8003404:	200003dc 	.word	0x200003dc
 8003408:	200003d4 	.word	0x200003d4
 800340c:	0801337c 	.word	0x0801337c
 8003410:	0801336c 	.word	0x0801336c
 8003414:	20007d40 	.word	0x20007d40
 8003418:	20000010 	.word	0x20000010
 800341c:	08012148 	.word	0x08012148
 8003420:	20007ab4 	.word	0x20007ab4
 8003424:	080133f0 	.word	0x080133f0
 8003428:	20007bac 	.word	0x20007bac
 800342c:	0801379c 	.word	0x0801379c
					*(unsigned int *)&gsmFlags = 0;
 8003430:	4633      	mov	r3, r6
 8003432:	2600      	movs	r6, #0
 8003434:	601e      	str	r6, [r3, #0]
					gsmFlags.sReady = 1;
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	f042 0210 	orr.w	r2, r2, #16
 800343c:	701a      	strb	r2, [r3, #0]
					cur_cmd = grp_cmd = -1;
 800343e:	23ff      	movs	r3, #255	; 0xff
 8003440:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8003444:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
					gsmInit = sntpInit = false;
 8003448:	4baa      	ldr	r3, [pc, #680]	; (80036f4 <StartDefaultTask+0x5d4>)
 800344a:	775e      	strb	r6, [r3, #29]
 800344c:	779e      	strb	r6, [r3, #30]
					netInit = false;
 800344e:	77de      	strb	r6, [r3, #31]
					HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_SET);
 8003450:	2201      	movs	r2, #1
 8003452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003456:	48a8      	ldr	r0, [pc, #672]	; (80036f8 <StartDefaultTask+0x5d8>)
 8003458:	f004 f9b1 	bl	80077be <HAL_GPIO_WritePin>
					Report(NULL, true, "Restart main loop !\r\n");
 800345c:	4aa7      	ldr	r2, [pc, #668]	; (80036fc <StartDefaultTask+0x5dc>)
 800345e:	2101      	movs	r1, #1
 8003460:	4630      	mov	r0, r6
 8003462:	f7fe fbb9 	bl	8001bd8 <Report>
					i2c_ssd1306_clear_lines(at_line, elin);
 8003466:	2104      	movs	r1, #4
 8003468:	2002      	movs	r0, #2
 800346a:	f002 fd65 	bl	8005f38 <i2c_ssd1306_clear_lines>
					tmr_cmd = get_tmr(1);
 800346e:	2001      	movs	r0, #1
 8003470:	f7fe fa79 	bl	8001966 <get_tmr>
 8003474:	9009      	str	r0, [sp, #36]	; 0x24
					cur_sec = get_tmr10(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f7fe fa66 	bl	8001948 <get_tmr10>
 800347c:	900d      	str	r0, [sp, #52]	; 0x34
 800347e:	900b      	str	r0, [sp, #44]	; 0x2c
					atTotal = 0;
 8003480:	9408      	str	r4, [sp, #32]
					next_cmd = true;
 8003482:	9505      	str	r5, [sp, #20]
					tmr_next = tmr_ack = 0;
 8003484:	46b0      	mov	r8, r6
 8003486:	9606      	str	r6, [sp, #24]
					at_auto = false;
 8003488:	46b1      	mov	r9, r6
					uk_cmd = uk_ack = NULL;
 800348a:	9607      	str	r6, [sp, #28]
					cmd_err = CMD_REPEAT;
 800348c:	f04f 0a05 	mov.w	sl, #5
					continue;
 8003490:	f000 bd4f 	b.w	8003f32 <StartDefaultTask+0xe12>
						gsmFlags.ack = 0;
 8003494:	4b9a      	ldr	r3, [pc, #616]	; (8003700 <StartDefaultTask+0x5e0>)
 8003496:	78da      	ldrb	r2, [r3, #3]
 8003498:	f36f 02c3 	bfc	r2, #3, #1
 800349c:	70da      	strb	r2, [r3, #3]
						parseACK(buf2);
 800349e:	a8bc      	add	r0, sp, #752	; 0x2f0
 80034a0:	f7ff f9e0 	bl	8002864 <parseACK>
 80034a4:	e77b      	b.n	800339e <StartDefaultTask+0x27e>
					gsmFlags.prompt = 0;
 80034a6:	4b96      	ldr	r3, [pc, #600]	; (8003700 <StartDefaultTask+0x5e0>)
 80034a8:	789a      	ldrb	r2, [r3, #2]
 80034aa:	f36f 12c7 	bfc	r2, #7, #1
 80034ae:	709a      	strb	r2, [r3, #2]
					uint16_t dln = mkData(cmdBuf);
 80034b0:	a814      	add	r0, sp, #80	; 0x50
 80034b2:	f7ff f92f 	bl	8002714 <mkData>
					if (dln) {
 80034b6:	4602      	mov	r2, r0
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f43f af75 	beq.w	80033a8 <StartDefaultTask+0x288>
						if (HAL_UART_Transmit_DMA(portGSM, (uint8_t *)cmdBuf, dln) != HAL_OK) {
 80034be:	a914      	add	r1, sp, #80	; 0x50
 80034c0:	4b90      	ldr	r3, [pc, #576]	; (8003704 <StartDefaultTask+0x5e4>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	f007 fd54 	bl	800af70 <HAL_UART_Transmit_DMA>
 80034c8:	b128      	cbz	r0, 80034d6 <StartDefaultTask+0x3b6>
							devError |= devUART;
 80034ca:	4a8a      	ldr	r2, [pc, #552]	; (80036f4 <StartDefaultTask+0x5d4>)
 80034cc:	7a53      	ldrb	r3, [r2, #9]
 80034ce:	f043 0302 	orr.w	r3, r3, #2
 80034d2:	7253      	strb	r3, [r2, #9]
 80034d4:	e768      	b.n	80033a8 <StartDefaultTask+0x288>
							HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_SET);//off led
 80034d6:	2201      	movs	r2, #1
 80034d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034dc:	4886      	ldr	r0, [pc, #536]	; (80036f8 <StartDefaultTask+0x5d8>)
 80034de:	f004 f96e 	bl	80077be <HAL_GPIO_WritePin>
							gsmFlags.send = 0;
 80034e2:	4b87      	ldr	r3, [pc, #540]	; (8003700 <StartDefaultTask+0x5e0>)
 80034e4:	78da      	ldrb	r2, [r3, #3]
 80034e6:	f36f 0200 	bfc	r2, #0, #1
 80034ea:	70da      	strb	r2, [r3, #3]
							Report(NULL, false, "%s", cmdBuf);
 80034ec:	ab14      	add	r3, sp, #80	; 0x50
 80034ee:	4a86      	ldr	r2, [pc, #536]	; (8003708 <StartDefaultTask+0x5e8>)
 80034f0:	2100      	movs	r1, #0
 80034f2:	4608      	mov	r0, r1
 80034f4:	f7fe fb70 	bl	8001bd8 <Report>
 80034f8:	e756      	b.n	80033a8 <StartDefaultTask+0x288>
								tmr_next = get_tmr10(_200ms);
 80034fa:	2014      	movs	r0, #20
 80034fc:	f7fe fa24 	bl	8001948 <get_tmr10>
 8003500:	9006      	str	r0, [sp, #24]
								next_cmd = true;
 8003502:	f8cd 9014 	str.w	r9, [sp, #20]
 8003506:	e75e      	b.n	80033c6 <StartDefaultTask+0x2a6>
									if (grp_cmd == seqInit) {
 8003508:	f99d 304e 	ldrsb.w	r3, [sp, #78]	; 0x4e
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 8527 	bne.w	8003f60 <StartDefaultTask+0xe40>
										if (at_auto) {
 8003512:	f1b9 0f00 	cmp.w	r9, #0
 8003516:	f000 8523 	beq.w	8003f60 <StartDefaultTask+0xe40>
											if (!gsmFlags.reg) repeat = true;
 800351a:	4b79      	ldr	r3, [pc, #484]	; (8003700 <StartDefaultTask+0x5e0>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003522:	f040 851d 	bne.w	8003f60 <StartDefaultTask+0xe40>
								tmr_ack = get_tmr10(0);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fe fa0e 	bl	8001948 <get_tmr10>
 800352c:	4680      	mov	r8, r0
								next_cmd = false;
 800352e:	2300      	movs	r3, #0
 8003530:	9305      	str	r3, [sp, #20]
 8003532:	f000 bd15 	b.w	8003f60 <StartDefaultTask+0xe40>
									if (grp_cmd == seqInit) {
 8003536:	f99d 304e 	ldrsb.w	r3, [sp, #78]	; 0x4e
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8510 	bne.w	8003f60 <StartDefaultTask+0xe40>
										if (at_auto) {
 8003540:	f1b9 0f00 	cmp.w	r9, #0
 8003544:	f000 850c 	beq.w	8003f60 <StartDefaultTask+0xe40>
											if (gsmRSSI <= dBmRSSI[0]) repeat = true;
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <StartDefaultTask+0x5d4>)
 800354a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800354e:	f113 0f70 	cmn.w	r3, #112	; 0x70
 8003552:	dbe8      	blt.n	8003526 <StartDefaultTask+0x406>
 8003554:	f000 bd04 	b.w	8003f60 <StartDefaultTask+0xe40>
									if (gsmFlags.ok) gsmFlags.cGat = 1;
 8003558:	4b69      	ldr	r3, [pc, #420]	; (8003700 <StartDefaultTask+0x5e0>)
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003560:	f000 84fe 	beq.w	8003f60 <StartDefaultTask+0xe40>
 8003564:	4a66      	ldr	r2, [pc, #408]	; (8003700 <StartDefaultTask+0x5e0>)
 8003566:	7813      	ldrb	r3, [r2, #0]
 8003568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356c:	7013      	strb	r3, [r2, #0]
							if (repeat) {
 800356e:	f000 bcf7 	b.w	8003f60 <StartDefaultTask+0xe40>
									if (gsmFlags.ok) gsmFlags.cmee = 1;
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <StartDefaultTask+0x5e0>)
 8003574:	78db      	ldrb	r3, [r3, #3]
 8003576:	f013 0f40 	tst.w	r3, #64	; 0x40
 800357a:	f000 84f1 	beq.w	8003f60 <StartDefaultTask+0xe40>
 800357e:	4b60      	ldr	r3, [pc, #384]	; (8003700 <StartDefaultTask+0x5e0>)
 8003580:	785a      	ldrb	r2, [r3, #1]
 8003582:	2101      	movs	r1, #1
 8003584:	f361 0201 	bfi	r2, r1, #0, #2
 8003588:	705a      	strb	r2, [r3, #1]
							if (repeat) {
 800358a:	f000 bce9 	b.w	8003f60 <StartDefaultTask+0xe40>
							if (gsmFlags.error & at_auto) {//example : +CME ERROR: 100
 800358e:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <StartDefaultTask+0x5e0>)
 8003590:	78db      	ldrb	r3, [r3, #3]
 8003592:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003596:	ea13 0f09 	tst.w	r3, r9
 800359a:	d119      	bne.n	80035d0 <StartDefaultTask+0x4b0>
								switch (grp_cmd) {
 800359c:	f99d 304e 	ldrsb.w	r3, [sp, #78]	; 0x4e
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 84dd 	bne.w	8003f60 <StartDefaultTask+0xe40>
										if (cur_cmd == iGSN) {
 80035a6:	f99d 304f 	ldrsb.w	r3, [sp, #79]	; 0x4f
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	f040 84d8 	bne.w	8003f60 <StartDefaultTask+0xe40>
											if (strlen(buf2) >= 15) memcpy(gsmIMEI, buf2, 15);
 80035b0:	a8bc      	add	r0, sp, #752	; 0x2f0
 80035b2:	f7fc fe1f 	bl	80001f4 <strlen>
 80035b6:	280e      	cmp	r0, #14
 80035b8:	f240 84d2 	bls.w	8003f60 <StartDefaultTask+0xe40>
 80035bc:	abbc      	add	r3, sp, #752	; 0x2f0
 80035be:	4d53      	ldr	r5, [pc, #332]	; (800370c <StartDefaultTask+0x5ec>)
 80035c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c2:	c507      	stmia	r5!, {r0, r1, r2}
 80035c4:	f825 3b02 	strh.w	r3, [r5], #2
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	702b      	strb	r3, [r5, #0]
 80035cc:	f000 bcc8 	b.w	8003f60 <StartDefaultTask+0xe40>
								tmr_ack = get_tmr10(0);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fe f9b9 	bl	8001948 <get_tmr10>
 80035d6:	4680      	mov	r8, r0
								tmr_next = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	9306      	str	r3, [sp, #24]
								next_cmd = false;
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	f000 bcbf 	b.w	8003f60 <StartDefaultTask+0xe40>
			if (gsmFlags.connect) tmr_send = get_tmr10(0);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fe f9b0 	bl	8001948 <get_tmr10>
 80035e8:	4b42      	ldr	r3, [pc, #264]	; (80036f4 <StartDefaultTask+0x5d4>)
 80035ea:	6358      	str	r0, [r3, #52]	; 0x34
 80035ec:	f000 bcc1 	b.w	8003f72 <StartDefaultTask+0xe52>
			if (check_tmr10(tmr_send)) {
 80035f0:	f7fe f9b0 	bl	8001954 <check_tmr10>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	f000 84c5 	beq.w	8003f84 <StartDefaultTask+0xe64>
				if (gsmFlags.connect) {
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <StartDefaultTask+0x5e0>)
 80035fc:	789b      	ldrb	r3, [r3, #2]
 80035fe:	f013 0f08 	tst.w	r3, #8
 8003602:	d03b      	beq.n	800367c <StartDefaultTask+0x55c>
					if (cmds) { free(cmds); cmds = NULL; }
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <StartDefaultTask+0x5d4>)
 8003606:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003608:	b108      	cbz	r0, 800360e <StartDefaultTask+0x4ee>
 800360a:	f00a fb83 	bl	800dd14 <free>
					cmds = (char *)calloc(1, CMD_LEN + 1);
 800360e:	2129      	movs	r1, #41	; 0x29
 8003610:	2001      	movs	r0, #1
 8003612:	f00a fa95 	bl	800db40 <calloc>
 8003616:	4603      	mov	r3, r0
 8003618:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <StartDefaultTask+0x5d4>)
 800361a:	6390      	str	r0, [r2, #56]	; 0x38
					if (cmds) {
 800361c:	b340      	cbz	r0, 8003670 <StartDefaultTask+0x550>
						strcpy(cmds, cmd_any[cCIPSEND].cmd);
 800361e:	4d3c      	ldr	r5, [pc, #240]	; (8003710 <StartDefaultTask+0x5f0>)
 8003620:	cd07      	ldmia	r5!, {r0, r1, r2}
 8003622:	6018      	str	r0, [r3, #0]
 8003624:	6059      	str	r1, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	782a      	ldrb	r2, [r5, #0]
 800362a:	731a      	strb	r2, [r3, #12]
						if (putRECQ(cmds, &gsmTo) < 0) {
 800362c:	4939      	ldr	r1, [pc, #228]	; (8003714 <StartDefaultTask+0x5f4>)
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <StartDefaultTask+0x5d4>)
 8003630:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003632:	f7fe f9bb 	bl	80019ac <putRECQ>
 8003636:	2800      	cmp	r0, #0
 8003638:	db0f      	blt.n	800365a <StartDefaultTask+0x53a>
						} else prn_cmd = true;
 800363a:	4b32      	ldr	r3, [pc, #200]	; (8003704 <StartDefaultTask+0x5e4>)
 800363c:	2201      	movs	r2, #1
 800363e:	711a      	strb	r2, [r3, #4]
					gsmFlags.busy = 1;
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <StartDefaultTask+0x5e0>)
 8003642:	78d3      	ldrb	r3, [r2, #3]
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	70d3      	strb	r3, [r2, #3]
					tmr_send = get_tmr10(send_period);// данные на сервер будем отправлять с периодом = send_period (10 сек.)
 800364a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800364e:	f7fe f97b 	bl	8001948 <get_tmr10>
 8003652:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <StartDefaultTask+0x5d4>)
 8003654:	6358      	str	r0, [r3, #52]	; 0x34
 8003656:	f000 bc95 	b.w	8003f84 <StartDefaultTask+0xe64>
							devError |= devQue;
 800365a:	4d26      	ldr	r5, [pc, #152]	; (80036f4 <StartDefaultTask+0x5d4>)
 800365c:	7a6b      	ldrb	r3, [r5, #9]
 800365e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003662:	726b      	strb	r3, [r5, #9]
							free(cmds);
 8003664:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003666:	f00a fb55 	bl	800dd14 <free>
							cmds = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	63ab      	str	r3, [r5, #56]	; 0x38
 800366e:	e7e7      	b.n	8003640 <StartDefaultTask+0x520>
					} else devError |= devMem;
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <StartDefaultTask+0x5d4>)
 8003672:	7a53      	ldrb	r3, [r2, #9]
 8003674:	f043 0310 	orr.w	r3, r3, #16
 8003678:	7253      	strb	r3, [r2, #9]
 800367a:	e7e1      	b.n	8003640 <StartDefaultTask+0x520>
				} else tmr_send = 0;
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <StartDefaultTask+0x5d4>)
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
 8003682:	f000 bc7f 	b.w	8003f84 <StartDefaultTask+0xe64>
			} else if (sntp_flag) {// Запускаем цепочку команд получения даты/времени от sntp сервера
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <StartDefaultTask+0x5d4>)
 8003688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368c:	b16b      	cbz	r3, 80036aa <StartDefaultTask+0x58a>
				sntp_flag = 0;
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <StartDefaultTask+0x5d4>)
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				sntpInit = 0;
 8003696:	775a      	strb	r2, [r3, #29]
				grp_cmd = seqTime;
 8003698:	2201      	movs	r2, #1
 800369a:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
				cmd_adr = &cmd_time[0].cmd[0];
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <StartDefaultTask+0x5f8>)
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
				atTotal = cmd_timeMax;
 80036a2:	2308      	movs	r3, #8
 80036a4:	9308      	str	r3, [sp, #32]
 80036a6:	f000 bc81 	b.w	8003fac <StartDefaultTask+0xe8c>
			} else if (radio_flag) {// Запускаем цепочку команд активации режима radio у модуля GSM
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <StartDefaultTask+0x5d4>)
 80036ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036b0:	b163      	cbz	r3, 80036cc <StartDefaultTask+0x5ac>
				radio_flag = 0;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <StartDefaultTask+0x5d4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				grp_cmd = seqRadio;
 80036ba:	2203      	movs	r2, #3
 80036bc:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
				cmd_adr = &cmd_radio[0].cmd[0];
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <StartDefaultTask+0x5fc>)
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
				atTotal = cmd_radioMax;
 80036c4:	2304      	movs	r3, #4
 80036c6:	9308      	str	r3, [sp, #32]
 80036c8:	f000 bc70 	b.w	8003fac <StartDefaultTask+0xe8c>
			}  else if (net_flag) {// Запускаем цепочку команд для установления соединения со сторонним сервером
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <StartDefaultTask+0x5d4>)
 80036ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 847d 	beq.w	8003fd2 <StartDefaultTask+0xeb2>
				net_flag = false;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <StartDefaultTask+0x5d4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				grp_cmd = seqNet;
 80036e0:	2202      	movs	r2, #2
 80036e2:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
				cmd_adr = &cmd_net[0].cmd[0];
 80036e6:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <StartDefaultTask+0x600>)
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
				atTotal = cmd_netMax;
 80036ea:	2308      	movs	r3, #8
 80036ec:	9308      	str	r3, [sp, #32]
 80036ee:	f000 bc5d 	b.w	8003fac <StartDefaultTask+0xe8c>
 80036f2:	bf00      	nop
 80036f4:	200003dc 	.word	0x200003dc
 80036f8:	40020400 	.word	0x40020400
 80036fc:	0801338c 	.word	0x0801338c
 8003700:	20007ab4 	.word	0x20007ab4
 8003704:	20000010 	.word	0x20000010
 8003708:	080133f0 	.word	0x080133f0
 800370c:	20000400 	.word	0x20000400
 8003710:	08012460 	.word	0x08012460
 8003714:	20007d40 	.word	0x20007d40
 8003718:	080128e0 	.word	0x080128e0
 800371c:	080120b8 	.word	0x080120b8
 8003720:	08012b20 	.word	0x08012b20
			if (check_tmr(tmr_cmd)) {
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe f924 	bl	8001972 <check_tmr>
 800372a:	4605      	mov	r5, r0
 800372c:	2800      	cmp	r0, #0
 800372e:	f000 8454 	beq.w	8003fda <StartDefaultTask+0xeba>
				if (gsmFlags.sReady) {
 8003732:	4bab      	ldr	r3, [pc, #684]	; (80039e0 <StartDefaultTask+0x8c0>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f013 0f10 	tst.w	r3, #16
 800373a:	f000 844e 	beq.w	8003fda <StartDefaultTask+0xeba>
					if (!gsmInit) {
 800373e:	4ba9      	ldr	r3, [pc, #676]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003740:	7f9b      	ldrb	r3, [r3, #30]
 8003742:	b9bb      	cbnz	r3, 8003774 <StartDefaultTask+0x654>
						grp_cmd = seqInit;
 8003744:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
						cmd_adr = &cmd_ini[0].cmd[0];
 8003748:	4ba6      	ldr	r3, [pc, #664]	; (80039e4 <StartDefaultTask+0x8c4>)
 800374a:	4aa7      	ldr	r2, [pc, #668]	; (80039e8 <StartDefaultTask+0x8c8>)
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
						atTotal = cmd_iniMax;
 800374e:	230e      	movs	r3, #14
 8003750:	9308      	str	r3, [sp, #32]
					gsmFlags.busy = 1;
 8003752:	4aa3      	ldr	r2, [pc, #652]	; (80039e0 <StartDefaultTask+0x8c0>)
 8003754:	78d3      	ldrb	r3, [r2, #3]
 8003756:	f043 0304 	orr.w	r3, r3, #4
 800375a:	70d3      	strb	r3, [r2, #3]
					tmr_next = get_tmr10(_1s);
 800375c:	2064      	movs	r0, #100	; 0x64
 800375e:	f7fe f8f3 	bl	8001948 <get_tmr10>
 8003762:	9006      	str	r0, [sp, #24]
					at_auto = true;
 8003764:	46a9      	mov	r9, r5
					next_cmd = true;
 8003766:	9505      	str	r5, [sp, #20]
					tmr_cmd = tmr_ack = 0;
 8003768:	f04f 0800 	mov.w	r8, #0
 800376c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003770:	f000 bc33 	b.w	8003fda <StartDefaultTask+0xeba>
					} else if (!sntpInit) {
 8003774:	4b9b      	ldr	r3, [pc, #620]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003776:	7f5b      	ldrb	r3, [r3, #29]
 8003778:	b943      	cbnz	r3, 800378c <StartDefaultTask+0x66c>
						grp_cmd = seqTime;
 800377a:	2301      	movs	r3, #1
 800377c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
						cmd_adr = &cmd_time[0].cmd[0];
 8003780:	4b98      	ldr	r3, [pc, #608]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003782:	4a9a      	ldr	r2, [pc, #616]	; (80039ec <StartDefaultTask+0x8cc>)
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
						atTotal = cmd_timeMax;
 8003786:	2308      	movs	r3, #8
 8003788:	9308      	str	r3, [sp, #32]
 800378a:	e7e2      	b.n	8003752 <StartDefaultTask+0x632>
					} else if (!netInit) {
 800378c:	4b95      	ldr	r3, [pc, #596]	; (80039e4 <StartDefaultTask+0x8c4>)
 800378e:	7fdb      	ldrb	r3, [r3, #31]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1de      	bne.n	8003752 <StartDefaultTask+0x632>
						grp_cmd = seqNet;
 8003794:	2302      	movs	r3, #2
 8003796:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
						cmd_adr = &cmd_net[0].cmd[0];
 800379a:	4b92      	ldr	r3, [pc, #584]	; (80039e4 <StartDefaultTask+0x8c4>)
 800379c:	4a94      	ldr	r2, [pc, #592]	; (80039f0 <StartDefaultTask+0x8d0>)
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
						atTotal = cmd_netMax;
 80037a0:	2308      	movs	r3, #8
 80037a2:	9308      	str	r3, [sp, #32]
 80037a4:	e7d5      	b.n	8003752 <StartDefaultTask+0x632>
				if (check_tmr10(tmr_next)) {
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe f8d4 	bl	8001954 <check_tmr10>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	f000 841c 	beq.w	8003fea <StartDefaultTask+0xeca>
					if (next_cmd) {
 80037b2:	9b05      	ldr	r3, [sp, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8188 	beq.w	8003aca <StartDefaultTask+0x9aa>
						cur_cmd++;
 80037ba:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80037be:	3301      	adds	r3, #1
 80037c0:	b25b      	sxtb	r3, r3
 80037c2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
						gsmFlags.busy = 1;
 80037c6:	4986      	ldr	r1, [pc, #536]	; (80039e0 <StartDefaultTask+0x8c0>)
 80037c8:	78ca      	ldrb	r2, [r1, #3]
 80037ca:	f042 0204 	orr.w	r2, r2, #4
 80037ce:	70ca      	strb	r2, [r1, #3]
						switch (grp_cmd) {
 80037d0:	f99d 204e 	ldrsb.w	r2, [sp, #78]	; 0x4e
 80037d4:	2a03      	cmp	r2, #3
 80037d6:	f200 817b 	bhi.w	8003ad0 <StartDefaultTask+0x9b0>
								if (cur_cmd < atTotal) {
 80037da:	9908      	ldr	r1, [sp, #32]
 80037dc:	428b      	cmp	r3, r1
 80037de:	f280 80e1 	bge.w	80039a4 <StartDefaultTask+0x884>
									uk_cmd = cmd_adr + (cur_cmd * sizeof(ats_t));//cmd
 80037e2:	4980      	ldr	r1, [pc, #512]	; (80039e4 <StartDefaultTask+0x8c4>)
 80037e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037e6:	2648      	movs	r6, #72	; 0x48
 80037e8:	fb06 1603 	mla	r6, r6, r3, r1
									uk_ack = uk_cmd + CMD_LEN;//cmd_adr[cur_cmd]->ack;
 80037ec:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80037f0:	9107      	str	r1, [sp, #28]
									switch (grp_cmd) {
 80037f2:	2a02      	cmp	r2, #2
 80037f4:	f000 809e 	beq.w	8003934 <StartDefaultTask+0x814>
 80037f8:	2a03      	cmp	r2, #3
 80037fa:	d063      	beq.n	80038c4 <StartDefaultTask+0x7a4>
 80037fc:	2a01      	cmp	r2, #1
 80037fe:	d032      	beq.n	8003866 <StartDefaultTask+0x746>
 8003800:	2528      	movs	r5, #40	; 0x28
									if (cmds) { free(cmds); cmds = NULL; }
 8003802:	4b78      	ldr	r3, [pc, #480]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003804:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003806:	b108      	cbz	r0, 800380c <StartDefaultTask+0x6ec>
 8003808:	f00a fa84 	bl	800dd14 <free>
									cmds = (char *)calloc(1, lens + 1);
 800380c:	1c69      	adds	r1, r5, #1
 800380e:	2001      	movs	r0, #1
 8003810:	f00a f996 	bl	800db40 <calloc>
 8003814:	4b73      	ldr	r3, [pc, #460]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003816:	6398      	str	r0, [r3, #56]	; 0x38
									if (cmds) {
 8003818:	2800      	cmp	r0, #0
 800381a:	f000 80bd 	beq.w	8003998 <StartDefaultTask+0x878>
										strcpy(cmds, uk_cmd);
 800381e:	4631      	mov	r1, r6
 8003820:	f00a fe23 	bl	800e46a <strcpy>
										if (putRECQ(cmds, &gsmTo) < 0) {
 8003824:	4973      	ldr	r1, [pc, #460]	; (80039f4 <StartDefaultTask+0x8d4>)
 8003826:	4b6f      	ldr	r3, [pc, #444]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800382a:	f7fe f8bf 	bl	80019ac <putRECQ>
 800382e:	2800      	cmp	r0, #0
 8003830:	f2c0 80a7 	blt.w	8003982 <StartDefaultTask+0x862>
											tmr_ack = get_tmr10(_15s);//wait answer from module 10 sec
 8003834:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003838:	f7fe f886 	bl	8001948 <get_tmr10>
 800383c:	4680      	mov	r8, r0
									if (devError) {
 800383e:	4b69      	ldr	r3, [pc, #420]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003840:	7a5b      	ldrb	r3, [r3, #9]
 8003842:	b14b      	cbz	r3, 8003858 <StartDefaultTask+0x738>
										cur_cmd = -1;
 8003844:	23ff      	movs	r3, #255	; 0xff
 8003846:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
										tmr_next = tmr_ack = 0;
 800384a:	f04f 0800 	mov.w	r8, #0
										next_cmd = at_auto = false;
 800384e:	46c1      	mov	r9, r8
										uk_cmd = uk_ack = NULL;
 8003850:	f8cd 801c 	str.w	r8, [sp, #28]
										cmd_err = CMD_REPEAT;
 8003854:	f04f 0a05 	mov.w	sl, #5
									prn_cmd = true;
 8003858:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <StartDefaultTask+0x8d8>)
 800385a:	2201      	movs	r2, #1
 800385c:	711a      	strb	r2, [r3, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	9306      	str	r3, [sp, #24]
 8003862:	9305      	str	r3, [sp, #20]
 8003864:	e3c1      	b.n	8003fea <StartDefaultTask+0xeca>
											if (cur_cmd == tSAPBR31) {//{"AT+SAPBR=3,1,\"APN\",","OK"},//\"internet\"\r\n" | "APN" + eol
 8003866:	2b01      	cmp	r3, #1
 8003868:	d005      	beq.n	8003876 <StartDefaultTask+0x756>
											} else if (cur_cmd == tCNTP_SRV) {//{"AT+CNTP=","OK"},//\"pool.ntp.org\",8\r\n" | "SNTP",TZONE<<2 + eol
 800386a:	2b04      	cmp	r3, #4
 800386c:	d00f      	beq.n	800388e <StartDefaultTask+0x76e>
											} else if (cur_cmd == tCCLK) gsmFlags.okDT = 0;
 800386e:	2b06      	cmp	r3, #6
 8003870:	d021      	beq.n	80038b6 <StartDefaultTask+0x796>
									int lens = CMD_LEN;
 8003872:	2528      	movs	r5, #40	; 0x28
 8003874:	e7c5      	b.n	8003802 <StartDefaultTask+0x6e2>
												lens = sprintf(cmdBuf, "%s\"%s\"%s", uk_cmd, APN, eol);
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <StartDefaultTask+0x8d8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <StartDefaultTask+0x8dc>)
 800387e:	4632      	mov	r2, r6
 8003880:	495f      	ldr	r1, [pc, #380]	; (8003a00 <StartDefaultTask+0x8e0>)
 8003882:	a814      	add	r0, sp, #80	; 0x50
 8003884:	f00a fd44 	bl	800e310 <siprintf>
 8003888:	4605      	mov	r5, r0
												uk_cmd = &cmdBuf[0];
 800388a:	ae14      	add	r6, sp, #80	; 0x50
 800388c:	e7b9      	b.n	8003802 <StartDefaultTask+0x6e2>
												strncpy(cntpSRV, SNTP, sizeof(cntpSRV) - 1);
 800388e:	4d5d      	ldr	r5, [pc, #372]	; (8003a04 <StartDefaultTask+0x8e4>)
 8003890:	223f      	movs	r2, #63	; 0x3f
 8003892:	4629      	mov	r1, r5
 8003894:	485c      	ldr	r0, [pc, #368]	; (8003a08 <StartDefaultTask+0x8e8>)
 8003896:	f00a fe02 	bl	800e49e <strncpy>
												lens = sprintf(cmdBuf, "%s\"%s\",%u%s", uk_cmd, SNTP, (TZONE << 2), eol);
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <StartDefaultTask+0x8d8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	2308      	movs	r3, #8
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	462b      	mov	r3, r5
 80038a6:	4632      	mov	r2, r6
 80038a8:	4958      	ldr	r1, [pc, #352]	; (8003a0c <StartDefaultTask+0x8ec>)
 80038aa:	a814      	add	r0, sp, #80	; 0x50
 80038ac:	f00a fd30 	bl	800e310 <siprintf>
 80038b0:	4605      	mov	r5, r0
												uk_cmd = &cmdBuf[0];
 80038b2:	ae14      	add	r6, sp, #80	; 0x50
 80038b4:	e7a5      	b.n	8003802 <StartDefaultTask+0x6e2>
											} else if (cur_cmd == tCCLK) gsmFlags.okDT = 0;
 80038b6:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <StartDefaultTask+0x8c0>)
 80038b8:	785a      	ldrb	r2, [r3, #1]
 80038ba:	f36f 1204 	bfc	r2, #4, #1
 80038be:	705a      	strb	r2, [r3, #1]
									int lens = CMD_LEN;
 80038c0:	2528      	movs	r5, #40	; 0x28
 80038c2:	e79e      	b.n	8003802 <StartDefaultTask+0x6e2>
											if (cur_cmd == fOPEN) {
 80038c4:	b94b      	cbnz	r3, 80038da <StartDefaultTask+0x7ba>
												gsmFlags.ropen = 1;
 80038c6:	4a46      	ldr	r2, [pc, #280]	; (80039e0 <StartDefaultTask+0x8c0>)
 80038c8:	7853      	ldrb	r3, [r2, #1]
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	7053      	strb	r3, [r2, #1]
												indList = 0;
 80038d0:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <StartDefaultTask+0x8c4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	729a      	strb	r2, [r3, #10]
									int lens = CMD_LEN;
 80038d6:	2528      	movs	r5, #40	; 0x28
 80038d8:	e793      	b.n	8003802 <StartDefaultTask+0x6e2>
											} else if (cur_cmd == fCLOSE) {
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d003      	beq.n	80038e6 <StartDefaultTask+0x7c6>
											} else if (cur_cmd == fFREQ) {//{"AT+FMFREQ=","OK"}//,//1025 ; установить чатоту 102.5 Мгц | 1025 + eol
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d00b      	beq.n	80038fa <StartDefaultTask+0x7da>
									int lens = CMD_LEN;
 80038e2:	2528      	movs	r5, #40	; 0x28
 80038e4:	e78d      	b.n	8003802 <StartDefaultTask+0x6e2>
												gsmFlags.ropen = 0;
 80038e6:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <StartDefaultTask+0x8c0>)
 80038e8:	785a      	ldrb	r2, [r3, #1]
 80038ea:	f36f 12c7 	bfc	r2, #7, #1
 80038ee:	705a      	strb	r2, [r3, #1]
									int lens = CMD_LEN;
 80038f0:	2528      	movs	r5, #40	; 0x28
 80038f2:	e786      	b.n	8003802 <StartDefaultTask+0x6e2>
													indList++;
 80038f4:	3201      	adds	r2, #1
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <StartDefaultTask+0x8c4>)
 80038f8:	729a      	strb	r2, [r3, #10]
												while (indList < MAX_FREQ_LIST) {
 80038fa:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <StartDefaultTask+0x8c4>)
 80038fc:	7a9a      	ldrb	r2, [r3, #10]
 80038fe:	2a07      	cmp	r2, #7
 8003900:	d806      	bhi.n	8003910 <StartDefaultTask+0x7f0>
													if (freqList[indList]) {
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003904:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003908:	899b      	ldrh	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f2      	beq.n	80038f4 <StartDefaultTask+0x7d4>
 800390e:	e001      	b.n	8003914 <StartDefaultTask+0x7f4>
												uint16_t fr = 1025;
 8003910:	f240 4301 	movw	r3, #1025	; 0x401
												lens = sprintf(cmdBuf, "%s%u%s", uk_cmd, fr, eol);
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <StartDefaultTask+0x8d8>)
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	9200      	str	r2, [sp, #0]
 800391a:	4632      	mov	r2, r6
 800391c:	493c      	ldr	r1, [pc, #240]	; (8003a10 <StartDefaultTask+0x8f0>)
 800391e:	a814      	add	r0, sp, #80	; 0x50
 8003920:	f00a fcf6 	bl	800e310 <siprintf>
 8003924:	4605      	mov	r5, r0
												gsmFlags.play = 1;
 8003926:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <StartDefaultTask+0x8c0>)
 8003928:	78d3      	ldrb	r3, [r2, #3]
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	70d3      	strb	r3, [r2, #3]
												uk_cmd = &cmdBuf[0];
 8003930:	ae14      	add	r6, sp, #80	; 0x50
 8003932:	e766      	b.n	8003802 <StartDefaultTask+0x6e2>
											if (cur_cmd == nCSTT) {//"AT+CSTT=\"internet\",\"beeline\",\"beeline\"\r\n","OK", | "APN","LOGIN","PASSWORD" + eol
 8003934:	2b01      	cmp	r3, #1
 8003936:	d003      	beq.n	8003940 <StartDefaultTask+0x820>
											} else if (cur_cmd == nCIPSTART) {//"AT+CIPSTART=\"TCP\",","CONNECT OK"//\"213.149.17.142\",8778\r\n","CONNECT OK"//after OK -> CONNECT OK | "SRV"
 8003938:	2b07      	cmp	r3, #7
 800393a:	d010      	beq.n	800395e <StartDefaultTask+0x83e>
									int lens = CMD_LEN;
 800393c:	2528      	movs	r5, #40	; 0x28
 800393e:	e760      	b.n	8003802 <StartDefaultTask+0x6e2>
												lens = sprintf(cmdBuf, "%s\"%s\",\"%s\",\"%s\"%s", uk_cmd, APN, LOGIN, PASSWORD, eol);
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <StartDefaultTask+0x8d8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <StartDefaultTask+0x8f4>)
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <StartDefaultTask+0x8dc>)
 800394e:	4632      	mov	r2, r6
 8003950:	4931      	ldr	r1, [pc, #196]	; (8003a18 <StartDefaultTask+0x8f8>)
 8003952:	a814      	add	r0, sp, #80	; 0x50
 8003954:	f00a fcdc 	bl	800e310 <siprintf>
 8003958:	4605      	mov	r5, r0
												uk_cmd = &cmdBuf[0];
 800395a:	ae14      	add	r6, sp, #80	; 0x50
 800395c:	e751      	b.n	8003802 <StartDefaultTask+0x6e2>
												lens = sprintf(cmdBuf, "%s\"%s\",%u%s", uk_cmd, SRV_ADR, SRV_PORT, eol);
 800395e:	af14      	add	r7, sp, #80	; 0x50
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <StartDefaultTask+0x8d8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	f242 234a 	movw	r3, #8778	; 0x224a
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <StartDefaultTask+0x8fc>)
 800396e:	4632      	mov	r2, r6
 8003970:	4926      	ldr	r1, [pc, #152]	; (8003a0c <StartDefaultTask+0x8ec>)
 8003972:	4638      	mov	r0, r7
 8003974:	f00a fccc 	bl	800e310 <siprintf>
 8003978:	4605      	mov	r5, r0
												cmdBuf[lens] = '\0';
 800397a:	2300      	movs	r3, #0
 800397c:	543b      	strb	r3, [r7, r0]
												uk_cmd = &cmdBuf[0];
 800397e:	463e      	mov	r6, r7
 8003980:	e73f      	b.n	8003802 <StartDefaultTask+0x6e2>
											devError |= devQue;
 8003982:	4d18      	ldr	r5, [pc, #96]	; (80039e4 <StartDefaultTask+0x8c4>)
 8003984:	7a6b      	ldrb	r3, [r5, #9]
 8003986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398a:	726b      	strb	r3, [r5, #9]
											free(cmds);
 800398c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800398e:	f00a f9c1 	bl	800dd14 <free>
											cmds = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	63ab      	str	r3, [r5, #56]	; 0x38
 8003996:	e752      	b.n	800383e <StartDefaultTask+0x71e>
									} else devError |= devMem;
 8003998:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <StartDefaultTask+0x8c4>)
 800399a:	7a53      	ldrb	r3, [r2, #9]
 800399c:	f043 0310 	orr.w	r3, r3, #16
 80039a0:	7253      	strb	r3, [r2, #9]
 80039a2:	e74c      	b.n	800383e <StartDefaultTask+0x71e>
									cur_cmd = -1;
 80039a4:	23ff      	movs	r3, #255	; 0xff
 80039a6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
									gsmFlags.busy = 0;
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <StartDefaultTask+0x8c0>)
 80039ac:	78d9      	ldrb	r1, [r3, #3]
 80039ae:	f36f 0182 	bfc	r1, #2, #1
 80039b2:	70d9      	strb	r1, [r3, #3]
									if (grp_cmd == seqInit) {
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d144      	bne.n	8003a42 <StartDefaultTask+0x922>
										gsmInit = true;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <StartDefaultTask+0x8c4>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	779a      	strb	r2, [r3, #30]
										if (!sntpInit) {
 80039be:	7f5b      	ldrb	r3, [r3, #29]
 80039c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039c4:	9205      	str	r2, [sp, #20]
 80039c6:	b35b      	cbz	r3, 8003a20 <StartDefaultTask+0x900>
									tmr_next = tmr_ack = 0;
 80039c8:	f04f 0800 	mov.w	r8, #0
 80039cc:	f8cd 8018 	str.w	r8, [sp, #24]
									next_cmd = at_auto = false;
 80039d0:	46c1      	mov	r9, r8
 80039d2:	f8cd 8014 	str.w	r8, [sp, #20]
									uk_cmd = uk_ack = NULL;
 80039d6:	f8cd 801c 	str.w	r8, [sp, #28]
									cmd_err = CMD_REPEAT;
 80039da:	f04f 0a05 	mov.w	sl, #5
 80039de:	e304      	b.n	8003fea <StartDefaultTask+0xeca>
 80039e0:	20007ab4 	.word	0x20007ab4
 80039e4:	200003dc 	.word	0x200003dc
 80039e8:	080124f0 	.word	0x080124f0
 80039ec:	080128e0 	.word	0x080128e0
 80039f0:	08012b20 	.word	0x08012b20
 80039f4:	20007d40 	.word	0x20007d40
 80039f8:	20000010 	.word	0x20000010
 80039fc:	080133a4 	.word	0x080133a4
 8003a00:	080133b0 	.word	0x080133b0
 8003a04:	080133bc 	.word	0x080133bc
 8003a08:	20000424 	.word	0x20000424
 8003a0c:	080133cc 	.word	0x080133cc
 8003a10:	080133d8 	.word	0x080133d8
 8003a14:	080133f4 	.word	0x080133f4
 8003a18:	080133e0 	.word	0x080133e0
 8003a1c:	080133fc 	.word	0x080133fc
											grp_cmd = seqTime;
 8003a20:	2001      	movs	r0, #1
 8003a22:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
											tmr_cmd = get_tmr(1);
 8003a26:	f7fd ff9e 	bl	8001966 <get_tmr>
 8003a2a:	9009      	str	r0, [sp, #36]	; 0x24
									next_cmd = at_auto = false;
 8003a2c:	f8dd 9014 	ldr.w	r9, [sp, #20]
									tmr_next = tmr_ack = 0;
 8003a30:	f04f 0800 	mov.w	r8, #0
 8003a34:	f8cd 8018 	str.w	r8, [sp, #24]
									uk_cmd = uk_ack = NULL;
 8003a38:	f8cd 801c 	str.w	r8, [sp, #28]
									cmd_err = CMD_REPEAT;
 8003a3c:	f04f 0a05 	mov.w	sl, #5
 8003a40:	e2d3      	b.n	8003fea <StartDefaultTask+0xeca>
									} else if (grp_cmd == seqTime) {
 8003a42:	2a01      	cmp	r2, #1
 8003a44:	d00d      	beq.n	8003a62 <StartDefaultTask+0x942>
									} else if (grp_cmd == seqNet) {
 8003a46:	2a02      	cmp	r2, #2
 8003a48:	d030      	beq.n	8003aac <StartDefaultTask+0x98c>
									tmr_next = tmr_ack = 0;
 8003a4a:	f04f 0800 	mov.w	r8, #0
 8003a4e:	f8cd 8018 	str.w	r8, [sp, #24]
									next_cmd = at_auto = false;
 8003a52:	46c1      	mov	r9, r8
 8003a54:	f8cd 8014 	str.w	r8, [sp, #20]
									uk_cmd = uk_ack = NULL;
 8003a58:	f8cd 801c 	str.w	r8, [sp, #28]
									cmd_err = CMD_REPEAT;
 8003a5c:	f04f 0a05 	mov.w	sl, #5
 8003a60:	e2c3      	b.n	8003fea <StartDefaultTask+0xeca>
										sntpInit = true;
 8003a62:	4b9a      	ldr	r3, [pc, #616]	; (8003ccc <StartDefaultTask+0xbac>)
 8003a64:	775a      	strb	r2, [r3, #29]
										if (!netInit) {
 8003a66:	7fdb      	ldrb	r3, [r3, #31]
 8003a68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a6c:	9205      	str	r2, [sp, #20]
 8003a6e:	b15b      	cbz	r3, 8003a88 <StartDefaultTask+0x968>
									tmr_next = tmr_ack = 0;
 8003a70:	f04f 0800 	mov.w	r8, #0
 8003a74:	f8cd 8018 	str.w	r8, [sp, #24]
									next_cmd = at_auto = false;
 8003a78:	46c1      	mov	r9, r8
 8003a7a:	f8cd 8014 	str.w	r8, [sp, #20]
									uk_cmd = uk_ack = NULL;
 8003a7e:	f8cd 801c 	str.w	r8, [sp, #28]
									cmd_err = CMD_REPEAT;
 8003a82:	f04f 0a05 	mov.w	sl, #5
 8003a86:	e2b0      	b.n	8003fea <StartDefaultTask+0xeca>
											grp_cmd = seqNet;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
											tmr_cmd = get_tmr(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7fd ff69 	bl	8001966 <get_tmr>
 8003a94:	9009      	str	r0, [sp, #36]	; 0x24
									next_cmd = at_auto = false;
 8003a96:	f8dd 9014 	ldr.w	r9, [sp, #20]
									tmr_next = tmr_ack = 0;
 8003a9a:	f04f 0800 	mov.w	r8, #0
 8003a9e:	f8cd 8018 	str.w	r8, [sp, #24]
									uk_cmd = uk_ack = NULL;
 8003aa2:	f8cd 801c 	str.w	r8, [sp, #28]
									cmd_err = CMD_REPEAT;
 8003aa6:	f04f 0a05 	mov.w	sl, #5
 8003aaa:	e29e      	b.n	8003fea <StartDefaultTask+0xeca>
										netInit = true;
 8003aac:	4b87      	ldr	r3, [pc, #540]	; (8003ccc <StartDefaultTask+0xbac>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	77da      	strb	r2, [r3, #31]
									tmr_next = tmr_ack = 0;
 8003ab2:	f04f 0800 	mov.w	r8, #0
 8003ab6:	f8cd 8018 	str.w	r8, [sp, #24]
									next_cmd = at_auto = false;
 8003aba:	46c1      	mov	r9, r8
 8003abc:	f8cd 8014 	str.w	r8, [sp, #20]
									uk_cmd = uk_ack = NULL;
 8003ac0:	f8cd 801c 	str.w	r8, [sp, #28]
									cmd_err = CMD_REPEAT;
 8003ac4:	f04f 0a05 	mov.w	sl, #5
 8003ac8:	e28f      	b.n	8003fea <StartDefaultTask+0xeca>
					tmr_next = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	9306      	str	r3, [sp, #24]
 8003ace:	e28c      	b.n	8003fea <StartDefaultTask+0xeca>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9306      	str	r3, [sp, #24]
						next_cmd = false;
 8003ad4:	9305      	str	r3, [sp, #20]
 8003ad6:	e288      	b.n	8003fea <StartDefaultTask+0xeca>
				if (check_tmr10(tmr_ack)) {
 8003ad8:	4640      	mov	r0, r8
 8003ada:	f7fd ff3b 	bl	8001954 <check_tmr10>
 8003ade:	4605      	mov	r5, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	f000 8286 	beq.w	8003ff2 <StartDefaultTask+0xed2>
					if (cmd_err) cmd_err--;
 8003ae6:	f1ba 0f00 	cmp.w	sl, #0
 8003aea:	d003      	beq.n	8003af4 <StartDefaultTask+0x9d4>
 8003aec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003af0:	fa5f fa8a 	uxtb.w	sl, sl
					if (!cmd_err) {// stop at_commands sequence
 8003af4:	f1ba 0f00 	cmp.w	sl, #0
 8003af8:	d012      	beq.n	8003b20 <StartDefaultTask+0xa00>
						if (grp_cmd != seqNet) {
 8003afa:	f99d 304e 	ldrsb.w	r3, [sp, #78]	; 0x4e
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d018      	beq.n	8003b34 <StartDefaultTask+0xa14>
							if (cur_cmd > 0) cur_cmd--;
 8003b02:	f99d 304f 	ldrsb.w	r3, [sp, #79]	; 0x4f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dd02      	ble.n	8003b10 <StartDefaultTask+0x9f0>
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
							tmr_next = get_tmr10(_2s);
 8003b10:	20c8      	movs	r0, #200	; 0xc8
 8003b12:	f7fd ff19 	bl	8001948 <get_tmr10>
 8003b16:	9006      	str	r0, [sp, #24]
					next_cmd = true;
 8003b18:	9505      	str	r5, [sp, #20]
					tmr_ack = 0;
 8003b1a:	f04f 0800 	mov.w	r8, #0
 8003b1e:	e268      	b.n	8003ff2 <StartDefaultTask+0xed2>
						tmr_next = get_tmr10(_750ms);
 8003b20:	204b      	movs	r0, #75	; 0x4b
 8003b22:	f7fd ff11 	bl	8001948 <get_tmr10>
 8003b26:	9006      	str	r0, [sp, #24]
					next_cmd = true;
 8003b28:	9505      	str	r5, [sp, #20]
					tmr_ack = 0;
 8003b2a:	f04f 0800 	mov.w	r8, #0
						cmd_err = CMD_REPEAT;
 8003b2e:	f04f 0a05 	mov.w	sl, #5
 8003b32:	e25e      	b.n	8003ff2 <StartDefaultTask+0xed2>
							cur_cmd = atTotal = cmd_timeMax;
 8003b34:	2608      	movs	r6, #8
 8003b36:	f88d 604f 	strb.w	r6, [sp, #79]	; 0x4f
							tmr_next = get_tmr10(_750ms);
 8003b3a:	204b      	movs	r0, #75	; 0x4b
 8003b3c:	f7fd ff04 	bl	8001948 <get_tmr10>
 8003b40:	9006      	str	r0, [sp, #24]
					next_cmd = true;
 8003b42:	9505      	str	r5, [sp, #20]
							cur_cmd = atTotal = cmd_timeMax;
 8003b44:	9608      	str	r6, [sp, #32]
					tmr_ack = 0;
 8003b46:	f04f 0800 	mov.w	r8, #0
							cmd_err = CMD_REPEAT;
 8003b4a:	f04f 0a05 	mov.w	sl, #5
 8003b4e:	e250      	b.n	8003ff2 <StartDefaultTask+0xed2>
			if (result != -1) {//== cCIPSHUT
 8003b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b56:	f000 824c 	beq.w	8003ff2 <StartDefaultTask+0xed2>
				if (cmds) { free(cmds); cmds = NULL; }
 8003b5a:	4b5c      	ldr	r3, [pc, #368]	; (8003ccc <StartDefaultTask+0xbac>)
 8003b5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b5e:	b108      	cbz	r0, 8003b64 <StartDefaultTask+0xa44>
 8003b60:	f00a f8d8 	bl	800dd14 <free>
				cmds = (char *)calloc(1, CMD_LEN + 1);
 8003b64:	2129      	movs	r1, #41	; 0x29
 8003b66:	2001      	movs	r0, #1
 8003b68:	f009 ffea 	bl	800db40 <calloc>
 8003b6c:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <StartDefaultTask+0xbac>)
 8003b6e:	6398      	str	r0, [r3, #56]	; 0x38
				if (cmds) {
 8003b70:	b318      	cbz	r0, 8003bba <StartDefaultTask+0xa9a>
					strcpy(cmds, cmd_any[result].cmd);
 8003b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b74:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8003b78:	4b55      	ldr	r3, [pc, #340]	; (8003cd0 <StartDefaultTask+0xbb0>)
 8003b7a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003b7e:	f00a fc74 	bl	800e46a <strcpy>
					if (putRECQ(cmds, &gsmTo) < 0) {
 8003b82:	4954      	ldr	r1, [pc, #336]	; (8003cd4 <StartDefaultTask+0xbb4>)
 8003b84:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <StartDefaultTask+0xbac>)
 8003b86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b88:	f7fd ff10 	bl	80019ac <putRECQ>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	db06      	blt.n	8003b9e <StartDefaultTask+0xa7e>
					} else prn_cmd = true;//Report(NULL, false, cmds);
 8003b90:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <StartDefaultTask+0xbb8>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	711a      	strb	r2, [r3, #4]
				result = -1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b9c:	e229      	b.n	8003ff2 <StartDefaultTask+0xed2>
						devError |= devQue;
 8003b9e:	4d4b      	ldr	r5, [pc, #300]	; (8003ccc <StartDefaultTask+0xbac>)
 8003ba0:	7a6b      	ldrb	r3, [r5, #9]
 8003ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba6:	726b      	strb	r3, [r5, #9]
						free(cmds);
 8003ba8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003baa:	f00a f8b3 	bl	800dd14 <free>
						cmds = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	63ab      	str	r3, [r5, #56]	; 0x38
				result = -1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8003bb8:	e21b      	b.n	8003ff2 <StartDefaultTask+0xed2>
				} else devError |= devMem;
 8003bba:	4a44      	ldr	r2, [pc, #272]	; (8003ccc <StartDefaultTask+0xbac>)
 8003bbc:	7a53      	ldrb	r3, [r2, #9]
 8003bbe:	f043 0310 	orr.w	r3, r3, #16
 8003bc2:	7253      	strb	r3, [r2, #9]
				result = -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8003bca:	e212      	b.n	8003ff2 <StartDefaultTask+0xed2>
			if (check_tmr(wait_sms)) {
 8003bcc:	f7fd fed1 	bl	8001972 <check_tmr>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f000 8214 	beq.w	8003ffe <StartDefaultTask+0xede>
				wait_sms = 0;
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <StartDefaultTask+0xbac>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				sms_total = getSMSTotalCounter();
 8003bde:	f001 fabb 	bl	8005158 <getSMSTotalCounter>
 8003be2:	4601      	mov	r1, r0
 8003be4:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <StartDefaultTask+0xbbc>)
 8003be6:	7018      	strb	r0, [r3, #0]
				if (sms_total) {
 8003be8:	b910      	cbnz	r0, 8003bf0 <StartDefaultTask+0xad0>
				InitSMSList();
 8003bea:	f001 fa15 	bl	8005018 <InitSMSList>
 8003bee:	e206      	b.n	8003ffe <StartDefaultTask+0xede>
					*SMS_text = '\0';   sms_num = 0;
 8003bf0:	483b      	ldr	r0, [pc, #236]	; (8003ce0 <StartDefaultTask+0xbc0>)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	7003      	strb	r3, [r0, #0]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <StartDefaultTask+0xbc4>)
 8003bf8:	8013      	strh	r3, [r2, #0]
					if (ConcatSMS(SMS_text, sms_total, &sms_num, &sms_len) == sms_total) {
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <StartDefaultTask+0xbc8>)
 8003bfc:	f001 fa48 	bl	8005090 <ConcatSMS>
 8003c00:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <StartDefaultTask+0xbbc>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	4298      	cmp	r0, r3
 8003c06:	d1f0      	bne.n	8003bea <StartDefaultTask+0xaca>
						Report(NULL, true, "[SMS] Concat message #%u with len %u by timeout:\r\n%.*s\r\n",
 8003c08:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <StartDefaultTask+0xbc8>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	4a34      	ldr	r2, [pc, #208]	; (8003ce0 <StartDefaultTask+0xbc0>)
 8003c0e:	9202      	str	r2, [sp, #8]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <StartDefaultTask+0xbc4>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	4a34      	ldr	r2, [pc, #208]	; (8003cec <StartDefaultTask+0xbcc>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f7fd ffdb 	bl	8001bd8 <Report>
 8003c22:	e7e2      	b.n	8003bea <StartDefaultTask+0xaca>
			prn_flags = false;
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			prnFlags((void *)&gsmFlags);
 8003c2c:	4830      	ldr	r0, [pc, #192]	; (8003cf0 <StartDefaultTask+0xbd0>)
 8003c2e:	f7fe f89b 	bl	8001d68 <prnFlags>
		if (devError) {//  Блок выдачи на дисплей ошибок на устройстве, если таковые есть
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c34:	7a58      	ldrb	r0, [r3, #9]
 8003c36:	bb68      	cbnz	r0, 8003c94 <StartDefaultTask+0xb74>
		if (gpsFromFlag) {//queue for messages from GPS module is ready
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c3a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d15c      	bne.n	8003cfc <StartDefaultTask+0xbdc>
		if (flag_sector) {
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c44:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 816f 	beq.w	8003f2c <StartDefaultTask+0xe0c>
			flag_sector = false;
 8003c4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			switch (cmd_sector) {
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <StartDefaultTask+0xbb8>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	f200 8160 	bhi.w	8003f20 <StartDefaultTask+0xe00>
 8003c60:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003c64:	012e00be 	.word	0x012e00be
 8003c68:	00be0200 	.word	0x00be0200
			prn_rlist = false;
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			prnRList();
 8003c74:	f7fe f8fc 	bl	8001e70 <prnRList>
 8003c78:	e7db      	b.n	8003c32 <StartDefaultTask+0xb12>
			prn_freemem = false;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <StartDefaultTask+0xbac>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			Report(__func__, true, "Free heap memory size %lu\r\n", xPortGetFreeHeapSize());
 8003c82:	f009 ff25 	bl	800dad0 <xPortGetFreeHeapSize>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <StartDefaultTask+0xbd4>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	481a      	ldr	r0, [pc, #104]	; (8003cf8 <StartDefaultTask+0xbd8>)
 8003c8e:	f7fd ffa3 	bl	8001bd8 <Report>
 8003c92:	e7ce      	b.n	8003c32 <StartDefaultTask+0xb12>
			errNameStr(devError, scr);
 8003c94:	a93c      	add	r1, sp, #240	; 0xf0
 8003c96:	f7ff f9b5 	bl	8003004 <errNameStr>
			if (strlen(scr) > MAX_FONT_CHAR) scr[MAX_FONT_CHAR] = '\0';
 8003c9a:	a83c      	add	r0, sp, #240	; 0xf0
 8003c9c:	f7fc faaa 	bl	80001f4 <strlen>
 8003ca0:	2810      	cmp	r0, #16
 8003ca2:	d902      	bls.n	8003caa <StartDefaultTask+0xb8a>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
			i2c_ssd1306_text_xy(mkLineCenter(scr, FONT_WIDTH), 1, err_line, true);
 8003caa:	2108      	movs	r1, #8
 8003cac:	a83c      	add	r0, sp, #240	; 0xf0
 8003cae:	f002 faef 	bl	8006290 <mkLineCenter>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f002 fa48 	bl	800614c <i2c_ssd1306_text_xy>
			errLedOn(NULL);
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f7fd ffe1 	bl	8001c84 <errLedOn>
			devError = 0;
 8003cc2:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <StartDefaultTask+0xbac>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	725a      	strb	r2, [r3, #9]
 8003cc8:	e7b6      	b.n	8003c38 <StartDefaultTask+0xb18>
 8003cca:	bf00      	nop
 8003ccc:	200003dc 	.word	0x200003dc
 8003cd0:	080121d8 	.word	0x080121d8
 8003cd4:	20007d40 	.word	0x20007d40
 8003cd8:	20000010 	.word	0x20000010
 8003cdc:	200079f9 	.word	0x200079f9
 8003ce0:	200076d0 	.word	0x200076d0
 8003ce4:	20007a90 	.word	0x20007a90
 8003ce8:	200076cc 	.word	0x200076cc
 8003cec:	0801340c 	.word	0x0801340c
 8003cf0:	20007ab4 	.word	0x20007ab4
 8003cf4:	08013448 	.word	0x08013448
 8003cf8:	080120a4 	.word	0x080120a4
			if (check_tmr10(gps_tmr)) {
 8003cfc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003cfe:	f7fd fe29 	bl	8001954 <check_tmr10>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d09d      	beq.n	8003c42 <StartDefaultTask+0xb22>
				gps_tmr = get_tmr10(_50ms);
 8003d06:	2005      	movs	r0, #5
 8003d08:	f7fd fe1e 	bl	8001948 <get_tmr10>
 8003d0c:	900d      	str	r0, [sp, #52]	; 0x34
				if (getRECQ(buf, &gpsFrom) >= 0) {//get message from queue if present
 8003d0e:	495e      	ldr	r1, [pc, #376]	; (8003e88 <StartDefaultTask+0xd68>)
 8003d10:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 8003d14:	f7fd fe68 	bl	80019e8 <getRECQ>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	db92      	blt.n	8003c42 <StartDefaultTask+0xb22>
					if (gpsParse(buf)) {// анализ и преобразование данных из NMEA-формата в структуру с валидными данными
 8003d1c:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 8003d20:	f7fe fe6c 	bl	80029fc <gpsParse>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d08c      	beq.n	8003c42 <StartDefaultTask+0xb22>
						sch++;
 8003d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	930e      	str	r3, [sp, #56]	; 0x38
						if (sch == MAX_NMEA_MSG) {
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d186      	bne.n	8003c42 <StartDefaultTask+0xb22>
							if (prnGpsFlag) Report(NULL, true, "%s%s", gpsPrint(buf), eol);
 8003d34:	4b55      	ldr	r3, [pc, #340]	; (8003e8c <StartDefaultTask+0xd6c>)
 8003d36:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d142      	bne.n	8003dc4 <StartDefaultTask+0xca4>
							s_float_t flo = {0,0};
 8003d3e:	2600      	movs	r6, #0
 8003d40:	9611      	str	r6, [sp, #68]	; 0x44
 8003d42:	9612      	str	r6, [sp, #72]	; 0x48
							floatPart(GPS.dec_latitude, &flo);  sprintf(scr,            "%02lu.%04lu ",  flo.cel, flo.dro / 100);
 8003d44:	4d52      	ldr	r5, [pc, #328]	; (8003e90 <StartDefaultTask+0xd70>)
 8003d46:	a811      	add	r0, sp, #68	; 0x44
 8003d48:	686b      	ldr	r3, [r5, #4]
 8003d4a:	ee00 3a10 	vmov	s0, r3
 8003d4e:	f7fd fdd3 	bl	80018f8 <floatPart>
 8003d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d54:	2764      	movs	r7, #100	; 0x64
 8003d56:	fbb3 f3f7 	udiv	r3, r3, r7
 8003d5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003d5c:	494d      	ldr	r1, [pc, #308]	; (8003e94 <StartDefaultTask+0xd74>)
 8003d5e:	a83c      	add	r0, sp, #240	; 0xf0
 8003d60:	f00a fad6 	bl	800e310 <siprintf>
							floatPart(GPS.dec_longitude,&flo);  sprintf(scr+strlen(scr),"%02lu.%04lu", flo.cel, flo.dro / 100);
 8003d64:	a811      	add	r0, sp, #68	; 0x44
 8003d66:	682b      	ldr	r3, [r5, #0]
 8003d68:	ee00 3a10 	vmov	s0, r3
 8003d6c:	f7fd fdc4 	bl	80018f8 <floatPart>
 8003d70:	a83c      	add	r0, sp, #240	; 0xf0
 8003d72:	f7fc fa3f 	bl	80001f4 <strlen>
 8003d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d78:	fbb3 f3f7 	udiv	r3, r3, r7
 8003d7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003d7e:	4946      	ldr	r1, [pc, #280]	; (8003e98 <StartDefaultTask+0xd78>)
 8003d80:	af3c      	add	r7, sp, #240	; 0xf0
 8003d82:	4438      	add	r0, r7
 8003d84:	f00a fac4 	bl	800e310 <siprintf>
							floatPart(GPS.msl_altitude,  &flo); sprintf(scr+strlen(scr),"\n sat:%d alt:%lu",GPS.satelites, flo.cel);
 8003d88:	a811      	add	r0, sp, #68	; 0x44
 8003d8a:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
 8003d8e:	ee00 3a10 	vmov	s0, r3
 8003d92:	f7fd fdb1 	bl	80018f8 <floatPart>
 8003d96:	a83c      	add	r0, sp, #240	; 0xf0
 8003d98:	f7fc fa2c 	bl	80001f4 <strlen>
 8003d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d9e:	f8d5 201e 	ldr.w	r2, [r5, #30]
 8003da2:	493e      	ldr	r1, [pc, #248]	; (8003e9c <StartDefaultTask+0xd7c>)
 8003da4:	ad3c      	add	r5, sp, #240	; 0xf0
 8003da6:	4428      	add	r0, r5
 8003da8:	f00a fab2 	bl	800e310 <siprintf>
							i2c_ssd1306_text_xy(scr, 1, cor_line, false);
 8003dac:	4633      	mov	r3, r6
 8003dae:	2206      	movs	r2, #6
 8003db0:	2101      	movs	r1, #1
 8003db2:	a83c      	add	r0, sp, #240	; 0xf0
 8003db4:	f002 f9ca 	bl	800614c <i2c_ssd1306_text_xy>
							gps_tmr = get_tmr10(_700ms);
 8003db8:	2046      	movs	r0, #70	; 0x46
 8003dba:	f7fd fdc5 	bl	8001948 <get_tmr10>
 8003dbe:	900d      	str	r0, [sp, #52]	; 0x34
							sch = 0;
 8003dc0:	940e      	str	r4, [sp, #56]	; 0x38
 8003dc2:	e73e      	b.n	8003c42 <StartDefaultTask+0xb22>
							if (prnGpsFlag) Report(NULL, true, "%s%s", gpsPrint(buf), eol);
 8003dc4:	f50d 609e 	add.w	r0, sp, #1264	; 0x4f0
 8003dc8:	f7fe fed8 	bl	8002b7c <gpsPrint>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4a34      	ldr	r2, [pc, #208]	; (8003ea0 <StartDefaultTask+0xd80>)
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	9200      	str	r2, [sp, #0]
 8003dd4:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <StartDefaultTask+0xd84>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7fd fefd 	bl	8001bd8 <Report>
 8003dde:	e7ae      	b.n	8003d3e <StartDefaultTask+0xc1e>
					uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8003de0:	f002 ff0a 	bl	8006bf8 <W25qxx_getSectorSize>
 8003de4:	4c29      	ldr	r4, [pc, #164]	; (8003e8c <StartDefaultTask+0xd6c>)
 8003de6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003dea:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003dee:	fb01 2700 	mla	r7, r1, r0, r2
					uint32_t dlin = list_sector;
 8003df2:	f8d4 b09c 	ldr.w	fp, [r4, #156]	; 0x9c
					W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8003df6:	465b      	mov	r3, fp
 8003df8:	482b      	ldr	r0, [pc, #172]	; (8003ea8 <StartDefaultTask+0xd88>)
 8003dfa:	f003 f919 	bl	8007030 <W25qxx_ReadSector>
					Report(NULL, false, "Read sector:%d offset:%d len:%u%s", adr_sector, offset_sector, dlin, eol);
 8003dfe:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <StartDefaultTask+0xd80>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	f8cd b004 	str.w	fp, [sp, #4]
 8003e08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003e12:	4a26      	ldr	r2, [pc, #152]	; (8003eac <StartDefaultTask+0xd8c>)
 8003e14:	2100      	movs	r1, #0
 8003e16:	4608      	mov	r0, r1
 8003e18:	f7fd fede 	bl	8001bd8 <Report>
					uint32_t ind = 0;
 8003e1c:	2600      	movs	r6, #0
					while (ind < dlin) {
 8003e1e:	e02c      	b.n	8003e7a <StartDefaultTask+0xd5a>
							strcat(strf, eol);
 8003e20:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <StartDefaultTask+0xd80>)
 8003e22:	6899      	ldr	r1, [r3, #8]
 8003e24:	4822      	ldr	r0, [pc, #136]	; (8003eb0 <StartDefaultTask+0xd90>)
 8003e26:	f00a fb04 	bl	800e432 <strcat>
							w25_adr += step;
 8003e2a:	3720      	adds	r7, #32
							ind += step;
 8003e2c:	3620      	adds	r6, #32
							if (!(ind % W25qxx_getPageSize())) break;
 8003e2e:	f002 fee9 	bl	8006c04 <W25qxx_getPageSize>
 8003e32:	fbb6 f3f0 	udiv	r3, r6, r0
 8003e36:	fb00 6013 	mls	r0, r0, r3, r6
 8003e3a:	b1c0      	cbz	r0, 8003e6e <StartDefaultTask+0xd4e>
							sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003e3c:	4c1c      	ldr	r4, [pc, #112]	; (8003eb0 <StartDefaultTask+0xd90>)
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7fc f9d8 	bl	80001f4 <strlen>
 8003e44:	463a      	mov	r2, r7
 8003e46:	491b      	ldr	r1, [pc, #108]	; (8003eb4 <StartDefaultTask+0xd94>)
 8003e48:	4420      	add	r0, r4
 8003e4a:	f00a fa61 	bl	800e310 <siprintf>
							for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8003e4e:	2400      	movs	r4, #0
 8003e50:	2c1f      	cmp	r4, #31
 8003e52:	dce5      	bgt.n	8003e20 <StartDefaultTask+0xd00>
 8003e54:	4d16      	ldr	r5, [pc, #88]	; (8003eb0 <StartDefaultTask+0xd90>)
 8003e56:	4628      	mov	r0, r5
 8003e58:	f7fc f9cc 	bl	80001f4 <strlen>
 8003e5c:	19a3      	adds	r3, r4, r6
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <StartDefaultTask+0xd88>)
 8003e60:	5cd2      	ldrb	r2, [r2, r3]
 8003e62:	4915      	ldr	r1, [pc, #84]	; (8003eb8 <StartDefaultTask+0xd98>)
 8003e64:	4428      	add	r0, r5
 8003e66:	f00a fa53 	bl	800e310 <siprintf>
 8003e6a:	3401      	adds	r4, #1
 8003e6c:	e7f0      	b.n	8003e50 <StartDefaultTask+0xd30>
						Report(NULL, false, "%s", strf);
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <StartDefaultTask+0xd90>)
 8003e70:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <StartDefaultTask+0xd9c>)
 8003e72:	2100      	movs	r1, #0
 8003e74:	4608      	mov	r0, r1
 8003e76:	f7fd feaf 	bl	8001bd8 <Report>
					while (ind < dlin) {
 8003e7a:	455e      	cmp	r6, fp
 8003e7c:	d250      	bcs.n	8003f20 <StartDefaultTask+0xe00>
						strf[0] = '\0';
 8003e7e:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <StartDefaultTask+0xd6c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003e86:	e7d9      	b.n	8003e3c <StartDefaultTask+0xd1c>
 8003e88:	20007db4 	.word	0x20007db4
 8003e8c:	200003dc 	.word	0x200003dc
 8003e90:	200079fc 	.word	0x200079fc
 8003e94:	0801348c 	.word	0x0801348c
 8003e98:	0801349c 	.word	0x0801349c
 8003e9c:	080134a8 	.word	0x080134a8
 8003ea0:	20000010 	.word	0x20000010
 8003ea4:	08013484 	.word	0x08013484
 8003ea8:	20000ed0 	.word	0x20000ed0
 8003eac:	080134bc 	.word	0x080134bc
 8003eb0:	2000047c 	.word	0x2000047c
 8003eb4:	080134e0 	.word	0x080134e0
 8003eb8:	080134e8 	.word	0x080134e8
 8003ebc:	080133f0 	.word	0x080133f0
					uint32_t ss = W25qxx_getSectorSize();
 8003ec0:	f002 fe9a 	bl	8006bf8 <W25qxx_getSectorSize>
 8003ec4:	4604      	mov	r4, r0
					if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4b79      	ldr	r3, [pc, #484]	; (80040b0 <StartDefaultTask+0xf90>)
 8003ecc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8003ed0:	f002 ff04 	bl	8006cdc <W25qxx_IsEmptySector>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	f000 80bf 	beq.w	8004058 <StartDefaultTask+0xf38>
					memset(fs_work, byte_write, ss);
 8003eda:	4622      	mov	r2, r4
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <StartDefaultTask+0xf94>)
 8003ede:	7c19      	ldrb	r1, [r3, #16]
 8003ee0:	4875      	ldr	r0, [pc, #468]	; (80040b8 <StartDefaultTask+0xf98>)
 8003ee2:	f009 ff2d 	bl	800dd40 <memset>
					if (len_write != -1) ss = len_write;
 8003ee6:	4b72      	ldr	r3, [pc, #456]	; (80040b0 <StartDefaultTask+0xf90>)
 8003ee8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef0:	d000      	beq.n	8003ef4 <StartDefaultTask+0xdd4>
 8003ef2:	461c      	mov	r4, r3
					W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8003ef4:	4d6e      	ldr	r5, [pc, #440]	; (80040b0 <StartDefaultTask+0xf90>)
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003efc:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8003f00:	486d      	ldr	r0, [pc, #436]	; (80040b8 <StartDefaultTask+0xf98>)
 8003f02:	f002 ffdf 	bl	8006ec4 <W25qxx_WriteSector>
					Report(NULL, false, "Fill sector:%d byte:%02X len:%d done%s", adr_sector, byte_write, ss, eol);
 8003f06:	4b6b      	ldr	r3, [pc, #428]	; (80040b4 <StartDefaultTask+0xf94>)
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	9202      	str	r2, [sp, #8]
 8003f0c:	9401      	str	r4, [sp, #4]
 8003f0e:	7c1b      	ldrb	r3, [r3, #16]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003f16:	4a69      	ldr	r2, [pc, #420]	; (80040bc <StartDefaultTask+0xf9c>)
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	f7fd fe5c 	bl	8001bd8 <Report>
			last_cmd_sector =  cmd_sector;
 8003f20:	4b64      	ldr	r3, [pc, #400]	; (80040b4 <StartDefaultTask+0xf94>)
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	615a      	str	r2, [r3, #20]
			cmd_sector = sNone;
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f2a:	60da      	str	r2, [r3, #12]
		osDelay(10);
 8003f2c:	200a      	movs	r0, #10
 8003f2e:	f007 fb11 	bl	800b554 <osDelay>
	while (!restart_flag) {
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 80a2 	bne.w	8004084 <StartDefaultTask+0xf64>
		if (check_tmr10(cur_sec)) {
 8003f40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f42:	f7fd fd07 	bl	8001954 <check_tmr10>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f47f a936 	bne.w	80031b8 <StartDefaultTask+0x98>
		if (gsmToFlag) {//command to GSM module queue is ready
 8003f4c:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f4e:	7a1b      	ldrb	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f a983 	bne.w	800325c <StartDefaultTask+0x13c>
		if (gsmFromFlag) {//event (ack) from GSM module queue is ready
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f58:	7f1d      	ldrb	r5, [r3, #28]
 8003f5a:	2d00      	cmp	r5, #0
 8003f5c:	f47f a9dc 	bne.w	8003318 <StartDefaultTask+0x1f8>
		if (!tmr_send) {// && !at_auto) {
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	b92b      	cbnz	r3, 8003f72 <StartDefaultTask+0xe52>
			if (gsmFlags.connect) tmr_send = get_tmr10(0);
 8003f66:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <StartDefaultTask+0xfa0>)
 8003f68:	789b      	ldrb	r3, [r3, #2]
 8003f6a:	f013 0f08 	tst.w	r3, #8
 8003f6e:	f47f ab38 	bne.w	80035e2 <StartDefaultTask+0x4c2>
		if (tmr_send && !gsmFlags.send) {
 8003f72:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f76:	b128      	cbz	r0, 8003f84 <StartDefaultTask+0xe64>
 8003f78:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <StartDefaultTask+0xfa0>)
 8003f7a:	78db      	ldrb	r3, [r3, #3]
 8003f7c:	f013 0f01 	tst.w	r3, #1
 8003f80:	f43f ab36 	beq.w	80035f0 <StartDefaultTask+0x4d0>
		if (!at_auto) {
 8003f84:	f1b9 0f00 	cmp.w	r9, #0
 8003f88:	d123      	bne.n	8003fd2 <StartDefaultTask+0xeb2>
			if (ini_flag) {// Запускаем цепочку команд инициализации молуля GSM
 8003f8a:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f43f ab78 	beq.w	8003686 <StartDefaultTask+0x566>
				ini_flag = 0;
 8003f96:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <StartDefaultTask+0xf90>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				gsmInit = 0;
 8003f9e:	779a      	strb	r2, [r3, #30]
				grp_cmd = seqInit;
 8003fa0:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
				cmd_adr = &cmd_ini[0].cmd[0];
 8003fa4:	4a47      	ldr	r2, [pc, #284]	; (80040c4 <StartDefaultTask+0xfa4>)
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
				atTotal = cmd_iniMax;
 8003fa8:	230e      	movs	r3, #14
 8003faa:	9308      	str	r3, [sp, #32]
				gsmFlags.busy = 1;
 8003fac:	4a44      	ldr	r2, [pc, #272]	; (80040c0 <StartDefaultTask+0xfa0>)
 8003fae:	78d3      	ldrb	r3, [r2, #3]
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	70d3      	strb	r3, [r2, #3]
				tmr_next = get_tmr10(_1s);
 8003fb6:	2064      	movs	r0, #100	; 0x64
 8003fb8:	f7fd fcc6 	bl	8001948 <get_tmr10>
 8003fbc:	9006      	str	r0, [sp, #24]
				tmr_cmd = tmr_ack = 0;
 8003fbe:	f04f 0800 	mov.w	r8, #0
 8003fc2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
				at_auto = next_cmd = true;
 8003fc6:	f04f 0901 	mov.w	r9, #1
 8003fca:	f8cd 9014 	str.w	r9, [sp, #20]
				cmd_err = CMD_REPEAT;
 8003fce:	f04f 0a05 	mov.w	sl, #5
		if (tmr_cmd) {//start send at_commands in mode auto
 8003fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f aba5 	bne.w	8003724 <StartDefaultTask+0x604>
		if (at_auto) {
 8003fda:	f1b9 0f00 	cmp.w	r9, #0
 8003fde:	f43f adb7 	beq.w	8003b50 <StartDefaultTask+0xa30>
			if (tmr_next) {
 8003fe2:	9b06      	ldr	r3, [sp, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f abde 	bne.w	80037a6 <StartDefaultTask+0x686>
			if (tmr_ack) {
 8003fea:	f1b8 0f00 	cmp.w	r8, #0
 8003fee:	f47f ad73 	bne.w	8003ad8 <StartDefaultTask+0x9b8>
		if (wait_sms) {
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <StartDefaultTask+0xf90>)
 8003ff4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f47f ade7 	bne.w	8003bcc <StartDefaultTask+0xaac>
		if (prn_flags) {// Событие - установлен флаг печати структуры состояния (все рабочие флаги)
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <StartDefaultTask+0xf90>)
 8004000:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f ae0d 	bne.w	8003c24 <StartDefaultTask+0xb04>
		} else if (prn_rlist) {// Событие - печать лист с чатотами просканированых ФМ-радиостанций
 800400a:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <StartDefaultTask+0xf90>)
 800400c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f ae2b 	bne.w	8003c6c <StartDefaultTask+0xb4c>
		} else if (prn_freemem) {// Событие - печатать количество сободной динамической памяти из 'кучи'
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <StartDefaultTask+0xf90>)
 8004018:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f ae2c 	bne.w	8003c7a <StartDefaultTask+0xb5a>
		} else if (clr_flag) {
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <StartDefaultTask+0xf90>)
 8004024:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8004028:	2b00      	cmp	r3, #0
 800402a:	f43f ae02 	beq.w	8003c32 <StartDefaultTask+0xb12>
			clr_flag = false;
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <StartDefaultTask+0xf90>)
 8004030:	2200      	movs	r2, #0
 8004032:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
			devError = 0;
 8004036:	725a      	strb	r2, [r3, #9]
			HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);//LED OFF
 8004038:	2201      	movs	r2, #1
 800403a:	4611      	mov	r1, r2
 800403c:	4822      	ldr	r0, [pc, #136]	; (80040c8 <StartDefaultTask+0xfa8>)
 800403e:	f003 fbbe 	bl	80077be <HAL_GPIO_WritePin>
			i2c_ssd1306_clear_line(err_line);
 8004042:	2008      	movs	r0, #8
 8004044:	f001 fee8 	bl	8005e18 <i2c_ssd1306_clear_line>
			Report(__func__, true, "Clear all errors (devError)%s", eol);
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <StartDefaultTask+0xf94>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <StartDefaultTask+0xfac>)
 800404e:	2101      	movs	r1, #1
 8004050:	481f      	ldr	r0, [pc, #124]	; (80040d0 <StartDefaultTask+0xfb0>)
 8004052:	f7fd fdc1 	bl	8001bd8 <Report>
 8004056:	e5ec      	b.n	8003c32 <StartDefaultTask+0xb12>
					if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <StartDefaultTask+0xf90>)
 800405a:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800405e:	f002 fddd 	bl	8006c1c <W25qxx_EraseSector>
 8004062:	e73a      	b.n	8003eda <StartDefaultTask+0xdba>
					W25qxx_EraseSector(adr_sector);
 8004064:	4c12      	ldr	r4, [pc, #72]	; (80040b0 <StartDefaultTask+0xf90>)
 8004066:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800406a:	f002 fdd7 	bl	8006c1c <W25qxx_EraseSector>
					Report(NULL, false, "Erase sector:%d done%s", adr_sector, eol);
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <StartDefaultTask+0xf94>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004078:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <StartDefaultTask+0xfb4>)
 800407a:	2100      	movs	r1, #0
 800407c:	4608      	mov	r0, r1
 800407e:	f7fd fdab 	bl	8001bd8 <Report>
				break;
 8004082:	e74d      	b.n	8003f20 <StartDefaultTask+0xe00>
	Report(NULL, true, "Restart...\n");
 8004084:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <StartDefaultTask+0xfb8>)
 8004086:	2101      	movs	r1, #1
 8004088:	2000      	movs	r0, #0
 800408a:	f7fd fda5 	bl	8001bd8 <Report>
	HAL_Delay(1000);
 800408e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004092:	f003 f82f 	bl	80070f4 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004096:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800409a:	4910      	ldr	r1, [pc, #64]	; (80040dc <StartDefaultTask+0xfbc>)
 800409c:	68ca      	ldr	r2, [r1, #12]
 800409e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <StartDefaultTask+0xfc0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
 80040a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80040ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80040ae:	e7fd      	b.n	80040ac <StartDefaultTask+0xf8c>
 80040b0:	200003dc 	.word	0x200003dc
 80040b4:	20000010 	.word	0x20000010
 80040b8:	20000ed0 	.word	0x20000ed0
 80040bc:	080134f0 	.word	0x080134f0
 80040c0:	20007ab4 	.word	0x20007ab4
 80040c4:	080124f0 	.word	0x080124f0
 80040c8:	40020400 	.word	0x40020400
 80040cc:	08013464 	.word	0x08013464
 80040d0:	080120a4 	.word	0x080120a4
 80040d4:	08013518 	.word	0x08013518
 80040d8:	08013530 	.word	0x08013530
 80040dc:	e000ed00 	.word	0xe000ed00
 80040e0:	05fa0004 	.word	0x05fa0004

080040e4 <serialLOG>:
{
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uRxByte != BACK_SPACE)
 80040e6:	4b9f      	ldr	r3, [pc, #636]	; (8004364 <serialLOG+0x280>)
 80040e8:	f893 34a4 	ldrb.w	r3, [r3, #1188]	; 0x4a4
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00c      	beq.n	800410a <serialLOG+0x26>
		RxBuf[rx_uk & 0xff] = (char)uRxByte;
 80040f0:	4a9d      	ldr	r2, [pc, #628]	; (8004368 <serialLOG+0x284>)
 80040f2:	7811      	ldrb	r1, [r2, #0]
 80040f4:	4a9b      	ldr	r2, [pc, #620]	; (8004364 <serialLOG+0x280>)
 80040f6:	440a      	add	r2, r1
 80040f8:	f882 34a8 	strb.w	r3, [r2, #1192]	; 0x4a8
	if (uRxByte == 0x0a) {//end of line
 80040fc:	2b0a      	cmp	r3, #10
 80040fe:	d00c      	beq.n	800411a <serialLOG+0x36>
	} else rx_uk++;
 8004100:	4a99      	ldr	r2, [pc, #612]	; (8004368 <serialLOG+0x284>)
 8004102:	7813      	ldrb	r3, [r2, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	7013      	strb	r3, [r2, #0]
}
 8004108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rx_uk) rx_uk--;
 800410a:	4a97      	ldr	r2, [pc, #604]	; (8004368 <serialLOG+0x284>)
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	2a00      	cmp	r2, #0
 8004110:	d0f4      	beq.n	80040fc <serialLOG+0x18>
 8004112:	3a01      	subs	r2, #1
 8004114:	4994      	ldr	r1, [pc, #592]	; (8004368 <serialLOG+0x284>)
 8004116:	700a      	strb	r2, [r1, #0]
 8004118:	e7f0      	b.n	80040fc <serialLOG+0x18>
		char *uk = strstr(RxBuf, _extDate);//const char *_extDate = "epoch=";
 800411a:	4b94      	ldr	r3, [pc, #592]	; (800436c <serialLOG+0x288>)
 800411c:	699d      	ldr	r5, [r3, #24]
 800411e:	4629      	mov	r1, r5
 8004120:	4893      	ldr	r0, [pc, #588]	; (8004370 <serialLOG+0x28c>)
 8004122:	f00a f9cf 	bl	800e4c4 <strstr>
		if (uk) {
 8004126:	4604      	mov	r4, r0
 8004128:	2800      	cmp	r0, #0
 800412a:	d054      	beq.n	80041d6 <serialLOG+0xf2>
			uk += strlen(_extDate);
 800412c:	4628      	mov	r0, r5
 800412e:	f7fc f861 	bl	80001f4 <strlen>
 8004132:	1825      	adds	r5, r4, r0
			if (*uk != '?') {
 8004134:	5c23      	ldrb	r3, [r4, r0]
 8004136:	2b3f      	cmp	r3, #63	; 0x3f
 8004138:	d029      	beq.n	800418e <serialLOG+0xaa>
				if (strlen(uk) < 10) setDate = false;
 800413a:	4628      	mov	r0, r5
 800413c:	f7fc f85a 	bl	80001f4 <strlen>
 8004140:	2809      	cmp	r0, #9
 8004142:	d805      	bhi.n	8004150 <serialLOG+0x6c>
 8004144:	2400      	movs	r4, #0
 8004146:	4b87      	ldr	r3, [pc, #540]	; (8004364 <serialLOG+0x280>)
 8004148:	f883 4848 	strb.w	r4, [r3, #2120]	; 0x848
		bool mk_at = false;
 800414c:	4625      	mov	r5, r4
 800414e:	e024      	b.n	800419a <serialLOG+0xb6>
					char *uke = strchr(uk, ':');
 8004150:	213a      	movs	r1, #58	; 0x3a
 8004152:	4628      	mov	r0, r5
 8004154:	f00a f97c 	bl	800e450 <strchr>
					if (uke) {
 8004158:	4604      	mov	r4, r0
 800415a:	b1a0      	cbz	r0, 8004186 <serialLOG+0xa2>
						tZone = atoi(uke + 1);
 800415c:	3001      	adds	r0, #1
 800415e:	f009 fce6 	bl	800db2e <atoi>
 8004162:	4b82      	ldr	r3, [pc, #520]	; (800436c <serialLOG+0x288>)
 8004164:	61d8      	str	r0, [r3, #28]
						*uke = '\0';
 8004166:	2300      	movs	r3, #0
 8004168:	7023      	strb	r3, [r4, #0]
					extDate = atol(uk);
 800416a:	4628      	mov	r0, r5
 800416c:	f009 fce3 	bl	800db36 <atol>
 8004170:	4b7c      	ldr	r3, [pc, #496]	; (8004364 <serialLOG+0x280>)
 8004172:	f8c3 084c 	str.w	r0, [r3, #2124]	; 0x84c
					set_Date((time_t)extDate);
 8004176:	f8d3 084c 	ldr.w	r0, [r3, #2124]	; 0x84c
 800417a:	2400      	movs	r4, #0
 800417c:	4621      	mov	r1, r4
 800417e:	f7fd fc75 	bl	8001a6c <set_Date>
		bool mk_at = false;
 8004182:	4625      	mov	r5, r4
 8004184:	e009      	b.n	800419a <serialLOG+0xb6>
					} else tZone = 0;
 8004186:	4b79      	ldr	r3, [pc, #484]	; (800436c <serialLOG+0x288>)
 8004188:	2200      	movs	r2, #0
 800418a:	61da      	str	r2, [r3, #28]
 800418c:	e7ed      	b.n	800416a <serialLOG+0x86>
			} else setDate = true;
 800418e:	4b75      	ldr	r3, [pc, #468]	; (8004364 <serialLOG+0x280>)
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
		bool mk_at = false;
 8004196:	2500      	movs	r5, #0
	char *uki = NULL;
 8004198:	462c      	mov	r4, r5
		if ((cmd_sector != sNone) && validChipID) {
 800419a:	4b74      	ldr	r3, [pc, #464]	; (800436c <serialLOG+0x288>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a2:	f000 820a 	beq.w	80045ba <serialLOG+0x4d6>
 80041a6:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <serialLOG+0x280>)
 80041a8:	f893 3850 	ldrb.w	r3, [r3, #2128]	; 0x850
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8204 	beq.w	80045ba <serialLOG+0x4d6>
			uk = strchr(RxBuf, '\n');
 80041b2:	210a      	movs	r1, #10
 80041b4:	486e      	ldr	r0, [pc, #440]	; (8004370 <serialLOG+0x28c>)
 80041b6:	f00a f94b 	bl	800e450 <strchr>
			if (uk) *(uk) = '\0';
 80041ba:	b108      	cbz	r0, 80041c0 <serialLOG+0xdc>
 80041bc:	2200      	movs	r2, #0
 80041be:	7002      	strb	r2, [r0, #0]
			switch (cmd_sector) {
 80041c0:	4b6a      	ldr	r3, [pc, #424]	; (800436c <serialLOG+0x288>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	f200 8206 	bhi.w	80045d6 <serialLOG+0x4f2>
 80041ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80041ce:	018a      	.short	0x018a
 80041d0:	018a01a0 	.word	0x018a01a0
 80041d4:	01db      	.short	0x01db
		} else if (strstr(RxBuf, _restart)) {
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <serialLOG+0x288>)
 80041d8:	6a19      	ldr	r1, [r3, #32]
 80041da:	4865      	ldr	r0, [pc, #404]	; (8004370 <serialLOG+0x28c>)
 80041dc:	f00a f972 	bl	800e4c4 <strstr>
 80041e0:	4606      	mov	r6, r0
 80041e2:	b148      	cbz	r0, 80041f8 <serialLOG+0x114>
			if (!restart_flag) restart_flag = 1;
 80041e4:	4b5f      	ldr	r3, [pc, #380]	; (8004364 <serialLOG+0x280>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 815a 	bne.w	80044a2 <serialLOG+0x3be>
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <serialLOG+0x280>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
		bool mk_at = false;
 80041f4:	2500      	movs	r5, #0
 80041f6:	e7d0      	b.n	800419a <serialLOG+0xb6>
		} else if ( (strstr(RxBuf, "AT")) || (strstr(RxBuf, "at")) ) {// enter AT_commands
 80041f8:	495e      	ldr	r1, [pc, #376]	; (8004374 <serialLOG+0x290>)
 80041fa:	485d      	ldr	r0, [pc, #372]	; (8004370 <serialLOG+0x28c>)
 80041fc:	f00a f962 	bl	800e4c4 <strstr>
 8004200:	b1a8      	cbz	r0, 800422e <serialLOG+0x14a>
			if (gsmToFlag) {
 8004202:	4b58      	ldr	r3, [pc, #352]	; (8004364 <serialLOG+0x280>)
 8004204:	7a1d      	ldrb	r5, [r3, #8]
 8004206:	2d00      	cmp	r5, #0
 8004208:	f000 814d 	beq.w	80044a6 <serialLOG+0x3c2>
				uk = strchr(RxBuf, '\n');
 800420c:	210a      	movs	r1, #10
 800420e:	f503 6095 	add.w	r0, r3, #1192	; 0x4a8
 8004212:	f00a f91d 	bl	800e450 <strchr>
				if (uk) *(uk) = '\0';
 8004216:	b330      	cbz	r0, 8004266 <serialLOG+0x182>
 8004218:	2200      	movs	r2, #0
 800421a:	7002      	strb	r2, [r0, #0]
				strcat(RxBuf, eol);
 800421c:	4c53      	ldr	r4, [pc, #332]	; (800436c <serialLOG+0x288>)
 800421e:	68a1      	ldr	r1, [r4, #8]
 8004220:	4853      	ldr	r0, [pc, #332]	; (8004370 <serialLOG+0x28c>)
 8004222:	f00a f906 	bl	800e432 <strcat>
				prn_cmd = false;
 8004226:	2300      	movs	r3, #0
 8004228:	7123      	strb	r3, [r4, #4]
	char *uki = NULL;
 800422a:	4634      	mov	r4, r6
 800422c:	e7b5      	b.n	800419a <serialLOG+0xb6>
		} else if ( (strstr(RxBuf, "AT")) || (strstr(RxBuf, "at")) ) {// enter AT_commands
 800422e:	4952      	ldr	r1, [pc, #328]	; (8004378 <serialLOG+0x294>)
 8004230:	484f      	ldr	r0, [pc, #316]	; (8004370 <serialLOG+0x28c>)
 8004232:	f00a f947 	bl	800e4c4 <strstr>
 8004236:	4607      	mov	r7, r0
 8004238:	2800      	cmp	r0, #0
 800423a:	d1e2      	bne.n	8004202 <serialLOG+0x11e>
		} else if (strstr(RxBuf, _flags)) {
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <serialLOG+0x288>)
 800423e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004240:	484b      	ldr	r0, [pc, #300]	; (8004370 <serialLOG+0x28c>)
 8004242:	f00a f93f 	bl	800e4c4 <strstr>
 8004246:	4604      	mov	r4, r0
 8004248:	b1b0      	cbz	r0, 8004278 <serialLOG+0x194>
			if (!prn_flags) prn_flags = true;
 800424a:	4b46      	ldr	r3, [pc, #280]	; (8004364 <serialLOG+0x280>)
 800424c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004250:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004254:	2b00      	cmp	r3, #0
 8004256:	f040 8128 	bne.w	80044aa <serialLOG+0x3c6>
 800425a:	4b42      	ldr	r3, [pc, #264]	; (8004364 <serialLOG+0x280>)
 800425c:	2201      	movs	r2, #1
 800425e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	char *uki = NULL;
 8004262:	463c      	mov	r4, r7
 8004264:	e799      	b.n	800419a <serialLOG+0xb6>
					uk = strchr(RxBuf, CTRL_Z);
 8004266:	211a      	movs	r1, #26
 8004268:	4841      	ldr	r0, [pc, #260]	; (8004370 <serialLOG+0x28c>)
 800426a:	f00a f8f1 	bl	800e450 <strchr>
					if (uk) *(uk + 1) = '\0';
 800426e:	2800      	cmp	r0, #0
 8004270:	d0d4      	beq.n	800421c <serialLOG+0x138>
 8004272:	2200      	movs	r2, #0
 8004274:	7042      	strb	r2, [r0, #1]
 8004276:	e7d1      	b.n	800421c <serialLOG+0x138>
		} else if (strstr(RxBuf, _sntp)) {
 8004278:	4b3c      	ldr	r3, [pc, #240]	; (800436c <serialLOG+0x288>)
 800427a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800427c:	483c      	ldr	r0, [pc, #240]	; (8004370 <serialLOG+0x28c>)
 800427e:	f00a f921 	bl	800e4c4 <strstr>
 8004282:	4605      	mov	r5, r0
 8004284:	b188      	cbz	r0, 80042aa <serialLOG+0x1c6>
			if (!sntp_flag && !gsmFlags.busy) sntp_flag = 1;
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <serialLOG+0x280>)
 8004288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 810f 	bne.w	80044b0 <serialLOG+0x3cc>
 8004292:	4b3a      	ldr	r3, [pc, #232]	; (800437c <serialLOG+0x298>)
 8004294:	78db      	ldrb	r3, [r3, #3]
 8004296:	f013 0f04 	tst.w	r3, #4
 800429a:	f040 810b 	bne.w	80044b4 <serialLOG+0x3d0>
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <serialLOG+0x280>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		bool mk_at = false;
 80042a6:	2500      	movs	r5, #0
 80042a8:	e777      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _radio)) {
 80042aa:	4b30      	ldr	r3, [pc, #192]	; (800436c <serialLOG+0x288>)
 80042ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ae:	4830      	ldr	r0, [pc, #192]	; (8004370 <serialLOG+0x28c>)
 80042b0:	f00a f908 	bl	800e4c4 <strstr>
 80042b4:	4604      	mov	r4, r0
 80042b6:	b190      	cbz	r0, 80042de <serialLOG+0x1fa>
			if (!radio_flag && !gsmFlags.busy) radio_flag = 1;
 80042b8:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <serialLOG+0x280>)
 80042ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 80fa 	bne.w	80044b8 <serialLOG+0x3d4>
 80042c4:	4b2d      	ldr	r3, [pc, #180]	; (800437c <serialLOG+0x298>)
 80042c6:	78db      	ldrb	r3, [r3, #3]
 80042c8:	f013 0f04 	tst.w	r3, #4
 80042cc:	f040 80f7 	bne.w	80044be <serialLOG+0x3da>
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <serialLOG+0x280>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	char *uki = NULL;
 80042d8:	462c      	mov	r4, r5
		bool mk_at = false;
 80042da:	2500      	movs	r5, #0
 80042dc:	e75d      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _rlist)) {
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <serialLOG+0x288>)
 80042e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e2:	4823      	ldr	r0, [pc, #140]	; (8004370 <serialLOG+0x28c>)
 80042e4:	f00a f8ee 	bl	800e4c4 <strstr>
 80042e8:	4606      	mov	r6, r0
 80042ea:	b160      	cbz	r0, 8004306 <serialLOG+0x222>
			if (!prn_rlist) prn_rlist = true;
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <serialLOG+0x280>)
 80042ee:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80042f2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 80e4 	bne.w	80044c4 <serialLOG+0x3e0>
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <serialLOG+0x280>)
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8004304:	e749      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _freemem)) {
 8004306:	4b19      	ldr	r3, [pc, #100]	; (800436c <serialLOG+0x288>)
 8004308:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800430a:	4819      	ldr	r0, [pc, #100]	; (8004370 <serialLOG+0x28c>)
 800430c:	f00a f8da 	bl	800e4c4 <strstr>
 8004310:	4604      	mov	r4, r0
 8004312:	b168      	cbz	r0, 8004330 <serialLOG+0x24c>
			if (!prn_freemem) prn_freemem = true;
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <serialLOG+0x280>)
 8004316:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800431a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 80d2 	bne.w	80044c8 <serialLOG+0x3e4>
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <serialLOG+0x280>)
 8004326:	2201      	movs	r2, #1
 8004328:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	char *uki = NULL;
 800432c:	4634      	mov	r4, r6
 800432e:	e734      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _net)) {
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <serialLOG+0x288>)
 8004332:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004334:	480e      	ldr	r0, [pc, #56]	; (8004370 <serialLOG+0x28c>)
 8004336:	f00a f8c5 	bl	800e4c4 <strstr>
 800433a:	4605      	mov	r5, r0
 800433c:	b300      	cbz	r0, 8004380 <serialLOG+0x29c>
			if (!net_flag && !gsmFlags.busy) net_flag = true;
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <serialLOG+0x280>)
 8004340:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004344:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 80c0 	bne.w	80044ce <serialLOG+0x3ea>
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <serialLOG+0x298>)
 8004350:	78db      	ldrb	r3, [r3, #3]
 8004352:	f013 0f04 	tst.w	r3, #4
 8004356:	f47f af20 	bne.w	800419a <serialLOG+0xb6>
 800435a:	4b02      	ldr	r3, [pc, #8]	; (8004364 <serialLOG+0x280>)
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004362:	e71a      	b.n	800419a <serialLOG+0xb6>
 8004364:	200003dc 	.word	0x200003dc
 8004368:	20007ab0 	.word	0x20007ab0
 800436c:	20000010 	.word	0x20000010
 8004370:	20000884 	.word	0x20000884
 8004374:	0801353c 	.word	0x0801353c
 8004378:	08013540 	.word	0x08013540
 800437c:	20007ab4 	.word	0x20007ab4
		} else if (strstr(RxBuf, _ini)) {
 8004380:	4ba2      	ldr	r3, [pc, #648]	; (800460c <serialLOG+0x528>)
 8004382:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004384:	48a2      	ldr	r0, [pc, #648]	; (8004610 <serialLOG+0x52c>)
 8004386:	f00a f89d 	bl	800e4c4 <strstr>
 800438a:	4604      	mov	r4, r0
 800438c:	b190      	cbz	r0, 80043b4 <serialLOG+0x2d0>
			if (!ini_flag && !gsmFlags.busy) ini_flag = 1;
 800438e:	4ba1      	ldr	r3, [pc, #644]	; (8004614 <serialLOG+0x530>)
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	f040 809c 	bne.w	80044d2 <serialLOG+0x3ee>
 800439a:	4b9f      	ldr	r3, [pc, #636]	; (8004618 <serialLOG+0x534>)
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	f013 0f04 	tst.w	r3, #4
 80043a2:	f040 8099 	bne.w	80044d8 <serialLOG+0x3f4>
 80043a6:	4b9b      	ldr	r3, [pc, #620]	; (8004614 <serialLOG+0x530>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	char *uki = NULL;
 80043ae:	462c      	mov	r4, r5
		bool mk_at = false;
 80043b0:	2500      	movs	r5, #0
 80043b2:	e6f2      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _stop)) {
 80043b4:	4b95      	ldr	r3, [pc, #596]	; (800460c <serialLOG+0x528>)
 80043b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043b8:	4895      	ldr	r0, [pc, #596]	; (8004610 <serialLOG+0x52c>)
 80043ba:	f00a f883 	bl	800e4c4 <strstr>
 80043be:	4605      	mov	r5, r0
 80043c0:	b310      	cbz	r0, 8004408 <serialLOG+0x324>
			if (gsmFlags.connect) {
 80043c2:	4b95      	ldr	r3, [pc, #596]	; (8004618 <serialLOG+0x534>)
 80043c4:	789b      	ldrb	r3, [r3, #2]
 80043c6:	f013 0f08 	tst.w	r3, #8
 80043ca:	d106      	bne.n	80043da <serialLOG+0x2f6>
			} else if (gsmFlags.play) {
 80043cc:	4b92      	ldr	r3, [pc, #584]	; (8004618 <serialLOG+0x534>)
 80043ce:	78db      	ldrb	r3, [r3, #3]
 80043d0:	f013 0f10 	tst.w	r3, #16
 80043d4:	d10a      	bne.n	80043ec <serialLOG+0x308>
		bool mk_at = false;
 80043d6:	2500      	movs	r5, #0
 80043d8:	e6df      	b.n	800419a <serialLOG+0xb6>
				strcpy(RxBuf, cmd_any[cCLOSE].cmd);
 80043da:	4b90      	ldr	r3, [pc, #576]	; (800461c <serialLOG+0x538>)
 80043dc:	4d8c      	ldr	r5, [pc, #560]	; (8004610 <serialLOG+0x52c>)
 80043de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e0:	c507      	stmia	r5!, {r0, r1, r2}
 80043e2:	802b      	strh	r3, [r5, #0]
				prn_cmd = true;
 80043e4:	2501      	movs	r5, #1
 80043e6:	4b89      	ldr	r3, [pc, #548]	; (800460c <serialLOG+0x528>)
 80043e8:	711d      	strb	r5, [r3, #4]
				mk_at = true;
 80043ea:	e6d6      	b.n	800419a <serialLOG+0xb6>
				gsmFlags.play = 0;
 80043ec:	4b8a      	ldr	r3, [pc, #552]	; (8004618 <serialLOG+0x534>)
 80043ee:	78da      	ldrb	r2, [r3, #3]
 80043f0:	f36f 1204 	bfc	r2, #4, #1
 80043f4:	70da      	strb	r2, [r3, #3]
				strcpy(RxBuf, cmd_any[cFMCLOSE].cmd);
 80043f6:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <serialLOG+0x53c>)
 80043f8:	4d85      	ldr	r5, [pc, #532]	; (8004610 <serialLOG+0x52c>)
 80043fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043fc:	c507      	stmia	r5!, {r0, r1, r2}
 80043fe:	702b      	strb	r3, [r5, #0]
				prn_cmd = true;
 8004400:	2501      	movs	r5, #1
 8004402:	4b82      	ldr	r3, [pc, #520]	; (800460c <serialLOG+0x528>)
 8004404:	711d      	strb	r5, [r3, #4]
				mk_at = true;
 8004406:	e6c8      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _clr)) {
 8004408:	4b80      	ldr	r3, [pc, #512]	; (800460c <serialLOG+0x528>)
 800440a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800440c:	4880      	ldr	r0, [pc, #512]	; (8004610 <serialLOG+0x52c>)
 800440e:	f00a f859 	bl	800e4c4 <strstr>
 8004412:	b130      	cbz	r0, 8004422 <serialLOG+0x33e>
			clr_flag = true;
 8004414:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <serialLOG+0x530>)
 8004416:	2201      	movs	r2, #1
 8004418:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	char *uki = NULL;
 800441c:	462c      	mov	r4, r5
		bool mk_at = false;
 800441e:	2500      	movs	r5, #0
 8004420:	e6bb      	b.n	800419a <serialLOG+0xb6>
		else if (strstr(RxBuf, _read)) {
 8004422:	4b7a      	ldr	r3, [pc, #488]	; (800460c <serialLOG+0x528>)
 8004424:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8004426:	4621      	mov	r1, r4
 8004428:	4879      	ldr	r0, [pc, #484]	; (8004610 <serialLOG+0x52c>)
 800442a:	f00a f84b 	bl	800e4c4 <strstr>
 800442e:	b140      	cbz	r0, 8004442 <serialLOG+0x35e>
			cmd_sector = sRead;
 8004430:	2500      	movs	r5, #0
 8004432:	4b76      	ldr	r3, [pc, #472]	; (800460c <serialLOG+0x528>)
 8004434:	60dd      	str	r5, [r3, #12]
			uki = RxBuf + strlen(_read);
 8004436:	4620      	mov	r0, r4
 8004438:	f7fb fedc 	bl	80001f4 <strlen>
 800443c:	4c74      	ldr	r4, [pc, #464]	; (8004610 <serialLOG+0x52c>)
 800443e:	4404      	add	r4, r0
 8004440:	e6ab      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _write)) {
 8004442:	4b72      	ldr	r3, [pc, #456]	; (800460c <serialLOG+0x528>)
 8004444:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004446:	4621      	mov	r1, r4
 8004448:	4871      	ldr	r0, [pc, #452]	; (8004610 <serialLOG+0x52c>)
 800444a:	f00a f83b 	bl	800e4c4 <strstr>
 800444e:	b148      	cbz	r0, 8004464 <serialLOG+0x380>
			cmd_sector = sWrite;
 8004450:	4b6e      	ldr	r3, [pc, #440]	; (800460c <serialLOG+0x528>)
 8004452:	2201      	movs	r2, #1
 8004454:	60da      	str	r2, [r3, #12]
			uki = RxBuf + strlen(_write);
 8004456:	4620      	mov	r0, r4
 8004458:	f7fb fecc 	bl	80001f4 <strlen>
 800445c:	4c6c      	ldr	r4, [pc, #432]	; (8004610 <serialLOG+0x52c>)
 800445e:	4404      	add	r4, r0
		bool mk_at = false;
 8004460:	2500      	movs	r5, #0
 8004462:	e69a      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _erase)) {
 8004464:	4b69      	ldr	r3, [pc, #420]	; (800460c <serialLOG+0x528>)
 8004466:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8004468:	4621      	mov	r1, r4
 800446a:	4869      	ldr	r0, [pc, #420]	; (8004610 <serialLOG+0x52c>)
 800446c:	f00a f82a 	bl	800e4c4 <strstr>
 8004470:	4605      	mov	r5, r0
 8004472:	b148      	cbz	r0, 8004488 <serialLOG+0x3a4>
			cmd_sector = sErase;
 8004474:	4b65      	ldr	r3, [pc, #404]	; (800460c <serialLOG+0x528>)
 8004476:	2202      	movs	r2, #2
 8004478:	60da      	str	r2, [r3, #12]
			uki = RxBuf + strlen(_erase);
 800447a:	4620      	mov	r0, r4
 800447c:	f7fb feba 	bl	80001f4 <strlen>
 8004480:	4c63      	ldr	r4, [pc, #396]	; (8004610 <serialLOG+0x52c>)
 8004482:	4404      	add	r4, r0
		bool mk_at = false;
 8004484:	2500      	movs	r5, #0
 8004486:	e688      	b.n	800419a <serialLOG+0xb6>
		} else if (strstr(RxBuf, _next)) {
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <serialLOG+0x528>)
 800448a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800448c:	4860      	ldr	r0, [pc, #384]	; (8004610 <serialLOG+0x52c>)
 800448e:	f00a f819 	bl	800e4c4 <strstr>
 8004492:	4604      	mov	r4, r0
 8004494:	b318      	cbz	r0, 80044de <serialLOG+0x3fa>
			cmd_sector = sNext;
 8004496:	4b5d      	ldr	r3, [pc, #372]	; (800460c <serialLOG+0x528>)
 8004498:	2203      	movs	r2, #3
 800449a:	60da      	str	r2, [r3, #12]
	char *uki = NULL;
 800449c:	462c      	mov	r4, r5
		bool mk_at = false;
 800449e:	2500      	movs	r5, #0
 80044a0:	e67b      	b.n	800419a <serialLOG+0xb6>
 80044a2:	2500      	movs	r5, #0
 80044a4:	e679      	b.n	800419a <serialLOG+0xb6>
	char *uki = NULL;
 80044a6:	4634      	mov	r4, r6
 80044a8:	e677      	b.n	800419a <serialLOG+0xb6>
 80044aa:	463c      	mov	r4, r7
		bool mk_at = false;
 80044ac:	2500      	movs	r5, #0
 80044ae:	e674      	b.n	800419a <serialLOG+0xb6>
 80044b0:	2500      	movs	r5, #0
 80044b2:	e672      	b.n	800419a <serialLOG+0xb6>
 80044b4:	2500      	movs	r5, #0
 80044b6:	e670      	b.n	800419a <serialLOG+0xb6>
	char *uki = NULL;
 80044b8:	462c      	mov	r4, r5
		bool mk_at = false;
 80044ba:	2500      	movs	r5, #0
 80044bc:	e66d      	b.n	800419a <serialLOG+0xb6>
	char *uki = NULL;
 80044be:	462c      	mov	r4, r5
		bool mk_at = false;
 80044c0:	2500      	movs	r5, #0
 80044c2:	e66a      	b.n	800419a <serialLOG+0xb6>
 80044c4:	2500      	movs	r5, #0
 80044c6:	e668      	b.n	800419a <serialLOG+0xb6>
	char *uki = NULL;
 80044c8:	4634      	mov	r4, r6
		bool mk_at = false;
 80044ca:	2500      	movs	r5, #0
 80044cc:	e665      	b.n	800419a <serialLOG+0xb6>
 80044ce:	2500      	movs	r5, #0
 80044d0:	e663      	b.n	800419a <serialLOG+0xb6>
	char *uki = NULL;
 80044d2:	462c      	mov	r4, r5
		bool mk_at = false;
 80044d4:	2500      	movs	r5, #0
 80044d6:	e660      	b.n	800419a <serialLOG+0xb6>
	char *uki = NULL;
 80044d8:	462c      	mov	r4, r5
		bool mk_at = false;
 80044da:	2500      	movs	r5, #0
 80044dc:	e65d      	b.n	800419a <serialLOG+0xb6>
 80044de:	2500      	movs	r5, #0
 80044e0:	e65b      	b.n	800419a <serialLOG+0xb6>
					if (*uki == ' ') {
 80044e2:	7823      	ldrb	r3, [r4, #0]
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d176      	bne.n	80045d6 <serialLOG+0x4f2>
						int sek = atoi(++uki);
 80044e8:	1c60      	adds	r0, r4, #1
 80044ea:	f009 fb20 	bl	800db2e <atoi>
						if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 80044ee:	1e04      	subs	r4, r0, #0
 80044f0:	db71      	blt.n	80045d6 <serialLOG+0x4f2>
 80044f2:	f002 fb7b 	bl	8006bec <W25qxx_getSectorCount>
 80044f6:	42a0      	cmp	r0, r4
 80044f8:	d96d      	bls.n	80045d6 <serialLOG+0x4f2>
							adr_sector = sek;
 80044fa:	4b46      	ldr	r3, [pc, #280]	; (8004614 <serialLOG+0x530>)
 80044fc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
							offset_sector = 0;
 8004500:	2200      	movs	r2, #0
 8004502:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
							flag_sector = true;
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800450c:	e063      	b.n	80045d6 <serialLOG+0x4f2>
					if (*uki == ' ') {
 800450e:	7823      	ldrb	r3, [r4, #0]
 8004510:	2b20      	cmp	r3, #32
 8004512:	d160      	bne.n	80045d6 <serialLOG+0x4f2>
						uki++;
 8004514:	3401      	adds	r4, #1
						int sek = atoi(uki);
 8004516:	4620      	mov	r0, r4
 8004518:	f009 fb09 	bl	800db2e <atoi>
						if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 800451c:	1e06      	subs	r6, r0, #0
 800451e:	db5a      	blt.n	80045d6 <serialLOG+0x4f2>
 8004520:	f002 fb64 	bl	8006bec <W25qxx_getSectorCount>
 8004524:	42b0      	cmp	r0, r6
 8004526:	d956      	bls.n	80045d6 <serialLOG+0x4f2>
							char *ukn = strchr(uki, ' ');
 8004528:	2120      	movs	r1, #32
 800452a:	4620      	mov	r0, r4
 800452c:	f009 ff90 	bl	800e450 <strchr>
							if (ukn) {
 8004530:	4604      	mov	r4, r0
 8004532:	2800      	cmp	r0, #0
 8004534:	d04f      	beq.n	80045d6 <serialLOG+0x4f2>
								len_write = -1;
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <serialLOG+0x530>)
 8004538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800453c:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
								ukn++;
 8004540:	3401      	adds	r4, #1
								byte_write = hexToBin(ukn);
 8004542:	4620      	mov	r0, r4
 8004544:	f7fe fa22 	bl	800298c <hexToBin>
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <serialLOG+0x528>)
 800454a:	7418      	strb	r0, [r3, #16]
								uki = strchr(ukn, ' ');
 800454c:	2120      	movs	r1, #32
 800454e:	4620      	mov	r0, r4
 8004550:	f009 ff7e 	bl	800e450 <strchr>
								if (uki) {
 8004554:	b120      	cbz	r0, 8004560 <serialLOG+0x47c>
									int l = atoi(++uki);
 8004556:	3001      	adds	r0, #1
 8004558:	f009 fae9 	bl	800db2e <atoi>
									if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 800455c:	1e04      	subs	r4, r0, #0
 800455e:	dc09      	bgt.n	8004574 <serialLOG+0x490>
								adr_sector = sek;
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <serialLOG+0x530>)
 8004562:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
								offset_sector = 0;
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
								flag_sector = true;
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8004572:	e030      	b.n	80045d6 <serialLOG+0x4f2>
									if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8004574:	f002 fb40 	bl	8006bf8 <W25qxx_getSectorSize>
 8004578:	42a0      	cmp	r0, r4
 800457a:	d9f1      	bls.n	8004560 <serialLOG+0x47c>
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <serialLOG+0x530>)
 800457e:	f8c3 44a0 	str.w	r4, [r3, #1184]	; 0x4a0
 8004582:	e7ed      	b.n	8004560 <serialLOG+0x47c>
					if ((last_cmd_sector == sRead) || (last_cmd_sector == sNext)) {
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <serialLOG+0x528>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	b10b      	cbz	r3, 800458e <serialLOG+0x4aa>
 800458a:	2b03      	cmp	r3, #3
 800458c:	d123      	bne.n	80045d6 <serialLOG+0x4f2>
						if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <serialLOG+0x530>)
 8004590:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8004594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004598:	441c      	add	r4, r3
 800459a:	f002 fb2d 	bl	8006bf8 <W25qxx_getSectorSize>
 800459e:	4284      	cmp	r4, r0
 80045a0:	d219      	bcs.n	80045d6 <serialLOG+0x4f2>
							offset_sector += list_sector;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <serialLOG+0x530>)
 80045a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80045a8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80045ac:	440a      	add	r2, r1
 80045ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
							flag_sector = true;
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80045b8:	e00d      	b.n	80045d6 <serialLOG+0x4f2>
		else if (strstr(RxBuf, _ongps)) {
 80045ba:	4b14      	ldr	r3, [pc, #80]	; (800460c <serialLOG+0x528>)
 80045bc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80045be:	4814      	ldr	r0, [pc, #80]	; (8004610 <serialLOG+0x52c>)
 80045c0:	f009 ff80 	bl	800e4c4 <strstr>
 80045c4:	b188      	cbz	r0, 80045ea <serialLOG+0x506>
			if (!prnGpsFlag) prnGpsFlag = true;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <serialLOG+0x530>)
 80045c8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80045cc:	b91b      	cbnz	r3, 80045d6 <serialLOG+0x4f2>
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <serialLOG+0x530>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		if (mk_at) {
 80045d6:	bb3d      	cbnz	r5, 8004628 <serialLOG+0x544>
		rx_uk = 0; memset(RxBuf, 0, sizeof(RxBuf));
 80045d8:	2100      	movs	r1, #0
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <serialLOG+0x540>)
 80045dc:	7019      	strb	r1, [r3, #0]
 80045de:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 80045e2:	480b      	ldr	r0, [pc, #44]	; (8004610 <serialLOG+0x52c>)
 80045e4:	f009 fbac 	bl	800dd40 <memset>
 80045e8:	e58e      	b.n	8004108 <serialLOG+0x24>
		} else if (strstr(RxBuf, _offgps)) {
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <serialLOG+0x528>)
 80045ec:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045ee:	4808      	ldr	r0, [pc, #32]	; (8004610 <serialLOG+0x52c>)
 80045f0:	f009 ff68 	bl	800e4c4 <strstr>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d0ee      	beq.n	80045d6 <serialLOG+0x4f2>
			if (prnGpsFlag) prnGpsFlag = false;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <serialLOG+0x530>)
 80045fa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0e9      	beq.n	80045d6 <serialLOG+0x4f2>
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <serialLOG+0x530>)
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800460a:	e7e4      	b.n	80045d6 <serialLOG+0x4f2>
 800460c:	20000010 	.word	0x20000010
 8004610:	20000884 	.word	0x20000884
 8004614:	200003dc 	.word	0x200003dc
 8004618:	20007ab4 	.word	0x20007ab4
 800461c:	080123d0 	.word	0x080123d0
 8004620:	080124a8 	.word	0x080124a8
 8004624:	20007ab0 	.word	0x20007ab0
			char *to = (char *)calloc(1, strlen(RxBuf) + 1);
 8004628:	4816      	ldr	r0, [pc, #88]	; (8004684 <serialLOG+0x5a0>)
 800462a:	f7fb fde3 	bl	80001f4 <strlen>
 800462e:	1c41      	adds	r1, r0, #1
 8004630:	2001      	movs	r0, #1
 8004632:	f009 fa85 	bl	800db40 <calloc>
			if (to) {
 8004636:	4604      	mov	r4, r0
 8004638:	b1f0      	cbz	r0, 8004678 <serialLOG+0x594>
				strcpy(to, RxBuf);
 800463a:	4912      	ldr	r1, [pc, #72]	; (8004684 <serialLOG+0x5a0>)
 800463c:	f009 ff15 	bl	800e46a <strcpy>
				toUppers(to);
 8004640:	4620      	mov	r0, r4
 8004642:	f7fe f84f 	bl	80026e4 <toUppers>
				if (putRECQ(to, &gsmTo) < 0) {
 8004646:	4910      	ldr	r1, [pc, #64]	; (8004688 <serialLOG+0x5a4>)
 8004648:	4620      	mov	r0, r4
 800464a:	f7fd f9af 	bl	80019ac <putRECQ>
 800464e:	2800      	cmp	r0, #0
 8004650:	db09      	blt.n	8004666 <serialLOG+0x582>
					if (devError & devQue) devError &= ~devQue;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <serialLOG+0x5a8>)
 8004654:	7a5b      	ldrb	r3, [r3, #9]
 8004656:	f013 0f40 	tst.w	r3, #64	; 0x40
 800465a:	d0bd      	beq.n	80045d8 <serialLOG+0x4f4>
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <serialLOG+0x5a8>)
 8004662:	7253      	strb	r3, [r2, #9]
 8004664:	e7b8      	b.n	80045d8 <serialLOG+0x4f4>
					devError |= devQue;
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <serialLOG+0x5a8>)
 8004668:	7a53      	ldrb	r3, [r2, #9]
 800466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466e:	7253      	strb	r3, [r2, #9]
					free(to);
 8004670:	4620      	mov	r0, r4
 8004672:	f009 fb4f 	bl	800dd14 <free>
 8004676:	e7af      	b.n	80045d8 <serialLOG+0x4f4>
			} else devError |= devMem;
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <serialLOG+0x5a8>)
 800467a:	7a53      	ldrb	r3, [r2, #9]
 800467c:	f043 0310 	orr.w	r3, r3, #16
 8004680:	7253      	strb	r3, [r2, #9]
 8004682:	e7a9      	b.n	80045d8 <serialLOG+0x4f4>
 8004684:	20000884 	.word	0x20000884
 8004688:	20007d40 	.word	0x20007d40
 800468c:	200003dc 	.word	0x200003dc

08004690 <serialGSM>:
{
 8004690:	b538      	push	{r3, r4, r5, lr}
	if ((gsmByte > 0x0d) && (gsmByte < 0x80)) {
 8004692:	4b36      	ldr	r3, [pc, #216]	; (800476c <serialGSM+0xdc>)
 8004694:	f893 2851 	ldrb.w	r2, [r3, #2129]	; 0x851
 8004698:	f1a2 030e 	sub.w	r3, r2, #14
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b71      	cmp	r3, #113	; 0x71
 80046a0:	d811      	bhi.n	80046c6 <serialGSM+0x36>
		if (gsmByte >= 0x20) adone = 1;
 80046a2:	2a1f      	cmp	r2, #31
 80046a4:	d903      	bls.n	80046ae <serialGSM+0x1e>
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <serialGSM+0xdc>)
 80046a8:	2101      	movs	r1, #1
 80046aa:	f883 1852 	strb.w	r1, [r3, #2130]	; 0x852
		if (adone) gsmBuf[gsm_uk++] = (char)gsmByte;
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <serialGSM+0xdc>)
 80046b0:	f893 3852 	ldrb.w	r3, [r3, #2130]	; 0x852
 80046b4:	b13b      	cbz	r3, 80046c6 <serialGSM+0x36>
 80046b6:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <serialGSM+0xe0>)
 80046b8:	8819      	ldrh	r1, [r3, #0]
 80046ba:	1c48      	adds	r0, r1, #1
 80046bc:	8018      	strh	r0, [r3, #0]
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <serialGSM+0xdc>)
 80046c0:	440b      	add	r3, r1
 80046c2:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	if (adone) {
 80046c6:	4b29      	ldr	r3, [pc, #164]	; (800476c <serialGSM+0xdc>)
 80046c8:	f893 3852 	ldrb.w	r3, [r3, #2130]	; 0x852
 80046cc:	b1cb      	cbz	r3, 8004702 <serialGSM+0x72>
		if ( (gsmByte == 0x0a) || (gsmByte == 0x3e) ) {// '\n' || '>'
 80046ce:	2a0a      	cmp	r2, #10
 80046d0:	d001      	beq.n	80046d6 <serialGSM+0x46>
 80046d2:	2a3e      	cmp	r2, #62	; 0x3e
 80046d4:	d115      	bne.n	8004702 <serialGSM+0x72>
			if (gsmByte != 0x3e) strcat(gsmBuf, "\r\n");//0x0D 0x0A
 80046d6:	2a3e      	cmp	r2, #62	; 0x3e
 80046d8:	d114      	bne.n	8004704 <serialGSM+0x74>
			int len = strlen(gsmBuf);
 80046da:	4d24      	ldr	r5, [pc, #144]	; (800476c <serialGSM+0xdc>)
 80046dc:	f605 0054 	addw	r0, r5, #2132	; 0x854
 80046e0:	f7fb fd88 	bl	80001f4 <strlen>
 80046e4:	4604      	mov	r4, r0
			if (gsmFromFlag) {
 80046e6:	7f2b      	ldrb	r3, [r5, #28]
 80046e8:	b9bb      	cbnz	r3, 800471a <serialGSM+0x8a>
			gsm_uk = 0;
 80046ea:	2100      	movs	r1, #0
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <serialGSM+0xe0>)
 80046ee:	8019      	strh	r1, [r3, #0]
			adone = 0;
 80046f0:	481e      	ldr	r0, [pc, #120]	; (800476c <serialGSM+0xdc>)
 80046f2:	f880 1852 	strb.w	r1, [r0, #2130]	; 0x852
			memset(gsmBuf, 0, sizeof(gsmBuf));
 80046f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fa:	f600 0054 	addw	r0, r0, #2132	; 0x854
 80046fe:	f009 fb1f 	bl	800dd40 <memset>
}
 8004702:	bd38      	pop	{r3, r4, r5, pc}
			if (gsmByte != 0x3e) strcat(gsmBuf, "\r\n");//0x0D 0x0A
 8004704:	4c1b      	ldr	r4, [pc, #108]	; (8004774 <serialGSM+0xe4>)
 8004706:	4620      	mov	r0, r4
 8004708:	f7fb fd74 	bl	80001f4 <strlen>
 800470c:	1822      	adds	r2, r4, r0
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <serialGSM+0xe8>)
 8004710:	8819      	ldrh	r1, [r3, #0]
 8004712:	789b      	ldrb	r3, [r3, #2]
 8004714:	5221      	strh	r1, [r4, r0]
 8004716:	7093      	strb	r3, [r2, #2]
 8004718:	e7df      	b.n	80046da <serialGSM+0x4a>
				char *from = (char *)calloc(1, len + 1);
 800471a:	1c41      	adds	r1, r0, #1
 800471c:	2001      	movs	r0, #1
 800471e:	f009 fa0f 	bl	800db40 <calloc>
				if (from) {
 8004722:	4605      	mov	r5, r0
 8004724:	b1e0      	cbz	r0, 8004760 <serialGSM+0xd0>
					memcpy(from, gsmBuf, len);
 8004726:	4622      	mov	r2, r4
 8004728:	4912      	ldr	r1, [pc, #72]	; (8004774 <serialGSM+0xe4>)
 800472a:	f009 fafb 	bl	800dd24 <memcpy>
					if (putRECQ(from, &gsmFrom) < 0) {
 800472e:	4913      	ldr	r1, [pc, #76]	; (800477c <serialGSM+0xec>)
 8004730:	4628      	mov	r0, r5
 8004732:	f7fd f93b 	bl	80019ac <putRECQ>
 8004736:	2800      	cmp	r0, #0
 8004738:	db09      	blt.n	800474e <serialGSM+0xbe>
						if (devError & devQue) devError &= ~devQue;
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <serialGSM+0xdc>)
 800473c:	7a5b      	ldrb	r3, [r3, #9]
 800473e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004742:	d0d2      	beq.n	80046ea <serialGSM+0x5a>
 8004744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004748:	4a08      	ldr	r2, [pc, #32]	; (800476c <serialGSM+0xdc>)
 800474a:	7253      	strb	r3, [r2, #9]
 800474c:	e7cd      	b.n	80046ea <serialGSM+0x5a>
						devError |= devQue;
 800474e:	4a07      	ldr	r2, [pc, #28]	; (800476c <serialGSM+0xdc>)
 8004750:	7a53      	ldrb	r3, [r2, #9]
 8004752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004756:	7253      	strb	r3, [r2, #9]
						free(from);
 8004758:	4628      	mov	r0, r5
 800475a:	f009 fadb 	bl	800dd14 <free>
 800475e:	e7c4      	b.n	80046ea <serialGSM+0x5a>
					devError |= devMem;
 8004760:	4a02      	ldr	r2, [pc, #8]	; (800476c <serialGSM+0xdc>)
 8004762:	7a53      	ldrb	r3, [r2, #9]
 8004764:	f043 0310 	orr.w	r3, r3, #16
 8004768:	7253      	strb	r3, [r2, #9]
 800476a:	e7be      	b.n	80046ea <serialGSM+0x5a>
 800476c:	200003dc 	.word	0x200003dc
 8004770:	20007ea4 	.word	0x20007ea4
 8004774:	20000c30 	.word	0x20000c30
 8004778:	0801379c 	.word	0x0801379c
 800477c:	20007bac 	.word	0x20007bac

08004780 <serialGPS>:
{
 8004780:	b538      	push	{r3, r4, r5, lr}
	if ((gpsByte > 0x0d) && (gpsByte < 0x80)) {
 8004782:	4b30      	ldr	r3, [pc, #192]	; (8004844 <serialGPS+0xc4>)
 8004784:	f893 2a54 	ldrb.w	r2, [r3, #2644]	; 0xa54
 8004788:	f1a2 030e 	sub.w	r3, r2, #14
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b71      	cmp	r3, #113	; 0x71
 8004790:	d811      	bhi.n	80047b6 <serialGPS+0x36>
		if (gpsByte >= 0x24) gdone = 1; //'$' - first symbol in nmea message
 8004792:	2a23      	cmp	r2, #35	; 0x23
 8004794:	d903      	bls.n	800479e <serialGPS+0x1e>
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <serialGPS+0xc4>)
 8004798:	2101      	movs	r1, #1
 800479a:	f883 1a55 	strb.w	r1, [r3, #2645]	; 0xa55
		if (gdone) gpsBuf[gps_uk++] = (char)gpsByte;
 800479e:	4b29      	ldr	r3, [pc, #164]	; (8004844 <serialGPS+0xc4>)
 80047a0:	f893 3a55 	ldrb.w	r3, [r3, #2645]	; 0xa55
 80047a4:	b13b      	cbz	r3, 80047b6 <serialGPS+0x36>
 80047a6:	4b28      	ldr	r3, [pc, #160]	; (8004848 <serialGPS+0xc8>)
 80047a8:	7819      	ldrb	r1, [r3, #0]
 80047aa:	1c48      	adds	r0, r1, #1
 80047ac:	7018      	strb	r0, [r3, #0]
 80047ae:	4b25      	ldr	r3, [pc, #148]	; (8004844 <serialGPS+0xc4>)
 80047b0:	440b      	add	r3, r1
 80047b2:	f883 2a58 	strb.w	r2, [r3, #2648]	; 0xa58
	if (gdone) {
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <serialGPS+0xc4>)
 80047b8:	f893 3a55 	ldrb.w	r3, [r3, #2645]	; 0xa55
 80047bc:	b10b      	cbz	r3, 80047c2 <serialGPS+0x42>
		if (gpsByte == 0x0a) {// '\n'
 80047be:	2a0a      	cmp	r2, #10
 80047c0:	d000      	beq.n	80047c4 <serialGPS+0x44>
}
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
			if (gpsFromFlag) {// && gsmInit && sntpInit)
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <serialGPS+0xc4>)
 80047c6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80047ca:	b95b      	cbnz	r3, 80047e4 <serialGPS+0x64>
			gps_uk = 0;
 80047cc:	2100      	movs	r1, #0
 80047ce:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <serialGPS+0xc8>)
 80047d0:	7019      	strb	r1, [r3, #0]
			gdone = 0;
 80047d2:	481c      	ldr	r0, [pc, #112]	; (8004844 <serialGPS+0xc4>)
 80047d4:	f880 1a55 	strb.w	r1, [r0, #2645]	; 0xa55
			memset(gpsBuf, 0, sizeof(gpsBuf));
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	f600 2058 	addw	r0, r0, #2648	; 0xa58
 80047de:	f009 faaf 	bl	800dd40 <memset>
}
 80047e2:	e7ee      	b.n	80047c2 <serialGPS+0x42>
				if (gpsValidate(gpsBuf)) {// Функция проверяет на валиднсть данные от GPS модуля
 80047e4:	4819      	ldr	r0, [pc, #100]	; (800484c <serialGPS+0xcc>)
 80047e6:	f7fe f88d 	bl	8002904 <gpsValidate>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d0ee      	beq.n	80047cc <serialGPS+0x4c>
					cnt_gps++;
 80047ee:	4815      	ldr	r0, [pc, #84]	; (8004844 <serialGPS+0xc4>)
 80047f0:	f8d0 3ad8 	ldr.w	r3, [r0, #2776]	; 0xad8
 80047f4:	3301      	adds	r3, #1
 80047f6:	f8c0 3ad8 	str.w	r3, [r0, #2776]	; 0xad8
					int len = strlen(gpsBuf);
 80047fa:	f600 2058 	addw	r0, r0, #2648	; 0xa58
 80047fe:	f7fb fcf9 	bl	80001f4 <strlen>
 8004802:	4604      	mov	r4, r0
					char *gf = (char *)calloc(1, len + 1);
 8004804:	1c41      	adds	r1, r0, #1
 8004806:	2001      	movs	r0, #1
 8004808:	f009 f99a 	bl	800db40 <calloc>
					if (gf) {
 800480c:	4605      	mov	r5, r0
 800480e:	b190      	cbz	r0, 8004836 <serialGPS+0xb6>
						memcpy(gf, gpsBuf, len);
 8004810:	4622      	mov	r2, r4
 8004812:	490e      	ldr	r1, [pc, #56]	; (800484c <serialGPS+0xcc>)
 8004814:	f009 fa86 	bl	800dd24 <memcpy>
						if (putRECQ(gf, &gpsFrom) < 0) {
 8004818:	490d      	ldr	r1, [pc, #52]	; (8004850 <serialGPS+0xd0>)
 800481a:	4628      	mov	r0, r5
 800481c:	f7fd f8c6 	bl	80019ac <putRECQ>
 8004820:	2800      	cmp	r0, #0
 8004822:	dad3      	bge.n	80047cc <serialGPS+0x4c>
							devError |= devQue;
 8004824:	4a07      	ldr	r2, [pc, #28]	; (8004844 <serialGPS+0xc4>)
 8004826:	7a53      	ldrb	r3, [r2, #9]
 8004828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482c:	7253      	strb	r3, [r2, #9]
							free(gf);
 800482e:	4628      	mov	r0, r5
 8004830:	f009 fa70 	bl	800dd14 <free>
 8004834:	e7ca      	b.n	80047cc <serialGPS+0x4c>
					} else devError |= devMem;
 8004836:	4a03      	ldr	r2, [pc, #12]	; (8004844 <serialGPS+0xc4>)
 8004838:	7a53      	ldrb	r3, [r2, #9]
 800483a:	f043 0310 	orr.w	r3, r3, #16
 800483e:	7253      	strb	r3, [r2, #9]
 8004840:	e7c4      	b.n	80047cc <serialGPS+0x4c>
 8004842:	bf00      	nop
 8004844:	200003dc 	.word	0x200003dc
 8004848:	20007bff 	.word	0x20007bff
 800484c:	20000e34 	.word	0x20000e34
 8004850:	20007db4 	.word	0x20007db4

08004854 <HAL_UART_TxCpltCallback>:
	if (huart->Instance == USART1) uartRdy = 1;
 8004854:	6803      	ldr	r3, [r0, #0]
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <HAL_UART_TxCpltCallback+0x34>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d006      	beq.n	800486a <HAL_UART_TxCpltCallback+0x16>
	if (huart->Instance == USART2) gsmRdy = 1;
 800485c:	4a0b      	ldr	r2, [pc, #44]	; (800488c <HAL_UART_TxCpltCallback+0x38>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d008      	beq.n	8004874 <HAL_UART_TxCpltCallback+0x20>
	if (huart->Instance == USART6) gpsRdy = 1;
 8004862:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <HAL_UART_TxCpltCallback+0x3c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00a      	beq.n	800487e <HAL_UART_TxCpltCallback+0x2a>
}
 8004868:	4770      	bx	lr
	if (huart->Instance == USART1) uartRdy = 1;
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_UART_TxCpltCallback+0x40>)
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8004872:	4770      	bx	lr
	if (huart->Instance == USART2) gsmRdy = 1;
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_UART_TxCpltCallback+0x40>)
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800487c:	4770      	bx	lr
	if (huart->Instance == USART6) gpsRdy = 1;
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_UART_TxCpltCallback+0x40>)
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 8004886:	e7ef      	b.n	8004868 <HAL_UART_TxCpltCallback+0x14>
 8004888:	40011000 	.word	0x40011000
 800488c:	40004400 	.word	0x40004400
 8004890:	40011400 	.word	0x40011400
 8004894:	20000010 	.word	0x20000010

08004898 <HAL_UART_RxCpltCallback>:
{
 8004898:	b510      	push	{r4, lr}
 800489a:	4604      	mov	r4, r0
	adrByte = NULL;
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <HAL_UART_RxCpltCallback+0x68>)
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 2adc 	str.w	r2, [r3, #2780]	; 0xadc
	if (huart->Instance == USART1) {
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80048aa:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00d      	beq.n	80048ce <HAL_UART_RxCpltCallback+0x36>
	} else if (huart->Instance == USART2) {
 80048b2:	4a14      	ldr	r2, [pc, #80]	; (8004904 <HAL_UART_RxCpltCallback+0x6c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d012      	beq.n	80048de <HAL_UART_RxCpltCallback+0x46>
	else if (huart->Instance == USART6) {
 80048b8:	4a13      	ldr	r2, [pc, #76]	; (8004908 <HAL_UART_RxCpltCallback+0x70>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d017      	beq.n	80048ee <HAL_UART_RxCpltCallback+0x56>
	HAL_UART_Receive_IT(huart, adrByte, 1);
 80048be:	2201      	movs	r2, #1
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <HAL_UART_RxCpltCallback+0x68>)
 80048c2:	f8d3 1adc 	ldr.w	r1, [r3, #2780]	; 0xadc
 80048c6:	4620      	mov	r0, r4
 80048c8:	f006 fb23 	bl	800af12 <HAL_UART_Receive_IT>
}
 80048cc:	bd10      	pop	{r4, pc}
		serialLOG();
 80048ce:	f7ff fc09 	bl	80040e4 <serialLOG>
		adrByte = &uRxByte;
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_UART_RxCpltCallback+0x68>)
 80048d4:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 80048d8:	f8c3 2adc 	str.w	r2, [r3, #2780]	; 0xadc
 80048dc:	e7ef      	b.n	80048be <HAL_UART_RxCpltCallback+0x26>
		serialGSM();
 80048de:	f7ff fed7 	bl	8004690 <serialGSM>
		adrByte = &gsmByte;
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_UART_RxCpltCallback+0x68>)
 80048e4:	f603 0251 	addw	r2, r3, #2129	; 0x851
 80048e8:	f8c3 2adc 	str.w	r2, [r3, #2780]	; 0xadc
 80048ec:	e7e7      	b.n	80048be <HAL_UART_RxCpltCallback+0x26>
		serialGPS();
 80048ee:	f7ff ff47 	bl	8004780 <serialGPS>
		adrByte = &gpsByte;
 80048f2:	4b03      	ldr	r3, [pc, #12]	; (8004900 <HAL_UART_RxCpltCallback+0x68>)
 80048f4:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 80048f8:	f8c3 2adc 	str.w	r2, [r3, #2780]	; 0xadc
 80048fc:	e7df      	b.n	80048be <HAL_UART_RxCpltCallback+0x26>
 80048fe:	bf00      	nop
 8004900:	200003dc 	.word	0x200003dc
 8004904:	40004400 	.word	0x40004400
 8004908:	40011400 	.word	0x40011400

0800490c <HAL_I2C_ErrorCallback>:
	if (hi2c->Instance == I2C1) devError |= devI2C;
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_I2C_ErrorCallback+0x18>)
 8004910:	429a      	cmp	r2, r3
 8004912:	d000      	beq.n	8004916 <HAL_I2C_ErrorCallback+0xa>
}
 8004914:	4770      	bx	lr
	if (hi2c->Instance == I2C1) devError |= devI2C;
 8004916:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_I2C_ErrorCallback+0x1c>)
 8004918:	7a53      	ldrb	r3, [r2, #9]
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	7253      	strb	r3, [r2, #9]
}
 8004920:	e7f8      	b.n	8004914 <HAL_I2C_ErrorCallback+0x8>
 8004922:	bf00      	nop
 8004924:	40005400 	.word	0x40005400
 8004928:	200003dc 	.word	0x200003dc

0800492c <HAL_I2C_MasterTxCpltCallback>:
	if (hi2c->Instance == I2C1) i2cRdy = 1;//from oled
 800492c:	6802      	ldr	r2, [r0, #0]
 800492e:	4b04      	ldr	r3, [pc, #16]	; (8004940 <HAL_I2C_MasterTxCpltCallback+0x14>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d000      	beq.n	8004936 <HAL_I2C_MasterTxCpltCallback+0xa>
}
 8004934:	4770      	bx	lr
	if (hi2c->Instance == I2C1) i2cRdy = 1;//from oled
 8004936:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 800493e:	e7f9      	b.n	8004934 <HAL_I2C_MasterTxCpltCallback+0x8>
 8004940:	40005400 	.word	0x40005400
 8004944:	20000010 	.word	0x20000010

08004948 <spiDone>:
{
 8004948:	b508      	push	{r3, lr}
	if (hspi->Instance == SPI1) {
 800494a:	6802      	ldr	r2, [r0, #0]
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <spiDone+0x1c>)
 800494e:	429a      	cmp	r2, r3
 8004950:	d000      	beq.n	8004954 <spiDone+0xc>
}
 8004952:	bd08      	pop	{r3, pc}
		W25_UNSELECT();
 8004954:	f002 f800 	bl	8006958 <W25_UNSELECT>
		spiRdy = 1;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <spiDone+0x20>)
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8004960:	e7f7      	b.n	8004952 <spiDone+0xa>
 8004962:	bf00      	nop
 8004964:	40013000 	.word	0x40013000
 8004968:	20000010 	.word	0x20000010

0800496c <HAL_SPI_RxCpltCallback>:
{
 800496c:	b508      	push	{r3, lr}
	spiDone(hspi);
 800496e:	f7ff ffeb 	bl	8004948 <spiDone>
}
 8004972:	bd08      	pop	{r3, pc}

08004974 <HAL_SPI_TxCpltCallback>:
{
 8004974:	b508      	push	{r3, lr}
	spiDone(hspi);
 8004976:	f7ff ffe7 	bl	8004948 <spiDone>
}
 800497a:	bd08      	pop	{r3, pc}

0800497c <HAL_SPI_TxRxCpltCallback>:
{
 800497c:	b508      	push	{r3, lr}
	spiDone(hspi);
 800497e:	f7ff ffe3 	bl	8004948 <spiDone>
}
 8004982:	bd08      	pop	{r3, pc}

08004984 <HAL_SPI_ErrorCallback>:
{
 8004984:	b508      	push	{r3, lr}
	spiDone(hspi);
 8004986:	f7ff ffdf 	bl	8004948 <spiDone>
	devError |= devSPI;
 800498a:	4a03      	ldr	r2, [pc, #12]	; (8004998 <HAL_SPI_ErrorCallback+0x14>)
 800498c:	7a53      	ldrb	r3, [r2, #9]
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	7253      	strb	r3, [r2, #9]
}
 8004994:	bd08      	pop	{r3, pc}
 8004996:	bf00      	nop
 8004998:	200003dc 	.word	0x200003dc

0800499c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b508      	push	{r3, lr}
//
//   CallBack функция таймера
//
//------------------------------------------------------
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	4a1a      	ldr	r2, [pc, #104]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_PeriodElapsedCallback+0x12>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM3) {// период срабатывания 10 мсек.
 80049a6:	4a1a      	ldr	r2, [pc, #104]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <HAL_TIM_PeriodElapsedCallback+0x18>
  else if (htim->Instance == TIM10) {// период срабатывания 1 мксек.
	  //
  }
#endif
  /* USER CODE END Callback 1 */
}
 80049ac:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80049ae:	f002 fb8f 	bl	80070d0 <HAL_IncTick>
 80049b2:	e7fb      	b.n	80049ac <HAL_TIM_PeriodElapsedCallback+0x10>
	  HalfSecCounter++;//+10ms
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80049b6:	f8d3 2ae0 	ldr.w	r2, [r3, #2784]	; 0xae0
 80049ba:	3201      	adds	r2, #1
 80049bc:	f8c3 2ae0 	str.w	r2, [r3, #2784]	; 0xae0
	  if (!(HalfSecCounter % _1s)) {//seconda
 80049c0:	f8d3 2ae0 	ldr.w	r2, [r3, #2784]	; 0xae0
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80049c6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2164      	movs	r1, #100	; 0x64
 80049ce:	fb01 2313 	mls	r3, r1, r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ea      	bne.n	80049ac <HAL_TIM_PeriodElapsedCallback+0x10>
		  inc_secCounter();//secCounter++;
 80049d6:	f7fc ffa9 	bl	800192c <inc_secCounter>
		  if (screenON) {
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80049dc:	f893 3ae4 	ldrb.w	r3, [r3, #2788]	; 0xae4
 80049e0:	b12b      	cbz	r3, 80049ee <HAL_TIM_PeriodElapsedCallback+0x52>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//set ON/OFF LED1
 80049e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049e6:	480d      	ldr	r0, [pc, #52]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80049e8:	f002 feef 	bl	80077ca <HAL_GPIO_TogglePin>
 80049ec:	e7de      	b.n	80049ac <HAL_TIM_PeriodElapsedCallback+0x10>
			  if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin) == GPIO_PIN_SET)
 80049ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049f2:	480a      	ldr	r0, [pc, #40]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80049f4:	f002 fedc 	bl	80077b0 <HAL_GPIO_ReadPin>
 80049f8:	2801      	cmp	r0, #1
 80049fa:	d1d7      	bne.n	80049ac <HAL_TIM_PeriodElapsedCallback+0x10>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a02:	4806      	ldr	r0, [pc, #24]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004a04:	f002 fedb 	bl	80077be <HAL_GPIO_WritePin>
}
 8004a08:	e7d0      	b.n	80049ac <HAL_TIM_PeriodElapsedCallback+0x10>
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	200003dc 	.word	0x200003dc
 8004a18:	51eb851f 	.word	0x51eb851f
 8004a1c:	40020400 	.word	0x40020400

08004a20 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004a20:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a22:	e7fe      	b.n	8004a22 <Error_Handler+0x2>

08004a24 <MX_USART1_UART_Init>:
{
 8004a24:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8004a26:	480a      	ldr	r0, [pc, #40]	; (8004a50 <MX_USART1_UART_Init+0x2c>)
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <MX_USART1_UART_Init+0x30>)
 8004a2a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 230400;//115200;
 8004a2c:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8004a30:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a32:	2300      	movs	r3, #0
 8004a34:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a36:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a38:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a3a:	220c      	movs	r2, #12
 8004a3c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a3e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a40:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a42:	f006 fa37 	bl	800aeb4 <HAL_UART_Init>
 8004a46:	b900      	cbnz	r0, 8004a4a <MX_USART1_UART_Init+0x26>
}
 8004a48:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a4a:	f7ff ffe9 	bl	8004a20 <Error_Handler>
 8004a4e:	bf00      	nop
 8004a50:	20007d00 	.word	0x20007d00
 8004a54:	40011000 	.word	0x40011000

08004a58 <MX_I2C1_Init>:
{
 8004a58:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004a5a:	480a      	ldr	r0, [pc, #40]	; (8004a84 <MX_I2C1_Init+0x2c>)
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <MX_I2C1_Init+0x30>)
 8004a5e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <MX_I2C1_Init+0x34>)
 8004a62:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a64:	2300      	movs	r3, #0
 8004a66:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004a68:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a6e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a70:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004a72:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a74:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a76:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a78:	f003 f9c8 	bl	8007e0c <HAL_I2C_Init>
 8004a7c:	b900      	cbnz	r0, 8004a80 <MX_I2C1_Init+0x28>
}
 8004a7e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a80:	f7ff ffce 	bl	8004a20 <Error_Handler>
 8004a84:	20007b18 	.word	0x20007b18
 8004a88:	40005400 	.word	0x40005400
 8004a8c:	00061a80 	.word	0x00061a80

08004a90 <MX_SPI1_Init>:
{
 8004a90:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8004a92:	480d      	ldr	r0, [pc, #52]	; (8004ac8 <MX_SPI1_Init+0x38>)
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <MX_SPI1_Init+0x3c>)
 8004a96:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a98:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004a9c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004aa2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004aa6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aac:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aae:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ab0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ab2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004aba:	f005 f93d 	bl	8009d38 <HAL_SPI_Init>
 8004abe:	b900      	cbnz	r0, 8004ac2 <MX_SPI1_Init+0x32>
}
 8004ac0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004ac2:	f7ff ffad 	bl	8004a20 <Error_Handler>
 8004ac6:	bf00      	nop
 8004ac8:	20007e48 	.word	0x20007e48
 8004acc:	40013000 	.word	0x40013000

08004ad0 <MX_RTC_Init>:
{
 8004ad0:	b500      	push	{lr}
 8004ad2:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	9302      	str	r3, [sp, #8]
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	9304      	str	r3, [sp, #16]
 8004ade:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8004ae0:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 8004ae2:	481a      	ldr	r0, [pc, #104]	; (8004b4c <MX_RTC_Init+0x7c>)
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <MX_RTC_Init+0x80>)
 8004ae6:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004ae8:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004aea:	227f      	movs	r2, #127	; 0x7f
 8004aec:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004aee:	22ff      	movs	r2, #255	; 0xff
 8004af0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004af2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004af4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004af6:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004af8:	f004 feb1 	bl	800985e <HAL_RTC_Init>
 8004afc:	b9f8      	cbnz	r0, 8004b3e <MX_RTC_Init+0x6e>
  sTime.Hours = 0;
 8004afe:	2200      	movs	r2, #0
 8004b00:	f88d 2004 	strb.w	r2, [sp, #4]
  sTime.Minutes = 0;
 8004b04:	f88d 2005 	strb.w	r2, [sp, #5]
  sTime.Seconds = 0;
 8004b08:	f88d 2006 	strb.w	r2, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004b0c:	9204      	str	r2, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004b0e:	9205      	str	r2, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004b10:	a901      	add	r1, sp, #4
 8004b12:	480e      	ldr	r0, [pc, #56]	; (8004b4c <MX_RTC_Init+0x7c>)
 8004b14:	f004 ff10 	bl	8009938 <HAL_RTC_SetTime>
 8004b18:	b998      	cbnz	r0, 8004b42 <MX_RTC_Init+0x72>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004b20:	f88d 3001 	strb.w	r3, [sp, #1]
  sDate.Date = 1;
 8004b24:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0;
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f88d 2003 	strb.w	r2, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004b2e:	4669      	mov	r1, sp
 8004b30:	4806      	ldr	r0, [pc, #24]	; (8004b4c <MX_RTC_Init+0x7c>)
 8004b32:	f004 ff80 	bl	8009a36 <HAL_RTC_SetDate>
 8004b36:	b930      	cbnz	r0, 8004b46 <MX_RTC_Init+0x76>
}
 8004b38:	b007      	add	sp, #28
 8004b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004b3e:	f7ff ff6f 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004b42:	f7ff ff6d 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004b46:	f7ff ff6b 	bl	8004a20 <Error_Handler>
 8004b4a:	bf00      	nop
 8004b4c:	20007d94 	.word	0x20007d94
 8004b50:	40002800 	.word	0x40002800

08004b54 <MX_TIM3_Init>:
{
 8004b54:	b500      	push	{lr}
 8004b56:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9302      	str	r3, [sp, #8]
 8004b5c:	9303      	str	r3, [sp, #12]
 8004b5e:	9304      	str	r3, [sp, #16]
 8004b60:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8004b66:	4815      	ldr	r0, [pc, #84]	; (8004bbc <MX_TIM3_Init+0x68>)
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <MX_TIM3_Init+0x6c>)
 8004b6a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 41999;
 8004b6c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8004b70:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b72:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 19;
 8004b74:	2313      	movs	r3, #19
 8004b76:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b82:	f005 ff87 	bl	800aa94 <HAL_TIM_Base_Init>
 8004b86:	b998      	cbnz	r0, 8004bb0 <MX_TIM3_Init+0x5c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b8e:	a902      	add	r1, sp, #8
 8004b90:	480a      	ldr	r0, [pc, #40]	; (8004bbc <MX_TIM3_Init+0x68>)
 8004b92:	f005 ffa5 	bl	800aae0 <HAL_TIM_ConfigClockSource>
 8004b96:	b968      	cbnz	r0, 8004bb4 <MX_TIM3_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ba0:	4669      	mov	r1, sp
 8004ba2:	4806      	ldr	r0, [pc, #24]	; (8004bbc <MX_TIM3_Init+0x68>)
 8004ba4:	f006 f80a 	bl	800abbc <HAL_TIMEx_MasterConfigSynchronization>
 8004ba8:	b930      	cbnz	r0, 8004bb8 <MX_TIM3_Init+0x64>
}
 8004baa:	b007      	add	sp, #28
 8004bac:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004bb0:	f7ff ff36 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004bb4:	f7ff ff34 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004bb8:	f7ff ff32 	bl	8004a20 <Error_Handler>
 8004bbc:	20007c00 	.word	0x20007c00
 8004bc0:	40000400 	.word	0x40000400

08004bc4 <MX_USART2_UART_Init>:
{
 8004bc4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004bc6:	480a      	ldr	r0, [pc, #40]	; (8004bf0 <MX_USART2_UART_Init+0x2c>)
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <MX_USART2_UART_Init+0x30>)
 8004bca:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004bcc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004bd0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bd6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bd8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bda:	220c      	movs	r2, #12
 8004bdc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bde:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004be0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004be2:	f006 f967 	bl	800aeb4 <HAL_UART_Init>
 8004be6:	b900      	cbnz	r0, 8004bea <MX_USART2_UART_Init+0x26>
}
 8004be8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004bea:	f7ff ff19 	bl	8004a20 <Error_Handler>
 8004bee:	bf00      	nop
 8004bf0:	20007ea8 	.word	0x20007ea8
 8004bf4:	40004400 	.word	0x40004400

08004bf8 <MX_USART6_UART_Init>:
{
 8004bf8:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8004bfa:	480a      	ldr	r0, [pc, #40]	; (8004c24 <MX_USART6_UART_Init+0x2c>)
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <MX_USART6_UART_Init+0x30>)
 8004bfe:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 8004c00:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004c04:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004c06:	2300      	movs	r3, #0
 8004c08:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004c0a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004c0c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004c0e:	220c      	movs	r2, #12
 8004c10:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c12:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c14:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004c16:	f006 f94d 	bl	800aeb4 <HAL_UART_Init>
 8004c1a:	b900      	cbnz	r0, 8004c1e <MX_USART6_UART_Init+0x26>
}
 8004c1c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c1e:	f7ff feff 	bl	8004a20 <Error_Handler>
 8004c22:	bf00      	nop
 8004c24:	20007e08 	.word	0x20007e08
 8004c28:	40011400 	.word	0x40011400

08004c2c <MX_TIM10_Init>:
{
 8004c2c:	b508      	push	{r3, lr}
  htim10.Instance = TIM10;
 8004c2e:	4809      	ldr	r0, [pc, #36]	; (8004c54 <MX_TIM10_Init+0x28>)
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <MX_TIM10_Init+0x2c>)
 8004c32:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 83;
 8004c34:	2353      	movs	r3, #83	; 0x53
 8004c36:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 65535;
 8004c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c40:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c42:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004c48:	f005 ff24 	bl	800aa94 <HAL_TIM_Base_Init>
 8004c4c:	b900      	cbnz	r0, 8004c50 <MX_TIM10_Init+0x24>
}
 8004c4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c50:	f7ff fee6 	bl	8004a20 <Error_Handler>
 8004c54:	20007b6c 	.word	0x20007b6c
 8004c58:	40014400 	.word	0x40014400

08004c5c <SystemClock_Config>:
{
 8004c5c:	b500      	push	{lr}
 8004c5e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c60:	2230      	movs	r2, #48	; 0x30
 8004c62:	2100      	movs	r1, #0
 8004c64:	eb0d 0002 	add.w	r0, sp, r2
 8004c68:	f009 f86a 	bl	800dd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9307      	str	r3, [sp, #28]
 8004c70:	9308      	str	r3, [sp, #32]
 8004c72:	9309      	str	r3, [sp, #36]	; 0x24
 8004c74:	930a      	str	r3, [sp, #40]	; 0x28
 8004c76:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c78:	9302      	str	r3, [sp, #8]
 8004c7a:	9303      	str	r3, [sp, #12]
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <SystemClock_Config+0xc8>)
 8004c86:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004c88:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004c8c:	6411      	str	r1, [r2, #64]	; 0x40
 8004c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c90:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <SystemClock_Config+0xcc>)
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	6813      	ldr	r3, [r2, #0]
 8004caa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004cb2:	2309      	movs	r3, #9
 8004cb4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cba:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004cc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cc8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004cca:	2319      	movs	r3, #25
 8004ccc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004cce:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004cd2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004cd8:	2307      	movs	r3, #7
 8004cda:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cdc:	a80c      	add	r0, sp, #48	; 0x30
 8004cde:	f004 f997 	bl	8009010 <HAL_RCC_OscConfig>
 8004ce2:	b9c8      	cbnz	r0, 8004d18 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ce4:	230f      	movs	r3, #15
 8004ce6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ce8:	2102      	movs	r1, #2
 8004cea:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cec:	2300      	movs	r3, #0
 8004cee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cf4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cf6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004cf8:	a807      	add	r0, sp, #28
 8004cfa:	f004 fbcf 	bl	800949c <HAL_RCC_ClockConfig>
 8004cfe:	b968      	cbnz	r0, 8004d1c <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004d00:	2302      	movs	r3, #2
 8004d02:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d08:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d0a:	a802      	add	r0, sp, #8
 8004d0c:	f004 fcba 	bl	8009684 <HAL_RCCEx_PeriphCLKConfig>
 8004d10:	b930      	cbnz	r0, 8004d20 <SystemClock_Config+0xc4>
}
 8004d12:	b019      	add	sp, #100	; 0x64
 8004d14:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004d18:	f7ff fe82 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004d1c:	f7ff fe80 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004d20:	f7ff fe7e 	bl	8004a20 <Error_Handler>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000

08004d2c <main>:
{
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8004d2e:	f002 f9b5 	bl	800709c <HAL_Init>
  SystemClock_Config();
 8004d32:	f7ff ff93 	bl	8004c5c <SystemClock_Config>
  MX_GPIO_Init();
 8004d36:	f7fd ffd5 	bl	8002ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d3a:	f7fe f841 	bl	8002dc0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004d3e:	f7ff fe71 	bl	8004a24 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004d42:	f7ff fe89 	bl	8004a58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004d46:	f7ff fea3 	bl	8004a90 <MX_SPI1_Init>
  MX_RTC_Init();
 8004d4a:	f7ff fec1 	bl	8004ad0 <MX_RTC_Init>
  MX_TIM3_Init();
 8004d4e:	f7ff ff01 	bl	8004b54 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8004d52:	f7ff ff37 	bl	8004bc4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8004d56:	f7ff ff4f 	bl	8004bf8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8004d5a:	f7ff ff67 	bl	8004c2c <MX_TIM10_Init>
  MX_FATFS_Init();
 8004d5e:	f006 fa97 	bl	800b290 <MX_FATFS_Init>
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004d62:	4c65      	ldr	r4, [pc, #404]	; (8004ef8 <main+0x1cc>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f002 fd27 	bl	80077be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004d70:	2201      	movs	r2, #1
 8004d72:	4611      	mov	r1, r2
 8004d74:	4620      	mov	r0, r4
 8004d76:	f002 fd22 	bl	80077be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_SET);
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d80:	4620      	mov	r0, r4
 8004d82:	f002 fd1c 	bl	80077be <HAL_GPIO_WritePin>
      HAL_Delay(350);
 8004d86:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004d8a:	f002 f9b3 	bl	80070f4 <HAL_Delay>
      HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_RESET);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2101      	movs	r1, #1
 8004d92:	4620      	mov	r0, r4
 8004d94:	f002 fd13 	bl	80077be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f002 fd0d 	bl	80077be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_RESET);
 8004da4:	2200      	movs	r2, #0
 8004da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004daa:	4620      	mov	r0, r4
 8004dac:	f002 fd07 	bl	80077be <HAL_GPIO_WritePin>
      HAL_Delay(350);
 8004db0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8004db4:	f002 f99e 	bl	80070f4 <HAL_Delay>
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004db8:	2201      	movs	r2, #1
 8004dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f002 fcfd 	bl	80077be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f002 fcf8 	bl	80077be <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CON_LED_GPIO_Port, CON_LED_Pin, GPIO_PIN_SET);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f002 fcf2 	bl	80077be <HAL_GPIO_WritePin>
      HAL_TIM_Base_Start_IT(&htim3);
 8004dda:	4848      	ldr	r0, [pc, #288]	; (8004efc <main+0x1d0>)
 8004ddc:	f005 fd39 	bl	800a852 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim10);
 8004de0:	4847      	ldr	r0, [pc, #284]	; (8004f00 <main+0x1d4>)
 8004de2:	f005 fd36 	bl	800a852 <HAL_TIM_Base_Start_IT>
      HAL_UART_Receive_IT(portLOG, (uint8_t *)&uRxByte, 1);
 8004de6:	4c47      	ldr	r4, [pc, #284]	; (8004f04 <main+0x1d8>)
 8004de8:	4d47      	ldr	r5, [pc, #284]	; (8004f08 <main+0x1dc>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	f204 41a4 	addw	r1, r4, #1188	; 0x4a4
 8004df0:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004df2:	f006 f88e 	bl	800af12 <HAL_UART_Receive_IT>
      HAL_UART_Receive_IT(portGSM, (uint8_t *)&gsmByte, 1);
 8004df6:	2201      	movs	r2, #1
 8004df8:	f604 0151 	addw	r1, r4, #2129	; 0x851
 8004dfc:	6828      	ldr	r0, [r5, #0]
 8004dfe:	f006 f888 	bl	800af12 <HAL_UART_Receive_IT>
      HAL_UART_Receive_IT(portGPS, (uint8_t *)&gpsByte, 1);
 8004e02:	2201      	movs	r2, #1
 8004e04:	f604 2154 	addw	r1, r4, #2644	; 0xa54
 8004e08:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8004e0a:	f006 f882 	bl	800af12 <HAL_UART_Receive_IT>
      Report(NULL, true, "Start application version '%s'\r\n", version);
 8004e0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004e10:	4a3e      	ldr	r2, [pc, #248]	; (8004f0c <main+0x1e0>)
 8004e12:	2101      	movs	r1, #1
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fc fedf 	bl	8001bd8 <Report>
      cmds = (char *)calloc(1, CMD_LEN + 1);//выделяем память под буфер команд GSM модуля
 8004e1a:	2129      	movs	r1, #41	; 0x29
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f008 fe8f 	bl	800db40 <calloc>
 8004e22:	63a0      	str	r0, [r4, #56]	; 0x38
      cusd = (char *)calloc(1, SMS_BUF_LEN);//выделяем память под буфер для приема ответа на cusd-запросы
 8004e24:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e28:	2001      	movs	r0, #1
 8004e2a:	f008 fe89 	bl	800db40 <calloc>
 8004e2e:	f8c4 0ae8 	str.w	r0, [r4, #2792]	; 0xae8
      InitSMSList();// инициализация структуры для хранения частей смс
 8004e32:	f000 f8f1 	bl	8005018 <InitSMSList>
      chipPresent = W25qxx_Init();
 8004e36:	f001 fe57 	bl	8006ae8 <W25qxx_Init>
 8004e3a:	f884 0aec 	strb.w	r0, [r4, #2796]	; 0xaec
      uint32_t cid = W25qxx_getChipID();
 8004e3e:	f001 fecf 	bl	8006be0 <W25qxx_getChipID>
      if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8004e42:	f894 2aec 	ldrb.w	r2, [r4, #2796]	; 0xaec
 8004e46:	b12a      	cbz	r2, 8004e54 <main+0x128>
 8004e48:	1e43      	subs	r3, r0, #1
 8004e4a:	2b07      	cmp	r3, #7
 8004e4c:	d802      	bhi.n	8004e54 <main+0x128>
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f884 2850 	strb.w	r2, [r4, #2128]	; 0x850
      list_sector = W25qxx_getPageSize() << 2;
 8004e54:	f001 fed6 	bl	8006c04 <W25qxx_getPageSize>
 8004e58:	0080      	lsls	r0, r0, #2
 8004e5a:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <main+0x1d8>)
 8004e5c:	f8c2 009c 	str.w	r0, [r2, #156]	; 0x9c
	  if (devError) errLedOn(NULL);
 8004e60:	7a53      	ldrb	r3, [r2, #9]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d143      	bne.n	8004eee <main+0x1c2>
      oled_withDMA = 1;
 8004e66:	2601      	movs	r6, #1
 8004e68:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <main+0x1e4>)
 8004e6a:	701e      	strb	r6, [r3, #0]
      screenON = 1;
 8004e6c:	4d25      	ldr	r5, [pc, #148]	; (8004f04 <main+0x1d8>)
 8004e6e:	f885 6ae4 	strb.w	r6, [r5, #2788]	; 0xae4
      i2c_ssd1306_init();//screen INIT
 8004e72:	f000 ff13 	bl	8005c9c <i2c_ssd1306_init>
      i2c_ssd1306_pattern(false);//set any params for screen
 8004e76:	2000      	movs	r0, #0
 8004e78:	f001 f8e0 	bl	800603c <i2c_ssd1306_pattern>
      i2c_ssd1306_clear();//clear screen
 8004e7c:	f000 ff6a 	bl	8005d54 <i2c_ssd1306_clear>
      coreStatus = osKernelInitialize();
 8004e80:	f006 fab4 	bl	800b3ec <osKernelInitialize>
 8004e84:	4f20      	ldr	r7, [pc, #128]	; (8004f08 <main+0x1dc>)
 8004e86:	6778      	str	r0, [r7, #116]	; 0x74
  rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8004e88:	4c22      	ldr	r4, [pc, #136]	; (8004f14 <main+0x1e8>)
 8004e8a:	f604 40c8 	addw	r0, r4, #3272	; 0xcc8
 8004e8e:	f006 fb7f 	bl	800b590 <osMutexNew>
 8004e92:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <main+0x1ec>)
 8004e94:	6018      	str	r0, [r3, #0]
  semHandle = osSemaphoreNew(1, 1, &sem_attributes);
 8004e96:	f604 42d8 	addw	r2, r4, #3288	; 0xcd8
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f006 fc43 	bl	800b728 <osSemaphoreNew>
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <main+0x1f0>)
 8004ea4:	6018      	str	r0, [r3, #0]
  	gsmToFlag   = initRECQ(&gsmTo);
 8004ea6:	481e      	ldr	r0, [pc, #120]	; (8004f20 <main+0x1f4>)
 8004ea8:	f7fc fd6c 	bl	8001984 <initRECQ>
 8004eac:	7228      	strb	r0, [r5, #8]
  	gsmFromFlag = initRECQ(&gsmFrom);
 8004eae:	481d      	ldr	r0, [pc, #116]	; (8004f24 <main+0x1f8>)
 8004eb0:	f7fc fd68 	bl	8001984 <initRECQ>
 8004eb4:	7728      	strb	r0, [r5, #28]
  	gpsFromFlag = initRECQ(&gpsFrom);
 8004eb6:	481c      	ldr	r0, [pc, #112]	; (8004f28 <main+0x1fc>)
 8004eb8:	f7fc fd64 	bl	8001984 <initRECQ>
 8004ebc:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
  	set_Date((time_t)epoch);//set time last edit
 8004ec0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004ec4:	f7fc fdd2 	bl	8001a6c <set_Date>
  mainTaskHandle = osThreadNew(StartDefaultTask, NULL, &mainTask_attributes);
 8004ec8:	f604 42e8 	addw	r2, r4, #3304	; 0xce8
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4817      	ldr	r0, [pc, #92]	; (8004f2c <main+0x200>)
 8004ed0:	f006 face 	bl	800b470 <osThreadNew>
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <main+0x204>)
 8004ed6:	6018      	str	r0, [r3, #0]
  tempTaskHandle = osThreadNew(StartTemp, NULL, &tempTask_attributes);
 8004ed8:	f604 520c 	addw	r2, r4, #3340	; 0xd0c
 8004edc:	2100      	movs	r1, #0
 8004ede:	4815      	ldr	r0, [pc, #84]	; (8004f34 <main+0x208>)
 8004ee0:	f006 fac6 	bl	800b470 <osThreadNew>
 8004ee4:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <main+0x20c>)
 8004ee6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004ee8:	f006 fa9e 	bl	800b428 <osKernelStart>
  while (1)
 8004eec:	e7fe      	b.n	8004eec <main+0x1c0>
	  if (devError) errLedOn(NULL);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f7fc fec8 	bl	8001c84 <errLedOn>
 8004ef4:	e7b7      	b.n	8004e66 <main+0x13a>
 8004ef6:	bf00      	nop
 8004ef8:	40020400 	.word	0x40020400
 8004efc:	20007c00 	.word	0x20007c00
 8004f00:	20007b6c 	.word	0x20007b6c
 8004f04:	200003dc 	.word	0x200003dc
 8004f08:	20000010 	.word	0x20000010
 8004f0c:	08013544 	.word	0x08013544
 8004f10:	20002830 	.word	0x20002830
 8004f14:	08012098 	.word	0x08012098
 8004f18:	20007a8c 	.word	0x20007a8c
 8004f1c:	20007aa8 	.word	0x20007aa8
 8004f20:	20007d40 	.word	0x20007d40
 8004f24:	20007bac 	.word	0x20007bac
 8004f28:	20007db4 	.word	0x20007db4
 8004f2c:	08003121 	.word	0x08003121
 8004f30:	20007aac 	.word	0x20007aac
 8004f34:	08002e49 	.word	0x08002e49
 8004f38:	20007ea0 	.word	0x20007ea0

08004f3c <hextobin>:
	"???"
};

//------------------------------------------------------------------------------------------
uint8_t hextobin(char st, char ml)
{
 8004f3c:	b430      	push	{r4, r5}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	4605      	mov	r5, r0
 8004f42:	460c      	mov	r4, r1
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <hextobin+0x60>)
 8004f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f48:	f10d 0c10 	add.w	ip, sp, #16
 8004f4c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
uint8_t a = 255, b, c, i;

	for	(i = 0; i < 16; i++) { if (st == hex[i]) { b = i; break; } else b = 255; }
 8004f50:	2000      	movs	r0, #0
 8004f52:	280f      	cmp	r0, #15
 8004f54:	d808      	bhi.n	8004f68 <hextobin+0x2c>
 8004f56:	ab04      	add	r3, sp, #16
 8004f58:	4403      	add	r3, r0
 8004f5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004f5e:	42ab      	cmp	r3, r5
 8004f60:	d003      	beq.n	8004f6a <hextobin+0x2e>
 8004f62:	3001      	adds	r0, #1
 8004f64:	b2c0      	uxtb	r0, r0
 8004f66:	e7f4      	b.n	8004f52 <hextobin+0x16>
 8004f68:	20ff      	movs	r0, #255	; 0xff
	for	(i = 0; i < 16; i++) { if (ml == hex[i]) { c = i; break; } else c = 255; }
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d808      	bhi.n	8004f82 <hextobin+0x46>
 8004f70:	aa04      	add	r2, sp, #16
 8004f72:	441a      	add	r2, r3
 8004f74:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004f78:	42a2      	cmp	r2, r4
 8004f7a:	d003      	beq.n	8004f84 <hextobin+0x48>
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e7f4      	b.n	8004f6c <hextobin+0x30>
 8004f82:	23ff      	movs	r3, #255	; 0xff
	if ((b != 255) && (c != 255)) { b = b << 4;   a = b | c; }
 8004f84:	28ff      	cmp	r0, #255	; 0xff
 8004f86:	d004      	beq.n	8004f92 <hextobin+0x56>
 8004f88:	2bff      	cmp	r3, #255	; 0xff
 8004f8a:	d005      	beq.n	8004f98 <hextobin+0x5c>
 8004f8c:	0100      	lsls	r0, r0, #4
 8004f8e:	b2c0      	uxtb	r0, r0
 8004f90:	4318      	orrs	r0, r3

	return a;
}
 8004f92:	b004      	add	sp, #16
 8004f94:	bc30      	pop	{r4, r5}
 8004f96:	4770      	bx	lr
uint8_t a = 255, b, c, i;
 8004f98:	4618      	mov	r0, r3
 8004f9a:	e7fa      	b.n	8004f92 <hextobin+0x56>
 8004f9c:	08013774 	.word	0x08013774

08004fa0 <ucs2_to_utf8>:
//-----------------------------------------------------------------------------------------
int ucs2_to_utf8(char *buf_in, uint8_t *udl, uint8_t *utf8)
{
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	4616      	mov	r6, r2
char *ptr = buf_in;
uint8_t *out = utf8;
uint16_t ucs2;


	if (!udl) len = strlen(buf_in) >> 2; else len = *udl >> 1;
 8004fa8:	b131      	cbz	r1, 8004fb8 <ucs2_to_utf8+0x18>
 8004faa:	f891 9000 	ldrb.w	r9, [r1]
 8004fae:	ea4f 0959 	mov.w	r9, r9, lsr #1
    	if (ucs2 < 0x80) {
    		*out++ = (uint8_t)ucs2;
    		ret++;
    	} else {
    		*out++ = (uint8_t)((ucs2 >> 6)   | 0xC0);
    		*out++ = (uint8_t)((ucs2 & 0x3F) | 0x80);
 8004fb2:	2700      	movs	r7, #0
 8004fb4:	46b8      	mov	r8, r7
 8004fb6:	e013      	b.n	8004fe0 <ucs2_to_utf8+0x40>
	if (!udl) len = strlen(buf_in) >> 2; else len = *udl >> 1;
 8004fb8:	f7fb f91c 	bl	80001f4 <strlen>
 8004fbc:	ea4f 0990 	mov.w	r9, r0, lsr #2
 8004fc0:	e7f7      	b.n	8004fb2 <ucs2_to_utf8+0x12>
    		*out++ = (uint8_t)((ucs2 >> 6)   | 0xC0);
 8004fc2:	0999      	lsrs	r1, r3, #6
 8004fc4:	f061 013f 	orn	r1, r1, #63	; 0x3f
 8004fc8:	4632      	mov	r2, r6
 8004fca:	f802 1b02 	strb.w	r1, [r2], #2
    		*out++ = (uint8_t)((ucs2 & 0x3F) | 0x80);
 8004fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd6:	7073      	strb	r3, [r6, #1]
    		ret += 2;
 8004fd8:	f108 0802 	add.w	r8, r8, #2
    		*out++ = (uint8_t)((ucs2 & 0x3F) | 0x80);
 8004fdc:	4616      	mov	r6, r2
    	}
    	i++;
 8004fde:	3701      	adds	r7, #1
    while (i < len) {
 8004fe0:	454f      	cmp	r7, r9
 8004fe2:	da15      	bge.n	8005010 <ucs2_to_utf8+0x70>
    	a = hextobin(*ptr, *(ptr + 1));   ptr += 2;
 8004fe4:	7869      	ldrb	r1, [r5, #1]
 8004fe6:	7828      	ldrb	r0, [r5, #0]
 8004fe8:	f7ff ffa8 	bl	8004f3c <hextobin>
 8004fec:	4604      	mov	r4, r0
    	b = hextobin(*ptr, *(ptr + 1));   ptr += 2;
 8004fee:	78e9      	ldrb	r1, [r5, #3]
 8004ff0:	78a8      	ldrb	r0, [r5, #2]
 8004ff2:	f7ff ffa3 	bl	8004f3c <hextobin>
 8004ff6:	3504      	adds	r5, #4
    	ucs2 = a;   ucs2 <<= 8;   ucs2 |= b;
 8004ff8:	b2a3      	uxth	r3, r4
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4303      	orrs	r3, r0
 8005000:	b29b      	uxth	r3, r3
    	if (ucs2 < 0x80) {
 8005002:	2b7f      	cmp	r3, #127	; 0x7f
 8005004:	d8dd      	bhi.n	8004fc2 <ucs2_to_utf8+0x22>
    		*out++ = (uint8_t)ucs2;
 8005006:	f806 3b01 	strb.w	r3, [r6], #1
    		ret++;
 800500a:	f108 0801 	add.w	r8, r8, #1
 800500e:	e7e6      	b.n	8004fde <ucs2_to_utf8+0x3e>
    }

    return ret;
}
 8005010:	4640      	mov	r0, r8
 8005012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005018 <InitSMSList>:
//------------------------------------------------------------------------------------------
void InitSMSList()
{
 8005018:	b508      	push	{r3, lr}
	memset((uint8_t *)&sms_rec[0], 0, sizeof(s_udhi_t) * maxSMSPart);
 800501a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800501e:	2100      	movs	r1, #0
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <InitSMSList+0x10>)
 8005022:	f008 fe8d 	bl	800dd40 <memset>
}
 8005026:	bd08      	pop	{r3, pc}
 8005028:	200022e8 	.word	0x200022e8

0800502c <PutSMSList>:
//-----------------------------------------------------------------------------
uint8_t PutSMSList(s_udhi_t *rec)
{
 800502c:	b510      	push	{r4, lr}
 800502e:	4604      	mov	r4, r0
	if (!rec->part || rec->part > maxSMSPart) return 255;
 8005030:	7900      	ldrb	r0, [r0, #4]
 8005032:	1e43      	subs	r3, r0, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b07      	cmp	r3, #7
 8005038:	d809      	bhi.n	800504e <PutSMSList+0x22>

	memcpy((uint8_t *)&sms_rec[rec->part - 1], (uint8_t *)rec, sizeof(s_udhi_t));
 800503a:	3801      	subs	r0, #1
 800503c:	22a8      	movs	r2, #168	; 0xa8
 800503e:	4621      	mov	r1, r4
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <PutSMSList+0x28>)
 8005042:	fb02 3000 	mla	r0, r2, r0, r3
 8005046:	f008 fe6d 	bl	800dd24 <memcpy>

	return rec->part;
 800504a:	7920      	ldrb	r0, [r4, #4]
}
 800504c:	bd10      	pop	{r4, pc}
	if (!rec->part || rec->part > maxSMSPart) return 255;
 800504e:	20ff      	movs	r0, #255	; 0xff
 8005050:	e7fc      	b.n	800504c <PutSMSList+0x20>
 8005052:	bf00      	nop
 8005054:	200022e8 	.word	0x200022e8

08005058 <LookAllPart>:
//-----------------------------------------------------------------------------
uint8_t LookAllPart(uint8_t total)
{
uint8_t ret = 0;

	if (total > maxSMSPart) return ret;
 8005058:	2808      	cmp	r0, #8
 800505a:	d812      	bhi.n	8005082 <LookAllPart+0x2a>
{
 800505c:	b410      	push	{r4}
 800505e:	4604      	mov	r4, r0

	for (uint8_t i = 0; i < total; i++) if (sms_rec[i].part) ret++;
 8005060:	2300      	movs	r3, #0
uint8_t ret = 0;
 8005062:	4618      	mov	r0, r3
 8005064:	e001      	b.n	800506a <LookAllPart+0x12>
	for (uint8_t i = 0; i < total; i++) if (sms_rec[i].part) ret++;
 8005066:	3301      	adds	r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	42a3      	cmp	r3, r4
 800506c:	d20b      	bcs.n	8005086 <LookAllPart+0x2e>
 800506e:	4907      	ldr	r1, [pc, #28]	; (800508c <LookAllPart+0x34>)
 8005070:	22a8      	movs	r2, #168	; 0xa8
 8005072:	fb02 1203 	mla	r2, r2, r3, r1
 8005076:	7912      	ldrb	r2, [r2, #4]
 8005078:	2a00      	cmp	r2, #0
 800507a:	d0f4      	beq.n	8005066 <LookAllPart+0xe>
 800507c:	3001      	adds	r0, #1
 800507e:	b2c0      	uxtb	r0, r0
 8005080:	e7f1      	b.n	8005066 <LookAllPart+0xe>
	if (total > maxSMSPart) return ret;
 8005082:	2000      	movs	r0, #0

	return ret;
}
 8005084:	4770      	bx	lr
 8005086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	200022e8 	.word	0x200022e8

08005090 <ConcatSMS>:
//------------------------------------------------------------------------------
uint8_t ConcatSMS(char *buf, uint8_t total, uint16_t *sn, uint16_t *sl)
{
 8005090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005094:	b083      	sub	sp, #12
 8005096:	9000      	str	r0, [sp, #0]

	if (total > maxSMSPart) return 0;
 8005098:	2908      	cmp	r1, #8
 800509a:	d857      	bhi.n	800514c <ConcatSMS+0xbc>
 800509c:	460c      	mov	r4, r1
 800509e:	4690      	mov	r8, r2
 80050a0:	469b      	mov	fp, r3

	uint16_t num = 0, len = 0, dl;
	uint8_t done = 0, i = 0;
 80050a2:	2700      	movs	r7, #0
 80050a4:	46b9      	mov	r9, r7
	uint16_t num = 0, len = 0, dl;
 80050a6:	463d      	mov	r5, r7
 80050a8:	46ba      	mov	sl, r7

	while (!done) {
 80050aa:	f1b9 0f00 	cmp.w	r9, #0
 80050ae:	d007      	beq.n	80050c0 <ConcatSMS+0x30>
		len += dl;

		i++;
		if ((done) || (i >= total)) break;
	}
	*sn = num;
 80050b0:	f8a8 a000 	strh.w	sl, [r8]
	*sl = len;
 80050b4:	f8ab 5000 	strh.w	r5, [fp]

	return total;
 80050b8:	4620      	mov	r0, r4
}
 80050ba:	b003      	add	sp, #12
 80050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!num) {
 80050c0:	f1ba 0f00 	cmp.w	sl, #0
 80050c4:	d107      	bne.n	80050d6 <ConcatSMS+0x46>
			if (sms_rec[i].num) num = sms_rec[i].num;
 80050c6:	4a22      	ldr	r2, [pc, #136]	; (8005150 <ConcatSMS+0xc0>)
 80050c8:	23a8      	movs	r3, #168	; 0xa8
 80050ca:	fb03 2307 	mla	r3, r3, r7, r2
 80050ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80050d2:	b103      	cbz	r3, 80050d6 <ConcatSMS+0x46>
 80050d4:	469a      	mov	sl, r3
		if (!sms_rec[i].len) sms_rec[i].len = sprintf(sms_rec[i].txt, "--- part %u ---", i + 1);
 80050d6:	9701      	str	r7, [sp, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <ConcatSMS+0xc0>)
 80050da:	23a8      	movs	r3, #168	; 0xa8
 80050dc:	fb03 2307 	mla	r3, r3, r7, r2
 80050e0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80050e4:	b32b      	cbz	r3, 8005132 <ConcatSMS+0xa2>
		if ((len + sms_rec[i].len) > (SMS_BUF_LEN - 1)) {
 80050e6:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <ConcatSMS+0xc0>)
 80050e8:	23a8      	movs	r3, #168	; 0xa8
 80050ea:	9901      	ldr	r1, [sp, #4]
 80050ec:	fb03 2301 	mla	r3, r3, r1, r2
 80050f0:	f8b3 6005 	ldrh.w	r6, [r3, #5]
 80050f4:	19ab      	adds	r3, r5, r6
 80050f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80050fa:	db05      	blt.n	8005108 <ConcatSMS+0x78>
			dl = SMS_BUF_LEN - 1 - len;
 80050fc:	f5c5 761f 	rsb	r6, r5, #636	; 0x27c
 8005100:	3603      	adds	r6, #3
 8005102:	b2b6      	uxth	r6, r6
			done = 1;
 8005104:	f04f 0901 	mov.w	r9, #1
		memcpy(buf + len, sms_rec[i].txt, dl);
 8005108:	4911      	ldr	r1, [pc, #68]	; (8005150 <ConcatSMS+0xc0>)
 800510a:	23a8      	movs	r3, #168	; 0xa8
 800510c:	9a01      	ldr	r2, [sp, #4]
 800510e:	fb03 1102 	mla	r1, r3, r2, r1
 8005112:	4632      	mov	r2, r6
 8005114:	3107      	adds	r1, #7
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	1958      	adds	r0, r3, r5
 800511a:	f008 fe03 	bl	800dd24 <memcpy>
		len += dl;
 800511e:	4435      	add	r5, r6
 8005120:	b2ad      	uxth	r5, r5
		i++;
 8005122:	3701      	adds	r7, #1
 8005124:	b2ff      	uxtb	r7, r7
		if ((done) || (i >= total)) break;
 8005126:	f1b9 0f00 	cmp.w	r9, #0
 800512a:	d1c1      	bne.n	80050b0 <ConcatSMS+0x20>
 800512c:	42bc      	cmp	r4, r7
 800512e:	d8bc      	bhi.n	80050aa <ConcatSMS+0x1a>
 8005130:	e7be      	b.n	80050b0 <ConcatSMS+0x20>
		if (!sms_rec[i].len) sms_rec[i].len = sprintf(sms_rec[i].txt, "--- part %u ---", i + 1);
 8005132:	23a8      	movs	r3, #168	; 0xa8
 8005134:	fb03 2607 	mla	r6, r3, r7, r2
 8005138:	1c7a      	adds	r2, r7, #1
 800513a:	4906      	ldr	r1, [pc, #24]	; (8005154 <ConcatSMS+0xc4>)
 800513c:	1df0      	adds	r0, r6, #7
 800513e:	f009 f8e7 	bl	800e310 <siprintf>
 8005142:	230e      	movs	r3, #14
 8005144:	7173      	strb	r3, [r6, #5]
 8005146:	2300      	movs	r3, #0
 8005148:	71b3      	strb	r3, [r6, #6]
 800514a:	e7cc      	b.n	80050e6 <ConcatSMS+0x56>
	if (total > maxSMSPart) return 0;
 800514c:	2000      	movs	r0, #0
 800514e:	e7b4      	b.n	80050ba <ConcatSMS+0x2a>
 8005150:	200022e8 	.word	0x200022e8
 8005154:	08013788 	.word	0x08013788

08005158 <getSMSTotalCounter>:
//------------------------------------------------------------------------------
uint8_t getSMSTotalCounter()
{
uint8_t ret = 0;

	for (uint8_t i = 0; i < maxSMSPart; i++) {
 8005158:	2300      	movs	r3, #0
 800515a:	e001      	b.n	8005160 <getSMSTotalCounter+0x8>
 800515c:	3301      	adds	r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b07      	cmp	r3, #7
 8005162:	d807      	bhi.n	8005174 <getSMSTotalCounter+0x1c>
		if (sms_rec[i].total) {
 8005164:	4904      	ldr	r1, [pc, #16]	; (8005178 <getSMSTotalCounter+0x20>)
 8005166:	22a8      	movs	r2, #168	; 0xa8
 8005168:	fb02 1203 	mla	r2, r2, r3, r1
 800516c:	78d0      	ldrb	r0, [r2, #3]
 800516e:	2800      	cmp	r0, #0
 8005170:	d0f4      	beq.n	800515c <getSMSTotalCounter+0x4>
 8005172:	e000      	b.n	8005176 <getSMSTotalCounter+0x1e>
uint8_t ret = 0;
 8005174:	2000      	movs	r0, #0
			break;
		}
	}

	return ret;
}
 8005176:	4770      	bx	lr
 8005178:	200022e8 	.word	0x200022e8

0800517c <gsm7bit_to_text>:
//------------------------------------------------------------------------------
int gsm7bit_to_text(int len_inbuff, uint8_t *inbuff, uint8_t *outbuff, int fl, uint8_t max_udl, uint8_t u_len)
{
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	4616      	mov	r6, r2
 8005182:	461d      	mov	r5, r3
 8005184:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005188:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
uint8_t a, b, prev = 0;
uint8_t *ps1 = inbuff;
uint8_t *ps2 = outbuff;
uint8_t words[4] = {0};

	if (!inbuff || !outbuff || !len_inbuff) return dl_ind;
 800518c:	2900      	cmp	r1, #0
 800518e:	d04a      	beq.n	8005226 <gsm7bit_to_text+0xaa>
 8005190:	4699      	mov	r9, r3
 8005192:	4688      	mov	r8, r1
 8005194:	2e00      	cmp	r6, #0
 8005196:	d048      	beq.n	800522a <gsm7bit_to_text+0xae>
 8005198:	2800      	cmp	r0, #0
 800519a:	d048      	beq.n	800522e <gsm7bit_to_text+0xb2>

    if (u_len > 0) lb -= (u_len + 1);
 800519c:	b11a      	cbz	r2, 80051a6 <gsm7bit_to_text+0x2a>
 800519e:	f102 0901 	add.w	r9, r2, #1
 80051a2:	eba3 0909 	sub.w	r9, r3, r9
    lb--;

    memcpy(words, ps1 - 2, 2);
 80051a6:	f838 0c02 	ldrh.w	r0, [r8, #-2]
    b = hextobin(words[0], words[1]);
 80051aa:	0a01      	lsrs	r1, r0, #8
 80051ac:	b2c0      	uxtb	r0, r0
 80051ae:	f7ff fec5 	bl	8004f3c <hextobin>
    if ((b > 0) && (fl)) {
 80051b2:	b128      	cbz	r0, 80051c0 <gsm7bit_to_text+0x44>
 80051b4:	b12d      	cbz	r5, 80051c2 <gsm7bit_to_text+0x46>
    	*(uint8_t *)ps2 = b >> 1;
 80051b6:	0843      	lsrs	r3, r0, #1
 80051b8:	f806 3b01 	strb.w	r3, [r6], #1
    	ps2++;
    	dl_ind++;
 80051bc:	2501      	movs	r5, #1
 80051be:	e000      	b.n	80051c2 <gsm7bit_to_text+0x46>
int dl_ind = 0, i = 0, shift = 1, lb = max_udl;
 80051c0:	2500      	movs	r5, #0
 80051c2:	f04f 0a00 	mov.w	sl, #0
 80051c6:	2401      	movs	r4, #1
 80051c8:	4657      	mov	r7, sl
 80051ca:	e008      	b.n	80051de <gsm7bit_to_text+0x62>
    	a = (a | prev) & 0x7f;
    	prev = (b >> (8 - shift));
    	*(uint8_t *)ps2 = a;
    	ps2++;
    	dl_ind++;
    	if (shift != 7) shift++;
 80051cc:	3401      	adds	r4, #1
    	ps2++;
 80051ce:	4616      	mov	r6, r2
    	dl_ind++;
 80051d0:	461d      	mov	r5, r3
    		ps2++;
    		dl_ind++;
    		shift = 1;
    		prev = 0;
    	}
    	if ((dl_ind > lb) || (i >= SMS_BUF_LEN - 1)) break;
 80051d2:	454d      	cmp	r5, r9
 80051d4:	da2c      	bge.n	8005230 <gsm7bit_to_text+0xb4>
 80051d6:	f240 237e 	movw	r3, #638	; 0x27e
 80051da:	429f      	cmp	r7, r3
 80051dc:	dc28      	bgt.n	8005230 <gsm7bit_to_text+0xb4>
    	memcpy(words, ps1, 2);
 80051de:	f838 0b02 	ldrh.w	r0, [r8], #2
    	a = hextobin(words[0], words[1]);
 80051e2:	0a01      	lsrs	r1, r0, #8
 80051e4:	b2c0      	uxtb	r0, r0
 80051e6:	f7ff fea9 	bl	8004f3c <hextobin>
    	i += 2;
 80051ea:	3702      	adds	r7, #2
    	a <<= (uint8_t)(shift - 1);
 80051ec:	1e63      	subs	r3, r4, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	fa00 f303 	lsl.w	r3, r0, r3
 80051f4:	b2db      	uxtb	r3, r3
    	a = (a | prev) & 0x7f;
 80051f6:	ea4a 0303 	orr.w	r3, sl, r3
 80051fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    	prev = (b >> (8 - shift));
 80051fe:	f1c4 0a08 	rsb	sl, r4, #8
 8005202:	fa40 f00a 	asr.w	r0, r0, sl
 8005206:	fa5f fa80 	uxtb.w	sl, r0
    	*(uint8_t *)ps2 = a;
 800520a:	4632      	mov	r2, r6
 800520c:	f802 3b01 	strb.w	r3, [r2], #1
    	dl_ind++;
 8005210:	1c6b      	adds	r3, r5, #1
    	if (shift != 7) shift++;
 8005212:	2c07      	cmp	r4, #7
 8005214:	d1da      	bne.n	80051cc <gsm7bit_to_text+0x50>
    		*(uint8_t *)ps2 = prev;
 8005216:	f886 a001 	strb.w	sl, [r6, #1]
    		ps2++;
 800521a:	3602      	adds	r6, #2
    		dl_ind++;
 800521c:	3502      	adds	r5, #2
    		prev = 0;
 800521e:	f04f 0a00 	mov.w	sl, #0
    		shift = 1;
 8005222:	2401      	movs	r4, #1
 8005224:	e7d5      	b.n	80051d2 <gsm7bit_to_text+0x56>
	if (!inbuff || !outbuff || !len_inbuff) return dl_ind;
 8005226:	2500      	movs	r5, #0
 8005228:	e002      	b.n	8005230 <gsm7bit_to_text+0xb4>
 800522a:	2500      	movs	r5, #0
 800522c:	e000      	b.n	8005230 <gsm7bit_to_text+0xb4>
 800522e:	4605      	mov	r5, r0
    }

    return (dl_ind);
}
 8005230:	4628      	mov	r0, r5
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005238 <conv_ucs2_text>:
//----------------------------------------------------------------------------------
int conv_ucs2_text(uint8_t *buffer_txt, char *fromik, uint8_t *udhi5, uint8_t prn)
{
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 8005240:	4604      	mov	r4, r0
 8005242:	9105      	str	r1, [sp, #20]
 8005244:	9206      	str	r2, [sp, #24]
 8005246:	9304      	str	r3, [sp, #16]
char *ina0 = NULL;
char *ps_sta = NULL;
char *nachalo = NULL;
uint16_t dcs;
uint8_t a, a_n, b, b_n, c, prev, dl = 0, dl_ind, new_a;
uint8_t pdu_type = 0xff, type_num_a, len_num_a, user_data_len = 0;
 8005248:	2100      	movs	r1, #0
 800524a:	f88d 1457 	strb.w	r1, [sp, #1111]	; 0x457
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
char words[5], chcs[12];
char words1[34], words2[34];
char stx[256];
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
char udhi_str[32] = {0}, sca_str[32] = {0};
 800524e:	91b7      	str	r1, [sp, #732]	; 0x2dc
 8005250:	91b8      	str	r1, [sp, #736]	; 0x2e0
 8005252:	91b9      	str	r1, [sp, #740]	; 0x2e4
 8005254:	91ba      	str	r1, [sp, #744]	; 0x2e8
 8005256:	91bb      	str	r1, [sp, #748]	; 0x2ec
 8005258:	91bc      	str	r1, [sp, #752]	; 0x2f0
 800525a:	91bd      	str	r1, [sp, #756]	; 0x2f4
 800525c:	91be      	str	r1, [sp, #760]	; 0x2f8
 800525e:	91af      	str	r1, [sp, #700]	; 0x2bc
 8005260:	91b0      	str	r1, [sp, #704]	; 0x2c0
 8005262:	91b1      	str	r1, [sp, #708]	; 0x2c4
 8005264:	91b2      	str	r1, [sp, #712]	; 0x2c8
 8005266:	91b3      	str	r1, [sp, #716]	; 0x2cc
 8005268:	91b4      	str	r1, [sp, #720]	; 0x2d0
 800526a:	91b5      	str	r1, [sp, #724]	; 0x2d4
 800526c:	91b6      	str	r1, [sp, #728]	; 0x2d8
uint8_t udhi_4[5] = {0};
 800526e:	91ad      	str	r1, [sp, #692]	; 0x2b4
 8005270:	f88d 12b8 	strb.w	r1, [sp, #696]	; 0x2b8
uint8_t buffer_temp[SMS_BUF_LEN] = {0};
 8005274:	910d      	str	r1, [sp, #52]	; 0x34
 8005276:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800527a:	a80e      	add	r0, sp, #56	; 0x38
 800527c:	f008 fd60 	bl	800dd40 <memset>

	if ((ps0 = strstr((char *)buffer_txt, "\r\nOK\r\n")) != NULL) *(ps0) = '\0';
 8005280:	49cf      	ldr	r1, [pc, #828]	; (80055c0 <conv_ucs2_text+0x388>)
 8005282:	4620      	mov	r0, r4
 8005284:	f009 f91e 	bl	800e4c4 <strstr>
 8005288:	b108      	cbz	r0, 800528e <conv_ucs2_text+0x56>
 800528a:	2200      	movs	r2, #0
 800528c:	7002      	strb	r2, [r0, #0]

    len  =  strlen((char *)buffer_txt);
 800528e:	4620      	mov	r0, r4
 8005290:	f7fa ffb0 	bl	80001f4 <strlen>
 8005294:	4606      	mov	r6, r0
 8005296:	9007      	str	r0, [sp, #28]

	if ((len < 7) || (len > 512)) {
 8005298:	1fc3      	subs	r3, r0, #7
 800529a:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800529e:	d305      	bcc.n	80052ac <conv_ucs2_text+0x74>
		*buffer_txt = 0;
 80052a0:	2000      	movs	r0, #0
 80052a2:	7020      	strb	r0, [r4, #0]
		ret = tt1 - end_ind;//strlen((char *)buffer_txt);//dl_ind;

	}

 	return ret;
}
 80052a4:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 80052a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(words, 0, sizeof(words));
 80052ac:	2500      	movs	r5, #0
 80052ae:	f8cd 5450 	str.w	r5, [sp, #1104]	; 0x450
 80052b2:	f88d 5454 	strb.w	r5, [sp, #1108]	; 0x454
		for (k = 0; k < max_smsType; k++) {
 80052b6:	46a0      	mov	r8, r4
 80052b8:	2d02      	cmp	r5, #2
 80052ba:	dc12      	bgt.n	80052e2 <conv_ucs2_text+0xaa>
			ina0 = strstr(ps1, smsType[k]);////+CMT: ,,26 //+CMT: ,26 //+CMT: "",26 | "+CLASS0: " | "+CMGR: "
 80052bc:	4bc1      	ldr	r3, [pc, #772]	; (80055c4 <conv_ucs2_text+0x38c>)
 80052be:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 80052c2:	4621      	mov	r1, r4
 80052c4:	4640      	mov	r0, r8
 80052c6:	f009 f8fd 	bl	800e4c4 <strstr>
			if (ina0) {
 80052ca:	4682      	mov	sl, r0
 80052cc:	b908      	cbnz	r0, 80052d2 <conv_ucs2_text+0x9a>
		for (k = 0; k < max_smsType; k++) {
 80052ce:	3501      	adds	r5, #1
 80052d0:	e7f2      	b.n	80052b8 <conv_ucs2_text+0x80>
 80052d2:	4643      	mov	r3, r8
 80052d4:	46a0      	mov	r8, r4
 80052d6:	461c      	mov	r4, r3
				ofs = strlen(smsType[k]);
 80052d8:	4640      	mov	r0, r8
 80052da:	f7fa ff8b 	bl	80001f4 <strlen>
 80052de:	4683      	mov	fp, r0
				break;
 80052e0:	e003      	b.n	80052ea <conv_ucs2_text+0xb2>
 80052e2:	4644      	mov	r4, r8
		ofs = 0;
 80052e4:	f04f 0b00 	mov.w	fp, #0
char *ina = NULL;
 80052e8:	46da      	mov	sl, fp
		if (ina) {
 80052ea:	f1ba 0f00 	cmp.w	sl, #0
 80052ee:	d06f      	beq.n	80053d0 <conv_ucs2_text+0x198>
			ina += ofs;
 80052f0:	44da      	add	sl, fp
			ina2 = strstr(ina, "\r\n");
 80052f2:	49b5      	ldr	r1, [pc, #724]	; (80055c8 <conv_ucs2_text+0x390>)
 80052f4:	4650      	mov	r0, sl
 80052f6:	f009 f8e5 	bl	800e4c4 <strstr>
			if (ina2) {
 80052fa:	4681      	mov	r9, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f000 8082 	beq.w	8005406 <conv_ucs2_text+0x1ce>
				ina2 += 2;
 8005302:	f100 0802 	add.w	r8, r0, #2
				if ((ina2 - ps1) < (len - ofs)) its_ok = 1;
 8005306:	eba8 0304 	sub.w	r3, r8, r4
 800530a:	eba6 060b 	sub.w	r6, r6, fp
 800530e:	42b3      	cmp	r3, r6
 8005310:	db18      	blt.n	8005344 <conv_ucs2_text+0x10c>
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 8005312:	2600      	movs	r6, #0
				qik = strstr(ina, ",,");
 8005314:	49ad      	ldr	r1, [pc, #692]	; (80055cc <conv_ucs2_text+0x394>)
 8005316:	4650      	mov	r0, sl
 8005318:	f009 f8d4 	bl	800e4c4 <strstr>
				if (!qik) {
 800531c:	4601      	mov	r1, r0
 800531e:	b198      	cbz	r0, 8005348 <conv_ucs2_text+0x110>
				k = 2;
 8005320:	2502      	movs	r5, #2
				if (qik) {
 8005322:	2900      	cmp	r1, #0
 8005324:	d075      	beq.n	8005412 <conv_ucs2_text+0x1da>
					qik += k;//указатель на начало длинны сообщения в байтах
 8005326:	4429      	add	r1, r5
					if ((ina2 - qik) > 1) i = ina2 - qik - 2;//!!!!!!!!!!!!!!! //1;//количество символов длинны самого pdu в байтах
 8005328:	eba8 0201 	sub.w	r2, r8, r1
 800532c:	2a01      	cmp	r2, #1
 800532e:	dd1d      	ble.n	800536c <conv_ucs2_text+0x134>
 8005330:	3a02      	subs	r2, #2
					if ((i > 0) && (i < 4)) {
 8005332:	1e53      	subs	r3, r2, #1
 8005334:	2b02      	cmp	r3, #2
 8005336:	d91b      	bls.n	8005370 <conv_ucs2_text+0x138>
				ina2 += 2;
 8005338:	4647      	mov	r7, r8
 800533a:	46c2      	mov	sl, r8
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
 800533c:	f04f 0900 	mov.w	r9, #0
		i = j = 0;
 8005340:	46cb      	mov	fp, r9
 8005342:	e04a      	b.n	80053da <conv_ucs2_text+0x1a2>
				if ((ina2 - ps1) < (len - ofs)) its_ok = 1;
 8005344:	2601      	movs	r6, #1
 8005346:	e7e5      	b.n	8005314 <conv_ucs2_text+0xdc>
					qik = strstr(ina, "\",");
 8005348:	49a1      	ldr	r1, [pc, #644]	; (80055d0 <conv_ucs2_text+0x398>)
 800534a:	4650      	mov	r0, sl
 800534c:	f009 f8ba 	bl	800e4c4 <strstr>
					if (!qik) {
 8005350:	4601      	mov	r1, r0
 8005352:	b108      	cbz	r0, 8005358 <conv_ucs2_text+0x120>
					} else k = 2;
 8005354:	2502      	movs	r5, #2
 8005356:	e7e4      	b.n	8005322 <conv_ucs2_text+0xea>
						qik = strchr(ina, ',');
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	4650      	mov	r0, sl
 800535c:	f009 f878 	bl	800e450 <strchr>
						if (qik) k = 1;
 8005360:	4601      	mov	r1, r0
 8005362:	b108      	cbz	r0, 8005368 <conv_ucs2_text+0x130>
 8005364:	2501      	movs	r5, #1
 8005366:	e7dc      	b.n	8005322 <conv_ucs2_text+0xea>
				k = 2;
 8005368:	2502      	movs	r5, #2
 800536a:	e7da      	b.n	8005322 <conv_ucs2_text+0xea>
		i = j = 0;
 800536c:	2200      	movs	r2, #0
 800536e:	e7e0      	b.n	8005332 <conv_ucs2_text+0xfa>
						memset(words, 0, sizeof(words));
 8005370:	2300      	movs	r3, #0
 8005372:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8005376:	f88d 3454 	strb.w	r3, [sp, #1108]	; 0x454
						memcpy(words, qik, i);
 800537a:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 800537e:	f008 fcd1 	bl	800dd24 <memcpy>
						j = atoi(words);//собственно длинна pdu в байтах, указанная с сторке +CMGR: 1,,113
 8005382:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 8005386:	f008 fbd2 	bl	800db2e <atoi>
						j <<= 1;//собственно длинна pdu в символах в строке +CMGR: 1,,113
 800538a:	ea4f 0b40 	mov.w	fp, r0, lsl #1
						k = strlen(ina2);//принято символов тела pdu
 800538e:	4640      	mov	r0, r8
 8005390:	f7fa ff30 	bl	80001f4 <strlen>
 8005394:	4605      	mov	r5, r0
						if (k > j) {
 8005396:	4583      	cmp	fp, r0
 8005398:	db04      	blt.n	80053a4 <conv_ucs2_text+0x16c>
				ina2 += 2;
 800539a:	4647      	mov	r7, r8
 800539c:	46c2      	mov	sl, r8
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
 800539e:	f04f 0900 	mov.w	r9, #0
 80053a2:	e01a      	b.n	80053da <conv_ucs2_text+0x1a2>
							memset(words1, 0, sizeof(words1));
 80053a4:	2222      	movs	r2, #34	; 0x22
 80053a6:	2100      	movs	r1, #0
 80053a8:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 80053ac:	f008 fcc8 	bl	800dd40 <memset>
							memcpy(words1, ina2, 2);
 80053b0:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80053b4:	f8ad 3420 	strh.w	r3, [sp, #1056]	; 0x420
							i = atoi(words1);//длинна номера sca
 80053b8:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 80053bc:	f008 fbb7 	bl	800db2e <atoi>
							i <<= 1;
 80053c0:	0043      	lsls	r3, r0, #1
							len_sca = i;
 80053c2:	fa5f f983 	uxtb.w	r9, r3
							ina2 += i + 2;
 80053c6:	3302      	adds	r3, #2
 80053c8:	eb08 0a03 	add.w	sl, r8, r3
 80053cc:	4657      	mov	r7, sl
 80053ce:	e004      	b.n	80053da <conv_ucs2_text+0x1a2>
		ps0 = nachalo = ps1;
 80053d0:	46a0      	mov	r8, r4
		ps_begin = ps_sta = ps1;
 80053d2:	46a2      	mov	sl, r4
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 80053d4:	2600      	movs	r6, #0
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
 80053d6:	46b1      	mov	r9, r6
		i = j = 0;
 80053d8:	46b3      	mov	fp, r6
		if (!its_ok) {
 80053da:	b306      	cbz	r6, 800541e <conv_ucs2_text+0x1e6>
		if (its_ok) {
 80053dc:	bb86      	cbnz	r6, 8005440 <conv_ucs2_text+0x208>
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 80053de:	9603      	str	r6, [sp, #12]
		tt = pdu = 0;
 80053e0:	46b0      	mov	r8, r6
int tt, tt1 = 0, tt_n, tt1_n, len, i = 0, j = 0, k = 0, shift, it = 0, tzone, end_ind = 0;
 80053e2:	46b1      	mov	r9, r6
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 80053e4:	2703      	movs	r7, #3
uint8_t a, a_n, b, b_n, c, prev, dl = 0, dl_ind, new_a;
 80053e6:	f04f 0a00 	mov.w	sl, #0
		if (pdu == 1) { //тело сообщения в UCS2
 80053ea:	f1b8 0f01 	cmp.w	r8, #1
 80053ee:	f000 8315 	beq.w	8005a1c <conv_ucs2_text+0x7e4>
			switch (ind_tp) {
 80053f2:	2f00      	cmp	r7, #0
 80053f4:	f000 8391 	beq.w	8005b1a <conv_ucs2_text+0x8e2>
 80053f8:	2f01      	cmp	r7, #1
 80053fa:	f000 83d4 	beq.w	8005ba6 <conv_ucs2_text+0x96e>
 80053fe:	464d      	mov	r5, r9
 8005400:	f04f 0b00 	mov.w	fp, #0
 8005404:	e319      	b.n	8005a3a <conv_ucs2_text+0x802>
		ps0 = nachalo = ps1;
 8005406:	46a0      	mov	r8, r4
		ps_begin = ps_sta = ps1;
 8005408:	46a2      	mov	sl, r4
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 800540a:	2600      	movs	r6, #0
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
 800540c:	46b1      	mov	r9, r6
		i = j = 0;
 800540e:	46b3      	mov	fp, r6
 8005410:	e7e3      	b.n	80053da <conv_ucs2_text+0x1a2>
				ina2 += 2;
 8005412:	4647      	mov	r7, r8
 8005414:	46c2      	mov	sl, r8
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
 8005416:	f04f 0900 	mov.w	r9, #0
		i = j = 0;
 800541a:	46cb      	mov	fp, r9
 800541c:	e7dd      	b.n	80053da <conv_ucs2_text+0x1a2>
			Report(NULL, false, "Sender number not found\r\n");
 800541e:	4a6d      	ldr	r2, [pc, #436]	; (80055d4 <conv_ucs2_text+0x39c>)
 8005420:	2100      	movs	r1, #0
 8005422:	4608      	mov	r0, r1
 8005424:	f7fc fbd8 	bl	8001bd8 <Report>
			uk_start7 = strstr(ps_begin, "00");
 8005428:	496b      	ldr	r1, [pc, #428]	; (80055d8 <conv_ucs2_text+0x3a0>)
 800542a:	4650      	mov	r0, sl
 800542c:	f009 f84a 	bl	800e4c4 <strstr>
			if (uk_start7)  {
 8005430:	2800      	cmp	r0, #0
 8005432:	d0d3      	beq.n	80053dc <conv_ucs2_text+0x1a4>
				if (uk_start7 == ps_sta) {
 8005434:	4284      	cmp	r4, r0
 8005436:	d1d1      	bne.n	80053dc <conv_ucs2_text+0x1a4>
					nachalo = uk_start7 + 2;
 8005438:	1c87      	adds	r7, r0, #2
 800543a:	46b8      	mov	r8, r7
					its_ok = 1;
 800543c:	2601      	movs	r6, #1
 800543e:	e7cd      	b.n	80053dc <conv_ucs2_text+0x1a4>
			memset(sca_str, 0, sizeof(sca_str));
 8005440:	2220      	movs	r2, #32
 8005442:	2100      	movs	r1, #0
 8005444:	a8af      	add	r0, sp, #700	; 0x2bc
 8005446:	f008 fc7b 	bl	800dd40 <memset>
			memset(words, 0, sizeof(words));
 800544a:	2300      	movs	r3, #0
 800544c:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8005450:	f88d 3454 	strb.w	r3, [sp, #1108]	; 0x454
			if (nachalo) {
 8005454:	f1b8 0f00 	cmp.w	r8, #0
 8005458:	f000 80c4 	beq.w	80055e4 <conv_ucs2_text+0x3ac>
				memcpy(words, nachalo, 2);
 800545c:	f8b8 0000 	ldrh.w	r0, [r8]
 8005460:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
				b = hextobin(words[0], words[1]);//sca_len
 8005464:	0a01      	lsrs	r1, r0, #8
 8005466:	b2c0      	uxtb	r0, r0
 8005468:	f7ff fd68 	bl	8004f3c <hextobin>
 800546c:	4607      	mov	r7, r0
				if ((b > 0) && (b <= 7)) memcpy(sca_str, nachalo, (b + 1) << 1);
 800546e:	1e43      	subs	r3, r0, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b06      	cmp	r3, #6
 8005474:	f240 8091 	bls.w	800559a <conv_ucs2_text+0x362>
				if (!b) nachalo += 2;//1-й байт (длинна) = 0 -> номер смс-центра отсутствует
 8005478:	2f00      	cmp	r7, #0
 800547a:	f040 8095 	bne.w	80055a8 <conv_ucs2_text+0x370>
 800547e:	f108 0702 	add.w	r7, r8, #2
				memset(words, 0, sizeof(words));
 8005482:	2300      	movs	r3, #0
 8005484:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8005488:	f88d 3454 	strb.w	r3, [sp, #1108]	; 0x454
				memcpy(words, nachalo, 2);
 800548c:	8838      	ldrh	r0, [r7, #0]
 800548e:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
				pdu_type = hextobin(words[0], words[1]);//pdu_type
 8005492:	0a01      	lsrs	r1, r0, #8
 8005494:	b2c0      	uxtb	r0, r0
 8005496:	f7ff fd51 	bl	8004f3c <hextobin>
 800549a:	4680      	mov	r8, r0
				if (pdu_type & 0x40) {
 800549c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054a0:	f040 8086 	bne.w	80055b0 <conv_ucs2_text+0x378>
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	9303      	str	r3, [sp, #12]
				if (pdu_type & 1) tp_mti = 2; else tp_mti = 0;//есть MR или нет
 80054a8:	f018 0a01 	ands.w	sl, r8, #1
 80054ac:	d001      	beq.n	80054b2 <conv_ucs2_text+0x27a>
 80054ae:	f04f 0a02 	mov.w	sl, #2
				tp_vpf = ((pdu_type >> 3) & 3);//for submit sms
 80054b2:	f3c8 03c1 	ubfx	r3, r8, #3, #2
 80054b6:	930a      	str	r3, [sp, #40]	; 0x28
			sprintf(stx, "CMGR/CMT_LEN=%s|%d, got_len=%d, PDU_TYPE=0x%02X", words, j, k, pdu_type);
 80054b8:	f8cd 8004 	str.w	r8, [sp, #4]
 80054bc:	9500      	str	r5, [sp, #0]
 80054be:	465b      	mov	r3, fp
 80054c0:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
 80054c4:	4945      	ldr	r1, [pc, #276]	; (80055dc <conv_ucs2_text+0x3a4>)
 80054c6:	a8bf      	add	r0, sp, #764	; 0x2fc
 80054c8:	f008 ff22 	bl	800e310 <siprintf>
			if (len_sca > 0) sprintf(stx+strlen(stx), ", SCA[%d]=%s,", len_sca, sca_str);
 80054cc:	f1b9 0f00 	cmp.w	r9, #0
 80054d0:	f040 808f 	bne.w	80055f2 <conv_ucs2_text+0x3ba>
			if (with_udh) strcat(stx," With_UDHI");
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8096 	beq.w	8005608 <conv_ucs2_text+0x3d0>
 80054dc:	adbf      	add	r5, sp, #764	; 0x2fc
 80054de:	4628      	mov	r0, r5
 80054e0:	f7fa fe88 	bl	80001f4 <strlen>
 80054e4:	4602      	mov	r2, r0
 80054e6:	eb05 0c00 	add.w	ip, r5, r0
 80054ea:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <conv_ucs2_text+0x3a8>)
 80054ec:	cb03      	ldmia	r3!, {r0, r1}
 80054ee:	50a8      	str	r0, [r5, r2]
 80054f0:	f8cc 1004 	str.w	r1, [ip, #4]
 80054f4:	881a      	ldrh	r2, [r3, #0]
 80054f6:	789b      	ldrb	r3, [r3, #2]
 80054f8:	f8ac 2008 	strh.w	r2, [ip, #8]
 80054fc:	f88c 300a 	strb.w	r3, [ip, #10]
			if (prn) Report(NULL, false, "%s\r\n", stx);
 8005500:	9b04      	ldr	r3, [sp, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 8093 	bne.w	800562e <conv_ucs2_text+0x3f6>
			ps_type = uk_start + 4 + tp_mti;//указатель на тип номера
 8005508:	4655      	mov	r5, sl
 800550a:	f10a 0a04 	add.w	sl, sl, #4
			memcpy(words, ps_type, 2);
 800550e:	f837 000a 	ldrh.w	r0, [r7, sl]
 8005512:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
			b = hextobin(words[0], words[1]);//тип номера
 8005516:	0a01      	lsrs	r1, r0, #8
 8005518:	b2c0      	uxtb	r0, r0
 800551a:	f7ff fd0f 	bl	8004f3c <hextobin>
			b = (b & 0x70) >> 4; //нужны разряды bit6 bit5 bit4 - это тип номера A
 800551e:	f3c0 1a02 	ubfx	sl, r0, #4, #3
			type_num_a = b;//тип номера А
 8005522:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
			ps1 = ps1 + 2 + tp_mti;//указатель на кол-во символов в номере A - 0x0c
 8005526:	3502      	adds	r5, #2
 8005528:	eb07 0b05 	add.w	fp, r7, r5
			memcpy(words, ps1, 2);
 800552c:	5b78      	ldrh	r0, [r7, r5]
 800552e:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
			a = hextobin(words[0], words[1]);
 8005532:	0a01      	lsrs	r1, r0, #8
 8005534:	b2c0      	uxtb	r0, r0
 8005536:	f7ff fd01 	bl	8004f3c <hextobin>
 800553a:	4605      	mov	r5, r0
			if ((a & 1) == 1) a++;
 800553c:	f010 0f01 	tst.w	r0, #1
 8005540:	d001      	beq.n	8005546 <conv_ucs2_text+0x30e>
 8005542:	3501      	adds	r5, #1
 8005544:	b2ed      	uxtb	r5, r5
			if (a > 32) a = 32;
 8005546:	2d20      	cmp	r5, #32
 8005548:	d900      	bls.n	800554c <conv_ucs2_text+0x314>
 800554a:	2520      	movs	r5, #32
			ps1 += 4;//указатель на начало номера A - 0x83
 800554c:	f10b 0b04 	add.w	fp, fp, #4
			memset(words1, 0, sizeof(words1));
 8005550:	2222      	movs	r2, #34	; 0x22
 8005552:	2100      	movs	r1, #0
 8005554:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8005558:	f008 fbf2 	bl	800dd40 <memset>
			memcpy(words1, ps1, a);
 800555c:	9509      	str	r5, [sp, #36]	; 0x24
 800555e:	462a      	mov	r2, r5
 8005560:	4659      	mov	r1, fp
 8005562:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8005566:	f008 fbdd 	bl	800dd24 <memcpy>
			if (b != 5) {//надо переставить местами цифры номера
 800556a:	f1ba 0f05 	cmp.w	sl, #5
 800556e:	f000 8115 	beq.w	800579c <conv_ucs2_text+0x564>
				j = 0;
 8005572:	2300      	movs	r3, #0
				while (j < a) {
 8005574:	429d      	cmp	r5, r3
 8005576:	dd61      	ble.n	800563c <conv_ucs2_text+0x404>
					c = words1[j];
 8005578:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 800557c:	18d1      	adds	r1, r2, r3
 800557e:	f811 0c38 	ldrb.w	r0, [r1, #-56]
					words1[j] = words1[j + 1];
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	f50d 678b 	add.w	r7, sp, #1112	; 0x458
 8005588:	443a      	add	r2, r7
 800558a:	f812 7c38 	ldrb.w	r7, [r2, #-56]
 800558e:	f801 7c38 	strb.w	r7, [r1, #-56]
					words1[j + 1] = c;
 8005592:	f802 0c38 	strb.w	r0, [r2, #-56]
					j += 2;
 8005596:	3302      	adds	r3, #2
 8005598:	e7ec      	b.n	8005574 <conv_ucs2_text+0x33c>
				if ((b > 0) && (b <= 7)) memcpy(sca_str, nachalo, (b + 1) << 1);
 800559a:	1c42      	adds	r2, r0, #1
 800559c:	0052      	lsls	r2, r2, #1
 800559e:	4641      	mov	r1, r8
 80055a0:	a8af      	add	r0, sp, #700	; 0x2bc
 80055a2:	f008 fbbf 	bl	800dd24 <memcpy>
 80055a6:	e767      	b.n	8005478 <conv_ucs2_text+0x240>
				   else nachalo += ((b + 1) << 1);//указатель на pdu_type
 80055a8:	3701      	adds	r7, #1
 80055aa:	eb08 0747 	add.w	r7, r8, r7, lsl #1
 80055ae:	e768      	b.n	8005482 <conv_ucs2_text+0x24a>
					memset(udhi_str, 0, sizeof(udhi_str));
 80055b0:	2220      	movs	r2, #32
 80055b2:	2100      	movs	r1, #0
 80055b4:	a8b7      	add	r0, sp, #732	; 0x2dc
 80055b6:	f008 fbc3 	bl	800dd40 <memset>
					with_udh = 1;
 80055ba:	9603      	str	r6, [sp, #12]
 80055bc:	e774      	b.n	80054a8 <conv_ucs2_text+0x270>
 80055be:	bf00      	nop
 80055c0:	08013798 	.word	0x08013798
 80055c4:	2000013c 	.word	0x2000013c
 80055c8:	0801379c 	.word	0x0801379c
 80055cc:	080137a0 	.word	0x080137a0
 80055d0:	080137a4 	.word	0x080137a4
 80055d4:	080137a8 	.word	0x080137a8
 80055d8:	080137c4 	.word	0x080137c4
 80055dc:	080137c8 	.word	0x080137c8
 80055e0:	08013808 	.word	0x08013808
int pdu, pack, ind_tp = 3, its_ok = 0, ofs = 0, with_udh = 0, flg = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	9303      	str	r3, [sp, #12]
uint8_t user_data_l = 0, udhi_len = 0, len_sca = 0, tp_mti = 0, tp_vpf = 0;
 80055e8:	930a      	str	r3, [sp, #40]	; 0x28
 80055ea:	469a      	mov	sl, r3
uint8_t pdu_type = 0xff, type_num_a, len_num_a, user_data_len = 0;
 80055ec:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80055f0:	e762      	b.n	80054b8 <conv_ucs2_text+0x280>
			if (len_sca > 0) sprintf(stx+strlen(stx), ", SCA[%d]=%s,", len_sca, sca_str);
 80055f2:	a8bf      	add	r0, sp, #764	; 0x2fc
 80055f4:	f7fa fdfe 	bl	80001f4 <strlen>
 80055f8:	abaf      	add	r3, sp, #700	; 0x2bc
 80055fa:	464a      	mov	r2, r9
 80055fc:	49c0      	ldr	r1, [pc, #768]	; (8005900 <conv_ucs2_text+0x6c8>)
 80055fe:	adbf      	add	r5, sp, #764	; 0x2fc
 8005600:	4428      	add	r0, r5
 8005602:	f008 fe85 	bl	800e310 <siprintf>
 8005606:	e765      	b.n	80054d4 <conv_ucs2_text+0x29c>
					 else strcat(stx," Without_UDHI");
 8005608:	adbf      	add	r5, sp, #764	; 0x2fc
 800560a:	4628      	mov	r0, r5
 800560c:	f7fa fdf2 	bl	80001f4 <strlen>
 8005610:	4684      	mov	ip, r0
 8005612:	eb05 0e00 	add.w	lr, r5, r0
 8005616:	4bbb      	ldr	r3, [pc, #748]	; (8005904 <conv_ucs2_text+0x6cc>)
 8005618:	cb07      	ldmia	r3!, {r0, r1, r2}
 800561a:	f845 000c 	str.w	r0, [r5, ip]
 800561e:	f8ce 1004 	str.w	r1, [lr, #4]
 8005622:	f8ce 2008 	str.w	r2, [lr, #8]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	f8ae 300c 	strh.w	r3, [lr, #12]
 800562c:	e768      	b.n	8005500 <conv_ucs2_text+0x2c8>
			if (prn) Report(NULL, false, "%s\r\n", stx);
 800562e:	abbf      	add	r3, sp, #764	; 0x2fc
 8005630:	4ab5      	ldr	r2, [pc, #724]	; (8005908 <conv_ucs2_text+0x6d0>)
 8005632:	2100      	movs	r1, #0
 8005634:	4608      	mov	r0, r1
 8005636:	f7fc facf 	bl	8001bd8 <Report>
 800563a:	e765      	b.n	8005508 <conv_ucs2_text+0x2d0>
				if (words1[a - 1] == 'F') words1[a - 1] = ' ';
 800563c:	1e6a      	subs	r2, r5, #1
 800563e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 8005642:	4413      	add	r3, r2
 8005644:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8005648:	2b46      	cmp	r3, #70	; 0x46
 800564a:	f000 809f 	beq.w	800578c <conv_ucs2_text+0x554>
			new_a = a;
 800564e:	9508      	str	r5, [sp, #32]
			if (fromik) memset(fromik, 0, 32);    //макс-ая длинна номера А = 31
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	b123      	cbz	r3, 800565e <conv_ucs2_text+0x426>
 8005654:	2220      	movs	r2, #32
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f008 fb71 	bl	800dd40 <memset>
			if (b == 1) buffer_temp[tt1++] = '+'; //type_of_num_A = intern....
 800565e:	f1ba 0f01 	cmp.w	sl, #1
 8005662:	f000 8102 	beq.w	800586a <conv_ucs2_text+0x632>
			end_ind = tt1 = 0;
 8005666:	f04f 0900 	mov.w	r9, #0
			ps_o = (char *)&buffer_temp[tt1];
 800566a:	ab0d      	add	r3, sp, #52	; 0x34
 800566c:	eb03 0009 	add.w	r0, r3, r9
			if (new_a > 0) {
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 80fe 	bne.w	8005874 <conv_ucs2_text+0x63c>
			memcpy(words, ps1 + len_num_a, 2);	  //p_id=hextobin(words[0], words[1]);
 8005678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800567a:	f83b 3002 	ldrh.w	r3, [fp, r2]
 800567e:	f8ad 3450 	strh.w	r3, [sp, #1104]	; 0x450
			pss = ps1 + len_num_a + 2;            //указатель на DCS
 8005682:	1c93      	adds	r3, r2, #2
 8005684:	eb0b 0203 	add.w	r2, fp, r3
 8005688:	9209      	str	r2, [sp, #36]	; 0x24
			memcpy(words, pss, 2);
 800568a:	f83b 0003 	ldrh.w	r0, [fp, r3]
 800568e:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
			dcs = hextobin(words[0], words[1]);
 8005692:	0a01      	lsrs	r1, r0, #8
 8005694:	b2c0      	uxtb	r0, r0
 8005696:	f7ff fc51 	bl	8004f3c <hextobin>
 800569a:	4682      	mov	sl, r0
			c = (dcs & 0x0c) >> 2;
 800569c:	f3c0 0781 	ubfx	r7, r0, #2, #2
			switch (c) {
 80056a0:	2f02      	cmp	r7, #2
 80056a2:	f000 80f5 	beq.w	8005890 <conv_ucs2_text+0x658>
			pdu = 0;//default
 80056a6:	f04f 0800 	mov.w	r8, #0
			if (c > 2) c = 3;
 80056aa:	2f02      	cmp	r7, #2
 80056ac:	d900      	bls.n	80056b0 <conv_ucs2_text+0x478>
 80056ae:	2703      	movs	r7, #3
			if ((dcs & 0x20)) //dcs & 0x20 - признак компрессии, bit5 в dcs
 80056b0:	f01a 0f20 	tst.w	sl, #32
 80056b4:	d100      	bne.n	80056b8 <conv_ucs2_text+0x480>
				pack = 0;
 80056b6:	2600      	movs	r6, #0
			k = strlen(words1);
 80056b8:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 80056bc:	f7fa fd9a 	bl	80001f4 <strlen>
			if (words1[k-1] == ' ') words1[k - 1] = '\0';
 80056c0:	3801      	subs	r0, #1
 80056c2:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 80056c6:	4403      	add	r3, r0
 80056c8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	f000 80e1 	beq.w	8005894 <conv_ucs2_text+0x65c>
			if (fromik) {
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	b163      	cbz	r3, 80056f0 <conv_ucs2_text+0x4b8>
				k = strlen(words1);
 80056d6:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 80056da:	f7fa fd8b 	bl	80001f4 <strlen>
 80056de:	4602      	mov	r2, r0
				if (k > lenFrom - 1) k = lenFrom - 1;
 80056e0:	281f      	cmp	r0, #31
 80056e2:	dd00      	ble.n	80056e6 <conv_ucs2_text+0x4ae>
 80056e4:	221f      	movs	r2, #31
				memcpy(fromik, words1, k); //макс-ая длинна номера А = 31
 80056e6:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
 80056ea:	9805      	ldr	r0, [sp, #20]
 80056ec:	f008 fb1a 	bl	800dd24 <memcpy>
			sprintf(stx, "DCS=0x%02X, ENC[%d]=%s", dcs, ind_tp, tp[ind_tp]);
 80056f0:	4b86      	ldr	r3, [pc, #536]	; (800590c <conv_ucs2_text+0x6d4>)
 80056f2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	463b      	mov	r3, r7
 80056fc:	4652      	mov	r2, sl
 80056fe:	4984      	ldr	r1, [pc, #528]	; (8005910 <conv_ucs2_text+0x6d8>)
 8005700:	a8bf      	add	r0, sp, #764	; 0x2fc
 8005702:	f008 fe05 	bl	800e310 <siprintf>
			if (new_a > 0) sprintf(stx+strlen(stx),", SENDER: type[%d]=%s number[%d]=%s",
 8005706:	9b08      	ldr	r3, [sp, #32]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 80ca 	bne.w	80058a2 <conv_ucs2_text+0x66a>
			if (pack) sprintf(stx+strlen(stx),", PACK=%d", pack);
 800570e:	2e00      	cmp	r6, #0
 8005710:	f040 80dc 	bne.w	80058cc <conv_ucs2_text+0x694>
			pss += 2; //указатель на начало области date/time
 8005714:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005716:	3602      	adds	r6, #2
			if (tp_vpf != 2) {
 8005718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571a:	2b02      	cmp	r3, #2
 800571c:	f040 80e0 	bne.w	80058e0 <conv_ucs2_text+0x6a8>
				byte = 6;
 8005720:	2306      	movs	r3, #6
			tt = (ps1 - ps0) + len_num_a + byte; //указатель на UDL - user data len
 8005722:	ebab 0604 	sub.w	r6, fp, r4
 8005726:	442e      	add	r6, r5
 8005728:	441e      	add	r6, r3
			memcpy(&buffer_temp[tt1], eolin, strlen(eolin)); tt1 += strlen(eolin);
 800572a:	ab0d      	add	r3, sp, #52	; 0x34
 800572c:	eb03 0a09 	add.w	sl, r3, r9
 8005730:	4b76      	ldr	r3, [pc, #472]	; (800590c <conv_ucs2_text+0x6d4>)
 8005732:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8005734:	4628      	mov	r0, r5
 8005736:	f7fa fd5d 	bl	80001f4 <strlen>
 800573a:	4602      	mov	r2, r0
 800573c:	4629      	mov	r1, r5
 800573e:	4650      	mov	r0, sl
 8005740:	f008 faf0 	bl	800dd24 <memcpy>
 8005744:	4628      	mov	r0, r5
 8005746:	f7fa fd55 	bl	80001f4 <strlen>
 800574a:	4481      	add	r9, r0
			memset(words, 0, sizeof(words));
 800574c:	2300      	movs	r3, #0
 800574e:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8005752:	f88d 3454 	strb.w	r3, [sp, #1108]	; 0x454
			memcpy(words, ps3, 2);
 8005756:	5ba0      	ldrh	r0, [r4, r6]
 8005758:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
			dl = hextobin(words[0], words[1]); //длинна тела сообщения
 800575c:	0a01      	lsrs	r1, r0, #8
 800575e:	b2c0      	uxtb	r0, r0
 8005760:	f7ff fbec 	bl	8004f3c <hextobin>
 8005764:	4682      	mov	sl, r0
			user_data_l = user_data_len = dl;
 8005766:	f88d 0457 	strb.w	r0, [sp, #1111]	; 0x457
			sprintf(stx+strlen(stx),", UDL=%d[%s]\r\n", user_data_len, words);
 800576a:	a8bf      	add	r0, sp, #764	; 0x2fc
 800576c:	f7fa fd42 	bl	80001f4 <strlen>
 8005770:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 8005774:	4652      	mov	r2, sl
 8005776:	4967      	ldr	r1, [pc, #412]	; (8005914 <conv_ucs2_text+0x6dc>)
 8005778:	adbf      	add	r5, sp, #764	; 0x2fc
 800577a:	4428      	add	r0, r5
 800577c:	f008 fdc8 	bl	800e310 <siprintf>
			if (prn) Report(NULL, false, stx);
 8005780:	9b04      	ldr	r3, [sp, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 8144 	bne.w	8005a10 <conv_ucs2_text+0x7d8>
			tt += 2; //индекс на начало текста сообщения или на начало udhi
 8005788:	3602      	adds	r6, #2
 800578a:	e62e      	b.n	80053ea <conv_ucs2_text+0x1b2>
				if (words1[a - 1] == 'F') words1[a - 1] = ' ';
 800578c:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 8005790:	441a      	add	r2, r3
 8005792:	2320      	movs	r3, #32
 8005794:	f802 3c38 	strb.w	r3, [r2, #-56]
			new_a = a;
 8005798:	9508      	str	r5, [sp, #32]
 800579a:	e759      	b.n	8005650 <conv_ucs2_text+0x418>
				memset(words2, 0, sizeof(words2));
 800579c:	2222      	movs	r2, #34	; 0x22
 800579e:	2100      	movs	r1, #0
 80057a0:	a8ff      	add	r0, sp, #1020	; 0x3fc
 80057a2:	f008 facd 	bl	800dd40 <memset>
				j = 0; 	i = 0;
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	4647      	mov	r7, r8
				while (j < a) {
 80057ac:	e013      	b.n	80057d6 <conv_ucs2_text+0x59e>
					words2[i] = hextobin(words1[j], words1[j + 1]);
 80057ae:	f108 0301 	add.w	r3, r8, #1
 80057b2:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 80057b6:	4413      	add	r3, r2
 80057b8:	4442      	add	r2, r8
 80057ba:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 80057be:	f812 0c38 	ldrb.w	r0, [r2, #-56]
 80057c2:	f7ff fbbb 	bl	8004f3c <hextobin>
 80057c6:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 80057ca:	443b      	add	r3, r7
 80057cc:	f803 0c5c 	strb.w	r0, [r3, #-92]
					i++; j += 2;
 80057d0:	3701      	adds	r7, #1
 80057d2:	f108 0802 	add.w	r8, r8, #2
				while (j < a) {
 80057d6:	4545      	cmp	r5, r8
 80057d8:	dce9      	bgt.n	80057ae <conv_ucs2_text+0x576>
				memset(words1, 0, sizeof(words1));
 80057da:	2222      	movs	r2, #34	; 0x22
 80057dc:	2100      	movs	r1, #0
 80057de:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 80057e2:	f008 faad 	bl	800dd40 <memset>
				dl = i;
 80057e6:	b2ff      	uxtb	r7, r7
				shift = 1;
 80057e8:	4631      	mov	r1, r6
				dl_ind = prev = 0;
 80057ea:	2000      	movs	r0, #0
				tt_n = tt1_n = 0;
 80057ec:	4684      	mov	ip, r0
 80057ee:	4686      	mov	lr, r0
 80057f0:	4680      	mov	r8, r0
 80057f2:	e00d      	b.n	8005810 <conv_ucs2_text+0x5d8>
						words1[tt1_n++] = prev;
 80057f4:	f10c 0c02 	add.w	ip, ip, #2
 80057f8:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 80057fc:	4499      	add	r9, r3
 80057fe:	f809 8c38 	strb.w	r8, [r9, #-56]
						dl_ind++;
 8005802:	3002      	adds	r0, #2
 8005804:	b2c0      	uxtb	r0, r0
						shift = 1;
 8005806:	4631      	mov	r1, r6
						prev = 0;
 8005808:	f04f 0800 	mov.w	r8, #0
					if (dl_ind > dl) break;
 800580c:	42b8      	cmp	r0, r7
 800580e:	d825      	bhi.n	800585c <conv_ucs2_text+0x624>
					a_n = words2[tt_n++];
 8005810:	4673      	mov	r3, lr
 8005812:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 8005816:	4413      	add	r3, r2
 8005818:	f10e 0e01 	add.w	lr, lr, #1
 800581c:	f813 2c5c 	ldrb.w	r2, [r3, #-92]
					a_n <<= (uint8_t)(shift - 1);
 8005820:	1e4b      	subs	r3, r1, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	b2db      	uxtb	r3, r3
					a_n = (a_n | prev) & 0x7f;
 800582a:	ea48 0303 	orr.w	r3, r8, r3
 800582e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
					words1[tt1_n++] = a_n;
 8005832:	f10c 0901 	add.w	r9, ip, #1
 8005836:	f50d 688b 	add.w	r8, sp, #1112	; 0x458
 800583a:	44e0      	add	r8, ip
 800583c:	f808 3c38 	strb.w	r3, [r8, #-56]
					dl_ind++;
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	b2db      	uxtb	r3, r3
					prev = (b_n >> (8 - shift));
 8005844:	f1c1 0808 	rsb	r8, r1, #8
 8005848:	fa42 f208 	asr.w	r2, r2, r8
 800584c:	fa5f f882 	uxtb.w	r8, r2
					if (shift != 7) {
 8005850:	2907      	cmp	r1, #7
 8005852:	d0cf      	beq.n	80057f4 <conv_ucs2_text+0x5bc>
						shift++;
 8005854:	3101      	adds	r1, #1
					dl_ind++;
 8005856:	4618      	mov	r0, r3
					words1[tt1_n++] = a_n;
 8005858:	46cc      	mov	ip, r9
 800585a:	e7d7      	b.n	800580c <conv_ucs2_text+0x5d4>
				new_a = strlen(words1);
 800585c:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8005860:	f7fa fcc8 	bl	80001f4 <strlen>
 8005864:	b2c3      	uxtb	r3, r0
 8005866:	9308      	str	r3, [sp, #32]
				a >>= 1;
 8005868:	e6f2      	b.n	8005650 <conv_ucs2_text+0x418>
			if (b == 1) buffer_temp[tt1++] = '+'; //type_of_num_A = intern....
 800586a:	232b      	movs	r3, #43	; 0x2b
 800586c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8005870:	46b1      	mov	r9, r6
 8005872:	e6fa      	b.n	800566a <conv_ucs2_text+0x432>
				memcpy(ps_o, words1, new_a);
 8005874:	461f      	mov	r7, r3
 8005876:	461a      	mov	r2, r3
 8005878:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
 800587c:	f008 fa52 	bl	800dd24 <memcpy>
				tt1 += new_a;
 8005880:	463b      	mov	r3, r7
 8005882:	444b      	add	r3, r9
				buffer_temp[tt1++] = 0x20;
 8005884:	f103 0901 	add.w	r9, r3, #1
 8005888:	aa0d      	add	r2, sp, #52	; 0x34
 800588a:	2120      	movs	r1, #32
 800588c:	54d1      	strb	r1, [r2, r3]
 800588e:	e6f3      	b.n	8005678 <conv_ucs2_text+0x440>
				case 2: pdu = 1; break;
 8005890:	46b0      	mov	r8, r6
 8005892:	e70a      	b.n	80056aa <conv_ucs2_text+0x472>
			if (words1[k-1] == ' ') words1[k - 1] = '\0';
 8005894:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 8005898:	4418      	add	r0, r3
 800589a:	2300      	movs	r3, #0
 800589c:	f800 3c38 	strb.w	r3, [r0, #-56]
 80058a0:	e717      	b.n	80056d2 <conv_ucs2_text+0x49a>
			if (new_a > 0) sprintf(stx+strlen(stx),", SENDER: type[%d]=%s number[%d]=%s",
 80058a2:	a8bf      	add	r0, sp, #764	; 0x2fc
 80058a4:	f7fa fca6 	bl	80001f4 <strlen>
 80058a8:	4b18      	ldr	r3, [pc, #96]	; (800590c <conv_ucs2_text+0x6d4>)
 80058aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80058b0:	f50d 6284 	add.w	r2, sp, #1056	; 0x420
 80058b4:	9201      	str	r2, [sp, #4]
 80058b6:	9a08      	ldr	r2, [sp, #32]
 80058b8:	9200      	str	r2, [sp, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	460a      	mov	r2, r1
 80058be:	4916      	ldr	r1, [pc, #88]	; (8005918 <conv_ucs2_text+0x6e0>)
 80058c0:	f50d 7c3f 	add.w	ip, sp, #764	; 0x2fc
 80058c4:	4460      	add	r0, ip
 80058c6:	f008 fd23 	bl	800e310 <siprintf>
 80058ca:	e720      	b.n	800570e <conv_ucs2_text+0x4d6>
			if (pack) sprintf(stx+strlen(stx),", PACK=%d", pack);
 80058cc:	a8bf      	add	r0, sp, #764	; 0x2fc
 80058ce:	f7fa fc91 	bl	80001f4 <strlen>
 80058d2:	4632      	mov	r2, r6
 80058d4:	4911      	ldr	r1, [pc, #68]	; (800591c <conv_ucs2_text+0x6e4>)
 80058d6:	abbf      	add	r3, sp, #764	; 0x2fc
 80058d8:	4418      	add	r0, r3
 80058da:	f008 fd19 	bl	800e310 <siprintf>
 80058de:	e719      	b.n	8005714 <conv_ucs2_text+0x4dc>
				memset(words1, 0, sizeof(words1));
 80058e0:	2222      	movs	r2, #34	; 0x22
 80058e2:	2100      	movs	r1, #0
 80058e4:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 80058e8:	f008 fa2a 	bl	800dd40 <memset>
				memcpy(words1, pss, 14); //14 символов для date/time
 80058ec:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
 80058f0:	6830      	ldr	r0, [r6, #0]
 80058f2:	6871      	ldr	r1, [r6, #4]
 80058f4:	68b2      	ldr	r2, [r6, #8]
 80058f6:	c307      	stmia	r3!, {r0, r1, r2}
 80058f8:	89b2      	ldrh	r2, [r6, #12]
 80058fa:	801a      	strh	r2, [r3, #0]
				j = 0;
 80058fc:	2300      	movs	r3, #0
				while (j < 14) {
 80058fe:	e01f      	b.n	8005940 <conv_ucs2_text+0x708>
 8005900:	080137f8 	.word	0x080137f8
 8005904:	08013814 	.word	0x08013814
 8005908:	080130b0 	.word	0x080130b0
 800590c:	2000013c 	.word	0x2000013c
 8005910:	08013824 	.word	0x08013824
 8005914:	08013874 	.word	0x08013874
 8005918:	0801383c 	.word	0x0801383c
 800591c:	08013860 	.word	0x08013860
					c = words1[j];
 8005920:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 8005924:	18d1      	adds	r1, r2, r3
 8005926:	f811 0c38 	ldrb.w	r0, [r1, #-56]
					words1[j] = words1[j + 1];
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	f50d 668b 	add.w	r6, sp, #1112	; 0x458
 8005930:	4432      	add	r2, r6
 8005932:	f812 6c38 	ldrb.w	r6, [r2, #-56]
 8005936:	f801 6c38 	strb.w	r6, [r1, #-56]
					words1[j + 1] = c;
 800593a:	f802 0c38 	strb.w	r0, [r2, #-56]
					j += 2;
 800593e:	3302      	adds	r3, #2
				while (j < 14) {
 8005940:	2b0d      	cmp	r3, #13
 8005942:	dded      	ble.n	8005920 <conv_ucs2_text+0x6e8>
				buffer_temp[tt1++] = 0x32; 	buffer_temp[tt1++] = 0x30; //20+год
 8005944:	f109 0101 	add.w	r1, r9, #1
 8005948:	ab0d      	add	r3, sp, #52	; 0x34
 800594a:	2232      	movs	r2, #50	; 0x32
 800594c:	f803 2009 	strb.w	r2, [r3, r9]
 8005950:	f109 0202 	add.w	r2, r9, #2
 8005954:	2030      	movs	r0, #48	; 0x30
 8005956:	5458      	strb	r0, [r3, r1]
				pss = &words1[0];	pss0 = (char *)&buffer_temp[tt1];	  memcpy(pss0, pss, 2);		tt1 += 2;   //год
 8005958:	f8bd 1420 	ldrh.w	r1, [sp, #1056]	; 0x420
 800595c:	5299      	strh	r1, [r3, r2]
 800595e:	f109 0104 	add.w	r1, r9, #4
				buffer_temp[tt1++] = '/';
 8005962:	f109 0205 	add.w	r2, r9, #5
 8005966:	202f      	movs	r0, #47	; 0x2f
 8005968:	5458      	strb	r0, [r3, r1]
				pss += 2; 		    pss0 = (char *)&buffer_temp[tt1];	  memcpy(pss0, pss, 2);		tt1 += 2;   //месяц
 800596a:	f8bd 1422 	ldrh.w	r1, [sp, #1058]	; 0x422
 800596e:	5299      	strh	r1, [r3, r2]
 8005970:	f109 0107 	add.w	r1, r9, #7
				buffer_temp[tt1++] = '/';
 8005974:	f109 0208 	add.w	r2, r9, #8
 8005978:	5458      	strb	r0, [r3, r1]
				pss += 2; 		    pss0 = (char *)&buffer_temp[tt1];     memcpy(pss0, pss, 2);		tt1 += 2;   //день
 800597a:	f8bd 1424 	ldrh.w	r1, [sp, #1060]	; 0x424
 800597e:	5299      	strh	r1, [r3, r2]
 8005980:	f109 010a 	add.w	r1, r9, #10
				buffer_temp[tt1++] = 0x20;
 8005984:	f109 020b 	add.w	r2, r9, #11
 8005988:	2020      	movs	r0, #32
 800598a:	5458      	strb	r0, [r3, r1]
				pss += 2; 		    pss0 = (char *)&buffer_temp[tt1];     memcpy(pss0, pss, 2);		tt1 += 2;   //часы
 800598c:	f8bd 1426 	ldrh.w	r1, [sp, #1062]	; 0x426
 8005990:	5299      	strh	r1, [r3, r2]
 8005992:	f109 010d 	add.w	r1, r9, #13
				buffer_temp[tt1++] = ':';
 8005996:	f109 020e 	add.w	r2, r9, #14
 800599a:	203a      	movs	r0, #58	; 0x3a
 800599c:	5458      	strb	r0, [r3, r1]
				pss += 2; 		    pss0 = (char *)&buffer_temp[tt1];     memcpy(pss0, pss, 2);		tt1 += 2;   //минуты
 800599e:	f8bd 1428 	ldrh.w	r1, [sp, #1064]	; 0x428
 80059a2:	5299      	strh	r1, [r3, r2]
 80059a4:	f109 0110 	add.w	r1, r9, #16
				buffer_temp[tt1++] = ':';
 80059a8:	f109 0211 	add.w	r2, r9, #17
 80059ac:	5458      	strb	r0, [r3, r1]
				pss += 2; 		    pss0 = (char *)&buffer_temp[tt1];     memcpy(pss0, pss, 2);		tt1 += 2;   //секунды
 80059ae:	f8bd 142a 	ldrh.w	r1, [sp, #1066]	; 0x42a
 80059b2:	5299      	strh	r1, [r3, r2]
 80059b4:	f109 0213 	add.w	r2, r9, #19
				buffer_temp[tt1++] = '+';
 80059b8:	f109 0614 	add.w	r6, r9, #20
 80059bc:	212b      	movs	r1, #43	; 0x2b
 80059be:	5499      	strb	r1, [r3, r2]
				memset(chcs, 0, sizeof(chcs)); memcpy(chcs, pss, 2); tzone = atoi(chcs); tzone = (tzone * 15) / 60;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444
 80059c6:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
 80059ca:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c
 80059ce:	f8bd 342c 	ldrh.w	r3, [sp, #1068]	; 0x42c
 80059d2:	f8ad 3444 	strh.w	r3, [sp, #1092]	; 0x444
 80059d6:	f20d 4044 	addw	r0, sp, #1092	; 0x444
 80059da:	f008 f8a8 	bl	800db2e <atoi>
 80059de:	1e02      	subs	r2, r0, #0
 80059e0:	db14      	blt.n	8005a0c <conv_ucs2_text+0x7d4>
				memset(chcs, 0, sizeof(chcs)); sprintf(chcs, "%02d", tzone); pss = &chcs[0];
 80059e2:	2300      	movs	r3, #0
 80059e4:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444
 80059e8:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
 80059ec:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c
 80059f0:	1092      	asrs	r2, r2, #2
 80059f2:	49a7      	ldr	r1, [pc, #668]	; (8005c90 <conv_ucs2_text+0xa58>)
 80059f4:	f20d 4044 	addw	r0, sp, #1092	; 0x444
 80059f8:	f008 fc8a 	bl	800e310 <siprintf>
				pss0 = (char *)&buffer_temp[tt1]; memcpy(pss0, pss, 2); tt1 += 2;   //(+02)
 80059fc:	f8bd 2444 	ldrh.w	r2, [sp, #1092]	; 0x444
 8005a00:	ab0d      	add	r3, sp, #52	; 0x34
 8005a02:	539a      	strh	r2, [r3, r6]
 8005a04:	f109 0916 	add.w	r9, r9, #22
			uint8_t byte = 18;
 8005a08:	2312      	movs	r3, #18
 8005a0a:	e68a      	b.n	8005722 <conv_ucs2_text+0x4ea>
				memset(chcs, 0, sizeof(chcs)); memcpy(chcs, pss, 2); tzone = atoi(chcs); tzone = (tzone * 15) / 60;
 8005a0c:	3203      	adds	r2, #3
 8005a0e:	e7e8      	b.n	80059e2 <conv_ucs2_text+0x7aa>
			if (prn) Report(NULL, false, stx);
 8005a10:	aabf      	add	r2, sp, #764	; 0x2fc
 8005a12:	2100      	movs	r1, #0
 8005a14:	4608      	mov	r0, r1
 8005a16:	f7fc f8df 	bl	8001bd8 <Report>
 8005a1a:	e6b5      	b.n	8005788 <conv_ucs2_text+0x550>
			if (with_udh) { //Это часть сообщения
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d15b      	bne.n	8005ada <conv_ucs2_text+0x8a2>
 8005a22:	f04f 0b00 	mov.w	fp, #0
			dl_ind = ucs2_to_utf8((char *)&buffer_txt[tt], &user_data_len, &buffer_temp[tt1]);
 8005a26:	ab0d      	add	r3, sp, #52	; 0x34
 8005a28:	eb03 0209 	add.w	r2, r3, r9
 8005a2c:	f20d 4157 	addw	r1, sp, #1111	; 0x457
 8005a30:	19a0      	adds	r0, r4, r6
 8005a32:	f7ff fab5 	bl	8004fa0 <ucs2_to_utf8>
			tt1 += dl_ind;
 8005a36:	fa59 f580 	uxtab	r5, r9, r0
		buffer_temp[tt1] = 0;
 8005a3a:	ab0d      	add	r3, sp, #52	; 0x34
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	555a      	strb	r2, [r3, r5]
		if (with_udh) {
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80f7 	beq.w	8005c36 <conv_ucs2_text+0x9fe>
			if (udhi_len >= 5) {
 8005a48:	f1bb 0f04 	cmp.w	fp, #4
 8005a4c:	d92b      	bls.n	8005aa6 <conv_ucs2_text+0x86e>
				udhi_4[0] = 1; //tp
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f88d 32b4 	strb.w	r3, [sp, #692]	; 0x2b4
				a = hextobin(udhi_str[2], udhi_str[3]);
 8005a54:	f89d 12df 	ldrb.w	r1, [sp, #735]	; 0x2df
 8005a58:	f89d 02de 	ldrb.w	r0, [sp, #734]	; 0x2de
 8005a5c:	f7ff fa6e 	bl	8004f3c <hextobin>
				b = (udhi_len << 1);
 8005a60:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8005a64:	b2f6      	uxtb	r6, r6
				if (a == 4) { //2 байта на номер смс
 8005a66:	2804      	cmp	r0, #4
 8005a68:	f000 80d7 	beq.w	8005c1a <conv_ucs2_text+0x9e2>
					udhi_4[1] = 0; //num_1
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f88d 32b5 	strb.w	r3, [sp, #693]	; 0x2b5
					b -= 6;
 8005a72:	3e06      	subs	r6, #6
 8005a74:	b2f6      	uxtb	r6, r6
				udhi_4[2] = hextobin(udhi_str[b],     udhi_str[b + 1]); //num_2
 8005a76:	1c73      	adds	r3, r6, #1
 8005a78:	afb7      	add	r7, sp, #732	; 0x2dc
 8005a7a:	5cf9      	ldrb	r1, [r7, r3]
 8005a7c:	5db8      	ldrb	r0, [r7, r6]
 8005a7e:	f7ff fa5d 	bl	8004f3c <hextobin>
 8005a82:	f88d 02b6 	strb.w	r0, [sp, #694]	; 0x2b6
				udhi_4[3] = hextobin(udhi_str[b + 2], udhi_str[b + 3]); //total
 8005a86:	1cb3      	adds	r3, r6, #2
 8005a88:	1cf2      	adds	r2, r6, #3
 8005a8a:	5cb9      	ldrb	r1, [r7, r2]
 8005a8c:	5cf8      	ldrb	r0, [r7, r3]
 8005a8e:	f7ff fa55 	bl	8004f3c <hextobin>
 8005a92:	f88d 02b7 	strb.w	r0, [sp, #695]	; 0x2b7
				udhi_4[4] = hextobin(udhi_str[b + 4], udhi_str[b + 5]); //part
 8005a96:	1d33      	adds	r3, r6, #4
 8005a98:	3605      	adds	r6, #5
 8005a9a:	5db9      	ldrb	r1, [r7, r6]
 8005a9c:	5cf8      	ldrb	r0, [r7, r3]
 8005a9e:	f7ff fa4d 	bl	8004f3c <hextobin>
 8005aa2:	f88d 02b8 	strb.w	r0, [sp, #696]	; 0x2b8
			a = udhi_4[1];   udhi_4[1] = udhi_4[2];   udhi_4[2] = a;//swapbytes in sms_num
 8005aa6:	f89d 32b5 	ldrb.w	r3, [sp, #693]	; 0x2b5
 8005aaa:	f89d 22b6 	ldrb.w	r2, [sp, #694]	; 0x2b6
 8005aae:	f88d 22b5 	strb.w	r2, [sp, #693]	; 0x2b5
 8005ab2:	f88d 32b6 	strb.w	r3, [sp, #694]	; 0x2b6
			memcpy(udhi5, udhi_4, 5);
 8005ab6:	98ad      	ldr	r0, [sp, #692]	; 0x2b4
 8005ab8:	9a06      	ldr	r2, [sp, #24]
 8005aba:	6010      	str	r0, [r2, #0]
 8005abc:	f89d 32b8 	ldrb.w	r3, [sp, #696]	; 0x2b8
 8005ac0:	7113      	strb	r3, [r2, #4]
			if (TSINPART) {
 8005ac2:	4b74      	ldr	r3, [pc, #464]	; (8005c94 <conv_ucs2_text+0xa5c>)
 8005ac4:	f8d3 6540 	ldr.w	r6, [r3, #1344]	; 0x540
 8005ac8:	2e00      	cmp	r6, #0
 8005aca:	f040 80bd 	bne.w	8005c48 <conv_ucs2_text+0xa10>
				if (udhi_4[4] < 2) end_ind = 0;
 8005ace:	f89d 32b8 	ldrb.w	r3, [sp, #696]	; 0x2b8
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	f200 80b3 	bhi.w	8005c3e <conv_ucs2_text+0xa06>
 8005ad8:	e0b7      	b.n	8005c4a <conv_ucs2_text+0xa12>
				ps1 = (char *)&buffer_txt[tt];
 8005ada:	19a5      	adds	r5, r4, r6
				memset(words, 0, sizeof(words));
 8005adc:	2300      	movs	r3, #0
 8005ade:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8005ae2:	f88d 3454 	strb.w	r3, [sp, #1108]	; 0x454
				memcpy(words, ps1, 2);
 8005ae6:	5ba0      	ldrh	r0, [r4, r6]
 8005ae8:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
				udhi_len = hextobin(words[0], words[1]);
 8005aec:	0a01      	lsrs	r1, r0, #8
 8005aee:	b2c0      	uxtb	r0, r0
 8005af0:	f7ff fa24 	bl	8004f3c <hextobin>
 8005af4:	4683      	mov	fp, r0
				if (udhi_len <= 32) {
 8005af6:	2820      	cmp	r0, #32
 8005af8:	d895      	bhi.n	8005a26 <conv_ucs2_text+0x7ee>
					memcpy(udhi_str, ps1 + 2, udhi_len << 1);
 8005afa:	0042      	lsls	r2, r0, #1
 8005afc:	1ca9      	adds	r1, r5, #2
 8005afe:	a8b7      	add	r0, sp, #732	; 0x2dc
 8005b00:	f008 f910 	bl	800dd24 <memcpy>
					tt += ((udhi_len + 1) << 1); //NEW BODY POINTER (index)
 8005b04:	f10b 0301 	add.w	r3, fp, #1
 8005b08:	eb06 0643 	add.w	r6, r6, r3, lsl #1
					dl -= udhi_len + 1;
 8005b0c:	ebaa 030b 	sub.w	r3, sl, fp
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	3b01      	subs	r3, #1
					user_data_len = dl;
 8005b14:	f88d 3457 	strb.w	r3, [sp, #1111]	; 0x457
 8005b18:	e785      	b.n	8005a26 <conv_ucs2_text+0x7ee>
					if (with_udh) {
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	b983      	cbnz	r3, 8005b40 <conv_ucs2_text+0x908>
						flg = 0;
 8005b1e:	9f03      	ldr	r7, [sp, #12]
 8005b20:	4650      	mov	r0, sl
 8005b22:	f04f 0b00 	mov.w	fp, #0
					dl_ind = gsm7bit_to_text(dl, &buffer_txt[tt], &buffer_temp[end_ind], flg, user_data_l, udhi_len);
 8005b26:	f8cd b004 	str.w	fp, [sp, #4]
 8005b2a:	f8cd a000 	str.w	sl, [sp]
 8005b2e:	463b      	mov	r3, r7
 8005b30:	aa0d      	add	r2, sp, #52	; 0x34
 8005b32:	444a      	add	r2, r9
 8005b34:	19a1      	adds	r1, r4, r6
 8005b36:	f7ff fb21 	bl	800517c <gsm7bit_to_text>
					tt1 += dl_ind;
 8005b3a:	fa59 f580 	uxtab	r5, r9, r0
				break;
 8005b3e:	e77c      	b.n	8005a3a <conv_ucs2_text+0x802>
						ps1 = (char *)&buffer_txt[tt];
 8005b40:	19a5      	adds	r5, r4, r6
						memset(words, 0, sizeof(words));
 8005b42:	2300      	movs	r3, #0
 8005b44:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8005b48:	f88d 3454 	strb.w	r3, [sp, #1108]	; 0x454
						memcpy(words, ps1, 2);
 8005b4c:	5ba0      	ldrh	r0, [r4, r6]
 8005b4e:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
						udhi_len = hextobin(words[0], words[1]);
 8005b52:	0a01      	lsrs	r1, r0, #8
 8005b54:	b2c0      	uxtb	r0, r0
 8005b56:	f7ff f9f1 	bl	8004f3c <hextobin>
 8005b5a:	4683      	mov	fp, r0
						if (udhi_len <= 32) {
 8005b5c:	2820      	cmp	r0, #32
 8005b5e:	d901      	bls.n	8005b64 <conv_ucs2_text+0x92c>
 8005b60:	4650      	mov	r0, sl
 8005b62:	e7e0      	b.n	8005b26 <conv_ucs2_text+0x8ee>
							memcpy(udhi_str, ps1 + 2, udhi_len << 1);
 8005b64:	0042      	lsls	r2, r0, #1
 8005b66:	1ca9      	adds	r1, r5, #2
 8005b68:	a8b7      	add	r0, sp, #732	; 0x2dc
 8005b6a:	f008 f8db 	bl	800dd24 <memcpy>
							tt += ((udhi_len + 1) << 1);//NEW BODY POINTER
 8005b6e:	f10b 0301 	add.w	r3, fp, #1
 8005b72:	eb06 0643 	add.w	r6, r6, r3, lsl #1
							k = 7 - (udhi_len + 1);
 8005b76:	f1cb 0306 	rsb	r3, fp, #6
							tt += k << 1;
 8005b7a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
							if (k > 0) flg = k; else flg = 0;
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd00      	ble.n	8005b84 <conv_ucs2_text+0x94c>
 8005b82:	461f      	mov	r7, r3
							dl -= udhi_len + 1;
 8005b84:	ebaa 030b 	sub.w	r3, sl, fp
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
							k = dl * 7;
 8005b8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
							dl = k >> 3;
 8005b92:	f3c3 00c7 	ubfx	r0, r3, #3, #8
							if (k % 8) dl++;
 8005b96:	f013 0f07 	tst.w	r3, #7
 8005b9a:	d001      	beq.n	8005ba0 <conv_ucs2_text+0x968>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	b2c0      	uxtb	r0, r0
							user_data_len = dl;
 8005ba0:	f88d 0457 	strb.w	r0, [sp, #1111]	; 0x457
 8005ba4:	e7bf      	b.n	8005b26 <conv_ucs2_text+0x8ee>
					if (with_udh) {
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	b1f3      	cbz	r3, 8005be8 <conv_ucs2_text+0x9b0>
						ps1 = (char *)&buffer_txt[tt];
 8005baa:	19a5      	adds	r5, r4, r6
						memcpy(words, ps1, 2);
 8005bac:	5ba0      	ldrh	r0, [r4, r6]
 8005bae:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
						udhi_len = hextobin(words[0], words[1]);
 8005bb2:	0a01      	lsrs	r1, r0, #8
 8005bb4:	b2c0      	uxtb	r0, r0
 8005bb6:	f7ff f9c1 	bl	8004f3c <hextobin>
 8005bba:	4683      	mov	fp, r0
						if (udhi_len <= 32) {
 8005bbc:	2820      	cmp	r0, #32
 8005bbe:	d815      	bhi.n	8005bec <conv_ucs2_text+0x9b4>
							memcpy(udhi_str, ps1 + 2, udhi_len << 1);
 8005bc0:	0042      	lsls	r2, r0, #1
 8005bc2:	1ca9      	adds	r1, r5, #2
 8005bc4:	a8b7      	add	r0, sp, #732	; 0x2dc
 8005bc6:	f008 f8ad 	bl	800dd24 <memcpy>
							tt += ((udhi_len + 1) << 1);//NEW BODY POINTER
 8005bca:	f10b 0301 	add.w	r3, fp, #1
 8005bce:	eb06 0643 	add.w	r6, r6, r3, lsl #1
							dl -= udhi_len + 1;
 8005bd2:	ebaa 0a0b 	sub.w	sl, sl, fp
 8005bd6:	fa5f fa8a 	uxtb.w	sl, sl
 8005bda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bde:	fa5f fa8a 	uxtb.w	sl, sl
							user_data_len = dl;
 8005be2:	f88d a457 	strb.w	sl, [sp, #1111]	; 0x457
 8005be6:	e001      	b.n	8005bec <conv_ucs2_text+0x9b4>
 8005be8:	f04f 0b00 	mov.w	fp, #0
 8005bec:	464d      	mov	r5, r9
 8005bee:	2700      	movs	r7, #0
 8005bf0:	f8dd 801c 	ldr.w	r8, [sp, #28]
						memcpy(words, ps1, 2);
 8005bf4:	5ba0      	ldrh	r0, [r4, r6]
 8005bf6:	f8ad 0450 	strh.w	r0, [sp, #1104]	; 0x450
						buffer_temp[tt1++] = hextobin(words[0], words[1]);
 8005bfa:	0a01      	lsrs	r1, r0, #8
 8005bfc:	b2c0      	uxtb	r0, r0
 8005bfe:	f7ff f99d 	bl	8004f3c <hextobin>
 8005c02:	aa0d      	add	r2, sp, #52	; 0x34
 8005c04:	5550      	strb	r0, [r2, r5]
 8005c06:	3501      	adds	r5, #1
						tt += 2;
 8005c08:	3602      	adds	r6, #2
						dl_ind++;
 8005c0a:	3701      	adds	r7, #1
 8005c0c:	b2ff      	uxtb	r7, r7
						if ((tt >= len) || (dl_ind >= dl)) break;
 8005c0e:	45b0      	cmp	r8, r6
 8005c10:	f77f af13 	ble.w	8005a3a <conv_ucs2_text+0x802>
 8005c14:	4557      	cmp	r7, sl
 8005c16:	d3ed      	bcc.n	8005bf4 <conv_ucs2_text+0x9bc>
 8005c18:	e70f      	b.n	8005a3a <conv_ucs2_text+0x802>
					b -= 8;
 8005c1a:	f1a6 0308 	sub.w	r3, r6, #8
 8005c1e:	b2db      	uxtb	r3, r3
					udhi_4[1] = hextobin(udhi_str[b], udhi_str[b + 1]); //num_1
 8005c20:	1c59      	adds	r1, r3, #1
 8005c22:	aab7      	add	r2, sp, #732	; 0x2dc
 8005c24:	5c51      	ldrb	r1, [r2, r1]
 8005c26:	5cd0      	ldrb	r0, [r2, r3]
 8005c28:	f7ff f988 	bl	8004f3c <hextobin>
 8005c2c:	f88d 02b5 	strb.w	r0, [sp, #693]	; 0x2b5
					b += 2;
 8005c30:	3e06      	subs	r6, #6
 8005c32:	b2f6      	uxtb	r6, r6
 8005c34:	e71f      	b.n	8005a76 <conv_ucs2_text+0x83e>
			if (TSINPART) end_ind = 0;
 8005c36:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <conv_ucs2_text+0xa5c>)
 8005c38:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 8005c3c:	b9db      	cbnz	r3, 8005c76 <conv_ucs2_text+0xa3e>
		if (end_ind > SMS_BUF_LEN - 1) end_ind = 0;
 8005c3e:	f5b9 7f20 	cmp.w	r9, #640	; 0x280
 8005c42:	da1a      	bge.n	8005c7a <conv_ucs2_text+0xa42>
 8005c44:	464e      	mov	r6, r9
 8005c46:	e000      	b.n	8005c4a <conv_ucs2_text+0xa12>
				end_ind = 0;
 8005c48:	2600      	movs	r6, #0
		it = SMS_BUF_LEN - 1 - end_ind;
 8005c4a:	f5c6 771f 	rsb	r7, r6, #636	; 0x27c
 8005c4e:	3703      	adds	r7, #3
		memset(buffer_txt, 0, SMS_BUF_LEN);
 8005c50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005c54:	2100      	movs	r1, #0
 8005c56:	4620      	mov	r0, r4
 8005c58:	f008 f872 	bl	800dd40 <memset>
		memcpy(buffer_txt, &buffer_temp[end_ind], it);
 8005c5c:	463a      	mov	r2, r7
 8005c5e:	ab0d      	add	r3, sp, #52	; 0x34
 8005c60:	1999      	adds	r1, r3, r6
 8005c62:	4620      	mov	r0, r4
 8005c64:	f008 f85e 	bl	800dd24 <memcpy>
		if (with_udh && prn) Report(NULL, false,"UDH(%d): [%s]\r\n", udhi_len, udhi_str);
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	b10b      	cbz	r3, 8005c70 <conv_ucs2_text+0xa38>
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	b933      	cbnz	r3, 8005c7e <conv_ucs2_text+0xa46>
		ret = tt1 - end_ind;//strlen((char *)buffer_txt);//dl_ind;
 8005c70:	1ba8      	subs	r0, r5, r6
 	return ret;
 8005c72:	f7ff bb17 	b.w	80052a4 <conv_ucs2_text+0x6c>
			if (TSINPART) end_ind = 0;
 8005c76:	9e03      	ldr	r6, [sp, #12]
 8005c78:	e7e7      	b.n	8005c4a <conv_ucs2_text+0xa12>
		if (end_ind > SMS_BUF_LEN - 1) end_ind = 0;
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	e7e5      	b.n	8005c4a <conv_ucs2_text+0xa12>
		if (with_udh && prn) Report(NULL, false,"UDH(%d): [%s]\r\n", udhi_len, udhi_str);
 8005c7e:	abb7      	add	r3, sp, #732	; 0x2dc
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	465b      	mov	r3, fp
 8005c84:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <conv_ucs2_text+0xa60>)
 8005c86:	2100      	movs	r1, #0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	f7fb ffa5 	bl	8001bd8 <Report>
 8005c8e:	e7ef      	b.n	8005c70 <conv_ucs2_text+0xa38>
 8005c90:	0801386c 	.word	0x0801386c
 8005c94:	200022e8 	.word	0x200022e8
 8005c98:	08013884 	.word	0x08013884

08005c9c <i2c_ssd1306_init>:

    if (rt != HAL_OK) devError |= devI2C;
}
//-----------------------------------------------------------------------------------------
void i2c_ssd1306_init()
{
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	b086      	sub	sp, #24
uint8_t dat[] = {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f88d 3008 	strb.w	r3, [sp, #8]
 8005ca6:	228d      	movs	r2, #141	; 0x8d
 8005ca8:	f88d 2009 	strb.w	r2, [sp, #9]
 8005cac:	2214      	movs	r2, #20
 8005cae:	f88d 200a 	strb.w	r2, [sp, #10]
 8005cb2:	22a1      	movs	r2, #161	; 0xa1
 8005cb4:	f88d 200b 	strb.w	r2, [sp, #11]
 8005cb8:	22c8      	movs	r2, #200	; 0xc8
 8005cba:	f88d 200c 	strb.w	r2, [sp, #12]
 8005cbe:	2221      	movs	r2, #33	; 0x21
 8005cc0:	f88d 200d 	strb.w	r2, [sp, #13]
 8005cc4:	f88d 300e 	strb.w	r3, [sp, #14]
 8005cc8:	227f      	movs	r2, #127	; 0x7f
 8005cca:	f88d 200f 	strb.w	r2, [sp, #15]
 8005cce:	2222      	movs	r2, #34	; 0x22
 8005cd0:	f88d 2010 	strb.w	r2, [sp, #16]
 8005cd4:	f88d 3011 	strb.w	r3, [sp, #17]
 8005cd8:	2207      	movs	r2, #7
 8005cda:	f88d 2012 	strb.w	r2, [sp, #18]
 8005cde:	22af      	movs	r2, #175	; 0xaf
 8005ce0:	f88d 2013 	strb.w	r2, [sp, #19]
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <i2c_ssd1306_init+0xa4>)
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	f88d 2014 	strb.w	r2, [sp, #20]
	OLED_CMD_DISPLAY_ON,         //0xAF
	invert
};
HAL_StatusTypeDef rt = HAL_OK;

	i2cRdy = 0;
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <i2c_ssd1306_init+0xa8>)
 8005cee:	7013      	strb	r3, [r2, #0]
//#ifdef USED_FREERTOS
//	if (osSemaphoreAcquire(semHandle, waitSem) == osOK) {
//#endif
		if (oled_withDMA) {
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <i2c_ssd1306_init+0xac>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b1c3      	cbz	r3, 8005d28 <i2c_ssd1306_init+0x8c>
			rt = HAL_I2C_Master_Transmit_DMA(portOLED, OLED_I2C_ADDRESS, dat, sizeof(dat));
 8005cf6:	230d      	movs	r3, #13
 8005cf8:	aa02      	add	r2, sp, #8
 8005cfa:	2178      	movs	r1, #120	; 0x78
 8005cfc:	4813      	ldr	r0, [pc, #76]	; (8005d4c <i2c_ssd1306_init+0xb0>)
 8005cfe:	6800      	ldr	r0, [r0, #0]
 8005d00:	f002 fa1e 	bl	8008140 <HAL_I2C_Master_Transmit_DMA>
 8005d04:	4604      	mov	r4, r0
			while (HAL_I2C_GetState(portOLED) != HAL_I2C_STATE_READY) {}
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <i2c_ssd1306_init+0xb0>)
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f003 f97e 	bl	800900a <HAL_I2C_GetState>
 8005d0e:	2820      	cmp	r0, #32
 8005d10:	d1f9      	bne.n	8005d06 <i2c_ssd1306_init+0x6a>
		}
//#ifdef USED_FREERTOS
//		osSemaphoreRelease(semHandle);
//	}
//#endif
	i2cRdy = 1;
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <i2c_ssd1306_init+0xa8>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]

	if (rt != HAL_OK) devError |= devI2C;
 8005d18:	b124      	cbz	r4, 8005d24 <i2c_ssd1306_init+0x88>
 8005d1a:	4a0d      	ldr	r2, [pc, #52]	; (8005d50 <i2c_ssd1306_init+0xb4>)
 8005d1c:	7813      	ldrb	r3, [r2, #0]
 8005d1e:	f043 0304 	orr.w	r3, r3, #4
 8005d22:	7013      	strb	r3, [r2, #0]
}
 8005d24:	b006      	add	sp, #24
 8005d26:	bd10      	pop	{r4, pc}
			rt = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat, sizeof(dat), min_wait_ms);
 8005d28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	230d      	movs	r3, #13
 8005d30:	aa02      	add	r2, sp, #8
 8005d32:	2178      	movs	r1, #120	; 0x78
 8005d34:	4805      	ldr	r0, [pc, #20]	; (8005d4c <i2c_ssd1306_init+0xb0>)
 8005d36:	6800      	ldr	r0, [r0, #0]
 8005d38:	f002 f946 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	e7e8      	b.n	8005d12 <i2c_ssd1306_init+0x76>
 8005d40:	20000180 	.word	0x20000180
 8005d44:	20000073 	.word	0x20000073
 8005d48:	20002830 	.word	0x20002830
 8005d4c:	20000138 	.word	0x20000138
 8005d50:	200003e5 	.word	0x200003e5

08005d54 <i2c_ssd1306_clear>:
    if (rt != HAL_OK) devError |= devI2C;
}
#endif
//-----------------------------------------------------------------------------------------
void i2c_ssd1306_clear()
{
 8005d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d56:	b0a5      	sub	sp, #148	; 0x94
uint8_t i, dat[] = {OLED_CONTROL_BYTE_CMD_SINGLE, 0};
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
HAL_StatusTypeDef rt = HAL_OK;
uint8_t zero[129] = {0};
 8005d5e:	2500      	movs	r5, #0
 8005d60:	9502      	str	r5, [sp, #8]
 8005d62:	227d      	movs	r2, #125	; 0x7d
 8005d64:	4629      	mov	r1, r5
 8005d66:	a803      	add	r0, sp, #12
 8005d68:	f007 ffea 	bl	800dd40 <memset>
uint8_t dma = oled_withDMA;
 8005d6c:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <i2c_ssd1306_clear+0xb4>)
 8005d6e:	781e      	ldrb	r6, [r3, #0]

	i2cRdy = 0;
 8005d70:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <i2c_ssd1306_clear+0xb8>)
 8005d72:	701d      	strb	r5, [r3, #0]

	zero[0] = OLED_CONTROL_BYTE_DATA_STREAM;
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f88d 3008 	strb.w	r3, [sp, #8]
HAL_StatusTypeDef rt = HAL_OK;
 8005d7a:	462c      	mov	r4, r5
//#ifdef USED_FREERTOS
//	if (osSemaphoreAcquire(semHandle, waitSem) == osOK) {
//#endif
		for (i = 0; i < 8; i++) {
 8005d7c:	e017      	b.n	8005dae <i2c_ssd1306_clear+0x5a>
			if (dma) {
				rt  = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,    2, min_wait_ms);
				rt |= HAL_I2C_Master_Transmit_DMA(portOLED, OLED_I2C_ADDRESS, zero, 129);
				while (HAL_I2C_GetState(portOLED) != HAL_I2C_STATE_READY) {}
			} else {
				rt  = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,    2, min_wait_ms);
 8005d7e:	4f24      	ldr	r7, [pc, #144]	; (8005e10 <i2c_ssd1306_clear+0xbc>)
 8005d80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2302      	movs	r3, #2
 8005d88:	aa23      	add	r2, sp, #140	; 0x8c
 8005d8a:	2178      	movs	r1, #120	; 0x78
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f002 f91b 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005d92:	4604      	mov	r4, r0
				rt |= HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, zero, 129, max_wait_ms);
 8005d94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2381      	movs	r3, #129	; 0x81
 8005d9c:	aa02      	add	r2, sp, #8
 8005d9e:	2178      	movs	r1, #120	; 0x78
 8005da0:	6838      	ldr	r0, [r7, #0]
 8005da2:	f002 f911 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005da6:	4304      	orrs	r4, r0
 8005da8:	b2e4      	uxtb	r4, r4
		for (i = 0; i < 8; i++) {
 8005daa:	3501      	adds	r5, #1
 8005dac:	b2ed      	uxtb	r5, r5
 8005dae:	2d07      	cmp	r5, #7
 8005db0:	d81f      	bhi.n	8005df2 <i2c_ssd1306_clear+0x9e>
			dat[1] = 0xB0 | i;
 8005db2:	f065 034f 	orn	r3, r5, #79	; 0x4f
 8005db6:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
			if (dma) {
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	d0df      	beq.n	8005d7e <i2c_ssd1306_clear+0x2a>
				rt  = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,    2, min_wait_ms);
 8005dbe:	4f14      	ldr	r7, [pc, #80]	; (8005e10 <i2c_ssd1306_clear+0xbc>)
 8005dc0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	aa23      	add	r2, sp, #140	; 0x8c
 8005dca:	2178      	movs	r1, #120	; 0x78
 8005dcc:	6838      	ldr	r0, [r7, #0]
 8005dce:	f002 f8fb 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005dd2:	4604      	mov	r4, r0
				rt |= HAL_I2C_Master_Transmit_DMA(portOLED, OLED_I2C_ADDRESS, zero, 129);
 8005dd4:	2381      	movs	r3, #129	; 0x81
 8005dd6:	aa02      	add	r2, sp, #8
 8005dd8:	2178      	movs	r1, #120	; 0x78
 8005dda:	6838      	ldr	r0, [r7, #0]
 8005ddc:	f002 f9b0 	bl	8008140 <HAL_I2C_Master_Transmit_DMA>
 8005de0:	4304      	orrs	r4, r0
 8005de2:	b2e4      	uxtb	r4, r4
				while (HAL_I2C_GetState(portOLED) != HAL_I2C_STATE_READY) {}
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <i2c_ssd1306_clear+0xbc>)
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	f003 f90f 	bl	800900a <HAL_I2C_GetState>
 8005dec:	2820      	cmp	r0, #32
 8005dee:	d1f9      	bne.n	8005de4 <i2c_ssd1306_clear+0x90>
 8005df0:	e7db      	b.n	8005daa <i2c_ssd1306_clear+0x56>
		}
//#ifdef USED_FREERTOS
//		osSemaphoreRelease(semHandle);
//	}
//#endif
	i2cRdy = 1;
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <i2c_ssd1306_clear+0xb8>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]

	if (rt != HAL_OK) devError |= devI2C;
 8005df8:	b124      	cbz	r4, 8005e04 <i2c_ssd1306_clear+0xb0>
 8005dfa:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <i2c_ssd1306_clear+0xc0>)
 8005dfc:	7813      	ldrb	r3, [r2, #0]
 8005dfe:	f043 0304 	orr.w	r3, r3, #4
 8005e02:	7013      	strb	r3, [r2, #0]
}
 8005e04:	b025      	add	sp, #148	; 0x94
 8005e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e08:	20002830 	.word	0x20002830
 8005e0c:	20000073 	.word	0x20000073
 8005e10:	20000138 	.word	0x20000138
 8005e14:	200003e5 	.word	0x200003e5

08005e18 <i2c_ssd1306_clear_line>:
//-----------------------------------------------------------------------------------------
void i2c_ssd1306_clear_line(uint8_t cy)
{
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	b088      	sub	sp, #32
cy--;
 8005e1c:	1e43      	subs	r3, r0, #1
 8005e1e:	b2db      	uxtb	r3, r3
HAL_StatusTypeDef rt = HAL_OK;
uint8_t cif_zero[] = {OLED_CONTROL_BYTE_DATA_STREAM, 0, 0, 0, 0, 0, 0, 0, 0};
 8005e20:	4a3e      	ldr	r2, [pc, #248]	; (8005f1c <i2c_ssd1306_clear_line+0x104>)
 8005e22:	ac05      	add	r4, sp, #20
 8005e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e26:	c403      	stmia	r4!, {r0, r1}
 8005e28:	7022      	strb	r2, [r4, #0]
uint8_t first[] = {
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f88d 200c 	strb.w	r2, [sp, #12]
 8005e30:	2121      	movs	r1, #33	; 0x21
 8005e32:	f88d 100d 	strb.w	r1, [sp, #13]
 8005e36:	f88d 200e 	strb.w	r2, [sp, #14]
 8005e3a:	217f      	movs	r1, #127	; 0x7f
 8005e3c:	f88d 100f 	strb.w	r1, [sp, #15]
 8005e40:	2122      	movs	r1, #34	; 0x22
 8005e42:	f88d 1010 	strb.w	r1, [sp, #16]
 8005e46:	f88d 3011 	strb.w	r3, [sp, #17]
 8005e4a:	2107      	movs	r1, #7
 8005e4c:	f88d 1012 	strb.w	r1, [sp, #18]
	0x7f,
	OLED_CMD_SET_PAGE_RANGE,
	cy,
	7
};
uint8_t next[] = {
 8005e50:	2180      	movs	r1, #128	; 0x80
 8005e52:	f88d 1008 	strb.w	r1, [sp, #8]
 8005e56:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005e5a:	f88d 3009 	strb.w	r3, [sp, #9]
	OLED_CONTROL_BYTE_CMD_SINGLE,
	0xB0 | cy
};
	uint8_t dma = oled_withDMA;
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <i2c_ssd1306_clear_line+0x108>)
 8005e60:	781d      	ldrb	r5, [r3, #0]

	i2cRdy = 0;
 8005e62:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <i2c_ssd1306_clear_line+0x10c>)
 8005e64:	701a      	strb	r2, [r3, #0]
#ifdef USED_FREERTOS
	if (osSemaphoreAcquire(semHandle, waitSem) == osOK) {
 8005e66:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <i2c_ssd1306_clear_line+0x110>)
 8005e68:	6859      	ldr	r1, [r3, #4]
 8005e6a:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <i2c_ssd1306_clear_line+0x114>)
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f005 fcc3 	bl	800b7f8 <osSemaphoreAcquire>
 8005e72:	b120      	cbz	r0, 8005e7e <i2c_ssd1306_clear_line+0x66>
#ifdef USED_FREERTOS
		osSemaphoreRelease(semHandle);
	}
#endif

	i2cRdy = 1;
 8005e74:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <i2c_ssd1306_clear_line+0x10c>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	701a      	strb	r2, [r3, #0]

	if (rt != HAL_OK) devError |= devI2C;
}
 8005e7a:	b008      	add	sp, #32
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
		if (HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, first, sizeof(first), max_wait_ms) == HAL_OK) {
 8005e7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2307      	movs	r3, #7
 8005e86:	aa03      	add	r2, sp, #12
 8005e88:	2178      	movs	r1, #120	; 0x78
 8005e8a:	4829      	ldr	r0, [pc, #164]	; (8005f30 <i2c_ssd1306_clear_line+0x118>)
 8005e8c:	6800      	ldr	r0, [r0, #0]
 8005e8e:	f002 f89b 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005e92:	4604      	mov	r4, r0
 8005e94:	b178      	cbz	r0, 8005eb6 <i2c_ssd1306_clear_line+0x9e>
HAL_StatusTypeDef rt = HAL_OK;
 8005e96:	2400      	movs	r4, #0
		osSemaphoreRelease(semHandle);
 8005e98:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <i2c_ssd1306_clear_line+0x114>)
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	f005 fcf0 	bl	800b880 <osSemaphoreRelease>
	i2cRdy = 1;
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <i2c_ssd1306_clear_line+0x10c>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
	if (rt != HAL_OK) devError |= devI2C;
 8005ea6:	2c00      	cmp	r4, #0
 8005ea8:	d0e7      	beq.n	8005e7a <i2c_ssd1306_clear_line+0x62>
 8005eaa:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <i2c_ssd1306_clear_line+0x11c>)
 8005eac:	7813      	ldrb	r3, [r2, #0]
 8005eae:	f043 0304 	orr.w	r3, r3, #4
 8005eb2:	7013      	strb	r3, [r2, #0]
}
 8005eb4:	e7e1      	b.n	8005e7a <i2c_ssd1306_clear_line+0x62>
			if (HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, next, sizeof(next), min_wait_ms) == HAL_OK) {
 8005eb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	aa02      	add	r2, sp, #8
 8005ec0:	2178      	movs	r1, #120	; 0x78
 8005ec2:	481b      	ldr	r0, [pc, #108]	; (8005f30 <i2c_ssd1306_clear_line+0x118>)
 8005ec4:	6800      	ldr	r0, [r0, #0]
 8005ec6:	f002 f87f 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005eca:	4606      	mov	r6, r0
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d1e3      	bne.n	8005e98 <i2c_ssd1306_clear_line+0x80>
				for (uint8_t i = 0; i < 16; i++) {
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	e00d      	b.n	8005ef0 <i2c_ssd1306_clear_line+0xd8>
						rt |= HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, cif_zero, sizeof(cif_zero), max_wait_ms);
 8005ed4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2309      	movs	r3, #9
 8005edc:	aa05      	add	r2, sp, #20
 8005ede:	2178      	movs	r1, #120	; 0x78
 8005ee0:	4813      	ldr	r0, [pc, #76]	; (8005f30 <i2c_ssd1306_clear_line+0x118>)
 8005ee2:	6800      	ldr	r0, [r0, #0]
 8005ee4:	f002 f870 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005ee8:	4330      	orrs	r0, r6
 8005eea:	b2c6      	uxtb	r6, r0
				for (uint8_t i = 0; i < 16; i++) {
 8005eec:	3401      	adds	r4, #1
 8005eee:	b2e4      	uxtb	r4, r4
 8005ef0:	2c0f      	cmp	r4, #15
 8005ef2:	d811      	bhi.n	8005f18 <i2c_ssd1306_clear_line+0x100>
					if (dma) {
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	d0ed      	beq.n	8005ed4 <i2c_ssd1306_clear_line+0xbc>
						rt |= HAL_I2C_Master_Transmit_DMA(portOLED, OLED_I2C_ADDRESS, cif_zero, sizeof(cif_zero));
 8005ef8:	2309      	movs	r3, #9
 8005efa:	aa05      	add	r2, sp, #20
 8005efc:	2178      	movs	r1, #120	; 0x78
 8005efe:	480c      	ldr	r0, [pc, #48]	; (8005f30 <i2c_ssd1306_clear_line+0x118>)
 8005f00:	6800      	ldr	r0, [r0, #0]
 8005f02:	f002 f91d 	bl	8008140 <HAL_I2C_Master_Transmit_DMA>
 8005f06:	4330      	orrs	r0, r6
 8005f08:	b2c6      	uxtb	r6, r0
						while (HAL_I2C_GetState(portOLED) != HAL_I2C_STATE_READY) {}
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <i2c_ssd1306_clear_line+0x118>)
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	f003 f87c 	bl	800900a <HAL_I2C_GetState>
 8005f12:	2820      	cmp	r0, #32
 8005f14:	d1f9      	bne.n	8005f0a <i2c_ssd1306_clear_line+0xf2>
 8005f16:	e7e9      	b.n	8005eec <i2c_ssd1306_clear_line+0xd4>
 8005f18:	4634      	mov	r4, r6
 8005f1a:	e7bd      	b.n	8005e98 <i2c_ssd1306_clear_line+0x80>
 8005f1c:	08012e0c 	.word	0x08012e0c
 8005f20:	20002830 	.word	0x20002830
 8005f24:	20000073 	.word	0x20000073
 8005f28:	20000180 	.word	0x20000180
 8005f2c:	20007aa8 	.word	0x20007aa8
 8005f30:	20000138 	.word	0x20000138
 8005f34:	200003e5 	.word	0x200003e5

08005f38 <i2c_ssd1306_clear_lines>:
//-----------------------------------------------------------------------------------------
void i2c_ssd1306_clear_lines(uint8_t sline, uint8_t eline)
{
 8005f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	b0a4      	sub	sp, #144	; 0x90
 8005f3e:	4604      	mov	r4, r0
 8005f40:	460e      	mov	r6, r1
uint8_t i, dat[] = {OLED_CONTROL_BYTE_CMD_SINGLE, 0};
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
HAL_StatusTypeDef rt = HAL_OK;
uint8_t zero[BUF_LINE_SIZE + 1] = {0};
 8005f48:	2500      	movs	r5, #0
 8005f4a:	9502      	str	r5, [sp, #8]
 8005f4c:	227d      	movs	r2, #125	; 0x7d
 8005f4e:	4629      	mov	r1, r5
 8005f50:	a803      	add	r0, sp, #12
 8005f52:	f007 fef5 	bl	800dd40 <memset>
uint8_t dma = oled_withDMA;
 8005f56:	4b33      	ldr	r3, [pc, #204]	; (8006024 <i2c_ssd1306_clear_lines+0xec>)
 8005f58:	781f      	ldrb	r7, [r3, #0]

	i2cRdy = 0;
 8005f5a:	4b33      	ldr	r3, [pc, #204]	; (8006028 <i2c_ssd1306_clear_lines+0xf0>)
 8005f5c:	701d      	strb	r5, [r3, #0]

	zero[0] = OLED_CONTROL_BYTE_DATA_STREAM;
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	f88d 3008 	strb.w	r3, [sp, #8]
#ifdef USED_FREERTOS
	if (osSemaphoreAcquire(semHandle, waitSem) == osOK) {
 8005f64:	4b31      	ldr	r3, [pc, #196]	; (800602c <i2c_ssd1306_clear_lines+0xf4>)
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	4b31      	ldr	r3, [pc, #196]	; (8006030 <i2c_ssd1306_clear_lines+0xf8>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	f005 fc44 	bl	800b7f8 <osSemaphoreAcquire>
 8005f70:	b128      	cbz	r0, 8005f7e <i2c_ssd1306_clear_lines+0x46>
		}
#ifdef USED_FREERTOS
		osSemaphoreRelease(semHandle);
	}
#endif
	i2cRdy = 1;
 8005f72:	4b2d      	ldr	r3, [pc, #180]	; (8006028 <i2c_ssd1306_clear_lines+0xf0>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]

	if (rt != HAL_OK) devError |= devI2C;
}
 8005f78:	b024      	add	sp, #144	; 0x90
 8005f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (i = sline - 1; i < eline; i++) {
 8005f7e:	3c01      	subs	r4, #1
 8005f80:	b2e4      	uxtb	r4, r4
HAL_StatusTypeDef rt = HAL_OK;
 8005f82:	2500      	movs	r5, #0
		for (i = sline - 1; i < eline; i++) {
 8005f84:	e01a      	b.n	8005fbc <i2c_ssd1306_clear_lines+0x84>
				rt  = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,    2, min_wait_ms);
 8005f86:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006034 <i2c_ssd1306_clear_lines+0xfc>
 8005f8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2302      	movs	r3, #2
 8005f92:	aa23      	add	r2, sp, #140	; 0x8c
 8005f94:	2178      	movs	r1, #120	; 0x78
 8005f96:	f8d8 0000 	ldr.w	r0, [r8]
 8005f9a:	f002 f815 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005f9e:	4605      	mov	r5, r0
				rt |= HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, zero, 129, max_wait_ms);
 8005fa0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	2381      	movs	r3, #129	; 0x81
 8005fa8:	aa02      	add	r2, sp, #8
 8005faa:	2178      	movs	r1, #120	; 0x78
 8005fac:	f8d8 0000 	ldr.w	r0, [r8]
 8005fb0:	f002 f80a 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005fb4:	4305      	orrs	r5, r0
 8005fb6:	b2ed      	uxtb	r5, r5
		for (i = sline - 1; i < eline; i++) {
 8005fb8:	3401      	adds	r4, #1
 8005fba:	b2e4      	uxtb	r4, r4
 8005fbc:	42b4      	cmp	r4, r6
 8005fbe:	d222      	bcs.n	8006006 <i2c_ssd1306_clear_lines+0xce>
			dat[1] = 0xB0 | i;
 8005fc0:	f064 034f 	orn	r3, r4, #79	; 0x4f
 8005fc4:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
			if (dma) {
 8005fc8:	2f00      	cmp	r7, #0
 8005fca:	d0dc      	beq.n	8005f86 <i2c_ssd1306_clear_lines+0x4e>
				rt  = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,    2, min_wait_ms);
 8005fcc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006034 <i2c_ssd1306_clear_lines+0xfc>
 8005fd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	aa23      	add	r2, sp, #140	; 0x8c
 8005fda:	2178      	movs	r1, #120	; 0x78
 8005fdc:	f8d8 0000 	ldr.w	r0, [r8]
 8005fe0:	f001 fff2 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8005fe4:	4605      	mov	r5, r0
				rt |= HAL_I2C_Master_Transmit_DMA(portOLED, OLED_I2C_ADDRESS, zero, 129);
 8005fe6:	2381      	movs	r3, #129	; 0x81
 8005fe8:	aa02      	add	r2, sp, #8
 8005fea:	2178      	movs	r1, #120	; 0x78
 8005fec:	f8d8 0000 	ldr.w	r0, [r8]
 8005ff0:	f002 f8a6 	bl	8008140 <HAL_I2C_Master_Transmit_DMA>
 8005ff4:	4305      	orrs	r5, r0
 8005ff6:	b2ed      	uxtb	r5, r5
				while (HAL_I2C_GetState(portOLED) != HAL_I2C_STATE_READY) {}
 8005ff8:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <i2c_ssd1306_clear_lines+0xfc>)
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	f003 f805 	bl	800900a <HAL_I2C_GetState>
 8006000:	2820      	cmp	r0, #32
 8006002:	d1f9      	bne.n	8005ff8 <i2c_ssd1306_clear_lines+0xc0>
 8006004:	e7d8      	b.n	8005fb8 <i2c_ssd1306_clear_lines+0x80>
		osSemaphoreRelease(semHandle);
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <i2c_ssd1306_clear_lines+0xf8>)
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f005 fc39 	bl	800b880 <osSemaphoreRelease>
	i2cRdy = 1;
 800600e:	4b06      	ldr	r3, [pc, #24]	; (8006028 <i2c_ssd1306_clear_lines+0xf0>)
 8006010:	2201      	movs	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
	if (rt != HAL_OK) devError |= devI2C;
 8006014:	2d00      	cmp	r5, #0
 8006016:	d0af      	beq.n	8005f78 <i2c_ssd1306_clear_lines+0x40>
 8006018:	4a07      	ldr	r2, [pc, #28]	; (8006038 <i2c_ssd1306_clear_lines+0x100>)
 800601a:	7813      	ldrb	r3, [r2, #0]
 800601c:	f043 0304 	orr.w	r3, r3, #4
 8006020:	7013      	strb	r3, [r2, #0]
}
 8006022:	e7a9      	b.n	8005f78 <i2c_ssd1306_clear_lines+0x40>
 8006024:	20002830 	.word	0x20002830
 8006028:	20000073 	.word	0x20000073
 800602c:	20000180 	.word	0x20000180
 8006030:	20007aa8 	.word	0x20007aa8
 8006034:	20000138 	.word	0x20000138
 8006038:	200003e5 	.word	0x200003e5

0800603c <i2c_ssd1306_pattern>:
    }
}
*/
//-----------------------------------------------------------------------------------------
void i2c_ssd1306_pattern(bool with)
{
 800603c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603e:	b0a5      	sub	sp, #148	; 0x94
 8006040:	4604      	mov	r4, r0
uint8_t i, dat[] = {OLED_CONTROL_BYTE_CMD_SINGLE, 0};
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
uint8_t buf[129] = {0};
 8006048:	2600      	movs	r6, #0
 800604a:	9602      	str	r6, [sp, #8]
 800604c:	227d      	movs	r2, #125	; 0x7d
 800604e:	4631      	mov	r1, r6
 8006050:	a803      	add	r0, sp, #12
 8006052:	f007 fe75 	bl	800dd40 <memset>
HAL_StatusTypeDef rt = HAL_OK;
uint8_t dma = oled_withDMA;
 8006056:	4b37      	ldr	r3, [pc, #220]	; (8006134 <i2c_ssd1306_pattern+0xf8>)
 8006058:	781d      	ldrb	r5, [r3, #0]

	i2cRdy = 0;
 800605a:	4b37      	ldr	r3, [pc, #220]	; (8006138 <i2c_ssd1306_pattern+0xfc>)
 800605c:	701e      	strb	r6, [r3, #0]

	buf[0] = OLED_CONTROL_BYTE_DATA_STREAM;
 800605e:	2340      	movs	r3, #64	; 0x40
 8006060:	f88d 3008 	strb.w	r3, [sp, #8]
	for (i = 1; i < 129; i++) buf[i] = 0xFF >> (i % 8);
 8006064:	2301      	movs	r3, #1
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d80a      	bhi.n	8006080 <i2c_ssd1306_pattern+0x44>
 800606a:	f003 0107 	and.w	r1, r3, #7
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	410a      	asrs	r2, r1
 8006072:	a924      	add	r1, sp, #144	; 0x90
 8006074:	4419      	add	r1, r3
 8006076:	f801 2c88 	strb.w	r2, [r1, #-136]
 800607a:	3301      	adds	r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e7f2      	b.n	8006066 <i2c_ssd1306_pattern+0x2a>
#ifdef USED_FREERTOS
	if (with) {
 8006080:	b924      	cbnz	r4, 800608c <i2c_ssd1306_pattern+0x50>
		if (with) {
		osSemaphoreRelease(semHandle);
	}
		}
#endif
	i2cRdy = 1;
 8006082:	4b2d      	ldr	r3, [pc, #180]	; (8006138 <i2c_ssd1306_pattern+0xfc>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]

	if (rt != HAL_OK) devError |= devI2C;
}
 8006088:	b025      	add	sp, #148	; 0x94
 800608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (osSemaphoreAcquire(semHandle, waitSem) == osOK) {
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <i2c_ssd1306_pattern+0x100>)
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <i2c_ssd1306_pattern+0x104>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	f005 fbb0 	bl	800b7f8 <osSemaphoreAcquire>
HAL_StatusTypeDef rt = HAL_OK;
 8006098:	2600      	movs	r6, #0
		for (i = 0; i < 8; i++) {
 800609a:	4634      	mov	r4, r6
 800609c:	e01b      	b.n	80060d6 <i2c_ssd1306_pattern+0x9a>
				rt |= HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,   2, min_wait_ms);
 800609e:	4f29      	ldr	r7, [pc, #164]	; (8006144 <i2c_ssd1306_pattern+0x108>)
 80060a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	2302      	movs	r3, #2
 80060a8:	aa23      	add	r2, sp, #140	; 0x8c
 80060aa:	2178      	movs	r1, #120	; 0x78
 80060ac:	6838      	ldr	r0, [r7, #0]
 80060ae:	f001 ff8b 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 80060b2:	4306      	orrs	r6, r0
 80060b4:	b2f6      	uxtb	r6, r6
				rt |= HAL_I2C_Master_Transmit_DMA(portOLED, OLED_I2C_ADDRESS, buf, 129);
 80060b6:	2381      	movs	r3, #129	; 0x81
 80060b8:	aa02      	add	r2, sp, #8
 80060ba:	2178      	movs	r1, #120	; 0x78
 80060bc:	6838      	ldr	r0, [r7, #0]
 80060be:	f002 f83f 	bl	8008140 <HAL_I2C_Master_Transmit_DMA>
 80060c2:	4306      	orrs	r6, r0
 80060c4:	b2f6      	uxtb	r6, r6
				while (HAL_I2C_GetState(portOLED) != HAL_I2C_STATE_READY) {}
 80060c6:	4b1f      	ldr	r3, [pc, #124]	; (8006144 <i2c_ssd1306_pattern+0x108>)
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f002 ff9e 	bl	800900a <HAL_I2C_GetState>
 80060ce:	2820      	cmp	r0, #32
 80060d0:	d1f9      	bne.n	80060c6 <i2c_ssd1306_pattern+0x8a>
		for (i = 0; i < 8; i++) {
 80060d2:	3401      	adds	r4, #1
 80060d4:	b2e4      	uxtb	r4, r4
 80060d6:	2c07      	cmp	r4, #7
 80060d8:	d81d      	bhi.n	8006116 <i2c_ssd1306_pattern+0xda>
			dat[1] = 0xB0 | i;
 80060da:	f064 034f 	orn	r3, r4, #79	; 0x4f
 80060de:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
			if (dma) {
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	d1db      	bne.n	800609e <i2c_ssd1306_pattern+0x62>
				rt |= HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat,   2, min_wait_ms);
 80060e6:	4f17      	ldr	r7, [pc, #92]	; (8006144 <i2c_ssd1306_pattern+0x108>)
 80060e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	2302      	movs	r3, #2
 80060f0:	aa23      	add	r2, sp, #140	; 0x8c
 80060f2:	2178      	movs	r1, #120	; 0x78
 80060f4:	6838      	ldr	r0, [r7, #0]
 80060f6:	f001 ff67 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 80060fa:	4306      	orrs	r6, r0
 80060fc:	b2f6      	uxtb	r6, r6
				rt |= HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, buf, 129, max_wait_ms);
 80060fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2381      	movs	r3, #129	; 0x81
 8006106:	aa02      	add	r2, sp, #8
 8006108:	2178      	movs	r1, #120	; 0x78
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f001 ff5c 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8006110:	4306      	orrs	r6, r0
 8006112:	b2f6      	uxtb	r6, r6
 8006114:	e7dd      	b.n	80060d2 <i2c_ssd1306_pattern+0x96>
		osSemaphoreRelease(semHandle);
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <i2c_ssd1306_pattern+0x104>)
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	f005 fbb1 	bl	800b880 <osSemaphoreRelease>
	i2cRdy = 1;
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <i2c_ssd1306_pattern+0xfc>)
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
	if (rt != HAL_OK) devError |= devI2C;
 8006124:	2e00      	cmp	r6, #0
 8006126:	d0af      	beq.n	8006088 <i2c_ssd1306_pattern+0x4c>
 8006128:	4a07      	ldr	r2, [pc, #28]	; (8006148 <i2c_ssd1306_pattern+0x10c>)
 800612a:	7813      	ldrb	r3, [r2, #0]
 800612c:	f043 0304 	orr.w	r3, r3, #4
 8006130:	7013      	strb	r3, [r2, #0]
}
 8006132:	e7a9      	b.n	8006088 <i2c_ssd1306_pattern+0x4c>
 8006134:	20002830 	.word	0x20002830
 8006138:	20000073 	.word	0x20000073
 800613c:	20000180 	.word	0x20000180
 8006140:	20007aa8 	.word	0x20007aa8
 8006144:	20000138 	.word	0x20000138
 8006148:	200003e5 	.word	0x200003e5

0800614c <i2c_ssd1306_text_xy>:
#endif
	if (rt != HAL_OK) devError |= devI2C;
}
//-----------------------------------------------------------------------------------------
void i2c_ssd1306_text_xy(const char *stroka, uint8_t cx, uint8_t cy, bool inv)
{
 800614c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006150:	b089      	sub	sp, #36	; 0x24
 8006152:	4607      	mov	r7, r0
 8006154:	4698      	mov	r8, r3
HAL_StatusTypeDef rt = HAL_OK;
uint8_t i, lin = cy - 1, col = cx - 1;
 8006156:	3a01      	subs	r2, #1
 8006158:	b2d5      	uxtb	r5, r2
 800615a:	3901      	subs	r1, #1
 800615c:	b2cc      	uxtb	r4, r1
int len = strlen(stroka);
 800615e:	f7fa f849 	bl	80001f4 <strlen>
 8006162:	4606      	mov	r6, r0
uint8_t dat[] = {OLED_CONTROL_BYTE_CMD_STREAM, 0, 0x10, 0};
 8006164:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006168:	9307      	str	r3, [sp, #28]
uint8_t cif[] = {OLED_CONTROL_BYTE_DATA_STREAM, 0, 0, 0, 0, 0, 0, 0, 0};
 800616a:	4a42      	ldr	r2, [pc, #264]	; (8006274 <i2c_ssd1306_text_xy+0x128>)
 800616c:	ab04      	add	r3, sp, #16
 800616e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006170:	c303      	stmia	r3!, {r0, r1}
 8006172:	701a      	strb	r2, [r3, #0]
uint8_t first[] = {
 8006174:	2300      	movs	r3, #0
 8006176:	f88d 3008 	strb.w	r3, [sp, #8]
 800617a:	2221      	movs	r2, #33	; 0x21
 800617c:	f88d 2009 	strb.w	r2, [sp, #9]
	OLED_CONTROL_BYTE_CMD_STREAM,
	OLED_CMD_SET_COLUMN_RANGE,
	col << 3,
 8006180:	00e4      	lsls	r4, r4, #3
uint8_t first[] = {
 8006182:	f88d 400a 	strb.w	r4, [sp, #10]
 8006186:	227f      	movs	r2, #127	; 0x7f
 8006188:	f88d 200b 	strb.w	r2, [sp, #11]
 800618c:	2222      	movs	r2, #34	; 0x22
 800618e:	f88d 200c 	strb.w	r2, [sp, #12]
 8006192:	f88d 500d 	strb.w	r5, [sp, #13]
 8006196:	2207      	movs	r2, #7
 8006198:	f88d 200e 	strb.w	r2, [sp, #14]
	lin,
	7
};
	uint8_t dma = 0;//oled_withDMA;

	i2cRdy = 0;
 800619c:	4a36      	ldr	r2, [pc, #216]	; (8006278 <i2c_ssd1306_text_xy+0x12c>)
 800619e:	7013      	strb	r3, [r2, #0]
#ifdef USED_FREERTOS
	if (osSemaphoreAcquire(semHandle, waitSem) == osOK) {
 80061a0:	4b36      	ldr	r3, [pc, #216]	; (800627c <i2c_ssd1306_text_xy+0x130>)
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	4b36      	ldr	r3, [pc, #216]	; (8006280 <i2c_ssd1306_text_xy+0x134>)
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	f005 fb26 	bl	800b7f8 <osSemaphoreAcquire>
 80061ac:	b128      	cbz	r0, 80061ba <i2c_ssd1306_text_xy+0x6e>
#ifdef USED_FREERTOS
		osSemaphoreRelease(semHandle);
	}
#endif

	i2cRdy = 1;
 80061ae:	4b32      	ldr	r3, [pc, #200]	; (8006278 <i2c_ssd1306_text_xy+0x12c>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]

	if (rt != HAL_OK) devError |= devI2C;
}
 80061b4:	b009      	add	sp, #36	; 0x24
 80061b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rt = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, first, sizeof(first), min_wait_ms);
 80061ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	2307      	movs	r3, #7
 80061c2:	aa02      	add	r2, sp, #8
 80061c4:	2178      	movs	r1, #120	; 0x78
 80061c6:	482f      	ldr	r0, [pc, #188]	; (8006284 <i2c_ssd1306_text_xy+0x138>)
 80061c8:	6800      	ldr	r0, [r0, #0]
 80061ca:	f001 fefd 	bl	8007fc8 <HAL_I2C_Master_Transmit>
		if (rt == HAL_OK) {
 80061ce:	4681      	mov	r9, r0
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d04d      	beq.n	8006270 <i2c_ssd1306_text_xy+0x124>
		osSemaphoreRelease(semHandle);
 80061d4:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <i2c_ssd1306_text_xy+0x134>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	f005 fb52 	bl	800b880 <osSemaphoreRelease>
	i2cRdy = 1;
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <i2c_ssd1306_text_xy+0x12c>)
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
	if (rt != HAL_OK) devError |= devI2C;
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	d0e5      	beq.n	80061b4 <i2c_ssd1306_text_xy+0x68>
 80061e8:	4a27      	ldr	r2, [pc, #156]	; (8006288 <i2c_ssd1306_text_xy+0x13c>)
 80061ea:	7813      	ldrb	r3, [r2, #0]
 80061ec:	f043 0304 	orr.w	r3, r3, #4
 80061f0:	7013      	strb	r3, [r2, #0]
}
 80061f2:	e7df      	b.n	80061b4 <i2c_ssd1306_text_xy+0x68>
					dat[3] = 0xB0 | ++lin;
 80061f4:	1c6b      	adds	r3, r5, #1
 80061f6:	b2dd      	uxtb	r5, r3
 80061f8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80061fc:	f88d 301f 	strb.w	r3, [sp, #31]
						rt = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, dat, sizeof(dat), min_wait_ms);
 8006200:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2304      	movs	r3, #4
 8006208:	aa07      	add	r2, sp, #28
 800620a:	2178      	movs	r1, #120	; 0x78
 800620c:	481d      	ldr	r0, [pc, #116]	; (8006284 <i2c_ssd1306_text_xy+0x138>)
 800620e:	6800      	ldr	r0, [r0, #0]
 8006210:	f001 feda 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8006214:	4681      	mov	r9, r0
 8006216:	e015      	b.n	8006244 <i2c_ssd1306_text_xy+0xf8>
					if (inv) for (uint8_t j = 1; j < sizeof(cif); j++) cif[j] = ~cif[j];
 8006218:	ab08      	add	r3, sp, #32
 800621a:	1899      	adds	r1, r3, r2
 800621c:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8006220:	43db      	mvns	r3, r3
 8006222:	f801 3c10 	strb.w	r3, [r1, #-16]
 8006226:	3201      	adds	r2, #1
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	2a08      	cmp	r2, #8
 800622c:	d9f4      	bls.n	8006218 <i2c_ssd1306_text_xy+0xcc>
						rt = HAL_I2C_Master_Transmit(portOLED, OLED_I2C_ADDRESS, cif, sizeof(cif), max_wait_ms);
 800622e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2309      	movs	r3, #9
 8006236:	aa04      	add	r2, sp, #16
 8006238:	2178      	movs	r1, #120	; 0x78
 800623a:	4812      	ldr	r0, [pc, #72]	; (8006284 <i2c_ssd1306_text_xy+0x138>)
 800623c:	6800      	ldr	r0, [r0, #0]
 800623e:	f001 fec3 	bl	8007fc8 <HAL_I2C_Master_Transmit>
 8006242:	4681      	mov	r9, r0
			for (i = 0; i < len; i++) {
 8006244:	3401      	adds	r4, #1
 8006246:	b2e4      	uxtb	r4, r4
 8006248:	42b4      	cmp	r4, r6
 800624a:	dac3      	bge.n	80061d4 <i2c_ssd1306_text_xy+0x88>
				if (stroka[i] == '\n') {
 800624c:	5d3b      	ldrb	r3, [r7, r4]
 800624e:	2b0a      	cmp	r3, #10
 8006250:	d0d0      	beq.n	80061f4 <i2c_ssd1306_text_xy+0xa8>
					memcpy(&cif[1], &font8x8[(uint8_t)stroka[i]][0], 8);
 8006252:	4a0e      	ldr	r2, [pc, #56]	; (800628c <i2c_ssd1306_text_xy+0x140>)
 8006254:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006258:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800625c:	684b      	ldr	r3, [r1, #4]
 800625e:	f8cd 2011 	str.w	r2, [sp, #17]
 8006262:	f8cd 3015 	str.w	r3, [sp, #21]
					if (inv) for (uint8_t j = 1; j < sizeof(cif); j++) cif[j] = ~cif[j];
 8006266:	f1b8 0f00 	cmp.w	r8, #0
 800626a:	d0e0      	beq.n	800622e <i2c_ssd1306_text_xy+0xe2>
 800626c:	2201      	movs	r2, #1
 800626e:	e7dc      	b.n	800622a <i2c_ssd1306_text_xy+0xde>
			for (i = 0; i < len; i++) {
 8006270:	4604      	mov	r4, r0
 8006272:	e7e9      	b.n	8006248 <i2c_ssd1306_text_xy+0xfc>
 8006274:	08012e0c 	.word	0x08012e0c
 8006278:	20000073 	.word	0x20000073
 800627c:	20000180 	.word	0x20000180
 8006280:	20007aa8 	.word	0x20007aa8
 8006284:	20000138 	.word	0x20000138
 8006288:	200003e5 	.word	0x200003e5
 800628c:	08011c98 	.word	0x08011c98

08006290 <mkLineCenter>:

	return ret;
}
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	4605      	mov	r5, r0
 8006296:	460e      	mov	r6, r1
char st[32] = {0};

	memset(st, 0x20, 32);
 8006298:	2220      	movs	r2, #32
 800629a:	4611      	mov	r1, r2
 800629c:	4668      	mov	r0, sp
 800629e:	f007 fd4f 	bl	800dd40 <memset>
	uint8_t slen = OLED_WIDTH / width;
 80062a2:	2480      	movs	r4, #128	; 0x80
 80062a4:	fb94 f4f6 	sdiv	r4, r4, r6
 80062a8:	b2e6      	uxtb	r6, r4
	uint8_t k = strlen(str);
 80062aa:	4628      	mov	r0, r5
 80062ac:	f7f9 ffa2 	bl	80001f4 <strlen>
 80062b0:	b2c3      	uxtb	r3, r0
	if (k < slen) {
 80062b2:	429e      	cmp	r6, r3
 80062b4:	d802      	bhi.n	80062bc <mkLineCenter+0x2c>
		st[slen] = '\0';
		strcpy(str, st);
	}

	return str;
}
 80062b6:	4628      	mov	r0, r5
 80062b8:	b008      	add	sp, #32
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t n = (slen - k) >> 1;
 80062bc:	461a      	mov	r2, r3
 80062be:	1ae4      	subs	r4, r4, r3
		memcpy((char *)&st[n], (char *)str, k);
 80062c0:	f3c4 0447 	ubfx	r4, r4, #1, #8
 80062c4:	4629      	mov	r1, r5
 80062c6:	eb0d 0004 	add.w	r0, sp, r4
 80062ca:	f007 fd2b 	bl	800dd24 <memcpy>
		st[slen] = '\0';
 80062ce:	ab08      	add	r3, sp, #32
 80062d0:	441e      	add	r6, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	f806 3c20 	strb.w	r3, [r6, #-32]
		strcpy(str, st);
 80062d8:	4669      	mov	r1, sp
 80062da:	4628      	mov	r0, r5
 80062dc:	f008 f8c5 	bl	800e46a <strcpy>
 80062e0:	e7e9      	b.n	80062b6 <mkLineCenter+0x26>
	...

080062e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062e4:	b500      	push	{lr}
 80062e6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062e8:	2200      	movs	r2, #0
 80062ea:	9200      	str	r2, [sp, #0]
 80062ec:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <HAL_MspInit+0x40>)
 80062ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80062f0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80062f4:	6459      	str	r1, [r3, #68]	; 0x44
 80062f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80062f8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80062fc:	9100      	str	r1, [sp, #0]
 80062fe:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006304:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006308:	6419      	str	r1, [r3, #64]	; 0x40
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006314:	210f      	movs	r1, #15
 8006316:	f06f 0001 	mvn.w	r0, #1
 800631a:	f000 ff11 	bl	8007140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800631e:	b003      	add	sp, #12
 8006320:	f85d fb04 	ldr.w	pc, [sp], #4
 8006324:	40023800 	.word	0x40023800

08006328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800632c:	2300      	movs	r3, #0
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	9306      	str	r3, [sp, #24]
 8006336:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8006338:	6802      	ldr	r2, [r0, #0]
 800633a:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <HAL_I2C_MspInit+0xc0>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006340:	b008      	add	sp, #32
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006346:	2500      	movs	r5, #0
 8006348:	9501      	str	r5, [sp, #4]
 800634a:	4e28      	ldr	r6, [pc, #160]	; (80063ec <HAL_I2C_MspInit+0xc4>)
 800634c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	6333      	str	r3, [r6, #48]	; 0x30
 8006354:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800635e:	23c0      	movs	r3, #192	; 0xc0
 8006360:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006362:	2312      	movs	r3, #18
 8006364:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006366:	2301      	movs	r3, #1
 8006368:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800636a:	2303      	movs	r3, #3
 800636c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800636e:	2304      	movs	r3, #4
 8006370:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006372:	a903      	add	r1, sp, #12
 8006374:	481e      	ldr	r0, [pc, #120]	; (80063f0 <HAL_I2C_MspInit+0xc8>)
 8006376:	f001 f947 	bl	8007608 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800637a:	9502      	str	r5, [sp, #8]
 800637c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800637e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006382:	6433      	str	r3, [r6, #64]	; 0x40
 8006384:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8006386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800638e:	4819      	ldr	r0, [pc, #100]	; (80063f4 <HAL_I2C_MspInit+0xcc>)
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <HAL_I2C_MspInit+0xd0>)
 8006392:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006398:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800639a:	2340      	movs	r3, #64	; 0x40
 800639c:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800639e:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a4:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063a6:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063a8:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80063aa:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80063ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063b0:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063b2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80063b4:	f000 ff86 	bl	80072c4 <HAL_DMA_Init>
 80063b8:	b998      	cbnz	r0, 80063e2 <HAL_I2C_MspInit+0xba>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <HAL_I2C_MspInit+0xcc>)
 80063bc:	6363      	str	r3, [r4, #52]	; 0x34
 80063be:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80063c0:	2200      	movs	r2, #0
 80063c2:	2105      	movs	r1, #5
 80063c4:	201f      	movs	r0, #31
 80063c6:	f000 febb 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80063ca:	201f      	movs	r0, #31
 80063cc:	f000 feec 	bl	80071a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80063d0:	2200      	movs	r2, #0
 80063d2:	2105      	movs	r1, #5
 80063d4:	2020      	movs	r0, #32
 80063d6:	f000 feb3 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80063da:	2020      	movs	r0, #32
 80063dc:	f000 fee4 	bl	80071a8 <HAL_NVIC_EnableIRQ>
}
 80063e0:	e7ae      	b.n	8006340 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 80063e2:	f7fe fb1d 	bl	8004a20 <Error_Handler>
 80063e6:	e7e8      	b.n	80063ba <HAL_I2C_MspInit+0x92>
 80063e8:	40005400 	.word	0x40005400
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40020400 	.word	0x40020400
 80063f4:	20007ab8 	.word	0x20007ab8
 80063f8:	400260b8 	.word	0x400260b8

080063fc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80063fc:	6802      	ldr	r2, [r0, #0]
 80063fe:	4b04      	ldr	r3, [pc, #16]	; (8006410 <HAL_RTC_MspInit+0x14>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d000      	beq.n	8006406 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006404:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8006406:	4b03      	ldr	r3, [pc, #12]	; (8006414 <HAL_RTC_MspInit+0x18>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
}
 800640c:	e7fa      	b.n	8006404 <HAL_RTC_MspInit+0x8>
 800640e:	bf00      	nop
 8006410:	40002800 	.word	0x40002800
 8006414:	42470e3c 	.word	0x42470e3c

08006418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006418:	b530      	push	{r4, r5, lr}
 800641a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800641c:	2300      	movs	r3, #0
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8006428:	6802      	ldr	r2, [r0, #0]
 800642a:	4b35      	ldr	r3, [pc, #212]	; (8006500 <HAL_SPI_MspInit+0xe8>)
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006430:	b009      	add	sp, #36	; 0x24
 8006432:	bd30      	pop	{r4, r5, pc}
 8006434:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006436:	2500      	movs	r5, #0
 8006438:	9501      	str	r5, [sp, #4]
 800643a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800643e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006440:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
 8006446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006448:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800644c:	9201      	str	r2, [sp, #4]
 800644e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006450:	9502      	str	r5, [sp, #8]
 8006452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	9302      	str	r3, [sp, #8]
 8006462:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006464:	23e0      	movs	r3, #224	; 0xe0
 8006466:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006468:	2302      	movs	r3, #2
 800646a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800646e:	2303      	movs	r3, #3
 8006470:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006472:	2305      	movs	r3, #5
 8006474:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006476:	a903      	add	r1, sp, #12
 8006478:	4822      	ldr	r0, [pc, #136]	; (8006504 <HAL_SPI_MspInit+0xec>)
 800647a:	f001 f8c5 	bl	8007608 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800647e:	4822      	ldr	r0, [pc, #136]	; (8006508 <HAL_SPI_MspInit+0xf0>)
 8006480:	4b22      	ldr	r3, [pc, #136]	; (800650c <HAL_SPI_MspInit+0xf4>)
 8006482:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006484:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006488:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800648e:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006494:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006496:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006498:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800649a:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800649c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80064a0:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064a2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80064a4:	f000 ff0e 	bl	80072c4 <HAL_DMA_Init>
 80064a8:	bb20      	cbnz	r0, 80064f4 <HAL_SPI_MspInit+0xdc>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80064aa:	4b17      	ldr	r3, [pc, #92]	; (8006508 <HAL_SPI_MspInit+0xf0>)
 80064ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80064ae:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80064b0:	4817      	ldr	r0, [pc, #92]	; (8006510 <HAL_SPI_MspInit+0xf8>)
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <HAL_SPI_MspInit+0xfc>)
 80064b4:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80064b6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80064ba:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064bc:	2300      	movs	r3, #0
 80064be:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c0:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064c6:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064c8:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064ca:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80064cc:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80064ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80064d2:	6202      	str	r2, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064d4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80064d6:	f000 fef5 	bl	80072c4 <HAL_DMA_Init>
 80064da:	b970      	cbnz	r0, 80064fa <HAL_SPI_MspInit+0xe2>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80064dc:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <HAL_SPI_MspInit+0xf8>)
 80064de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80064e0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80064e2:	2200      	movs	r2, #0
 80064e4:	2102      	movs	r1, #2
 80064e6:	2023      	movs	r0, #35	; 0x23
 80064e8:	f000 fe2a 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80064ec:	2023      	movs	r0, #35	; 0x23
 80064ee:	f000 fe5b 	bl	80071a8 <HAL_NVIC_EnableIRQ>
}
 80064f2:	e79d      	b.n	8006430 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 80064f4:	f7fe fa94 	bl	8004a20 <Error_Handler>
 80064f8:	e7d7      	b.n	80064aa <HAL_SPI_MspInit+0x92>
      Error_Handler();
 80064fa:	f7fe fa91 	bl	8004a20 <Error_Handler>
 80064fe:	e7ed      	b.n	80064dc <HAL_SPI_MspInit+0xc4>
 8006500:	40013000 	.word	0x40013000
 8006504:	40020000 	.word	0x40020000
 8006508:	20007f48 	.word	0x20007f48
 800650c:	40026458 	.word	0x40026458
 8006510:	20007ee8 	.word	0x20007ee8
 8006514:	40026410 	.word	0x40026410

08006518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006518:	b500      	push	{lr}
 800651a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 800651c:	6803      	ldr	r3, [r0, #0]
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_TIM_Base_MspInit+0x68>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d005      	beq.n	8006530 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_TIM_Base_MspInit+0x6c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d016      	beq.n	8006558 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800652a:	b003      	add	sp, #12
 800652c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006530:	2200      	movs	r2, #0
 8006532:	9200      	str	r2, [sp, #0]
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <HAL_TIM_Base_MspInit+0x70>)
 8006536:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006538:	f041 0102 	orr.w	r1, r1, #2
 800653c:	6419      	str	r1, [r3, #64]	; 0x40
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006548:	2101      	movs	r1, #1
 800654a:	201d      	movs	r0, #29
 800654c:	f000 fdf8 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006550:	201d      	movs	r0, #29
 8006552:	f000 fe29 	bl	80071a8 <HAL_NVIC_EnableIRQ>
 8006556:	e7e8      	b.n	800652a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006558:	2100      	movs	r1, #0
 800655a:	9101      	str	r1, [sp, #4]
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <HAL_TIM_Base_MspInit+0x70>)
 800655e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006560:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
 8006566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006570:	460a      	mov	r2, r1
 8006572:	2019      	movs	r0, #25
 8006574:	f000 fde4 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006578:	2019      	movs	r0, #25
 800657a:	f000 fe15 	bl	80071a8 <HAL_NVIC_EnableIRQ>
}
 800657e:	e7d4      	b.n	800652a <HAL_TIM_Base_MspInit+0x12>
 8006580:	40000400 	.word	0x40000400
 8006584:	40014400 	.word	0x40014400
 8006588:	40023800 	.word	0x40023800

0800658c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800658c:	b530      	push	{r4, r5, lr}
 800658e:	b08d      	sub	sp, #52	; 0x34
 8006590:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006592:	2300      	movs	r3, #0
 8006594:	9307      	str	r3, [sp, #28]
 8006596:	9308      	str	r3, [sp, #32]
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	930a      	str	r3, [sp, #40]	; 0x28
 800659c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 800659e:	6803      	ldr	r3, [r0, #0]
 80065a0:	4a64      	ldr	r2, [pc, #400]	; (8006734 <HAL_UART_MspInit+0x1a8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d008      	beq.n	80065b8 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80065a6:	4a64      	ldr	r2, [pc, #400]	; (8006738 <HAL_UART_MspInit+0x1ac>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d04d      	beq.n	8006648 <HAL_UART_MspInit+0xbc>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80065ac:	4a63      	ldr	r2, [pc, #396]	; (800673c <HAL_UART_MspInit+0x1b0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f000 8092 	beq.w	80066d8 <HAL_UART_MspInit+0x14c>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80065b4:	b00d      	add	sp, #52	; 0x34
 80065b6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80065b8:	2500      	movs	r5, #0
 80065ba:	9501      	str	r5, [sp, #4]
 80065bc:	4b60      	ldr	r3, [pc, #384]	; (8006740 <HAL_UART_MspInit+0x1b4>)
 80065be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c0:	f042 0210 	orr.w	r2, r2, #16
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
 80065c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c8:	f002 0210 	and.w	r2, r2, #16
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d0:	9502      	str	r5, [sp, #8]
 80065d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	9302      	str	r3, [sp, #8]
 80065e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80065e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80065e8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ea:	2302      	movs	r3, #2
 80065ec:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ee:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065f0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80065f2:	2307      	movs	r3, #7
 80065f4:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f6:	a907      	add	r1, sp, #28
 80065f8:	4852      	ldr	r0, [pc, #328]	; (8006744 <HAL_UART_MspInit+0x1b8>)
 80065fa:	f001 f805 	bl	8007608 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80065fe:	4852      	ldr	r0, [pc, #328]	; (8006748 <HAL_UART_MspInit+0x1bc>)
 8006600:	4b52      	ldr	r3, [pc, #328]	; (800674c <HAL_UART_MspInit+0x1c0>)
 8006602:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006608:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800660e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006614:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006616:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006618:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800661a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800661c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006620:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006622:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006624:	f000 fe4e 	bl	80072c4 <HAL_DMA_Init>
 8006628:	b958      	cbnz	r0, 8006642 <HAL_UART_MspInit+0xb6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800662a:	4b47      	ldr	r3, [pc, #284]	; (8006748 <HAL_UART_MspInit+0x1bc>)
 800662c:	6323      	str	r3, [r4, #48]	; 0x30
 800662e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8006630:	2200      	movs	r2, #0
 8006632:	2104      	movs	r1, #4
 8006634:	2025      	movs	r0, #37	; 0x25
 8006636:	f000 fd83 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800663a:	2025      	movs	r0, #37	; 0x25
 800663c:	f000 fdb4 	bl	80071a8 <HAL_NVIC_EnableIRQ>
 8006640:	e7b8      	b.n	80065b4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8006642:	f7fe f9ed 	bl	8004a20 <Error_Handler>
 8006646:	e7f0      	b.n	800662a <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006648:	2500      	movs	r5, #0
 800664a:	9503      	str	r5, [sp, #12]
 800664c:	4b3c      	ldr	r3, [pc, #240]	; (8006740 <HAL_UART_MspInit+0x1b4>)
 800664e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006650:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
 8006656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006658:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800665c:	9203      	str	r2, [sp, #12]
 800665e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006660:	9504      	str	r5, [sp, #16]
 8006662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006674:	230c      	movs	r3, #12
 8006676:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006678:	2302      	movs	r3, #2
 800667a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667c:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800667e:	2303      	movs	r3, #3
 8006680:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006682:	2307      	movs	r3, #7
 8006684:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006686:	a907      	add	r1, sp, #28
 8006688:	482e      	ldr	r0, [pc, #184]	; (8006744 <HAL_UART_MspInit+0x1b8>)
 800668a:	f000 ffbd 	bl	8007608 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800668e:	4830      	ldr	r0, [pc, #192]	; (8006750 <HAL_UART_MspInit+0x1c4>)
 8006690:	4b30      	ldr	r3, [pc, #192]	; (8006754 <HAL_UART_MspInit+0x1c8>)
 8006692:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006698:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800669e:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066a4:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066a6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066a8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80066aa:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80066ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066b0:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066b2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80066b4:	f000 fe06 	bl	80072c4 <HAL_DMA_Init>
 80066b8:	b958      	cbnz	r0, 80066d2 <HAL_UART_MspInit+0x146>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_UART_MspInit+0x1c4>)
 80066bc:	6323      	str	r3, [r4, #48]	; 0x30
 80066be:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80066c0:	2200      	movs	r2, #0
 80066c2:	2103      	movs	r1, #3
 80066c4:	2026      	movs	r0, #38	; 0x26
 80066c6:	f000 fd3b 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80066ca:	2026      	movs	r0, #38	; 0x26
 80066cc:	f000 fd6c 	bl	80071a8 <HAL_NVIC_EnableIRQ>
 80066d0:	e770      	b.n	80065b4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80066d2:	f7fe f9a5 	bl	8004a20 <Error_Handler>
 80066d6:	e7f0      	b.n	80066ba <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80066d8:	2400      	movs	r4, #0
 80066da:	9405      	str	r4, [sp, #20]
 80066dc:	4b18      	ldr	r3, [pc, #96]	; (8006740 <HAL_UART_MspInit+0x1b4>)
 80066de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e0:	f042 0220 	orr.w	r2, r2, #32
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
 80066e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e8:	f002 0220 	and.w	r2, r2, #32
 80066ec:	9205      	str	r2, [sp, #20]
 80066ee:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f0:	9406      	str	r4, [sp, #24]
 80066f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f4:	f042 0201 	orr.w	r2, r2, #1
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	9306      	str	r3, [sp, #24]
 8006702:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8006704:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006708:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670a:	2302      	movs	r3, #2
 800670c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006710:	2301      	movs	r3, #1
 8006712:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006714:	2308      	movs	r3, #8
 8006716:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006718:	a907      	add	r1, sp, #28
 800671a:	480a      	ldr	r0, [pc, #40]	; (8006744 <HAL_UART_MspInit+0x1b8>)
 800671c:	f000 ff74 	bl	8007608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006720:	4622      	mov	r2, r4
 8006722:	2105      	movs	r1, #5
 8006724:	2047      	movs	r0, #71	; 0x47
 8006726:	f000 fd0b 	bl	8007140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800672a:	2047      	movs	r0, #71	; 0x47
 800672c:	f000 fd3c 	bl	80071a8 <HAL_NVIC_EnableIRQ>
}
 8006730:	e740      	b.n	80065b4 <HAL_UART_MspInit+0x28>
 8006732:	bf00      	nop
 8006734:	40011000 	.word	0x40011000
 8006738:	40004400 	.word	0x40004400
 800673c:	40011400 	.word	0x40011400
 8006740:	40023800 	.word	0x40023800
 8006744:	40020000 	.word	0x40020000
 8006748:	20007c40 	.word	0x20007c40
 800674c:	400264b8 	.word	0x400264b8
 8006750:	20007ca0 	.word	0x20007ca0
 8006754:	400260a0 	.word	0x400260a0

08006758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006758:	b510      	push	{r4, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800675e:	2200      	movs	r2, #0
 8006760:	2019      	movs	r0, #25
 8006762:	f000 fced 	bl	8007140 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006766:	2019      	movs	r0, #25
 8006768:	f000 fd1e 	bl	80071a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800676c:	2400      	movs	r4, #0
 800676e:	9401      	str	r4, [sp, #4]
 8006770:	4b13      	ldr	r3, [pc, #76]	; (80067c0 <HAL_InitTick+0x68>)
 8006772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	645a      	str	r2, [r3, #68]	; 0x44
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006784:	a902      	add	r1, sp, #8
 8006786:	a803      	add	r0, sp, #12
 8006788:	f002 ff5e 	bl	8009648 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800678c:	f002 ff4c 	bl	8009628 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_InitTick+0x6c>)
 8006792:	fba3 2300 	umull	r2, r3, r3, r0
 8006796:	0c9b      	lsrs	r3, r3, #18
 8006798:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800679a:	480b      	ldr	r0, [pc, #44]	; (80067c8 <HAL_InitTick+0x70>)
 800679c:	4a0b      	ldr	r2, [pc, #44]	; (80067cc <HAL_InitTick+0x74>)
 800679e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80067a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067a4:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80067a6:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80067a8:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067aa:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80067ac:	f004 f972 	bl	800aa94 <HAL_TIM_Base_Init>
 80067b0:	b110      	cbz	r0, 80067b8 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 80067b2:	2001      	movs	r0, #1
}
 80067b4:	b008      	add	sp, #32
 80067b6:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 80067b8:	4803      	ldr	r0, [pc, #12]	; (80067c8 <HAL_InitTick+0x70>)
 80067ba:	f004 f84a 	bl	800a852 <HAL_TIM_Base_Start_IT>
 80067be:	e7f9      	b.n	80067b4 <HAL_InitTick+0x5c>
 80067c0:	40023800 	.word	0x40023800
 80067c4:	431bde83 	.word	0x431bde83
 80067c8:	20007fa8 	.word	0x20007fa8
 80067cc:	40010000 	.word	0x40010000

080067d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80067d0:	e7fe      	b.n	80067d0 <NMI_Handler>

080067d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067d2:	e7fe      	b.n	80067d2 <HardFault_Handler>

080067d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067d4:	e7fe      	b.n	80067d4 <MemManage_Handler>

080067d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067d6:	e7fe      	b.n	80067d6 <BusFault_Handler>

080067d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067d8:	e7fe      	b.n	80067d8 <UsageFault_Handler>

080067da <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067da:	4770      	bx	lr

080067dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80067dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80067de:	4802      	ldr	r0, [pc, #8]	; (80067e8 <DMA1_Stream6_IRQHandler+0xc>)
 80067e0:	f000 fe1e 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80067e4:	bd08      	pop	{r3, pc}
 80067e6:	bf00      	nop
 80067e8:	20007ca0 	.word	0x20007ca0

080067ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80067ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80067ee:	4803      	ldr	r0, [pc, #12]	; (80067fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80067f0:	f004 f844 	bl	800a87c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80067f4:	4802      	ldr	r0, [pc, #8]	; (8006800 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80067f6:	f004 f841 	bl	800a87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80067fa:	bd08      	pop	{r3, pc}
 80067fc:	20007fa8 	.word	0x20007fa8
 8006800:	20007b6c 	.word	0x20007b6c

08006804 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006806:	4802      	ldr	r0, [pc, #8]	; (8006810 <TIM3_IRQHandler+0xc>)
 8006808:	f004 f838 	bl	800a87c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800680c:	bd08      	pop	{r3, pc}
 800680e:	bf00      	nop
 8006810:	20007c00 	.word	0x20007c00

08006814 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006814:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006816:	4802      	ldr	r0, [pc, #8]	; (8006820 <I2C1_EV_IRQHandler+0xc>)
 8006818:	f002 fac8 	bl	8008dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800681c:	bd08      	pop	{r3, pc}
 800681e:	bf00      	nop
 8006820:	20007b18 	.word	0x20007b18

08006824 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006826:	4802      	ldr	r0, [pc, #8]	; (8006830 <I2C1_ER_IRQHandler+0xc>)
 8006828:	f002 fb8d 	bl	8008f46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800682c:	bd08      	pop	{r3, pc}
 800682e:	bf00      	nop
 8006830:	20007b18 	.word	0x20007b18

08006834 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006834:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006836:	4802      	ldr	r0, [pc, #8]	; (8006840 <SPI1_IRQHandler+0xc>)
 8006838:	f003 ff32 	bl	800a6a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800683c:	bd08      	pop	{r3, pc}
 800683e:	bf00      	nop
 8006840:	20007e48 	.word	0x20007e48

08006844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006846:	4802      	ldr	r0, [pc, #8]	; (8006850 <USART1_IRQHandler+0xc>)
 8006848:	f004 fc80 	bl	800b14c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800684c:	bd08      	pop	{r3, pc}
 800684e:	bf00      	nop
 8006850:	20007d00 	.word	0x20007d00

08006854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006856:	4802      	ldr	r0, [pc, #8]	; (8006860 <USART2_IRQHandler+0xc>)
 8006858:	f004 fc78 	bl	800b14c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800685c:	bd08      	pop	{r3, pc}
 800685e:	bf00      	nop
 8006860:	20007ea8 	.word	0x20007ea8

08006864 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006866:	4802      	ldr	r0, [pc, #8]	; (8006870 <DMA1_Stream7_IRQHandler+0xc>)
 8006868:	f000 fdda 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800686c:	bd08      	pop	{r3, pc}
 800686e:	bf00      	nop
 8006870:	20007ab8 	.word	0x20007ab8

08006874 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006876:	4802      	ldr	r0, [pc, #8]	; (8006880 <DMA2_Stream0_IRQHandler+0xc>)
 8006878:	f000 fdd2 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800687c:	bd08      	pop	{r3, pc}
 800687e:	bf00      	nop
 8006880:	20007ee8 	.word	0x20007ee8

08006884 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006886:	4802      	ldr	r0, [pc, #8]	; (8006890 <DMA2_Stream3_IRQHandler+0xc>)
 8006888:	f000 fdca 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800688c:	bd08      	pop	{r3, pc}
 800688e:	bf00      	nop
 8006890:	20007f48 	.word	0x20007f48

08006894 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006896:	4802      	ldr	r0, [pc, #8]	; (80068a0 <DMA2_Stream7_IRQHandler+0xc>)
 8006898:	f000 fdc2 	bl	8007420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800689c:	bd08      	pop	{r3, pc}
 800689e:	bf00      	nop
 80068a0:	20007c40 	.word	0x20007c40

080068a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80068a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80068a6:	4802      	ldr	r0, [pc, #8]	; (80068b0 <USART6_IRQHandler+0xc>)
 80068a8:	f004 fc50 	bl	800b14c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80068ac:	bd08      	pop	{r3, pc}
 80068ae:	bf00      	nop
 80068b0:	20007e08 	.word	0x20007e08

080068b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80068b4:	2001      	movs	r0, #1
 80068b6:	4770      	bx	lr

080068b8 <_kill>:

int _kill(int pid, int sig)
{
 80068b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80068ba:	f007 f949 	bl	800db50 <__errno>
 80068be:	2316      	movs	r3, #22
 80068c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c6:	bd08      	pop	{r3, pc}

080068c8 <_exit>:

void _exit (int status)
{
 80068c8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80068ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068ce:	f7ff fff3 	bl	80068b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80068d2:	e7fe      	b.n	80068d2 <_exit+0xa>

080068d4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80068d4:	b508      	push	{r3, lr}
 80068d6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80068d8:	4a0b      	ldr	r2, [pc, #44]	; (8006908 <_sbrk+0x34>)
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	b142      	cbz	r2, 80068f0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80068de:	4a0a      	ldr	r2, [pc, #40]	; (8006908 <_sbrk+0x34>)
 80068e0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80068e2:	4403      	add	r3, r0
 80068e4:	466a      	mov	r2, sp
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d806      	bhi.n	80068f8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80068ea:	4a07      	ldr	r2, [pc, #28]	; (8006908 <_sbrk+0x34>)
 80068ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80068ee:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80068f0:	4a05      	ldr	r2, [pc, #20]	; (8006908 <_sbrk+0x34>)
 80068f2:	4906      	ldr	r1, [pc, #24]	; (800690c <_sbrk+0x38>)
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	e7f2      	b.n	80068de <_sbrk+0xa>
		errno = ENOMEM;
 80068f8:	f007 f92a 	bl	800db50 <__errno>
 80068fc:	230c      	movs	r3, #12
 80068fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006904:	e7f3      	b.n	80068ee <_sbrk+0x1a>
 8006906:	bf00      	nop
 8006908:	20002834 	.word	0x20002834
 800690c:	2000a0a8 	.word	0x2000a0a8

08006910 <_close>:

int _close(int file)
{
	return -1;
}
 8006910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006914:	4770      	bx	lr

08006916 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800691a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800691c:	2000      	movs	r0, #0
 800691e:	4770      	bx	lr

08006920 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006920:	2001      	movs	r0, #1
 8006922:	4770      	bx	lr

08006924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006924:	2000      	movs	r0, #0
 8006926:	4770      	bx	lr

08006928 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <SystemInit+0x18>)
 800692a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800692e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800693a:	609a      	str	r2, [r3, #8]
#endif
}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	e000ed00 	.word	0xe000ed00

08006944 <W25_SELECT>:

uint8_t w25_withDMA = 0;

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8006944:	b508      	push	{r3, lr}
 8006946:	2200      	movs	r2, #0
 8006948:	2110      	movs	r1, #16
 800694a:	4802      	ldr	r0, [pc, #8]	; (8006954 <W25_SELECT+0x10>)
 800694c:	f000 ff37 	bl	80077be <HAL_GPIO_WritePin>
 8006950:	bd08      	pop	{r3, pc}
 8006952:	bf00      	nop
 8006954:	40020000 	.word	0x40020000

08006958 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8006958:	b508      	push	{r3, lr}
 800695a:	2201      	movs	r2, #1
 800695c:	2110      	movs	r1, #16
 800695e:	4802      	ldr	r0, [pc, #8]	; (8006968 <W25_UNSELECT+0x10>)
 8006960:	f000 ff2d 	bl	80077be <HAL_GPIO_WritePin>
 8006964:	bd08      	pop	{r3, pc}
 8006966:	bf00      	nop
 8006968:	40020000 	.word	0x40020000

0800696c <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 800696c:	b500      	push	{lr}
 800696e:	b087      	sub	sp, #28
 8006970:	f88d 000f 	strb.w	r0, [sp, #15]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 8006974:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	2301      	movs	r3, #1
 800697c:	f10d 0217 	add.w	r2, sp, #23
 8006980:	f10d 010f 	add.w	r1, sp, #15
 8006984:	4804      	ldr	r0, [pc, #16]	; (8006998 <W25qxx_Spi+0x2c>)
 8006986:	6800      	ldr	r0, [r0, #0]
 8006988:	f003 fae8 	bl	8009f5c <HAL_SPI_TransmitReceive>

    return ret;
}
 800698c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006990:	b007      	add	sp, #28
 8006992:	f85d fb04 	ldr.w	pc, [sp], #4
 8006996:	bf00      	nop
 8006998:	20000134 	.word	0x20000134

0800699c <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 800699c:	b508      	push	{r3, lr}
	W25qxx_Delay(100);
 800699e:	2064      	movs	r0, #100	; 0x64
 80069a0:	f000 fba8 	bl	80070f4 <HAL_Delay>

	W25_SELECT();
 80069a4:	f7ff ffce 	bl	8006944 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 80069a8:	2066      	movs	r0, #102	; 0x66
 80069aa:	f7ff ffdf 	bl	800696c <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 80069ae:	2099      	movs	r0, #153	; 0x99
 80069b0:	f7ff ffdc 	bl	800696c <W25qxx_Spi>
	W25_UNSELECT();
 80069b4:	f7ff ffd0 	bl	8006958 <W25_UNSELECT>

	W25qxx_Delay(100);
 80069b8:	2064      	movs	r0, #100	; 0x64
 80069ba:	f000 fb9b 	bl	80070f4 <HAL_Delay>
}
 80069be:	bd08      	pop	{r3, pc}

080069c0 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 80069c0:	b570      	push	{r4, r5, r6, lr}
uint32_t Temp[3] = {0};

    W25_SELECT();//set to 0
 80069c2:	f7ff ffbf 	bl	8006944 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 80069c6:	209f      	movs	r0, #159	; 0x9f
 80069c8:	f7ff ffd0 	bl	800696c <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80069cc:	20a5      	movs	r0, #165	; 0xa5
 80069ce:	f7ff ffcd 	bl	800696c <W25qxx_Spi>
 80069d2:	4606      	mov	r6, r0
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80069d4:	20a5      	movs	r0, #165	; 0xa5
 80069d6:	f7ff ffc9 	bl	800696c <W25qxx_Spi>
 80069da:	4604      	mov	r4, r0
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80069dc:	20a5      	movs	r0, #165	; 0xa5
 80069de:	f7ff ffc5 	bl	800696c <W25qxx_Spi>
 80069e2:	4605      	mov	r5, r0

    W25_UNSELECT();//set to 1
 80069e4:	f7ff ffb8 	bl	8006958 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 80069e8:	0224      	lsls	r4, r4, #8
 80069ea:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 80069ee:	ea45 0004 	orr.w	r0, r5, r4
 80069f2:	bd70      	pop	{r4, r5, r6, pc}

080069f4 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 80069f4:	b510      	push	{r4, lr}
 80069f6:	b082      	sub	sp, #8
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <W25qxx_ReadUniqID+0x3c>)
 80069fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069fe:	9000      	str	r0, [sp, #0]
 8006a00:	f88d 1004 	strb.w	r1, [sp, #4]
    W25_SELECT();
 8006a04:	f7ff ff9e 	bl	8006944 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 8006a08:	4c0a      	ldr	r4, [pc, #40]	; (8006a34 <W25qxx_ReadUniqID+0x40>)
 8006a0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a0e:	2205      	movs	r2, #5
 8006a10:	4669      	mov	r1, sp
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	f003 f9d0 	bl	8009db8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms);
 8006a18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	4906      	ldr	r1, [pc, #24]	; (8006a38 <W25qxx_ReadUniqID+0x44>)
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	f003 fbb7 	bl	800a194 <HAL_SPI_Receive>

    W25_UNSELECT();
 8006a26:	f7ff ff97 	bl	8006958 <W25_UNSELECT>
}
 8006a2a:	b002      	add	sp, #8
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	bf00      	nop
 8006a30:	0801391c 	.word	0x0801391c
 8006a34:	20000134 	.word	0x20000134
 8006a38:	20007a65 	.word	0x20007a65

08006a3c <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8006a3c:	b508      	push	{r3, lr}
    W25_SELECT();
 8006a3e:	f7ff ff81 	bl	8006944 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8006a42:	2006      	movs	r0, #6
 8006a44:	f7ff ff92 	bl	800696c <W25qxx_Spi>

    W25_UNSELECT();
 8006a48:	f7ff ff86 	bl	8006958 <W25_UNSELECT>

    W25qxx_Delay(1);
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f000 fb51 	bl	80070f4 <HAL_Delay>
}
 8006a52:	bd08      	pop	{r3, pc}

08006a54 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4604      	mov	r4, r0
uint8_t status = 0;

    W25_SELECT();
 8006a58:	f7ff ff74 	bl	8006944 <W25_SELECT>

    switch (SelectStatusReg) {
 8006a5c:	2c01      	cmp	r4, #1
 8006a5e:	d00c      	beq.n	8006a7a <W25qxx_ReadStatusRegister+0x26>
 8006a60:	2c02      	cmp	r4, #2
 8006a62:	d018      	beq.n	8006a96 <W25qxx_ReadStatusRegister+0x42>
            W25qxx_Spi(READ_STAT_REG2);
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
            w25qxx.StatusRegister2 = status;
        break;
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8006a64:	2015      	movs	r0, #21
 8006a66:	f7ff ff81 	bl	800696c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006a6a:	20a5      	movs	r0, #165	; 0xa5
 8006a6c:	f7ff ff7e 	bl	800696c <W25qxx_Spi>
 8006a70:	4604      	mov	r4, r0
            w25qxx.StatusRegister3 = status;
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <W25qxx_ReadStatusRegister+0x58>)
 8006a74:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 8006a78:	e009      	b.n	8006a8e <W25qxx_ReadStatusRegister+0x3a>
            W25qxx_Spi(READ_STAT_REG1);
 8006a7a:	2005      	movs	r0, #5
 8006a7c:	f7ff ff76 	bl	800696c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006a80:	20a5      	movs	r0, #165	; 0xa5
 8006a82:	f7ff ff73 	bl	800696c <W25qxx_Spi>
 8006a86:	4604      	mov	r4, r0
            w25qxx.StatusRegister1 = status;
 8006a88:	4b08      	ldr	r3, [pc, #32]	; (8006aac <W25qxx_ReadStatusRegister+0x58>)
 8006a8a:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
        }
    }

    W25_UNSELECT();
 8006a8e:	f7ff ff63 	bl	8006958 <W25_UNSELECT>

    return status;
}
 8006a92:	4620      	mov	r0, r4
 8006a94:	bd10      	pop	{r4, pc}
            W25qxx_Spi(READ_STAT_REG2);
 8006a96:	2035      	movs	r0, #53	; 0x35
 8006a98:	f7ff ff68 	bl	800696c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006a9c:	20a5      	movs	r0, #165	; 0xa5
 8006a9e:	f7ff ff65 	bl	800696c <W25qxx_Spi>
 8006aa2:	4604      	mov	r4, r0
            w25qxx.StatusRegister2 = status;
 8006aa4:	4b01      	ldr	r3, [pc, #4]	; (8006aac <W25qxx_ReadStatusRegister+0x58>)
 8006aa6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
        break;
 8006aaa:	e7f0      	b.n	8006a8e <W25qxx_ReadStatusRegister+0x3a>
 8006aac:	20007a64 	.word	0x20007a64

08006ab0 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8006ab0:	b510      	push	{r4, lr}
    W25qxx_Delay(1);
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	f000 fb1e 	bl	80070f4 <HAL_Delay>

    W25_SELECT();
 8006ab8:	f7ff ff44 	bl	8006944 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8006abc:	2005      	movs	r0, #5
 8006abe:	f7ff ff55 	bl	800696c <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006ac2:	20a5      	movs	r0, #165	; 0xa5
 8006ac4:	f7ff ff52 	bl	800696c <W25qxx_Spi>
 8006ac8:	4c06      	ldr	r4, [pc, #24]	; (8006ae4 <W25qxx_WaitForWriteEnd+0x34>)
 8006aca:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
        W25qxx_Delay(1);
 8006ace:	2001      	movs	r0, #1
 8006ad0:	f000 fb10 	bl	80070f4 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8006ad4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006ad8:	f013 0f01 	tst.w	r3, #1
 8006adc:	d1f1      	bne.n	8006ac2 <W25qxx_WaitForWriteEnd+0x12>

    W25_UNSELECT();
 8006ade:	f7ff ff3b 	bl	8006958 <W25_UNSELECT>
}
 8006ae2:	bd10      	pop	{r4, pc}
 8006ae4:	20007a64 	.word	0x20007a64

08006ae8 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8006ae8:	b530      	push	{r4, r5, lr}
 8006aea:	b087      	sub	sp, #28

	W25qxx_Reset();
 8006aec:	f7ff ff56 	bl	800699c <W25qxx_Reset>


    w25qxx.Lock = 1;
 8006af0:	2501      	movs	r5, #1
 8006af2:	4b35      	ldr	r3, [pc, #212]	; (8006bc8 <W25qxx_Init+0xe0>)
 8006af4:	f883 5026 	strb.w	r5, [r3, #38]	; 0x26
    bool ret = false;

    W25_UNSELECT();
 8006af8:	f7ff ff2e 	bl	8006958 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8006afc:	f7ff ff60 	bl	80069c0 <W25qxx_ReadID>
 8006b00:	b284      	uxth	r4, r0
//#ifdef W25QXX_DEBUG
    Report(NULL, true, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8006b02:	4623      	mov	r3, r4
 8006b04:	4a31      	ldr	r2, [pc, #196]	; (8006bcc <W25qxx_Init+0xe4>)
 8006b06:	4629      	mov	r1, r5
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f7fb f865 	bl	8001bd8 <Report>
//#endif
    id -= 0x4010; if (id > 0x0a) id = 0;
 8006b0e:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8006b12:	3c10      	subs	r4, #16
 8006b14:	2c0a      	cmp	r4, #10
 8006b16:	d900      	bls.n	8006b1a <W25qxx_Init+0x32>
 8006b18:	2400      	movs	r4, #0
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8006b1a:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <W25qxx_Init+0xe0>)
 8006b1c:	701c      	strb	r4, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <W25qxx_Init+0xe8>)
 8006b20:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8006b24:	f8c3 201b 	str.w	r2, [r3, #27]
//#ifdef W25QXX_DEBUG
    Report(NULL, true, "Chip %s\r\n", all_chipID[id]);
 8006b28:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <W25qxx_Init+0xec>)
 8006b2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <W25qxx_Init+0xf0>)
 8006b30:	2101      	movs	r1, #1
 8006b32:	2000      	movs	r0, #0
 8006b34:	f7fb f850 	bl	8001bd8 <Report>
//#endif

    if (id) {
 8006b38:	b934      	cbnz	r4, 8006b48 <W25qxx_Init+0x60>
    bool ret = false;
 8006b3a:	2000      	movs	r0, #0
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8006b3c:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <W25qxx_Init+0xe0>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
}
 8006b44:	b007      	add	sp, #28
 8006b46:	bd30      	pop	{r4, r5, pc}
    	w25qxx.PageSize = 256;
 8006b48:	4c1f      	ldr	r4, [pc, #124]	; (8006bc8 <W25qxx_Init+0xe0>)
 8006b4a:	2500      	movs	r5, #0
 8006b4c:	7265      	strb	r5, [r4, #9]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	72a2      	strb	r2, [r4, #10]
    	w25qxx.SectorSize = 0x1000;
 8006b52:	73e5      	strb	r5, [r4, #15]
 8006b54:	2310      	movs	r3, #16
 8006b56:	7423      	strb	r3, [r4, #16]
 8006b58:	7465      	strb	r5, [r4, #17]
 8006b5a:	74a5      	strb	r5, [r4, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8006b5c:	f8d4 301b 	ldr.w	r3, [r4, #27]
 8006b60:	0119      	lsls	r1, r3, #4
 8006b62:	f8c4 1013 	str.w	r1, [r4, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	0a19      	lsrs	r1, r3, #8
 8006b6a:	f8c4 100b 	str.w	r1, [r4, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8006b6e:	75e5      	strb	r5, [r4, #23]
 8006b70:	7625      	strb	r5, [r4, #24]
 8006b72:	7662      	strb	r2, [r4, #25]
 8006b74:	76a5      	strb	r5, [r4, #26]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8006b76:	0a9b      	lsrs	r3, r3, #10
 8006b78:	f8c4 301f 	str.w	r3, [r4, #31]
    	W25qxx_ReadUniqID();
 8006b7c:	f7ff ff3a 	bl	80069f4 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8006b80:	2001      	movs	r0, #1
 8006b82:	f7ff ff67 	bl	8006a54 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8006b86:	2002      	movs	r0, #2
 8006b88:	f7ff ff64 	bl	8006a54 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8006b8c:	2003      	movs	r0, #3
 8006b8e:	f7ff ff61 	bl	8006a54 <W25qxx_ReadStatusRegister>
    	Report(NULL, false,"\tPage Size:\t%u bytes\r\n"
 8006b92:	f8d4 301f 	ldr.w	r3, [r4, #31]
 8006b96:	9305      	str	r3, [sp, #20]
 8006b98:	f8d4 301b 	ldr.w	r3, [r4, #27]
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	f8d4 3017 	ldr.w	r3, [r4, #23]
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	f8d4 3013 	ldr.w	r3, [r4, #19]
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f8d4 300b 	ldr.w	r3, [r4, #11]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <W25qxx_Init+0xf4>)
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f7fb f80a 	bl	8001bd8 <Report>
    	ret = true;
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	e7b9      	b.n	8006b3c <W25qxx_Init+0x54>
 8006bc8:	20007a64 	.word	0x20007a64
 8006bcc:	08013924 	.word	0x08013924
 8006bd0:	08012e30 	.word	0x08012e30
 8006bd4:	2000018c 	.word	0x2000018c
 8006bd8:	08013948 	.word	0x08013948
 8006bdc:	08013954 	.word	0x08013954

08006be0 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
	return (uint32_t)w25qxx.ID;
}
 8006be0:	4b01      	ldr	r3, [pc, #4]	; (8006be8 <W25qxx_getChipID+0x8>)
 8006be2:	7818      	ldrb	r0, [r3, #0]
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20007a64 	.word	0x20007a64

08006bec <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
	return w25qxx.SectorCount;
}
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <W25qxx_getSectorCount+0x8>)
 8006bee:	f8d3 0013 	ldr.w	r0, [r3, #19]
 8006bf2:	4770      	bx	lr
 8006bf4:	20007a64 	.word	0x20007a64

08006bf8 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
	return w25qxx.SectorSize;
}
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <W25qxx_getSectorSize+0x8>)
 8006bfa:	f8d3 000f 	ldr.w	r0, [r3, #15]
 8006bfe:	4770      	bx	lr
 8006c00:	20007a64 	.word	0x20007a64

08006c04 <W25qxx_getPageSize>:
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
	return w25qxx.PageSize;
}
 8006c04:	4b01      	ldr	r3, [pc, #4]	; (8006c0c <W25qxx_getPageSize+0x8>)
 8006c06:	f8b3 0009 	ldrh.w	r0, [r3, #9]
 8006c0a:	4770      	bx	lr
 8006c0c:	20007a64 	.word	0x20007a64

08006c10 <W25qxx_getBlockSize>:
	return w25qxx.BlockCount;
}
uint32_t W25qxx_getBlockSize()
{
	return w25qxx.BlockSize;
}
 8006c10:	4b01      	ldr	r3, [pc, #4]	; (8006c18 <W25qxx_getBlockSize+0x8>)
 8006c12:	f8d3 0017 	ldr.w	r0, [r3, #23]
 8006c16:	4770      	bx	lr
 8006c18:	20007a64 	.word	0x20007a64

08006c1c <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8006c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	4604      	mov	r4, r0
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006c22:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <W25qxx_EraseSector+0x94>)
 8006c24:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006c28:	b11b      	cbz	r3, 8006c32 <W25qxx_EraseSector+0x16>
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f000 fa62 	bl	80070f4 <HAL_Delay>
 8006c30:	e7f7      	b.n	8006c22 <W25qxx_EraseSector+0x6>

    w25qxx.Lock = 1;
 8006c32:	4d1f      	ldr	r5, [pc, #124]	; (8006cb0 <W25qxx_EraseSector+0x94>)
 8006c34:	2601      	movs	r6, #1
 8006c36:	f885 6026 	strb.w	r6, [r5, #38]	; 0x26

//#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
 8006c3a:	f000 fa55 	bl	80070e8 <HAL_GetTick>
 8006c3e:	4607      	mov	r7, r0
    Report(__func__, true, "%u Begin...", SectorAddr);
 8006c40:	4623      	mov	r3, r4
 8006c42:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <W25qxx_EraseSector+0x98>)
 8006c44:	4631      	mov	r1, r6
 8006c46:	481c      	ldr	r0, [pc, #112]	; (8006cb8 <W25qxx_EraseSector+0x9c>)
 8006c48:	f7fa ffc6 	bl	8001bd8 <Report>
//#endif

    W25qxx_WaitForWriteEnd();
 8006c4c:	f7ff ff30 	bl	8006ab0 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8006c50:	f8d5 000f 	ldr.w	r0, [r5, #15]
 8006c54:	fb04 f400 	mul.w	r4, r4, r0
    W25qxx_WriteEnable();
 8006c58:	f7ff fef0 	bl	8006a3c <W25qxx_WriteEnable>

    W25_SELECT();
 8006c5c:	f7ff fe72 	bl	8006944 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8006c60:	2020      	movs	r0, #32
 8006c62:	f7ff fe83 	bl	800696c <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8006c66:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8006c6a:	f7ff fe7f 	bl	800696c <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8006c6e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8006c72:	f7ff fe7b 	bl	800696c <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 8006c76:	b2e0      	uxtb	r0, r4
 8006c78:	f7ff fe78 	bl	800696c <W25qxx_Spi>
    W25_UNSELECT();
 8006c7c:	f7ff fe6c 	bl	8006958 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8006c80:	f7ff ff16 	bl	8006ab0 <W25qxx_WaitForWriteEnd>

//#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
 8006c84:	f000 fa30 	bl	80070e8 <HAL_GetTick>
 8006c88:	1bc3      	subs	r3, r0, r7
    Report(NULL, false, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
 8006c8a:	4a0c      	ldr	r2, [pc, #48]	; (8006cbc <W25qxx_EraseSector+0xa0>)
 8006c8c:	fba2 1203 	umull	r1, r2, r2, r3
 8006c90:	0992      	lsrs	r2, r2, #6
 8006c92:	9200      	str	r2, [sp, #0]
 8006c94:	4a0a      	ldr	r2, [pc, #40]	; (8006cc0 <W25qxx_EraseSector+0xa4>)
 8006c96:	2100      	movs	r1, #0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	f7fa ff9d 	bl	8001bd8 <Report>
//#endif
    W25qxx_Delay(1);
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f000 fa28 	bl	80070f4 <HAL_Delay>

    w25qxx.Lock = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
}
 8006caa:	b003      	add	sp, #12
 8006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20007a64 	.word	0x20007a64
 8006cb4:	08013a14 	.word	0x08013a14
 8006cb8:	08012e70 	.word	0x08012e70
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	080139f4 	.word	0x080139f4

08006cc4 <W25qxx_SectorToPage>:
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <W25qxx_SectorToPage+0x14>)
 8006cc6:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006cca:	fb00 f002 	mul.w	r0, r0, r2
 8006cce:	f8b3 3009 	ldrh.w	r3, [r3, #9]
}
 8006cd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8006cd6:	4770      	bx	lr
 8006cd8:	20007a64 	.word	0x20007a64

08006cdc <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	b088      	sub	sp, #32
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	460e      	mov	r6, r1
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006ce6:	4b3d      	ldr	r3, [pc, #244]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006ce8:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
 8006cec:	b11c      	cbz	r4, 8006cf6 <W25qxx_IsEmptySector+0x1a>
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f000 fa00 	bl	80070f4 <HAL_Delay>
 8006cf4:	e7f7      	b.n	8006ce6 <W25qxx_IsEmptySector+0xa>

    w25qxx.Lock = 1;
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006cfc:	4637      	mov	r7, r6
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006cfe:	4b37      	ldr	r3, [pc, #220]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006d00:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006d04:	42bb      	cmp	r3, r7
 8006d06:	d92d      	bls.n	8006d64 <W25qxx_IsEmptySector+0x88>

    	W25_SELECT();
 8006d08:	f7ff fe1c 	bl	8006944 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006d0c:	4b33      	ldr	r3, [pc, #204]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006d0e:	f8d3 800f 	ldr.w	r8, [r3, #15]
 8006d12:	fb05 7808 	mla	r8, r5, r8, r7
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8006d16:	2003      	movs	r0, #3
 8006d18:	f7ff fe28 	bl	800696c <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006d1c:	f3c8 4007 	ubfx	r0, r8, #16, #8
 8006d20:	f7ff fe24 	bl	800696c <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006d24:	f3c8 2007 	ubfx	r0, r8, #8, #8
 8006d28:	f7ff fe20 	bl	800696c <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8006d2c:	fa5f f088 	uxtb.w	r0, r8
 8006d30:	f7ff fe1c 	bl	800696c <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8006d34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006d38:	2220      	movs	r2, #32
 8006d3a:	4669      	mov	r1, sp
 8006d3c:	4828      	ldr	r0, [pc, #160]	; (8006de0 <W25qxx_IsEmptySector+0x104>)
 8006d3e:	6800      	ldr	r0, [r0, #0]
 8006d40:	f003 fa28 	bl	800a194 <HAL_SPI_Receive>
        W25_UNSELECT();
 8006d44:	f7ff fe08 	bl	8006958 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006d48:	4623      	mov	r3, r4
 8006d4a:	2b1f      	cmp	r3, #31
 8006d4c:	d808      	bhi.n	8006d60 <W25qxx_IsEmptySector+0x84>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8006d4e:	aa08      	add	r2, sp, #32
 8006d50:	441a      	add	r2, r3
 8006d52:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8006d56:	2aff      	cmp	r2, #255	; 0xff
 8006d58:	d139      	bne.n	8006dce <W25qxx_IsEmptySector+0xf2>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	e7f4      	b.n	8006d4a <W25qxx_IsEmptySector+0x6e>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006d60:	3720      	adds	r7, #32
 8006d62:	e7cc      	b.n	8006cfe <W25qxx_IsEmptySector+0x22>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8006d64:	4433      	add	r3, r6
 8006d66:	f013 0f1f 	tst.w	r3, #31
 8006d6a:	d02a      	beq.n	8006dc2 <W25qxx_IsEmptySector+0xe6>
        i -= sizeof(pBuffer);
 8006d6c:	3f20      	subs	r7, #32
        for( ; i < w25qxx.SectorSize; i++) {
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006d70:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006d74:	42bb      	cmp	r3, r7
 8006d76:	d924      	bls.n	8006dc2 <W25qxx_IsEmptySector+0xe6>

            W25_SELECT();
 8006d78:	f7ff fde4 	bl	8006944 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006d7c:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006d7e:	f8d3 400f 	ldr.w	r4, [r3, #15]
 8006d82:	fb05 7404 	mla	r4, r5, r4, r7
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8006d86:	2003      	movs	r0, #3
 8006d88:	f7ff fdf0 	bl	800696c <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006d8c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8006d90:	f7ff fdec 	bl	800696c <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006d94:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8006d98:	f7ff fde8 	bl	800696c <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8006d9c:	b2e0      	uxtb	r0, r4
 8006d9e:	f7ff fde5 	bl	800696c <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8006da2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006da6:	2201      	movs	r2, #1
 8006da8:	4669      	mov	r1, sp
 8006daa:	480d      	ldr	r0, [pc, #52]	; (8006de0 <W25qxx_IsEmptySector+0x104>)
 8006dac:	6800      	ldr	r0, [r0, #0]
 8006dae:	f003 f9f1 	bl	800a194 <HAL_SPI_Receive>
            W25_UNSELECT();
 8006db2:	f7ff fdd1 	bl	8006958 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8006db6:	f89d 3000 	ldrb.w	r3, [sp]
 8006dba:	2bff      	cmp	r3, #255	; 0xff
 8006dbc:	d107      	bne.n	8006dce <W25qxx_IsEmptySector+0xf2>
        for( ; i < w25qxx.SectorSize; i++) {
 8006dbe:	3701      	adds	r7, #1
 8006dc0:	e7d5      	b.n	8006d6e <W25qxx_IsEmptySector+0x92>
#ifdef W25QXX_DEBUG
    Report(NULL, true, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e003      	b.n	8006dd6 <W25qxx_IsEmptySector+0xfa>
#ifdef W25QXX_DEBUG
    Report(NULL, true, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8006dce:	2000      	movs	r0, #0
 8006dd0:	4b02      	ldr	r3, [pc, #8]	; (8006ddc <W25qxx_IsEmptySector+0x100>)
 8006dd2:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26

    return false;
}
 8006dd6:	b008      	add	sp, #32
 8006dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ddc:	20007a64 	.word	0x20007a64
 8006de0:	20000134 	.word	0x20000134

08006de4 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	4680      	mov	r8, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	4616      	mov	r6, r2
 8006dee:	461d      	mov	r5, r3
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006df0:	4c30      	ldr	r4, [pc, #192]	; (8006eb4 <W25qxx_WritePage+0xd0>)
 8006df2:	f894 4026 	ldrb.w	r4, [r4, #38]	; 0x26
 8006df6:	b11c      	cbz	r4, 8006e00 <W25qxx_WritePage+0x1c>
 8006df8:	2001      	movs	r0, #1
 8006dfa:	f000 f97b 	bl	80070f4 <HAL_Delay>
 8006dfe:	e7f7      	b.n	8006df0 <W25qxx_WritePage+0xc>

    w25qxx.Lock = 1;
 8006e00:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <W25qxx_WritePage+0xd0>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8006e08:	19aa      	adds	r2, r5, r6
 8006e0a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d800      	bhi.n	8006e14 <W25qxx_WritePage+0x30>
 8006e12:	b905      	cbnz	r5, 8006e16 <W25qxx_WritePage+0x32>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006e14:	1b9d      	subs	r5, r3, r6
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8006e16:	19aa      	adds	r2, r5, r6
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d200      	bcs.n	8006e1e <W25qxx_WritePage+0x3a>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006e1c:	1b9d      	subs	r5, r3, r6
    Report(NULL, true, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8006e1e:	f7ff fe47 	bl	8006ab0 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8006e22:	f7ff fe0b 	bl	8006a3c <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8006e26:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <W25qxx_WritePage+0xd0>)
 8006e28:	f8b3 2009 	ldrh.w	r2, [r3, #9]
 8006e2c:	fb07 6602 	mla	r6, r7, r2, r6
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8006e30:	b2af      	uxth	r7, r5
 8006e32:	3704      	adds	r7, #4
 8006e34:	b2bf      	uxth	r7, r7
    int idx = 0;
    pageTmp[idx++] = PAGE_PROG;
 8006e36:	4c20      	ldr	r4, [pc, #128]	; (8006eb8 <W25qxx_WritePage+0xd4>)
 8006e38:	2302      	movs	r3, #2
 8006e3a:	7023      	strb	r3, [r4, #0]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006e3c:	0c33      	lsrs	r3, r6, #16
 8006e3e:	7063      	strb	r3, [r4, #1]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006e40:	0a33      	lsrs	r3, r6, #8
 8006e42:	70a3      	strb	r3, [r4, #2]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006e44:	70e6      	strb	r6, [r4, #3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 8006e46:	462a      	mov	r2, r5
 8006e48:	4641      	mov	r1, r8
 8006e4a:	1d20      	adds	r0, r4, #4
 8006e4c:	f006 ff6a 	bl	800dd24 <memcpy>

    spiRdy = 0;
 8006e50:	4b1a      	ldr	r3, [pc, #104]	; (8006ebc <W25qxx_WritePage+0xd8>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    W25_SELECT();
 8006e5c:	f7ff fd72 	bl	8006944 <W25_SELECT>
    if (w25_withDMA) {
 8006e60:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
 8006e64:	b1b3      	cbz	r3, 8006e94 <W25qxx_WritePage+0xb0>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8006e66:	463a      	mov	r2, r7
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <W25qxx_WritePage+0xdc>)
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f003 fa45 	bl	800a2fc <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <W25qxx_WritePage+0xd8>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b91b      	cbnz	r3, 8006e80 <W25qxx_WritePage+0x9c>
    		W25qxx_Delay(1);
 8006e78:	2001      	movs	r0, #1
 8006e7a:	f000 f93b 	bl	80070f4 <HAL_Delay>
 8006e7e:	e7f8      	b.n	8006e72 <W25qxx_WritePage+0x8e>
    	}
w25_withDMA = 0;
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <W25qxx_WritePage+0xd4>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    	Report(NULL, false, "\r\n");
    	Report(NULL, true, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <W25qxx_WritePage+0xd0>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8006e94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4907      	ldr	r1, [pc, #28]	; (8006eb8 <W25qxx_WritePage+0xd4>)
 8006e9c:	4808      	ldr	r0, [pc, #32]	; (8006ec0 <W25qxx_WritePage+0xdc>)
 8006e9e:	6800      	ldr	r0, [r0, #0]
 8006ea0:	f002 ff8a 	bl	8009db8 <HAL_SPI_Transmit>
    	W25_UNSELECT();
 8006ea4:	f7ff fd58 	bl	8006958 <W25_UNSELECT>
    	W25qxx_WaitForWriteEnd();
 8006ea8:	f7ff fe02 	bl	8006ab0 <W25qxx_WaitForWriteEnd>
    	spiRdy = 1;
 8006eac:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <W25qxx_WritePage+0xd8>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e7e9      	b.n	8006e88 <W25qxx_WritePage+0xa4>
 8006eb4:	20007a64 	.word	0x20007a64
 8006eb8:	2000283c 	.word	0x2000283c
 8006ebc:	20000074 	.word	0x20000074
 8006ec0:	20000134 	.word	0x20000134

08006ec4 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8006ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec8:	4606      	mov	r6, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4690      	mov	r8, r2
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8006ece:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <W25qxx_WriteSector+0x68>)
 8006ed0:	f8d2 500f 	ldr.w	r5, [r2, #15]
 8006ed4:	429d      	cmp	r5, r3
 8006ed6:	d302      	bcc.n	8006ede <W25qxx_WriteSector+0x1a>
 8006ed8:	b913      	cbnz	r3, 8006ee0 <W25qxx_WriteSector+0x1c>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8006eda:	462b      	mov	r3, r5
 8006edc:	e000      	b.n	8006ee0 <W25qxx_WriteSector+0x1c>
 8006ede:	462b      	mov	r3, r5
    Report(NULL, true, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006ee0:	4545      	cmp	r5, r8
 8006ee2:	d91f      	bls.n	8006f24 <W25qxx_WriteSector+0x60>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006ee4:	eb03 0208 	add.w	r2, r3, r8
 8006ee8:	4295      	cmp	r5, r2
 8006eea:	d21d      	bcs.n	8006f28 <W25qxx_WriteSector+0x64>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8006eec:	eba5 0508 	sub.w	r5, r5, r8
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006ef0:	f7ff fee8 	bl	8006cc4 <W25qxx_SectorToPage>
 8006ef4:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <W25qxx_WriteSector+0x68>)
 8006ef6:	f8b3 2009 	ldrh.w	r2, [r3, #9]
 8006efa:	fbb8 f4f2 	udiv	r4, r8, r2
 8006efe:	1907      	adds	r7, r0, r4
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8006f00:	fb02 8414 	mls	r4, r2, r4, r8

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8006f04:	462b      	mov	r3, r5
 8006f06:	4622      	mov	r2, r4
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff ff6a 	bl	8006de4 <W25qxx_WritePage>
        StartPage++;
 8006f10:	3701      	adds	r7, #1
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <W25qxx_WriteSector+0x68>)
 8006f14:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006f18:	1ae4      	subs	r4, r4, r3
 8006f1a:	4425      	add	r5, r4
        pBuffer += w25qxx.PageSize;
 8006f1c:	441e      	add	r6, r3
        LocalOffset = 0;
 8006f1e:	2400      	movs	r4, #0
    } while(BytesToWrite > 0);
 8006f20:	42a5      	cmp	r5, r4
 8006f22:	dcef      	bgt.n	8006f04 <W25qxx_WriteSector+0x40>
#ifdef W25QXX_DEBUG
    Report(NULL, true, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8006f28:	461d      	mov	r5, r3
 8006f2a:	e7e1      	b.n	8006ef0 <W25qxx_WriteSector+0x2c>
 8006f2c:	20007a64 	.word	0x20007a64

08006f30 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	4607      	mov	r7, r0
 8006f38:	4688      	mov	r8, r1
 8006f3a:	4615      	mov	r5, r2
 8006f3c:	461e      	mov	r6, r3
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006f3e:	4c36      	ldr	r4, [pc, #216]	; (8007018 <W25qxx_ReadPage+0xe8>)
 8006f40:	f894 4026 	ldrb.w	r4, [r4, #38]	; 0x26
 8006f44:	b11c      	cbz	r4, 8006f4e <W25qxx_ReadPage+0x1e>
 8006f46:	2001      	movs	r0, #1
 8006f48:	f000 f8d4 	bl	80070f4 <HAL_Delay>
 8006f4c:	e7f7      	b.n	8006f3e <W25qxx_ReadPage+0xe>

    w25qxx.Lock = 1;
 8006f4e:	4b32      	ldr	r3, [pc, #200]	; (8007018 <W25qxx_ReadPage+0xe8>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8006f56:	f8b3 2009 	ldrh.w	r2, [r3, #9]
 8006f5a:	42b2      	cmp	r2, r6
 8006f5c:	d302      	bcc.n	8006f64 <W25qxx_ReadPage+0x34>
 8006f5e:	b916      	cbnz	r6, 8006f66 <W25qxx_ReadPage+0x36>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8006f60:	4616      	mov	r6, r2
 8006f62:	e000      	b.n	8006f66 <W25qxx_ReadPage+0x36>
 8006f64:	4616      	mov	r6, r2
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8006f66:	1973      	adds	r3, r6, r5
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d200      	bcs.n	8006f6e <W25qxx_ReadPage+0x3e>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006f6c:	1b56      	subs	r6, r2, r5
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8006f6e:	fb08 5502 	mla	r5, r8, r2, r5
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8006f72:	4c2a      	ldr	r4, [pc, #168]	; (800701c <W25qxx_ReadPage+0xec>)
 8006f74:	f240 1205 	movw	r2, #261	; 0x105
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f006 fee0 	bl	800dd40 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8006f80:	fa1f f886 	uxth.w	r8, r6
 8006f84:	f108 0804 	add.w	r8, r8, #4
 8006f88:	fa1f f888 	uxth.w	r8, r8
    int idx = 0;
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	7023      	strb	r3, [r4, #0]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006f90:	0c2b      	lsrs	r3, r5, #16
 8006f92:	7063      	strb	r3, [r4, #1]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006f94:	0a2b      	lsrs	r3, r5, #8
 8006f96:	70a3      	strb	r3, [r4, #2]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006f98:	70e5      	strb	r5, [r4, #3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8006f9a:	4b21      	ldr	r3, [pc, #132]	; (8007020 <W25qxx_ReadPage+0xf0>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    W25_SELECT();
 8006fa6:	f7ff fccd 	bl	8006944 <W25_SELECT>
    if (w25_withDMA) {
 8006faa:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
 8006fae:	b1eb      	cbz	r3, 8006fec <W25qxx_ReadPage+0xbc>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4643      	mov	r3, r8
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	481b      	ldr	r0, [pc, #108]	; (8007024 <W25qxx_ReadPage+0xf4>)
 8006fb8:	6800      	ldr	r0, [r0, #0]
 8006fba:	f003 fa09 	bl	800a3d0 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8006fbe:	4a18      	ldr	r2, [pc, #96]	; (8007020 <W25qxx_ReadPage+0xf0>)
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	b91a      	cbnz	r2, 8006fcc <W25qxx_ReadPage+0x9c>
    		W25qxx_Delay(1);
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	f000 f895 	bl	80070f4 <HAL_Delay>
 8006fca:	e7f8      	b.n	8006fbe <W25qxx_ReadPage+0x8e>
    	}
w25_withDMA = 0;
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <W25qxx_ReadPage+0xec>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
    	W25_UNSELECT();

    	spiRdy = 1;
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4914      	ldr	r1, [pc, #80]	; (8007028 <W25qxx_ReadPage+0xf8>)
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f006 fea3 	bl	800dd24 <memcpy>
    	Report(NULL, false, "\r\n");
    	Report(NULL, true, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 8006fde:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <W25qxx_ReadPage+0xe8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006fe6:	b002      	add	sp, #8
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006fec:	490b      	ldr	r1, [pc, #44]	; (800701c <W25qxx_ReadPage+0xec>)
 8006fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4643      	mov	r3, r8
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	480a      	ldr	r0, [pc, #40]	; (8007024 <W25qxx_ReadPage+0xf4>)
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	f002 ffae 	bl	8009f5c <HAL_SPI_TransmitReceive>
 8007000:	b120      	cbz	r0, 800700c <W25qxx_ReadPage+0xdc>
 8007002:	4a0a      	ldr	r2, [pc, #40]	; (800702c <W25qxx_ReadPage+0xfc>)
 8007004:	7813      	ldrb	r3, [r2, #0]
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	7013      	strb	r3, [r2, #0]
    	W25_UNSELECT();
 800700c:	f7ff fca4 	bl	8006958 <W25_UNSELECT>
    	spiRdy = 1;
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <W25qxx_ReadPage+0xf0>)
 8007012:	2201      	movs	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e7dd      	b.n	8006fd4 <W25qxx_ReadPage+0xa4>
 8007018:	20007a64 	.word	0x20007a64
 800701c:	2000283c 	.word	0x2000283c
 8007020:	20000074 	.word	0x20000074
 8007024:	20000134 	.word	0x20000134
 8007028:	20002840 	.word	0x20002840
 800702c:	200003e5 	.word	0x200003e5

08007030 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	4606      	mov	r6, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4690      	mov	r8, r2
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <W25qxx_ReadSector+0x68>)
 800703c:	f8d2 500f 	ldr.w	r5, [r2, #15]
 8007040:	429d      	cmp	r5, r3
 8007042:	d302      	bcc.n	800704a <W25qxx_ReadSector+0x1a>
 8007044:	b913      	cbnz	r3, 800704c <W25qxx_ReadSector+0x1c>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8007046:	462b      	mov	r3, r5
 8007048:	e000      	b.n	800704c <W25qxx_ReadSector+0x1c>
 800704a:	462b      	mov	r3, r5
    Report(NULL, true, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 800704c:	4545      	cmp	r5, r8
 800704e:	d91f      	bls.n	8007090 <W25qxx_ReadSector+0x60>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8007050:	eb03 0208 	add.w	r2, r3, r8
 8007054:	4295      	cmp	r5, r2
 8007056:	d21d      	bcs.n	8007094 <W25qxx_ReadSector+0x64>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8007058:	eba5 0508 	sub.w	r5, r5, r8
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800705c:	f7ff fe32 	bl	8006cc4 <W25qxx_SectorToPage>
 8007060:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <W25qxx_ReadSector+0x68>)
 8007062:	f8b3 2009 	ldrh.w	r2, [r3, #9]
 8007066:	fbb8 f4f2 	udiv	r4, r8, r2
 800706a:	1907      	adds	r7, r0, r4
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800706c:	fb02 8414 	mls	r4, r2, r4, r8
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8007070:	462b      	mov	r3, r5
 8007072:	4622      	mov	r2, r4
 8007074:	4639      	mov	r1, r7
 8007076:	4630      	mov	r0, r6
 8007078:	f7ff ff5a 	bl	8006f30 <W25qxx_ReadPage>
        StartPage++;
 800707c:	3701      	adds	r7, #1
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 800707e:	4b06      	ldr	r3, [pc, #24]	; (8007098 <W25qxx_ReadSector+0x68>)
 8007080:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007084:	1ae4      	subs	r4, r4, r3
 8007086:	4425      	add	r5, r4
        pBuffer += w25qxx.PageSize;
 8007088:	441e      	add	r6, r3
        LocalOffset = 0;
 800708a:	2400      	movs	r4, #0
    } while(BytesToRead > 0);
 800708c:	42a5      	cmp	r5, r4
 800708e:	dcef      	bgt.n	8007070 <W25qxx_ReadSector+0x40>
#ifdef W25QXX_DEBUG
    Report(NULL, true, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8007094:	461d      	mov	r5, r3
 8007096:	e7e1      	b.n	800705c <W25qxx_ReadSector+0x2c>
 8007098:	20007a64 	.word	0x20007a64

0800709c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800709c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <HAL_Init+0x30>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070ae:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070b8:	2003      	movs	r0, #3
 80070ba:	f000 f82f 	bl	800711c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070be:	2000      	movs	r0, #0
 80070c0:	f7ff fb4a 	bl	8006758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070c4:	f7ff f90e 	bl	80062e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80070c8:	2000      	movs	r0, #0
 80070ca:	bd08      	pop	{r3, pc}
 80070cc:	40023c00 	.word	0x40023c00

080070d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80070d0:	4a03      	ldr	r2, [pc, #12]	; (80070e0 <HAL_IncTick+0x10>)
 80070d2:	6811      	ldr	r1, [r2, #0]
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <HAL_IncTick+0x14>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	440b      	add	r3, r1
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20007fe8 	.word	0x20007fe8
 80070e4:	200001b8 	.word	0x200001b8

080070e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <HAL_GetTick+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20007fe8 	.word	0x20007fe8

080070f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80070f8:	f7ff fff6 	bl	80070e8 <HAL_GetTick>
 80070fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070fe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007102:	d002      	beq.n	800710a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <HAL_Delay+0x24>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800710a:	f7ff ffed 	bl	80070e8 <HAL_GetTick>
 800710e:	1b40      	subs	r0, r0, r5
 8007110:	42a0      	cmp	r0, r4
 8007112:	d3fa      	bcc.n	800710a <HAL_Delay+0x16>
  {
  }
}
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	bf00      	nop
 8007118:	200001b8 	.word	0x200001b8

0800711c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800711c:	4a07      	ldr	r2, [pc, #28]	; (800713c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800711e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007120:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007124:	041b      	lsls	r3, r3, #16
 8007126:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007128:	0200      	lsls	r0, r0, #8
 800712a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800712e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8007130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007138:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800713a:	4770      	bx	lr
 800713c:	e000ed00 	.word	0xe000ed00

08007140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007140:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007142:	4b17      	ldr	r3, [pc, #92]	; (80071a0 <HAL_NVIC_SetPriority+0x60>)
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800714a:	f1c3 0407 	rsb	r4, r3, #7
 800714e:	2c04      	cmp	r4, #4
 8007150:	bf28      	it	cs
 8007152:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007154:	1d1d      	adds	r5, r3, #4
 8007156:	2d06      	cmp	r5, #6
 8007158:	d918      	bls.n	800718c <HAL_NVIC_SetPriority+0x4c>
 800715a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800715c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007160:	fa05 f404 	lsl.w	r4, r5, r4
 8007164:	ea21 0104 	bic.w	r1, r1, r4
 8007168:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800716a:	fa05 f303 	lsl.w	r3, r5, r3
 800716e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007172:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007174:	2800      	cmp	r0, #0
 8007176:	db0b      	blt.n	8007190 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007178:	0109      	lsls	r1, r1, #4
 800717a:	b2c9      	uxtb	r1, r1
 800717c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007180:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007184:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007188:	bc30      	pop	{r4, r5}
 800718a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800718c:	2300      	movs	r3, #0
 800718e:	e7e5      	b.n	800715c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007190:	f000 000f 	and.w	r0, r0, #15
 8007194:	0109      	lsls	r1, r1, #4
 8007196:	b2c9      	uxtb	r1, r1
 8007198:	4b02      	ldr	r3, [pc, #8]	; (80071a4 <HAL_NVIC_SetPriority+0x64>)
 800719a:	5419      	strb	r1, [r3, r0]
 800719c:	e7f4      	b.n	8007188 <HAL_NVIC_SetPriority+0x48>
 800719e:	bf00      	nop
 80071a0:	e000ed00 	.word	0xe000ed00
 80071a4:	e000ed14 	.word	0xe000ed14

080071a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80071a8:	2800      	cmp	r0, #0
 80071aa:	db07      	blt.n	80071bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ac:	f000 021f 	and.w	r2, r0, #31
 80071b0:	0940      	lsrs	r0, r0, #5
 80071b2:	2301      	movs	r3, #1
 80071b4:	4093      	lsls	r3, r2
 80071b6:	4a02      	ldr	r2, [pc, #8]	; (80071c0 <HAL_NVIC_EnableIRQ+0x18>)
 80071b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000e100 	.word	0xe000e100

080071c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071c6:	6805      	ldr	r5, [r0, #0]
 80071c8:	682c      	ldr	r4, [r5, #0]
 80071ca:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80071ce:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80071d0:	6804      	ldr	r4, [r0, #0]
 80071d2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071d4:	6883      	ldr	r3, [r0, #8]
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d005      	beq.n	80071e6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80071da:	6803      	ldr	r3, [r0, #0]
 80071dc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80071de:	6803      	ldr	r3, [r0, #0]
 80071e0:	60da      	str	r2, [r3, #12]
  }
}
 80071e2:	bc30      	pop	{r4, r5}
 80071e4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80071e6:	6803      	ldr	r3, [r0, #0]
 80071e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80071ea:	6803      	ldr	r3, [r0, #0]
 80071ec:	60d9      	str	r1, [r3, #12]
 80071ee:	e7f8      	b.n	80071e2 <DMA_SetConfig+0x1e>

080071f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071f0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071f2:	6803      	ldr	r3, [r0, #0]
 80071f4:	b2d9      	uxtb	r1, r3
 80071f6:	3910      	subs	r1, #16
 80071f8:	4a0c      	ldr	r2, [pc, #48]	; (800722c <DMA_CalcBaseAndBitshift+0x3c>)
 80071fa:	fba2 4201 	umull	r4, r2, r2, r1
 80071fe:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007200:	4c0b      	ldr	r4, [pc, #44]	; (8007230 <DMA_CalcBaseAndBitshift+0x40>)
 8007202:	5ca2      	ldrb	r2, [r4, r2]
 8007204:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007206:	295f      	cmp	r1, #95	; 0x5f
 8007208:	d909      	bls.n	800721e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800720a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	3304      	adds	r3, #4
 8007214:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8007216:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8007218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800721c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800721e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	6583      	str	r3, [r0, #88]	; 0x58
 8007228:	e7f5      	b.n	8007216 <DMA_CalcBaseAndBitshift+0x26>
 800722a:	bf00      	nop
 800722c:	aaaaaaab 	.word	0xaaaaaaab
 8007230:	08012e84 	.word	0x08012e84

08007234 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007234:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007236:	6982      	ldr	r2, [r0, #24]
 8007238:	b992      	cbnz	r2, 8007260 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800723a:	2b01      	cmp	r3, #1
 800723c:	d00a      	beq.n	8007254 <DMA_CheckFifoParam+0x20>
 800723e:	2b02      	cmp	r3, #2
 8007240:	d002      	beq.n	8007248 <DMA_CheckFifoParam+0x14>
 8007242:	b10b      	cbz	r3, 8007248 <DMA_CheckFifoParam+0x14>
 8007244:	2000      	movs	r0, #0
 8007246:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007248:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800724a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800724e:	d128      	bne.n	80072a2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8007250:	2000      	movs	r0, #0
 8007252:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007254:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007256:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800725a:	d024      	beq.n	80072a6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800725c:	2000      	movs	r0, #0
 800725e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007260:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007264:	d009      	beq.n	800727a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007266:	2b02      	cmp	r3, #2
 8007268:	d925      	bls.n	80072b6 <DMA_CheckFifoParam+0x82>
 800726a:	2b03      	cmp	r3, #3
 800726c:	d125      	bne.n	80072ba <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800726e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007270:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007274:	d123      	bne.n	80072be <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2000      	movs	r0, #0
 8007278:	4770      	bx	lr
    switch (tmp)
 800727a:	2b03      	cmp	r3, #3
 800727c:	d803      	bhi.n	8007286 <DMA_CheckFifoParam+0x52>
 800727e:	e8df f003 	tbb	[pc, r3]
 8007282:	0414      	.short	0x0414
 8007284:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007286:	2000      	movs	r0, #0
 8007288:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800728a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800728c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007290:	d10d      	bne.n	80072ae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2000      	movs	r0, #0
 8007294:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007296:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800729c:	d009      	beq.n	80072b2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2000      	movs	r0, #0
 80072a0:	4770      	bx	lr
        status = HAL_ERROR;
 80072a2:	2001      	movs	r0, #1
 80072a4:	4770      	bx	lr
        status = HAL_ERROR;
 80072a6:	2001      	movs	r0, #1
 80072a8:	4770      	bx	lr
      status = HAL_ERROR;
 80072aa:	2001      	movs	r0, #1
 80072ac:	4770      	bx	lr
        status = HAL_ERROR;
 80072ae:	2001      	movs	r0, #1
 80072b0:	4770      	bx	lr
        status = HAL_ERROR;
 80072b2:	2001      	movs	r0, #1
 80072b4:	4770      	bx	lr
      status = HAL_ERROR;
 80072b6:	2001      	movs	r0, #1
 80072b8:	4770      	bx	lr
    switch (tmp)
 80072ba:	2000      	movs	r0, #0
 80072bc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80072be:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_DMA_Init>:
{
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072c8:	f7ff ff0e 	bl	80070e8 <HAL_GetTick>
  if(hdma == NULL)
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	d05b      	beq.n	8007388 <HAL_DMA_Init+0xc4>
 80072d0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80072d8:	2302      	movs	r3, #2
 80072da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80072de:	6822      	ldr	r2, [r4, #0]
 80072e0:	6813      	ldr	r3, [r2, #0]
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	f012 0f01 	tst.w	r2, #1
 80072f0:	d00a      	beq.n	8007308 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072f2:	f7ff fef9 	bl	80070e8 <HAL_GetTick>
 80072f6:	1b43      	subs	r3, r0, r5
 80072f8:	2b05      	cmp	r3, #5
 80072fa:	d9f5      	bls.n	80072e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072fc:	2320      	movs	r3, #32
 80072fe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007300:	2003      	movs	r0, #3
 8007302:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8007306:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8007308:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800730a:	4820      	ldr	r0, [pc, #128]	; (800738c <HAL_DMA_Init+0xc8>)
 800730c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800730e:	6861      	ldr	r1, [r4, #4]
 8007310:	68a2      	ldr	r2, [r4, #8]
 8007312:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007314:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007316:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007318:	6921      	ldr	r1, [r4, #16]
 800731a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800731c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800731e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007320:	69a1      	ldr	r1, [r4, #24]
 8007322:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007324:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007326:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007328:	6a21      	ldr	r1, [r4, #32]
 800732a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800732c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800732e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007330:	2904      	cmp	r1, #4
 8007332:	d01e      	beq.n	8007372 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8007334:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8007336:	6826      	ldr	r6, [r4, #0]
 8007338:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800733a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007340:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007342:	2b04      	cmp	r3, #4
 8007344:	d107      	bne.n	8007356 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8007346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007348:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800734a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800734c:	b11b      	cbz	r3, 8007356 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff ff70 	bl	8007234 <DMA_CheckFifoParam>
 8007354:	b990      	cbnz	r0, 800737c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8007356:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff ff49 	bl	80071f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800735e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007360:	233f      	movs	r3, #63	; 0x3f
 8007362:	4093      	lsls	r3, r2
 8007364:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007366:	2000      	movs	r0, #0
 8007368:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800736a:	2301      	movs	r3, #1
 800736c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007370:	e7c9      	b.n	8007306 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007372:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007374:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007376:	4301      	orrs	r1, r0
 8007378:	430a      	orrs	r2, r1
 800737a:	e7db      	b.n	8007334 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007380:	2001      	movs	r0, #1
 8007382:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8007386:	e7be      	b.n	8007306 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8007388:	2001      	movs	r0, #1
 800738a:	e7bc      	b.n	8007306 <HAL_DMA_Init+0x42>
 800738c:	f010803f 	.word	0xf010803f

08007390 <HAL_DMA_Start_IT>:
{
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007394:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8007396:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800739a:	2801      	cmp	r0, #1
 800739c:	d02b      	beq.n	80073f6 <HAL_DMA_Start_IT+0x66>
 800739e:	2001      	movs	r0, #1
 80073a0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80073a4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80073a8:	b2c0      	uxtb	r0, r0
 80073aa:	2801      	cmp	r0, #1
 80073ac:	d004      	beq.n	80073b8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80073ae:	2300      	movs	r3, #0
 80073b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80073b4:	2002      	movs	r0, #2
}
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80073b8:	2002      	movs	r0, #2
 80073ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073be:	2000      	movs	r0, #0
 80073c0:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7ff fefe 	bl	80071c4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80073ca:	233f      	movs	r3, #63	; 0x3f
 80073cc:	4093      	lsls	r3, r2
 80073ce:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	f043 0316 	orr.w	r3, r3, #22
 80073d8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80073da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073dc:	b123      	cbz	r3, 80073e8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	6813      	ldr	r3, [r2, #0]
 80073e2:	f043 0308 	orr.w	r3, r3, #8
 80073e6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f2:	2000      	movs	r0, #0
 80073f4:	e7df      	b.n	80073b6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80073f6:	2002      	movs	r0, #2
 80073f8:	e7dd      	b.n	80073b6 <HAL_DMA_Start_IT+0x26>

080073fa <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073fa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d003      	beq.n	800740c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8007408:	2001      	movs	r0, #1
 800740a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800740c:	2305      	movs	r3, #5
 800740e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007412:	6802      	ldr	r2, [r0, #0]
 8007414:	6813      	ldr	r3, [r2, #0]
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800741c:	2000      	movs	r0, #0
}
 800741e:	4770      	bx	lr

08007420 <HAL_DMA_IRQHandler>:
{
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	b083      	sub	sp, #12
 8007424:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800742a:	4b72      	ldr	r3, [pc, #456]	; (80075f4 <HAL_DMA_IRQHandler+0x1d4>)
 800742c:	681d      	ldr	r5, [r3, #0]
 800742e:	4b72      	ldr	r3, [pc, #456]	; (80075f8 <HAL_DMA_IRQHandler+0x1d8>)
 8007430:	fba3 3505 	umull	r3, r5, r3, r5
 8007434:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007436:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8007438:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800743a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800743c:	2308      	movs	r3, #8
 800743e:	4093      	lsls	r3, r2
 8007440:	4233      	tst	r3, r6
 8007442:	d010      	beq.n	8007466 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007444:	6803      	ldr	r3, [r0, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	f012 0f04 	tst.w	r2, #4
 800744c:	d00b      	beq.n	8007466 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	f022 0204 	bic.w	r2, r2, #4
 8007454:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007456:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8007458:	2308      	movs	r3, #8
 800745a:	4093      	lsls	r3, r2
 800745c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800745e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007460:	f043 0301 	orr.w	r3, r3, #1
 8007464:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007466:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007468:	2301      	movs	r3, #1
 800746a:	4093      	lsls	r3, r2
 800746c:	4233      	tst	r3, r6
 800746e:	d009      	beq.n	8007484 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007470:	6822      	ldr	r2, [r4, #0]
 8007472:	6952      	ldr	r2, [r2, #20]
 8007474:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007478:	d004      	beq.n	8007484 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800747a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800747c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800747e:	f043 0302 	orr.w	r3, r3, #2
 8007482:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007484:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007486:	2304      	movs	r3, #4
 8007488:	4093      	lsls	r3, r2
 800748a:	4233      	tst	r3, r6
 800748c:	d009      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	f012 0f02 	tst.w	r2, #2
 8007496:	d004      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007498:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800749a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800749c:	f043 0304 	orr.w	r3, r3, #4
 80074a0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80074a4:	2310      	movs	r3, #16
 80074a6:	4093      	lsls	r3, r2
 80074a8:	4233      	tst	r3, r6
 80074aa:	d024      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	f012 0f08 	tst.w	r2, #8
 80074b4:	d01f      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074b6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80074c0:	d00d      	beq.n	80074de <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80074c8:	d104      	bne.n	80074d4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80074ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074cc:	b19b      	cbz	r3, 80074f6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80074ce:	4620      	mov	r0, r4
 80074d0:	4798      	blx	r3
 80074d2:	e010      	b.n	80074f6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80074d6:	b173      	cbz	r3, 80074f6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80074d8:	4620      	mov	r0, r4
 80074da:	4798      	blx	r3
 80074dc:	e00b      	b.n	80074f6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80074e4:	d103      	bne.n	80074ee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	f022 0208 	bic.w	r2, r2, #8
 80074ec:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80074ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f0:	b10b      	cbz	r3, 80074f6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80074f2:	4620      	mov	r0, r4
 80074f4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80074f8:	2320      	movs	r3, #32
 80074fa:	4093      	lsls	r3, r2
 80074fc:	4233      	tst	r3, r6
 80074fe:	d055      	beq.n	80075ac <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	f012 0f10 	tst.w	r2, #16
 8007508:	d050      	beq.n	80075ac <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800750a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800750c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b05      	cmp	r3, #5
 8007514:	d00e      	beq.n	8007534 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800751e:	d033      	beq.n	8007588 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007526:	d12a      	bne.n	800757e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8007528:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800752a:	2b00      	cmp	r3, #0
 800752c:	d03e      	beq.n	80075ac <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800752e:	4620      	mov	r0, r4
 8007530:	4798      	blx	r3
 8007532:	e03b      	b.n	80075ac <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	f023 0316 	bic.w	r3, r3, #22
 800753c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	6953      	ldr	r3, [r2, #20]
 8007542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007546:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007548:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800754a:	b1a3      	cbz	r3, 8007576 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800754c:	6822      	ldr	r2, [r4, #0]
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	f023 0308 	bic.w	r3, r3, #8
 8007554:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007556:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007558:	233f      	movs	r3, #63	; 0x3f
 800755a:	4093      	lsls	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800755e:	2300      	movs	r3, #0
 8007560:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8007564:	2301      	movs	r3, #1
 8007566:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800756a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d03f      	beq.n	80075f0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8007570:	4620      	mov	r0, r4
 8007572:	4798      	blx	r3
        return;
 8007574:	e03c      	b.n	80075f0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007576:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e7      	bne.n	800754c <HAL_DMA_IRQHandler+0x12c>
 800757c:	e7eb      	b.n	8007556 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800757e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007580:	b1a3      	cbz	r3, 80075ac <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8007582:	4620      	mov	r0, r4
 8007584:	4798      	blx	r3
 8007586:	e011      	b.n	80075ac <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800758e:	d109      	bne.n	80075a4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	f022 0210 	bic.w	r2, r2, #16
 8007596:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8007598:	2300      	movs	r3, #0
 800759a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800759e:	2301      	movs	r3, #1
 80075a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80075a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075a6:	b10b      	cbz	r3, 80075ac <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80075a8:	4620      	mov	r0, r4
 80075aa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075ae:	b1fb      	cbz	r3, 80075f0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075b2:	f013 0f01 	tst.w	r3, #1
 80075b6:	d017      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80075b8:	2305      	movs	r3, #5
 80075ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	6813      	ldr	r3, [r2, #0]
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	3301      	adds	r3, #1
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	42ab      	cmp	r3, r5
 80075d0:	d804      	bhi.n	80075dc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f013 0f01 	tst.w	r3, #1
 80075da:	d1f5      	bne.n	80075c8 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80075dc:	2300      	movs	r3, #0
 80075de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80075e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80075ea:	b10b      	cbz	r3, 80075f0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80075ec:	4620      	mov	r0, r4
 80075ee:	4798      	blx	r3
}
 80075f0:	b003      	add	sp, #12
 80075f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f4:	20000188 	.word	0x20000188
 80075f8:	1b4e81b5 	.word	0x1b4e81b5

080075fc <HAL_DMA_GetState>:
  return hdma->State;
 80075fc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8007600:	4770      	bx	lr

08007602 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8007602:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8007604:	4770      	bx	lr
	...

08007608 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007608:	2300      	movs	r3, #0
 800760a:	2b0f      	cmp	r3, #15
 800760c:	f200 80c7 	bhi.w	800779e <HAL_GPIO_Init+0x196>
{
 8007610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007612:	b083      	sub	sp, #12
 8007614:	e039      	b.n	800768a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007616:	2204      	movs	r2, #4
 8007618:	e000      	b.n	800761c <HAL_GPIO_Init+0x14>
 800761a:	2200      	movs	r2, #0
 800761c:	40b2      	lsls	r2, r6
 800761e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007620:	3402      	adds	r4, #2
 8007622:	4e5f      	ldr	r6, [pc, #380]	; (80077a0 <HAL_GPIO_Init+0x198>)
 8007624:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007628:	4a5e      	ldr	r2, [pc, #376]	; (80077a4 <HAL_GPIO_Init+0x19c>)
 800762a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800762c:	43ea      	mvns	r2, r5
 800762e:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007632:	684f      	ldr	r7, [r1, #4]
 8007634:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8007638:	d001      	beq.n	800763e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800763a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800763e:	4c59      	ldr	r4, [pc, #356]	; (80077a4 <HAL_GPIO_Init+0x19c>)
 8007640:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8007642:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8007644:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007648:	684f      	ldr	r7, [r1, #4]
 800764a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800764e:	d001      	beq.n	8007654 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8007650:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8007654:	4c53      	ldr	r4, [pc, #332]	; (80077a4 <HAL_GPIO_Init+0x19c>)
 8007656:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007658:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800765a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800765e:	684f      	ldr	r7, [r1, #4]
 8007660:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8007664:	d001      	beq.n	800766a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8007666:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800766a:	4c4e      	ldr	r4, [pc, #312]	; (80077a4 <HAL_GPIO_Init+0x19c>)
 800766c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800766e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8007670:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007672:	684e      	ldr	r6, [r1, #4]
 8007674:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8007678:	d001      	beq.n	800767e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800767a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800767e:	4c49      	ldr	r4, [pc, #292]	; (80077a4 <HAL_GPIO_Init+0x19c>)
 8007680:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007682:	3301      	adds	r3, #1
 8007684:	2b0f      	cmp	r3, #15
 8007686:	f200 8088 	bhi.w	800779a <HAL_GPIO_Init+0x192>
    ioposition = 0x01U << position;
 800768a:	2201      	movs	r2, #1
 800768c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800768e:	680c      	ldr	r4, [r1, #0]
 8007690:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8007694:	ea32 0404 	bics.w	r4, r2, r4
 8007698:	d1f3      	bne.n	8007682 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800769a:	684c      	ldr	r4, [r1, #4]
 800769c:	1e66      	subs	r6, r4, #1
 800769e:	2e01      	cmp	r6, #1
 80076a0:	d903      	bls.n	80076aa <HAL_GPIO_Init+0xa2>
 80076a2:	2c11      	cmp	r4, #17
 80076a4:	d001      	beq.n	80076aa <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076a6:	2c12      	cmp	r4, #18
 80076a8:	d112      	bne.n	80076d0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80076aa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076ac:	005f      	lsls	r7, r3, #1
 80076ae:	2403      	movs	r4, #3
 80076b0:	40bc      	lsls	r4, r7
 80076b2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076b6:	68cc      	ldr	r4, [r1, #12]
 80076b8:	40bc      	lsls	r4, r7
 80076ba:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80076bc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80076be:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076c0:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80076c4:	684c      	ldr	r4, [r1, #4]
 80076c6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80076ca:	409a      	lsls	r2, r3
 80076cc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80076ce:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80076d0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076d2:	005e      	lsls	r6, r3, #1
 80076d4:	2403      	movs	r4, #3
 80076d6:	40b4      	lsls	r4, r6
 80076d8:	43e2      	mvns	r2, r4
 80076da:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076de:	688c      	ldr	r4, [r1, #8]
 80076e0:	40b4      	lsls	r4, r6
 80076e2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80076e4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076e6:	684c      	ldr	r4, [r1, #4]
 80076e8:	2c02      	cmp	r4, #2
 80076ea:	d001      	beq.n	80076f0 <HAL_GPIO_Init+0xe8>
 80076ec:	2c12      	cmp	r4, #18
 80076ee:	d113      	bne.n	8007718 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 80076f0:	08df      	lsrs	r7, r3, #3
 80076f2:	3708      	adds	r7, #8
 80076f4:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076f8:	f003 0407 	and.w	r4, r3, #7
 80076fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007700:	240f      	movs	r4, #15
 8007702:	fa04 f40c 	lsl.w	r4, r4, ip
 8007706:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800770a:	690c      	ldr	r4, [r1, #16]
 800770c:	fa04 f40c 	lsl.w	r4, r4, ip
 8007710:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8007714:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8007718:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800771a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800771c:	684a      	ldr	r2, [r1, #4]
 800771e:	f002 0203 	and.w	r2, r2, #3
 8007722:	40b2      	lsls	r2, r6
 8007724:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8007726:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007728:	684a      	ldr	r2, [r1, #4]
 800772a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800772e:	d0a8      	beq.n	8007682 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007730:	2200      	movs	r2, #0
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <HAL_GPIO_Init+0x1a0>)
 8007736:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8007738:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800773c:	6454      	str	r4, [r2, #68]	; 0x44
 800773e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007740:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007748:	089c      	lsrs	r4, r3, #2
 800774a:	1ca6      	adds	r6, r4, #2
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <HAL_GPIO_Init+0x198>)
 800774e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007752:	f003 0203 	and.w	r2, r3, #3
 8007756:	0096      	lsls	r6, r2, #2
 8007758:	220f      	movs	r2, #15
 800775a:	40b2      	lsls	r2, r6
 800775c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007760:	4a12      	ldr	r2, [pc, #72]	; (80077ac <HAL_GPIO_Init+0x1a4>)
 8007762:	4290      	cmp	r0, r2
 8007764:	f43f af59 	beq.w	800761a <HAL_GPIO_Init+0x12>
 8007768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800776c:	4290      	cmp	r0, r2
 800776e:	d00e      	beq.n	800778e <HAL_GPIO_Init+0x186>
 8007770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007774:	4290      	cmp	r0, r2
 8007776:	d00c      	beq.n	8007792 <HAL_GPIO_Init+0x18a>
 8007778:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800777c:	4290      	cmp	r0, r2
 800777e:	d00a      	beq.n	8007796 <HAL_GPIO_Init+0x18e>
 8007780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007784:	4290      	cmp	r0, r2
 8007786:	f43f af46 	beq.w	8007616 <HAL_GPIO_Init+0xe>
 800778a:	2207      	movs	r2, #7
 800778c:	e746      	b.n	800761c <HAL_GPIO_Init+0x14>
 800778e:	2201      	movs	r2, #1
 8007790:	e744      	b.n	800761c <HAL_GPIO_Init+0x14>
 8007792:	2202      	movs	r2, #2
 8007794:	e742      	b.n	800761c <HAL_GPIO_Init+0x14>
 8007796:	2203      	movs	r2, #3
 8007798:	e740      	b.n	800761c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800779a:	b003      	add	sp, #12
 800779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779e:	4770      	bx	lr
 80077a0:	40013800 	.word	0x40013800
 80077a4:	40013c00 	.word	0x40013c00
 80077a8:	40023800 	.word	0x40023800
 80077ac:	40020000 	.word	0x40020000

080077b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077b0:	6903      	ldr	r3, [r0, #16]
 80077b2:	4219      	tst	r1, r3
 80077b4:	d001      	beq.n	80077ba <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80077b6:	2001      	movs	r0, #1
 80077b8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ba:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80077bc:	4770      	bx	lr

080077be <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077be:	b10a      	cbz	r2, 80077c4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077c0:	6181      	str	r1, [r0, #24]
 80077c2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80077c4:	0409      	lsls	r1, r1, #16
 80077c6:	6181      	str	r1, [r0, #24]
  }
}
 80077c8:	4770      	bx	lr

080077ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80077ca:	6943      	ldr	r3, [r0, #20]
 80077cc:	ea31 0303 	bics.w	r3, r1, r3
 80077d0:	d001      	beq.n	80077d6 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80077d2:	6181      	str	r1, [r0, #24]
  }
}
 80077d4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077d6:	0409      	lsls	r1, r1, #16
 80077d8:	6181      	str	r1, [r0, #24]
 80077da:	4770      	bx	lr

080077dc <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077dc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d010      	beq.n	8007808 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077e6:	6903      	ldr	r3, [r0, #16]
 80077e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ec:	d01b      	beq.n	8007826 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 80077ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d139      	bne.n	8007868 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80077f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80077f6:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80077fa:	6802      	ldr	r2, [r0, #0]
 80077fc:	f003 0306 	and.w	r3, r3, #6
 8007800:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8007804:	6113      	str	r3, [r2, #16]
 8007806:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8007808:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800780a:	b92b      	cbnz	r3, 8007818 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800780c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800780e:	6802      	ldr	r2, [r0, #0]
 8007810:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007814:	6113      	str	r3, [r2, #16]
 8007816:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007818:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800781a:	6802      	ldr	r2, [r0, #0]
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	b2db      	uxtb	r3, r3
 8007822:	6113      	str	r3, [r2, #16]
 8007824:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007826:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b21      	cmp	r3, #33	; 0x21
 800782e:	d00f      	beq.n	8007850 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007830:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007832:	6802      	ldr	r2, [r0, #0]
 8007834:	f043 0301 	orr.w	r3, r3, #1
 8007838:	b2db      	uxtb	r3, r3
 800783a:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800783c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800783e:	b16b      	cbz	r3, 800785c <I2C_Master_SB+0x80>
 8007840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007842:	b15b      	cbz	r3, 800785c <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007844:	6802      	ldr	r2, [r0, #0]
 8007846:	6853      	ldr	r3, [r2, #4]
 8007848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800784c:	6053      	str	r3, [r2, #4]
 800784e:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007850:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007852:	6802      	ldr	r2, [r0, #0]
 8007854:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007858:	6113      	str	r3, [r2, #16]
 800785a:	e7ef      	b.n	800783c <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800785c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800785e:	b133      	cbz	r3, 800786e <I2C_Master_SB+0x92>
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1ee      	bne.n	8007844 <I2C_Master_SB+0x68>
 8007866:	e002      	b.n	800786e <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8007868:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800786a:	2b01      	cmp	r3, #1
 800786c:	d000      	beq.n	8007870 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 800786e:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007870:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007872:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8007876:	6802      	ldr	r2, [r0, #0]
 8007878:	f003 0306 	and.w	r3, r3, #6
 800787c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8007880:	6113      	str	r3, [r2, #16]
}
 8007882:	e7f4      	b.n	800786e <I2C_Master_SB+0x92>

08007884 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007884:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007886:	6802      	ldr	r2, [r0, #0]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800788c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800788e:	b13b      	cbz	r3, 80078a0 <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	b14b      	cbz	r3, 80078a8 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007894:	6802      	ldr	r2, [r0, #0]
 8007896:	6853      	ldr	r3, [r2, #4]
 8007898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800789c:	6053      	str	r3, [r2, #4]
    }
  }
}
 800789e:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80078a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d1f4      	bne.n	8007890 <I2C_Master_ADD10+0xc>
 80078a6:	e7fa      	b.n	800789e <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80078a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80078aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f1      	bne.n	8007894 <I2C_Master_ADD10+0x10>
 80078b0:	e7f5      	b.n	800789e <I2C_Master_ADD10+0x1a>

080078b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80078b2:	b410      	push	{r4}
 80078b4:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80078b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80078ba:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80078bc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80078be:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b22      	cmp	r3, #34	; 0x22
 80078c8:	d00b      	beq.n	80078e2 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ca:	2300      	movs	r3, #0
 80078cc:	9309      	str	r3, [sp, #36]	; 0x24
 80078ce:	6803      	ldr	r3, [r0, #0]
 80078d0:	695a      	ldr	r2, [r3, #20]
 80078d2:	9209      	str	r2, [sp, #36]	; 0x24
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	9309      	str	r3, [sp, #36]	; 0x24
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 80078da:	b00b      	add	sp, #44	; 0x2c
 80078dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e0:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80078e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80078e4:	b90b      	cbnz	r3, 80078ea <I2C_Master_ADDR+0x38>
 80078e6:	2a40      	cmp	r2, #64	; 0x40
 80078e8:	d017      	beq.n	800791a <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80078ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80078ec:	b91b      	cbnz	r3, 80078f6 <I2C_Master_ADDR+0x44>
 80078ee:	6903      	ldr	r3, [r0, #16]
 80078f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078f4:	d019      	beq.n	800792a <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 80078f6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d125      	bne.n	800794a <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	6803      	ldr	r3, [r0, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	9202      	str	r2, [sp, #8]
 8007906:	699a      	ldr	r2, [r3, #24]
 8007908:	9202      	str	r2, [sp, #8]
 800790a:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007912:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	6503      	str	r3, [r0, #80]	; 0x50
 8007918:	e7df      	b.n	80078da <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	6803      	ldr	r3, [r0, #0]
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	9200      	str	r2, [sp, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	e7d7      	b.n	80078da <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792a:	2300      	movs	r3, #0
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	6803      	ldr	r3, [r0, #0]
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	9201      	str	r2, [sp, #4]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	9201      	str	r2, [sp, #4]
 8007938:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007940:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007942:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007944:	3301      	adds	r3, #1
 8007946:	6503      	str	r3, [r0, #80]	; 0x50
 8007948:	e7c7      	b.n	80078da <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 800794a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b01      	cmp	r3, #1
 8007950:	d025      	beq.n	800799e <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8007952:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d07b      	beq.n	8007a52 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795a:	6802      	ldr	r2, [r0, #0]
 800795c:	6813      	ldr	r3, [r2, #0]
 800795e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007962:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007964:	6803      	ldr	r3, [r0, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800796c:	d00e      	beq.n	800798c <I2C_Master_ADDR+0xda>
 800796e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8007972:	d007      	beq.n	8007984 <I2C_Master_ADDR+0xd2>
 8007974:	2901      	cmp	r1, #1
 8007976:	d005      	beq.n	8007984 <I2C_Master_ADDR+0xd2>
 8007978:	2908      	cmp	r1, #8
 800797a:	d003      	beq.n	8007984 <I2C_Master_ADDR+0xd2>
 800797c:	2910      	cmp	r1, #16
 800797e:	d001      	beq.n	8007984 <I2C_Master_ADDR+0xd2>
 8007980:	2920      	cmp	r1, #32
 8007982:	d103      	bne.n	800798c <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800798a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800798c:	2300      	movs	r3, #0
 800798e:	9308      	str	r3, [sp, #32]
 8007990:	6803      	ldr	r3, [r0, #0]
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	9208      	str	r2, [sp, #32]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	9308      	str	r3, [sp, #32]
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	e7ba      	b.n	8007914 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800799e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80079a2:	d011      	beq.n	80079c8 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80079a4:	2908      	cmp	r1, #8
 80079a6:	d034      	beq.n	8007a12 <I2C_Master_ADDR+0x160>
 80079a8:	2920      	cmp	r1, #32
 80079aa:	d032      	beq.n	8007a12 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80079ac:	2c12      	cmp	r4, #18
 80079ae:	d02e      	beq.n	8007a0e <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079b0:	2904      	cmp	r1, #4
 80079b2:	d040      	beq.n	8007a36 <I2C_Master_ADDR+0x184>
 80079b4:	2902      	cmp	r1, #2
 80079b6:	d03e      	beq.n	8007a36 <I2C_Master_ADDR+0x184>
 80079b8:	2910      	cmp	r1, #16
 80079ba:	d03c      	beq.n	8007a36 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079bc:	6802      	ldr	r2, [r0, #0]
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e03b      	b.n	8007a40 <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079c8:	6802      	ldr	r2, [r0, #0]
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d0:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079d2:	6803      	ldr	r3, [r0, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80079da:	d00c      	beq.n	80079f6 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e2:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079e4:	2300      	movs	r3, #0
 80079e6:	9303      	str	r3, [sp, #12]
 80079e8:	6803      	ldr	r3, [r0, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	9203      	str	r2, [sp, #12]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	e78e      	b.n	8007914 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f6:	2200      	movs	r2, #0
 80079f8:	9204      	str	r2, [sp, #16]
 80079fa:	695a      	ldr	r2, [r3, #20]
 80079fc:	9204      	str	r2, [sp, #16]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	9204      	str	r2, [sp, #16]
 8007a02:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	e782      	b.n	8007914 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007a0e:	2901      	cmp	r1, #1
 8007a10:	d0ce      	beq.n	80079b0 <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a12:	6802      	ldr	r2, [r0, #0]
 8007a14:	6813      	ldr	r3, [r2, #0]
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1a:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9306      	str	r3, [sp, #24]
 8007a20:	6803      	ldr	r3, [r0, #0]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	9206      	str	r2, [sp, #24]
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	9206      	str	r2, [sp, #24]
 8007a2a:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e76e      	b.n	8007914 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a36:	6802      	ldr	r2, [r0, #0]
 8007a38:	6813      	ldr	r3, [r2, #0]
 8007a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a3e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a40:	2300      	movs	r3, #0
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	6803      	ldr	r3, [r0, #0]
 8007a46:	695a      	ldr	r2, [r3, #20]
 8007a48:	9205      	str	r2, [sp, #20]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	9305      	str	r3, [sp, #20]
 8007a4e:	9b05      	ldr	r3, [sp, #20]
 8007a50:	e760      	b.n	8007914 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a52:	2904      	cmp	r1, #4
 8007a54:	d00e      	beq.n	8007a74 <I2C_Master_ADDR+0x1c2>
 8007a56:	2902      	cmp	r1, #2
 8007a58:	d00c      	beq.n	8007a74 <I2C_Master_ADDR+0x1c2>
 8007a5a:	2910      	cmp	r1, #16
 8007a5c:	d00a      	beq.n	8007a74 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a5e:	6802      	ldr	r2, [r0, #0]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a66:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a68:	6802      	ldr	r2, [r0, #0]
 8007a6a:	6813      	ldr	r3, [r2, #0]
 8007a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e004      	b.n	8007a7e <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a74:	6802      	ldr	r2, [r0, #0]
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a7c:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a7e:	6803      	ldr	r3, [r0, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007a86:	d00e      	beq.n	8007aa6 <I2C_Master_ADDR+0x1f4>
 8007a88:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8007a8c:	d007      	beq.n	8007a9e <I2C_Master_ADDR+0x1ec>
 8007a8e:	2901      	cmp	r1, #1
 8007a90:	d005      	beq.n	8007a9e <I2C_Master_ADDR+0x1ec>
 8007a92:	2908      	cmp	r1, #8
 8007a94:	d003      	beq.n	8007a9e <I2C_Master_ADDR+0x1ec>
 8007a96:	2910      	cmp	r1, #16
 8007a98:	d001      	beq.n	8007a9e <I2C_Master_ADDR+0x1ec>
 8007a9a:	2920      	cmp	r1, #32
 8007a9c:	d103      	bne.n	8007aa6 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aa4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9307      	str	r3, [sp, #28]
 8007aaa:	6803      	ldr	r3, [r0, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	9207      	str	r2, [sp, #28]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	9307      	str	r3, [sp, #28]
 8007ab4:	9b07      	ldr	r3, [sp, #28]
 8007ab6:	e72d      	b.n	8007914 <I2C_Master_ADDR+0x62>

08007ab8 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8007ab8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	b15b      	cbz	r3, 8007ad6 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007abe:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007ac0:	6803      	ldr	r3, [r0, #0]
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ac8:	3301      	adds	r3, #1
 8007aca:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007acc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8007ad6:	4770      	bx	lr

08007ad8 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8007ad8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	b15b      	cbz	r3, 8007af6 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ade:	6803      	ldr	r3, [r0, #0]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ae4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ae6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ae8:	3301      	adds	r3, #1
 8007aea:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007aec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8007af6:	4770      	bx	lr

08007af8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	08db      	lsrs	r3, r3, #3
 8007b04:	4a0d      	ldr	r2, [pc, #52]	; (8007b3c <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b10:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	b133      	cbz	r3, 8007b2a <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b1c:	6803      	ldr	r3, [r0, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007b24:	d1f5      	bne.n	8007b12 <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8007b26:	2000      	movs	r0, #0
 8007b28:	e004      	b.n	8007b34 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007b2c:	f043 0320 	orr.w	r3, r3, #32
 8007b30:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8007b32:	2001      	movs	r0, #1
}
 8007b34:	b002      	add	sp, #8
 8007b36:	4770      	bx	lr
 8007b38:	20000188 	.word	0x20000188
 8007b3c:	14f8b589 	.word	0x14f8b589

08007b40 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b40:	6803      	ldr	r3, [r0, #0]
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007b48:	d101      	bne.n	8007b4e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8007b4a:	2000      	movs	r0, #0
}
 8007b4c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b52:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b5e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b62:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007b64:	f042 0204 	orr.w	r2, r2, #4
 8007b68:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8007b6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8007b6e:	2001      	movs	r0, #1
 8007b70:	4770      	bx	lr

08007b72 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007b72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007b74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b78:	d004      	beq.n	8007b84 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007b7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b80:	d003      	beq.n	8007b8a <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b82:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007b84:	2301      	movs	r3, #1
 8007b86:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007b88:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007b8e:	e7f8      	b.n	8007b82 <I2C_ConvertOtherXferOptions+0x10>

08007b90 <I2C_WaitOnFlagUntilTimeout>:
{
 8007b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b94:	4607      	mov	r7, r0
 8007b96:	460d      	mov	r5, r1
 8007b98:	4690      	mov	r8, r2
 8007b9a:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b9c:	e022      	b.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9e:	f7ff faa3 	bl	80070e8 <HAL_GetTick>
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	1ac0      	subs	r0, r0, r3
 8007ba6:	42b0      	cmp	r0, r6
 8007ba8:	d800      	bhi.n	8007bac <I2C_WaitOnFlagUntilTimeout+0x1c>
 8007baa:	b9de      	cbnz	r6, 8007be4 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bbc:	f042 0220 	orr.w	r2, r2, #32
 8007bc0:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007bc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	e01a      	b.n	8007c00 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	699c      	ldr	r4, [r3, #24]
 8007bce:	ea25 0404 	bic.w	r4, r5, r4
 8007bd2:	b2a4      	uxth	r4, r4
 8007bd4:	fab4 f484 	clz	r4, r4
 8007bd8:	0964      	lsrs	r4, r4, #5
 8007bda:	45a0      	cmp	r8, r4
 8007bdc:	d10f      	bne.n	8007bfe <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8007bde:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007be2:	d1dc      	bne.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007be4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d1ee      	bne.n	8007bca <I2C_WaitOnFlagUntilTimeout+0x3a>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	695c      	ldr	r4, [r3, #20]
 8007bf0:	ea25 0404 	bic.w	r4, r5, r4
 8007bf4:	b2a4      	uxth	r4, r4
 8007bf6:	fab4 f484 	clz	r4, r4
 8007bfa:	0964      	lsrs	r4, r4, #5
 8007bfc:	e7ed      	b.n	8007bda <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8007bfe:	2000      	movs	r0, #0
}
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8007c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	4605      	mov	r5, r0
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	4617      	mov	r7, r2
 8007c0e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c10:	e03d      	b.n	8007c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c18:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1a:	682b      	ldr	r3, [r5, #0]
 8007c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c20:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c26:	2220      	movs	r2, #32
 8007c28:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c30:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007c32:	f042 0204 	orr.w	r2, r2, #4
 8007c36:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007c38:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	e034      	b.n	8007caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c40:	f7ff fa52 	bl	80070e8 <HAL_GetTick>
 8007c44:	eba0 0008 	sub.w	r0, r0, r8
 8007c48:	42b8      	cmp	r0, r7
 8007c4a:	d800      	bhi.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8007c4c:	b9ff      	cbnz	r7, 8007c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c52:	2220      	movs	r2, #32
 8007c54:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c58:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c5c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007c5e:	f042 0220 	orr.w	r2, r2, #32
 8007c62:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007c64:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8007c68:	2001      	movs	r0, #1
 8007c6a:	e01e      	b.n	8007caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	699c      	ldr	r4, [r3, #24]
 8007c70:	ea26 0404 	bic.w	r4, r6, r4
 8007c74:	b2a4      	uxth	r4, r4
 8007c76:	3c00      	subs	r4, #0
 8007c78:	bf18      	it	ne
 8007c7a:	2401      	movne	r4, #1
 8007c7c:	b1a4      	cbz	r4, 8007ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	695a      	ldr	r2, [r3, #20]
 8007c82:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007c86:	d1c4      	bne.n	8007c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8007c88:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8007c8c:	d1d8      	bne.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c8e:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d1ea      	bne.n	8007c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	695c      	ldr	r4, [r3, #20]
 8007c9a:	ea26 0404 	bic.w	r4, r6, r4
 8007c9e:	b2a4      	uxth	r4, r4
 8007ca0:	3c00      	subs	r4, #0
 8007ca2:	bf18      	it	ne
 8007ca4:	2401      	movne	r4, #1
 8007ca6:	e7e9      	b.n	8007c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8007ca8:	2000      	movs	r0, #0
}
 8007caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007cb0 <I2C_MasterRequestWrite>:
{
 8007cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	4616      	mov	r6, r2
 8007cba:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d00d      	beq.n	8007cde <I2C_MasterRequestWrite+0x2e>
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d00b      	beq.n	8007cde <I2C_MasterRequestWrite+0x2e>
 8007cc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cca:	d008      	beq.n	8007cde <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ccc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007cce:	2b12      	cmp	r3, #18
 8007cd0:	d10a      	bne.n	8007ce8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd2:	6802      	ldr	r2, [r0, #0]
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	e004      	b.n	8007ce8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	6813      	ldr	r3, [r2, #0]
 8007ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce8:	9700      	str	r7, [sp, #0]
 8007cea:	4633      	mov	r3, r6
 8007cec:	2200      	movs	r2, #0
 8007cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff ff4c 	bl	8007b90 <I2C_WaitOnFlagUntilTimeout>
 8007cf8:	b980      	cbnz	r0, 8007d1c <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d00:	d116      	bne.n	8007d30 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8007d08:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	4913      	ldr	r1, [pc, #76]	; (8007d5c <I2C_MasterRequestWrite+0xac>)
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff ff77 	bl	8007c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d16:	b9f8      	cbnz	r0, 8007d58 <I2C_MasterRequestWrite+0xa8>
}
 8007d18:	b003      	add	sp, #12
 8007d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007d24:	d002      	beq.n	8007d2c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007d2c:	2003      	movs	r0, #3
 8007d2e:	e7f3      	b.n	8007d18 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d30:	11eb      	asrs	r3, r5, #7
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	f003 0306 	and.w	r3, r3, #6
 8007d38:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8007d3c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d3e:	463b      	mov	r3, r7
 8007d40:	4632      	mov	r2, r6
 8007d42:	4907      	ldr	r1, [pc, #28]	; (8007d60 <I2C_MasterRequestWrite+0xb0>)
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff ff5d 	bl	8007c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d4a:	b918      	cbnz	r0, 8007d54 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	b2ed      	uxtb	r5, r5
 8007d50:	611d      	str	r5, [r3, #16]
 8007d52:	e7da      	b.n	8007d0a <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8007d54:	2001      	movs	r0, #1
 8007d56:	e7df      	b.n	8007d18 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e7dd      	b.n	8007d18 <I2C_MasterRequestWrite+0x68>
 8007d5c:	00010002 	.word	0x00010002
 8007d60:	00010008 	.word	0x00010008

08007d64 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4604      	mov	r4, r0
 8007d68:	460d      	mov	r5, r1
 8007d6a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d74:	d11c      	bne.n	8007db0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff fee2 	bl	8007b40 <I2C_IsAcknowledgeFailed>
 8007d7c:	b9d0      	cbnz	r0, 8007db4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007d7e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007d82:	d0f3      	beq.n	8007d6c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d84:	f7ff f9b0 	bl	80070e8 <HAL_GetTick>
 8007d88:	1b80      	subs	r0, r0, r6
 8007d8a:	42a8      	cmp	r0, r5
 8007d8c:	d801      	bhi.n	8007d92 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	d1ec      	bne.n	8007d6c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d96:	2220      	movs	r2, #32
 8007d98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007da0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007da2:	f042 0220 	orr.w	r2, r2, #32
 8007da6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007da8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007dac:	2001      	movs	r0, #1
 8007dae:	e000      	b.n	8007db2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007db0:	2000      	movs	r0, #0
}
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007db4:	2001      	movs	r0, #1
 8007db6:	e7fc      	b.n	8007db2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08007db8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4604      	mov	r4, r0
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f013 0f04 	tst.w	r3, #4
 8007dc8:	d11c      	bne.n	8007e04 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff feb8 	bl	8007b40 <I2C_IsAcknowledgeFailed>
 8007dd0:	b9d0      	cbnz	r0, 8007e08 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007dd2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007dd6:	d0f3      	beq.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd8:	f7ff f986 	bl	80070e8 <HAL_GetTick>
 8007ddc:	1b80      	subs	r0, r0, r6
 8007dde:	42a8      	cmp	r0, r5
 8007de0:	d801      	bhi.n	8007de6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	d1ec      	bne.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dea:	2220      	movs	r2, #32
 8007dec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007df4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007df6:	f042 0220 	orr.w	r2, r2, #32
 8007dfa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007e00:	2001      	movs	r0, #1
 8007e02:	e000      	b.n	8007e06 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007e04:	2000      	movs	r0, #0
}
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007e08:	2001      	movs	r0, #1
 8007e0a:	e7fc      	b.n	8007e06 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08007e0c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f000 80cc 	beq.w	8007faa <HAL_I2C_Init+0x19e>
{
 8007e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e14:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d077      	beq.n	8007f0e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e1e:	2324      	movs	r3, #36	; 0x24
 8007e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007e24:	6822      	ldr	r2, [r4, #0]
 8007e26:	6813      	ldr	r3, [r2, #0]
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e36:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	6813      	ldr	r3, [r2, #0]
 8007e3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e40:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e42:	f001 fbe1 	bl	8009608 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	4b5a      	ldr	r3, [pc, #360]	; (8007fb4 <HAL_I2C_Init+0x1a8>)
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d864      	bhi.n	8007f18 <HAL_I2C_Init+0x10c>
 8007e4e:	4b5a      	ldr	r3, [pc, #360]	; (8007fb8 <HAL_I2C_Init+0x1ac>)
 8007e50:	4298      	cmp	r0, r3
 8007e52:	bf8c      	ite	hi
 8007e54:	2300      	movhi	r3, #0
 8007e56:	2301      	movls	r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f040 80a8 	bne.w	8007fae <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8007e5e:	4d57      	ldr	r5, [pc, #348]	; (8007fbc <HAL_I2C_Init+0x1b0>)
 8007e60:	fba5 3500 	umull	r3, r5, r5, r0
 8007e64:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e66:	6826      	ldr	r6, [r4, #0]
 8007e68:	6871      	ldr	r1, [r6, #4]
 8007e6a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007e6e:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8007e72:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	6a0b      	ldr	r3, [r1, #32]
 8007e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e7c:	6865      	ldr	r5, [r4, #4]
 8007e7e:	4a4d      	ldr	r2, [pc, #308]	; (8007fb4 <HAL_I2C_Init+0x1a8>)
 8007e80:	4295      	cmp	r5, r2
 8007e82:	d84f      	bhi.n	8007f24 <HAL_I2C_Init+0x118>
 8007e84:	1c7a      	adds	r2, r7, #1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e8a:	6825      	ldr	r5, [r4, #0]
 8007e8c:	69e9      	ldr	r1, [r5, #28]
 8007e8e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007e92:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	4a46      	ldr	r2, [pc, #280]	; (8007fb4 <HAL_I2C_Init+0x1a8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d84c      	bhi.n	8007f38 <HAL_I2C_Init+0x12c>
 8007e9e:	3801      	subs	r0, #1
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007eac:	4218      	tst	r0, r3
 8007eae:	d078      	beq.n	8007fa2 <HAL_I2C_Init+0x196>
 8007eb0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007eb8:	6821      	ldr	r1, [r4, #0]
 8007eba:	680b      	ldr	r3, [r1, #0]
 8007ebc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ec0:	69e2      	ldr	r2, [r4, #28]
 8007ec2:	6a20      	ldr	r0, [r4, #32]
 8007ec4:	4302      	orrs	r2, r0
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007eca:	6821      	ldr	r1, [r4, #0]
 8007ecc:	688b      	ldr	r3, [r1, #8]
 8007ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	68e0      	ldr	r0, [r4, #12]
 8007eda:	4302      	orrs	r2, r0
 8007edc:	4313      	orrs	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ee0:	6821      	ldr	r1, [r4, #0]
 8007ee2:	68cb      	ldr	r3, [r1, #12]
 8007ee4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ee8:	6962      	ldr	r2, [r4, #20]
 8007eea:	69a0      	ldr	r0, [r4, #24]
 8007eec:	4302      	orrs	r2, r0
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	6813      	ldr	r3, [r2, #0]
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007efc:	2000      	movs	r0, #0
 8007efe:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f00:	2320      	movs	r3, #32
 8007f02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f06:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f08:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8007f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007f0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8007f12:	f7fe fa09 	bl	8006328 <HAL_I2C_MspInit>
 8007f16:	e782      	b.n	8007e1e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f18:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <HAL_I2C_Init+0x1b4>)
 8007f1a:	4298      	cmp	r0, r3
 8007f1c:	bf8c      	ite	hi
 8007f1e:	2300      	movhi	r3, #0
 8007f20:	2301      	movls	r3, #1
 8007f22:	e799      	b.n	8007e58 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f24:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f28:	fb02 f207 	mul.w	r2, r2, r7
 8007f2c:	4d25      	ldr	r5, [pc, #148]	; (8007fc4 <HAL_I2C_Init+0x1b8>)
 8007f2e:	fba5 5202 	umull	r5, r2, r5, r2
 8007f32:	0992      	lsrs	r2, r2, #6
 8007f34:	3201      	adds	r2, #1
 8007f36:	e7a6      	b.n	8007e86 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f38:	68a2      	ldr	r2, [r4, #8]
 8007f3a:	b9ba      	cbnz	r2, 8007f6c <HAL_I2C_Init+0x160>
 8007f3c:	1e46      	subs	r6, r0, #1
 8007f3e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8007f42:	fbb6 f6f7 	udiv	r6, r6, r7
 8007f46:	3601      	adds	r6, #1
 8007f48:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8007f4c:	fab6 f686 	clz	r6, r6
 8007f50:	0976      	lsrs	r6, r6, #5
 8007f52:	bb46      	cbnz	r6, 8007fa6 <HAL_I2C_Init+0x19a>
 8007f54:	b9c2      	cbnz	r2, 8007f88 <HAL_I2C_Init+0x17c>
 8007f56:	1e42      	subs	r2, r0, #1
 8007f58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f60:	3201      	adds	r2, #1
 8007f62:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007f66:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8007f6a:	e7a3      	b.n	8007eb4 <HAL_I2C_Init+0xa8>
 8007f6c:	1e46      	subs	r6, r0, #1
 8007f6e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8007f72:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8007f76:	fbb6 f6f7 	udiv	r6, r6, r7
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8007f80:	fab6 f686 	clz	r6, r6
 8007f84:	0976      	lsrs	r6, r6, #5
 8007f86:	e7e4      	b.n	8007f52 <HAL_I2C_Init+0x146>
 8007f88:	1e42      	subs	r2, r0, #1
 8007f8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f92:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f96:	3201      	adds	r2, #1
 8007f98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007f9c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8007fa0:	e788      	b.n	8007eb4 <HAL_I2C_Init+0xa8>
 8007fa2:	2304      	movs	r3, #4
 8007fa4:	e786      	b.n	8007eb4 <HAL_I2C_Init+0xa8>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e784      	b.n	8007eb4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8007faa:	2001      	movs	r0, #1
}
 8007fac:	4770      	bx	lr
    return HAL_ERROR;
 8007fae:	2001      	movs	r0, #1
 8007fb0:	e7ac      	b.n	8007f0c <HAL_I2C_Init+0x100>
 8007fb2:	bf00      	nop
 8007fb4:	000186a0 	.word	0x000186a0
 8007fb8:	001e847f 	.word	0x001e847f
 8007fbc:	431bde83 	.word	0x431bde83
 8007fc0:	003d08ff 	.word	0x003d08ff
 8007fc4:	10624dd3 	.word	0x10624dd3

08007fc8 <HAL_I2C_Master_Transmit>:
{
 8007fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	4604      	mov	r4, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	4691      	mov	r9, r2
 8007fd4:	4698      	mov	r8, r3
 8007fd6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007fd8:	f7ff f886 	bl	80070e8 <HAL_GetTick>
 8007fdc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fde:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8007fe2:	b2c0      	uxtb	r0, r0
 8007fe4:	2820      	cmp	r0, #32
 8007fe6:	d004      	beq.n	8007ff2 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8007fe8:	2702      	movs	r7, #2
}
 8007fea:	4638      	mov	r0, r7
 8007fec:	b005      	add	sp, #20
 8007fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ff2:	9500      	str	r5, [sp, #0]
 8007ff4:	2319      	movs	r3, #25
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	494f      	ldr	r1, [pc, #316]	; (8008138 <HAL_I2C_Master_Transmit+0x170>)
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7ff fdc8 	bl	8007b90 <I2C_WaitOnFlagUntilTimeout>
 8008000:	2800      	cmp	r0, #0
 8008002:	f040 8092 	bne.w	800812a <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8008006:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800800a:	2b01      	cmp	r3, #1
 800800c:	f000 808f 	beq.w	800812e <HAL_I2C_Master_Transmit+0x166>
 8008010:	2301      	movs	r3, #1
 8008012:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	f012 0f01 	tst.w	r2, #1
 800801e:	d103      	bne.n	8008028 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008028:	6822      	ldr	r2, [r4, #0]
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008030:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008032:	2321      	movs	r3, #33	; 0x21
 8008034:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008038:	2310      	movs	r3, #16
 800803a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800803e:	2300      	movs	r3, #0
 8008040:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008042:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008046:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800804a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800804c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800804e:	4b3b      	ldr	r3, [pc, #236]	; (800813c <HAL_I2C_Master_Transmit+0x174>)
 8008050:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008052:	462b      	mov	r3, r5
 8008054:	4632      	mov	r2, r6
 8008056:	4639      	mov	r1, r7
 8008058:	4620      	mov	r0, r4
 800805a:	f7ff fe29 	bl	8007cb0 <I2C_MasterRequestWrite>
 800805e:	4607      	mov	r7, r0
 8008060:	2800      	cmp	r0, #0
 8008062:	d166      	bne.n	8008132 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008064:	2300      	movs	r3, #0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	695a      	ldr	r2, [r3, #20]
 800806c:	9203      	str	r2, [sp, #12]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	9303      	str	r3, [sp, #12]
 8008072:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8008074:	e011      	b.n	800809a <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008078:	2b04      	cmp	r3, #4
 800807a:	d001      	beq.n	8008080 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 800807c:	2701      	movs	r7, #1
 800807e:	e7b4      	b.n	8007fea <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	e7f7      	b.n	800807c <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800808c:	462a      	mov	r2, r5
 800808e:	4631      	mov	r1, r6
 8008090:	4620      	mov	r0, r4
 8008092:	f7ff fe91 	bl	8007db8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008096:	2800      	cmp	r0, #0
 8008098:	d12e      	bne.n	80080f8 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 800809a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800809c:	2b00      	cmp	r3, #0
 800809e:	d036      	beq.n	800810e <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080a0:	462a      	mov	r2, r5
 80080a2:	4631      	mov	r1, r6
 80080a4:	4620      	mov	r0, r4
 80080a6:	f7ff fe5d 	bl	8007d64 <I2C_WaitOnTXEFlagUntilTimeout>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1e3      	bne.n	8008076 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80080b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080b8:	1c4b      	adds	r3, r1, #1
 80080ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80080bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80080c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	6950      	ldr	r0, [r2, #20]
 80080d2:	f010 0f04 	tst.w	r0, #4
 80080d6:	d0d9      	beq.n	800808c <HAL_I2C_Master_Transmit+0xc4>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0d7      	beq.n	800808c <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080dc:	784b      	ldrb	r3, [r1, #1]
 80080de:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80080e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e2:	3301      	adds	r3, #1
 80080e4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80080e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80080f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80080f2:	3b01      	subs	r3, #1
 80080f4:	8523      	strh	r3, [r4, #40]	; 0x28
 80080f6:	e7c9      	b.n	800808c <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d001      	beq.n	8008102 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 80080fe:	2701      	movs	r7, #1
 8008100:	e773      	b.n	8007fea <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008102:	6822      	ldr	r2, [r4, #0]
 8008104:	6813      	ldr	r3, [r2, #0]
 8008106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	e7f7      	b.n	80080fe <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	6813      	ldr	r3, [r2, #0]
 8008112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008116:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008118:	2320      	movs	r3, #32
 800811a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800811e:	2300      	movs	r3, #0
 8008120:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008124:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008128:	e75f      	b.n	8007fea <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 800812a:	2702      	movs	r7, #2
 800812c:	e75d      	b.n	8007fea <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800812e:	2702      	movs	r7, #2
 8008130:	e75b      	b.n	8007fea <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8008132:	2701      	movs	r7, #1
 8008134:	e759      	b.n	8007fea <HAL_I2C_Master_Transmit+0x22>
 8008136:	bf00      	nop
 8008138:	00100002 	.word	0x00100002
 800813c:	ffff0000 	.word	0xffff0000

08008140 <HAL_I2C_Master_Transmit_DMA>:
{
 8008140:	b530      	push	{r4, r5, lr}
 8008142:	b083      	sub	sp, #12
 8008144:	4605      	mov	r5, r0
  __IO uint32_t count = 0U;
 8008146:	2000      	movs	r0, #0
 8008148:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800814a:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 800814e:	b2c0      	uxtb	r0, r0
 8008150:	2820      	cmp	r0, #32
 8008152:	f040 809c 	bne.w	800828e <HAL_I2C_Master_Transmit_DMA+0x14e>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008156:	4850      	ldr	r0, [pc, #320]	; (8008298 <HAL_I2C_Master_Transmit_DMA+0x158>)
 8008158:	6800      	ldr	r0, [r0, #0]
 800815a:	08c0      	lsrs	r0, r0, #3
 800815c:	4c4f      	ldr	r4, [pc, #316]	; (800829c <HAL_I2C_Master_Transmit_DMA+0x15c>)
 800815e:	fba4 4000 	umull	r4, r0, r4, r0
 8008162:	0a00      	lsrs	r0, r0, #8
 8008164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008168:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800816c:	9001      	str	r0, [sp, #4]
      count--;
 800816e:	9c01      	ldr	r4, [sp, #4]
 8008170:	3c01      	subs	r4, #1
 8008172:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8008174:	9801      	ldr	r0, [sp, #4]
 8008176:	2800      	cmp	r0, #0
 8008178:	d03e      	beq.n	80081f8 <HAL_I2C_Master_Transmit_DMA+0xb8>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800817a:	6828      	ldr	r0, [r5, #0]
 800817c:	6984      	ldr	r4, [r0, #24]
 800817e:	f014 0f02 	tst.w	r4, #2
 8008182:	d1f4      	bne.n	800816e <HAL_I2C_Master_Transmit_DMA+0x2e>
    __HAL_LOCK(hi2c);
 8008184:	f895 403c 	ldrb.w	r4, [r5, #60]	; 0x3c
 8008188:	2c01      	cmp	r4, #1
 800818a:	f000 8083 	beq.w	8008294 <HAL_I2C_Master_Transmit_DMA+0x154>
 800818e:	2401      	movs	r4, #1
 8008190:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008194:	6804      	ldr	r4, [r0, #0]
 8008196:	f014 0f01 	tst.w	r4, #1
 800819a:	d103      	bne.n	80081a4 <HAL_I2C_Master_Transmit_DMA+0x64>
      __HAL_I2C_ENABLE(hi2c);
 800819c:	6804      	ldr	r4, [r0, #0]
 800819e:	f044 0401 	orr.w	r4, r4, #1
 80081a2:	6004      	str	r4, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081a4:	682c      	ldr	r4, [r5, #0]
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80081ac:	6020      	str	r0, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081ae:	2021      	movs	r0, #33	; 0x21
 80081b0:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80081b4:	2010      	movs	r0, #16
 80081b6:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081ba:	2000      	movs	r0, #0
 80081bc:	6428      	str	r0, [r5, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80081be:	626a      	str	r2, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081c0:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081c2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081c8:	4a35      	ldr	r2, [pc, #212]	; (80082a0 <HAL_I2C_Master_Transmit_DMA+0x160>)
 80081ca:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80081cc:	6469      	str	r1, [r5, #68]	; 0x44
    if (hi2c->XferSize > 0U)
 80081ce:	bb13      	cbnz	r3, 8008216 <HAL_I2C_Master_Transmit_DMA+0xd6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081d0:	682a      	ldr	r2, [r5, #0]
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081d8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081da:	682a      	ldr	r2, [r5, #0]
 80081dc:	6813      	ldr	r3, [r2, #0]
 80081de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e2:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80081e4:	2300      	movs	r3, #0
 80081e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081ea:	682a      	ldr	r2, [r5, #0]
 80081ec:	6853      	ldr	r3, [r2, #4]
 80081ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80081f2:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 80081f4:	2000      	movs	r0, #0
 80081f6:	e04b      	b.n	8008290 <HAL_I2C_Master_Transmit_DMA+0x150>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081fc:	2220      	movs	r2, #32
 80081fe:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008202:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008206:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008208:	f042 0220 	orr.w	r2, r2, #32
 800820c:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800820e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8008212:	2001      	movs	r0, #1
 8008214:	e03c      	b.n	8008290 <HAL_I2C_Master_Transmit_DMA+0x150>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008216:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008218:	4a22      	ldr	r2, [pc, #136]	; (80082a4 <HAL_I2C_Master_Transmit_DMA+0x164>)
 800821a:	63da      	str	r2, [r3, #60]	; 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800821c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800821e:	4a22      	ldr	r2, [pc, #136]	; (80082a8 <HAL_I2C_Master_Transmit_DMA+0x168>)
 8008220:	64da      	str	r2, [r3, #76]	; 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008222:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008224:	6410      	str	r0, [r2, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008226:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008228:	6450      	str	r0, [r2, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800822a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800822c:	6490      	str	r0, [r2, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800822e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008230:	6510      	str	r0, [r2, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008232:	682a      	ldr	r2, [r5, #0]
 8008234:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8008236:	3210      	adds	r2, #16
 8008238:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800823a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800823c:	f7ff f8a8 	bl	8007390 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8008240:	b9b8      	cbnz	r0, 8008272 <HAL_I2C_Master_Transmit_DMA+0x132>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008242:	682a      	ldr	r2, [r5, #0]
 8008244:	6813      	ldr	r3, [r2, #0]
 8008246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800824a:	6013      	str	r3, [r2, #0]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800824c:	682a      	ldr	r2, [r5, #0]
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008254:	6013      	str	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8008256:	2300      	movs	r3, #0
 8008258:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800825c:	682a      	ldr	r2, [r5, #0]
 800825e:	6853      	ldr	r3, [r2, #4]
 8008260:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008264:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008266:	682a      	ldr	r2, [r5, #0]
 8008268:	6853      	ldr	r3, [r2, #4]
 800826a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800826e:	6053      	str	r3, [r2, #4]
 8008270:	e7c0      	b.n	80081f4 <HAL_I2C_Master_Transmit_DMA+0xb4>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008272:	2320      	movs	r3, #32
 8008274:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008278:	2200      	movs	r2, #0
 800827a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800827e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008280:	f043 0310 	orr.w	r3, r3, #16
 8008284:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008286:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800828a:	2001      	movs	r0, #1
 800828c:	e000      	b.n	8008290 <HAL_I2C_Master_Transmit_DMA+0x150>
    return HAL_BUSY;
 800828e:	2002      	movs	r0, #2
}
 8008290:	b003      	add	sp, #12
 8008292:	bd30      	pop	{r4, r5, pc}
    __HAL_LOCK(hi2c);
 8008294:	2002      	movs	r0, #2
 8008296:	e7fb      	b.n	8008290 <HAL_I2C_Master_Transmit_DMA+0x150>
 8008298:	20000188 	.word	0x20000188
 800829c:	14f8b589 	.word	0x14f8b589
 80082a0:	ffff0000 	.word	0xffff0000
 80082a4:	080087b3 	.word	0x080087b3
 80082a8:	0800876d 	.word	0x0800876d

080082ac <I2C_MasterTransmit_BTF>:
{
 80082ac:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b21      	cmp	r3, #33	; 0x21
 80082b8:	d000      	beq.n	80082bc <I2C_MasterTransmit_BTF+0x10>
}
 80082ba:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 80082bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	b163      	cbz	r3, 80082dc <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80082c4:	6803      	ldr	r3, [r0, #0]
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80082ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80082cc:	3301      	adds	r3, #1
 80082ce:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80082d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	8543      	strh	r3, [r0, #42]	; 0x2a
 80082da:	e7ee      	b.n	80082ba <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80082dc:	2a08      	cmp	r2, #8
 80082de:	d004      	beq.n	80082ea <I2C_MasterTransmit_BTF+0x3e>
 80082e0:	2a20      	cmp	r2, #32
 80082e2:	d002      	beq.n	80082ea <I2C_MasterTransmit_BTF+0x3e>
 80082e4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80082e8:	d113      	bne.n	8008312 <I2C_MasterTransmit_BTF+0x66>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082ea:	6802      	ldr	r2, [r0, #0]
 80082ec:	6853      	ldr	r3, [r2, #4]
 80082ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80082f2:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f4:	6802      	ldr	r2, [r0, #0]
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082fc:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008302:	2220      	movs	r2, #32
 8008304:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008308:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800830c:	f7fc fb0e 	bl	800492c <HAL_I2C_MasterTxCpltCallback>
}
 8008310:	e7d3      	b.n	80082ba <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008312:	6802      	ldr	r2, [r0, #0]
 8008314:	6853      	ldr	r3, [r2, #4]
 8008316:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800831a:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800831c:	2311      	movs	r3, #17
 800831e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008320:	2300      	movs	r3, #0
 8008322:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008326:	2320      	movs	r3, #32
 8008328:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800832c:	f7fc fafe 	bl	800492c <HAL_I2C_MasterTxCpltCallback>
 8008330:	e7c3      	b.n	80082ba <I2C_MasterTransmit_BTF+0xe>

08008332 <HAL_I2C_MasterRxCpltCallback>:
}
 8008332:	4770      	bx	lr

08008334 <HAL_I2C_SlaveTxCpltCallback>:
}
 8008334:	4770      	bx	lr

08008336 <I2C_SlaveTransmit_TXE>:
{
 8008336:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008338:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800833c:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800833e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008340:	b29b      	uxth	r3, r3
 8008342:	b183      	cbz	r3, 8008366 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008344:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008346:	6803      	ldr	r3, [r0, #0]
 8008348:	7809      	ldrb	r1, [r1, #0]
 800834a:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800834c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800834e:	3301      	adds	r3, #1
 8008350:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8008352:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29b      	uxth	r3, r3
 800835a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800835c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800835e:	b29b      	uxth	r3, r3
 8008360:	b90b      	cbnz	r3, 8008366 <I2C_SlaveTransmit_TXE+0x30>
 8008362:	2a29      	cmp	r2, #41	; 0x29
 8008364:	d000      	beq.n	8008368 <I2C_SlaveTransmit_TXE+0x32>
}
 8008366:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008368:	6802      	ldr	r2, [r0, #0]
 800836a:	6853      	ldr	r3, [r2, #4]
 800836c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008370:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008372:	2321      	movs	r3, #33	; 0x21
 8008374:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008376:	2328      	movs	r3, #40	; 0x28
 8008378:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800837c:	f7ff ffda 	bl	8008334 <HAL_I2C_SlaveTxCpltCallback>
}
 8008380:	e7f1      	b.n	8008366 <I2C_SlaveTransmit_TXE+0x30>

08008382 <HAL_I2C_SlaveRxCpltCallback>:
}
 8008382:	4770      	bx	lr

08008384 <I2C_SlaveReceive_RXNE>:
{
 8008384:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008386:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800838a:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800838c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800838e:	b29b      	uxth	r3, r3
 8008390:	b183      	cbz	r3, 80083b4 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008392:	6803      	ldr	r3, [r0, #0]
 8008394:	6919      	ldr	r1, [r3, #16]
 8008396:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008398:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800839a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800839c:	3301      	adds	r3, #1
 800839e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80083a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	b90b      	cbnz	r3, 80083b4 <I2C_SlaveReceive_RXNE+0x30>
 80083b0:	2a2a      	cmp	r2, #42	; 0x2a
 80083b2:	d000      	beq.n	80083b6 <I2C_SlaveReceive_RXNE+0x32>
}
 80083b4:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083b6:	6802      	ldr	r2, [r0, #0]
 80083b8:	6853      	ldr	r3, [r2, #4]
 80083ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083be:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083c0:	2322      	movs	r3, #34	; 0x22
 80083c2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80083c4:	2328      	movs	r3, #40	; 0x28
 80083c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80083ca:	f7ff ffda 	bl	8008382 <HAL_I2C_SlaveRxCpltCallback>
}
 80083ce:	e7f1      	b.n	80083b4 <I2C_SlaveReceive_RXNE+0x30>

080083d0 <HAL_I2C_AddrCallback>:
}
 80083d0:	4770      	bx	lr

080083d2 <I2C_Slave_ADDR>:
{
 80083d2:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083dc:	2b28      	cmp	r3, #40	; 0x28
 80083de:	d007      	beq.n	80083f0 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80083e0:	6803      	ldr	r3, [r0, #0]
 80083e2:	f06f 0202 	mvn.w	r2, #2
 80083e6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80083e8:	2300      	movs	r3, #0
 80083ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80083ee:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80083f0:	6802      	ldr	r2, [r0, #0]
 80083f2:	6853      	ldr	r3, [r2, #4]
 80083f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083f8:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80083fa:	f011 0f04 	tst.w	r1, #4
 80083fe:	d00b      	beq.n	8008418 <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008400:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008402:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008406:	d109      	bne.n	800841c <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008408:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800840a:	2100      	movs	r1, #0
 800840c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008410:	4619      	mov	r1, r3
 8008412:	f7ff ffdd 	bl	80083d0 <HAL_I2C_AddrCallback>
 8008416:	e7ea      	b.n	80083ee <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008418:	2301      	movs	r3, #1
 800841a:	e7f2      	b.n	8008402 <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800841c:	8b02      	ldrh	r2, [r0, #24]
 800841e:	e7f4      	b.n	800840a <I2C_Slave_ADDR+0x38>

08008420 <HAL_I2C_ListenCpltCallback>:
}
 8008420:	4770      	bx	lr
	...

08008424 <I2C_Slave_AF>:
{
 8008424:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008426:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800842a:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800842c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800842e:	2a08      	cmp	r2, #8
 8008430:	d001      	beq.n	8008436 <I2C_Slave_AF+0x12>
 8008432:	2a20      	cmp	r2, #32
 8008434:	d101      	bne.n	800843a <I2C_Slave_AF+0x16>
 8008436:	2b28      	cmp	r3, #40	; 0x28
 8008438:	d006      	beq.n	8008448 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800843a:	2b21      	cmp	r3, #33	; 0x21
 800843c:	d01e      	beq.n	800847c <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800843e:	6803      	ldr	r3, [r0, #0]
 8008440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008444:	615a      	str	r2, [r3, #20]
}
 8008446:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008448:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <I2C_Slave_AF+0x90>)
 800844a:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800844c:	6802      	ldr	r2, [r0, #0]
 800844e:	6853      	ldr	r3, [r2, #4]
 8008450:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008454:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008456:	6803      	ldr	r3, [r0, #0]
 8008458:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800845c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800845e:	6802      	ldr	r2, [r0, #0]
 8008460:	6813      	ldr	r3, [r2, #0]
 8008462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008466:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008468:	2300      	movs	r3, #0
 800846a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800846c:	2220      	movs	r2, #32
 800846e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008472:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8008476:	f7ff ffd3 	bl	8008420 <HAL_I2C_ListenCpltCallback>
 800847a:	e7e4      	b.n	8008446 <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800847c:	4b0d      	ldr	r3, [pc, #52]	; (80084b4 <I2C_Slave_AF+0x90>)
 800847e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008480:	2321      	movs	r3, #33	; 0x21
 8008482:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008484:	2320      	movs	r3, #32
 8008486:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008490:	6802      	ldr	r2, [r0, #0]
 8008492:	6853      	ldr	r3, [r2, #4]
 8008494:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008498:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800849a:	6803      	ldr	r3, [r0, #0]
 800849c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084a2:	6802      	ldr	r2, [r0, #0]
 80084a4:	6813      	ldr	r3, [r2, #0]
 80084a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084aa:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80084ac:	f7ff ff42 	bl	8008334 <HAL_I2C_SlaveTxCpltCallback>
 80084b0:	e7c9      	b.n	8008446 <I2C_Slave_AF+0x22>
 80084b2:	bf00      	nop
 80084b4:	ffff0000 	.word	0xffff0000

080084b8 <HAL_I2C_MemTxCpltCallback>:
}
 80084b8:	4770      	bx	lr

080084ba <I2C_MemoryTransmit_TXE_BTF>:
{
 80084ba:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80084c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80084c2:	b99a      	cbnz	r2, 80084ec <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80084c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d008      	beq.n	80084dc <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80084ca:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80084cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80084d0:	6802      	ldr	r2, [r0, #0]
 80084d2:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80084d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80084d6:	3301      	adds	r3, #1
 80084d8:	6503      	str	r3, [r0, #80]	; 0x50
}
 80084da:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80084dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80084de:	6802      	ldr	r2, [r0, #0]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80084e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80084e6:	3302      	adds	r3, #2
 80084e8:	6503      	str	r3, [r0, #80]	; 0x50
 80084ea:	e7f6      	b.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
 80084ec:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 80084ee:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80084f0:	2a01      	cmp	r2, #1
 80084f2:	d023      	beq.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 80084f4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80084f6:	2a02      	cmp	r2, #2
 80084f8:	d1ef      	bne.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80084fa:	2b22      	cmp	r3, #34	; 0x22
 80084fc:	d026      	beq.n	800854c <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80084fe:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008500:	b292      	uxth	r2, r2
 8008502:	b10a      	cbz	r2, 8008508 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8008504:	2b21      	cmp	r3, #33	; 0x21
 8008506:	d027      	beq.n	8008558 <I2C_MemoryTransmit_TXE_BTF+0x9e>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008508:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800850a:	b292      	uxth	r2, r2
 800850c:	2a00      	cmp	r2, #0
 800850e:	d1e4      	bne.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
 8008510:	2b21      	cmp	r3, #33	; 0x21
 8008512:	d1e2      	bne.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008514:	6802      	ldr	r2, [r0, #0]
 8008516:	6853      	ldr	r3, [r2, #4]
 8008518:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800851c:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851e:	6802      	ldr	r2, [r0, #0]
 8008520:	6813      	ldr	r3, [r2, #0]
 8008522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008526:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008528:	2300      	movs	r3, #0
 800852a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800852c:	2220      	movs	r2, #32
 800852e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008532:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008536:	f7ff ffbf 	bl	80084b8 <HAL_I2C_MemTxCpltCallback>
}
 800853a:	e7ce      	b.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800853c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800853e:	6802      	ldr	r2, [r0, #0]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8008544:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008546:	3301      	adds	r3, #1
 8008548:	6503      	str	r3, [r0, #80]	; 0x50
 800854a:	e7c6      	b.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800854c:	6802      	ldr	r2, [r0, #0]
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e7c0      	b.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008558:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800855a:	6803      	ldr	r3, [r0, #0]
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008562:	3301      	adds	r3, #1
 8008564:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8008566:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	b29b      	uxth	r3, r3
 800856e:	8543      	strh	r3, [r0, #42]	; 0x2a
 8008570:	e7b3      	b.n	80084da <I2C_MemoryTransmit_TXE_BTF+0x20>

08008572 <I2C_MasterTransmit_TXE>:
{
 8008572:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008574:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008578:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800857a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800857e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008580:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008582:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8008584:	b909      	cbnz	r1, 800858a <I2C_MasterTransmit_TXE+0x18>
 8008586:	2b21      	cmp	r3, #33	; 0x21
 8008588:	d004      	beq.n	8008594 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800858a:	2b21      	cmp	r3, #33	; 0x21
 800858c:	d03b      	beq.n	8008606 <I2C_MasterTransmit_TXE+0x94>
 800858e:	2a40      	cmp	r2, #64	; 0x40
 8008590:	d037      	beq.n	8008602 <I2C_MasterTransmit_TXE+0x90>
}
 8008592:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008594:	2c08      	cmp	r4, #8
 8008596:	d004      	beq.n	80085a2 <I2C_MasterTransmit_TXE+0x30>
 8008598:	2c20      	cmp	r4, #32
 800859a:	d002      	beq.n	80085a2 <I2C_MasterTransmit_TXE+0x30>
 800859c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80085a0:	d119      	bne.n	80085d6 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085a2:	6802      	ldr	r2, [r0, #0]
 80085a4:	6853      	ldr	r3, [r2, #4]
 80085a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80085aa:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ac:	6802      	ldr	r2, [r0, #0]
 80085ae:	6813      	ldr	r3, [r2, #0]
 80085b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085b4:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80085ba:	2320      	movs	r3, #32
 80085bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d015      	beq.n	80085f6 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80085d0:	f7fc f9ac 	bl	800492c <HAL_I2C_MasterTxCpltCallback>
 80085d4:	e7dd      	b.n	8008592 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085d6:	6802      	ldr	r2, [r0, #0]
 80085d8:	6853      	ldr	r3, [r2, #4]
 80085da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80085de:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80085e0:	2311      	movs	r3, #17
 80085e2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80085ea:	2320      	movs	r3, #32
 80085ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80085f0:	f7fc f99c 	bl	800492c <HAL_I2C_MasterTxCpltCallback>
 80085f4:	e7cd      	b.n	8008592 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80085fc:	f7ff ff5c 	bl	80084b8 <HAL_I2C_MemTxCpltCallback>
 8008600:	e7c7      	b.n	8008592 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008602:	2b22      	cmp	r3, #34	; 0x22
 8008604:	d1c5      	bne.n	8008592 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8008606:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008608:	b29b      	uxth	r3, r3
 800860a:	b92b      	cbnz	r3, 8008618 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800860c:	6802      	ldr	r2, [r0, #0]
 800860e:	6853      	ldr	r3, [r2, #4]
 8008610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008614:	6053      	str	r3, [r2, #4]
 8008616:	e7bc      	b.n	8008592 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008618:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b40      	cmp	r3, #64	; 0x40
 8008620:	d00c      	beq.n	800863c <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008622:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008624:	6803      	ldr	r3, [r0, #0]
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800862a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800862c:	3301      	adds	r3, #1
 800862e:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 8008630:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008632:	b29b      	uxth	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b29b      	uxth	r3, r3
 8008638:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800863a:	e7aa      	b.n	8008592 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800863c:	f7ff ff3d 	bl	80084ba <I2C_MemoryTransmit_TXE_BTF>
 8008640:	e7a7      	b.n	8008592 <I2C_MasterTransmit_TXE+0x20>

08008642 <HAL_I2C_MemRxCpltCallback>:
}
 8008642:	4770      	bx	lr

08008644 <I2C_MasterReceive_BTF>:
{
 8008644:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008646:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8008648:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800864a:	b29b      	uxth	r3, r3
 800864c:	2b04      	cmp	r3, #4
 800864e:	d014      	beq.n	800867a <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8008650:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008652:	b29b      	uxth	r3, r3
 8008654:	2b03      	cmp	r3, #3
 8008656:	d022      	beq.n	800869e <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8008658:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d039      	beq.n	80086d4 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008660:	6803      	ldr	r3, [r0, #0]
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008666:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008668:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800866a:	3301      	adds	r3, #1
 800866c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800866e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29b      	uxth	r3, r3
 8008676:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8008678:	e010      	b.n	800869c <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800867a:	6802      	ldr	r2, [r0, #0]
 800867c:	6853      	ldr	r3, [r2, #4]
 800867e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008682:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008684:	6803      	ldr	r3, [r0, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800868a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800868c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800868e:	3301      	adds	r3, #1
 8008690:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8008692:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29b      	uxth	r3, r3
 800869a:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800869c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800869e:	6801      	ldr	r1, [r0, #0]
 80086a0:	684b      	ldr	r3, [r1, #4]
 80086a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086a6:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80086a8:	2a04      	cmp	r2, #4
 80086aa:	d006      	beq.n	80086ba <I2C_MasterReceive_BTF+0x76>
 80086ac:	2a02      	cmp	r2, #2
 80086ae:	d004      	beq.n	80086ba <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086b0:	6802      	ldr	r2, [r0, #0]
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086b8:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ba:	6803      	ldr	r3, [r0, #0]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80086c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086c4:	3301      	adds	r3, #1
 80086c6:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80086c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80086d2:	e7e3      	b.n	800869c <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80086d4:	2a01      	cmp	r2, #1
 80086d6:	d00b      	beq.n	80086f0 <I2C_MasterReceive_BTF+0xac>
 80086d8:	2a10      	cmp	r2, #16
 80086da:	d009      	beq.n	80086f0 <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80086dc:	2a04      	cmp	r2, #4
 80086de:	d038      	beq.n	8008752 <I2C_MasterReceive_BTF+0x10e>
 80086e0:	2a02      	cmp	r2, #2
 80086e2:	d036      	beq.n	8008752 <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e4:	6802      	ldr	r2, [r0, #0]
 80086e6:	6813      	ldr	r3, [r2, #0]
 80086e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e004      	b.n	80086fa <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f0:	6802      	ldr	r2, [r0, #0]
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f8:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086fa:	6803      	ldr	r3, [r0, #0]
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008700:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008702:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008704:	1c53      	adds	r3, r2, #1
 8008706:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8008708:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29b      	uxth	r3, r3
 8008710:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008712:	6803      	ldr	r3, [r0, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8008718:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800871a:	3301      	adds	r3, #1
 800871c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800871e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008720:	b29b      	uxth	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008728:	6802      	ldr	r2, [r0, #0]
 800872a:	6853      	ldr	r3, [r2, #4]
 800872c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008730:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008732:	2320      	movs	r3, #32
 8008734:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008738:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b40      	cmp	r3, #64	; 0x40
 8008740:	d00d      	beq.n	800875e <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008742:	2300      	movs	r3, #0
 8008744:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008748:	2312      	movs	r3, #18
 800874a:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800874c:	f7ff fdf1 	bl	8008332 <HAL_I2C_MasterRxCpltCallback>
 8008750:	e7a4      	b.n	800869c <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008752:	6802      	ldr	r2, [r0, #0]
 8008754:	6813      	ldr	r3, [r2, #0]
 8008756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	e7cd      	b.n	80086fa <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800875e:	2300      	movs	r3, #0
 8008760:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008764:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008766:	f7ff ff6c 	bl	8008642 <HAL_I2C_MemRxCpltCallback>
 800876a:	e797      	b.n	800869c <I2C_MasterReceive_BTF+0x58>

0800876c <I2C_DMAError>:
{
 800876c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800876e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8008770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008772:	b10b      	cbz	r3, 8008778 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008774:	2200      	movs	r2, #0
 8008776:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8008778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800877a:	b10b      	cbz	r3, 8008780 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800877c:	2200      	movs	r2, #0
 800877e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008780:	f7fe ff3f 	bl	8007602 <HAL_DMA_GetError>
 8008784:	2802      	cmp	r0, #2
 8008786:	d100      	bne.n	800878a <I2C_DMAError+0x1e>
}
 8008788:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	6813      	ldr	r3, [r2, #0]
 800878e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008792:	6013      	str	r3, [r2, #0]
    hi2c->XferCount = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8008798:	2220      	movs	r2, #32
 800879a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800879e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80087a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087a4:	f043 0310 	orr.w	r3, r3, #16
 80087a8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7fc f8ae 	bl	800490c <HAL_I2C_ErrorCallback>
}
 80087b0:	e7ea      	b.n	8008788 <I2C_DMAError+0x1c>

080087b2 <I2C_DMAXferCplt>:
{
 80087b2:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80087b4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80087ba:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087bc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80087c0:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087c2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	6842      	ldr	r2, [r0, #4]
 80087c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80087cc:	6042      	str	r2, [r0, #4]
  if (hi2c->hdmatx != NULL)
 80087ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80087d0:	b10a      	cbz	r2, 80087d6 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80087d2:	2000      	movs	r0, #0
 80087d4:	63d0      	str	r0, [r2, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80087d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087d8:	b10a      	cbz	r2, 80087de <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80087da:	2000      	movs	r0, #0
 80087dc:	63d0      	str	r0, [r2, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80087de:	f003 0221 	and.w	r2, r3, #33	; 0x21
 80087e2:	2a21      	cmp	r2, #33	; 0x21
 80087e4:	d041      	beq.n	800886a <I2C_DMAXferCplt+0xb8>
 80087e6:	f003 0222 	and.w	r2, r3, #34	; 0x22
 80087ea:	2a22      	cmp	r2, #34	; 0x22
 80087ec:	d03b      	beq.n	8008866 <I2C_DMAXferCplt+0xb4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80087ee:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d049      	beq.n	800888a <I2C_DMAXferCplt+0xd8>
    if (hi2c->XferCount == (uint16_t)1)
 80087f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d058      	beq.n	80088b0 <I2C_DMAXferCplt+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	6853      	ldr	r3, [r2, #4]
 8008802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008806:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008808:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800880c:	d006      	beq.n	800881c <I2C_DMAXferCplt+0x6a>
 800880e:	2d08      	cmp	r5, #8
 8008810:	d004      	beq.n	800881c <I2C_DMAXferCplt+0x6a>
 8008812:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8008816:	d001      	beq.n	800881c <I2C_DMAXferCplt+0x6a>
 8008818:	2d20      	cmp	r5, #32
 800881a:	d104      	bne.n	8008826 <I2C_DMAXferCplt+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	6813      	ldr	r3, [r2, #0]
 8008820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008824:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	6853      	ldr	r3, [r2, #4]
 800882a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800882e:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	6853      	ldr	r3, [r2, #4]
 8008834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008838:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800883e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d13b      	bne.n	80088bc <I2C_DMAXferCplt+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008844:	2320      	movs	r3, #32
 8008846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800884a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d037      	beq.n	80088c4 <I2C_DMAXferCplt+0x112>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008854:	2300      	movs	r3, #0
 8008856:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800885a:	2312      	movs	r3, #18
 800885c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff fd67 	bl	8008332 <HAL_I2C_MasterRxCpltCallback>
}
 8008864:	e011      	b.n	800888a <I2C_DMAXferCplt+0xd8>
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008866:	2920      	cmp	r1, #32
 8008868:	d1c1      	bne.n	80087ee <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800886a:	6821      	ldr	r1, [r4, #0]
 800886c:	684a      	ldr	r2, [r1, #4]
 800886e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008872:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 8008874:	2200      	movs	r2, #0
 8008876:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008878:	2b29      	cmp	r3, #41	; 0x29
 800887a:	d007      	beq.n	800888c <I2C_DMAXferCplt+0xda>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800887c:	2b2a      	cmp	r3, #42	; 0x2a
 800887e:	d00e      	beq.n	800889e <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	6853      	ldr	r3, [r2, #4]
 8008884:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008888:	6053      	str	r3, [r2, #4]
}
 800888a:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800888c:	2321      	movs	r3, #33	; 0x21
 800888e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008890:	2328      	movs	r3, #40	; 0x28
 8008892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff fd4c 	bl	8008334 <HAL_I2C_SlaveTxCpltCallback>
 800889c:	e7f0      	b.n	8008880 <I2C_DMAXferCplt+0xce>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800889e:	2322      	movs	r3, #34	; 0x22
 80088a0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088a2:	2328      	movs	r3, #40	; 0x28
 80088a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088a8:	4620      	mov	r0, r4
 80088aa:	f7ff fd6a 	bl	8008382 <HAL_I2C_SlaveRxCpltCallback>
 80088ae:	e7e7      	b.n	8008880 <I2C_DMAXferCplt+0xce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e7a0      	b.n	80087fe <I2C_DMAXferCplt+0x4c>
      HAL_I2C_ErrorCallback(hi2c);
 80088bc:	4620      	mov	r0, r4
 80088be:	f7fc f825 	bl	800490c <HAL_I2C_ErrorCallback>
 80088c2:	e7e2      	b.n	800888a <I2C_DMAXferCplt+0xd8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80088ca:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff feb8 	bl	8008642 <HAL_I2C_MemRxCpltCallback>
 80088d2:	e7da      	b.n	800888a <I2C_DMAXferCplt+0xd8>

080088d4 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80088d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b22      	cmp	r3, #34	; 0x22
 80088dc:	d000      	beq.n	80088e0 <I2C_MasterReceive_RXNE+0xc>
 80088de:	4770      	bx	lr
{
 80088e0:	b510      	push	{r4, lr}
 80088e2:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 80088e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80088e6:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d916      	bls.n	800891a <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ec:	6803      	ldr	r3, [r0, #0]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088f2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80088f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088f6:	3301      	adds	r3, #1
 80088f8:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80088fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8008904:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008906:	b29b      	uxth	r3, r3
 8008908:	2b03      	cmp	r3, #3
 800890a:	d000      	beq.n	800890e <I2C_MasterReceive_RXNE+0x3a>
}
 800890c:	bd10      	pop	{r4, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800890e:	6802      	ldr	r2, [r0, #0]
 8008910:	6853      	ldr	r3, [r2, #4]
 8008912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008916:	6053      	str	r3, [r2, #4]
 8008918:	e7f8      	b.n	800890c <I2C_MasterReceive_RXNE+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800891a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800891c:	2a02      	cmp	r2, #2
 800891e:	d0f5      	beq.n	800890c <I2C_MasterReceive_RXNE+0x38>
 8008920:	2b01      	cmp	r3, #1
 8008922:	d8f3      	bhi.n	800890c <I2C_MasterReceive_RXNE+0x38>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008924:	f7ff f8e8 	bl	8007af8 <I2C_WaitOnSTOPRequestThroughIT>
 8008928:	2800      	cmp	r0, #0
 800892a:	d12e      	bne.n	800898a <I2C_MasterReceive_RXNE+0xb6>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	6813      	ldr	r3, [r2, #0]
 8008930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008934:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	6853      	ldr	r3, [r2, #4]
 800893a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800893e:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008946:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800894a:	3301      	adds	r3, #1
 800894c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800894e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	b29b      	uxth	r3, r3
 8008956:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008958:	2320      	movs	r3, #32
 800895a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800895e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b40      	cmp	r3, #64	; 0x40
 8008966:	d008      	beq.n	800897a <I2C_MasterReceive_RXNE+0xa6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008968:	2300      	movs	r3, #0
 800896a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800896e:	2312      	movs	r3, #18
 8008970:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008972:	4620      	mov	r0, r4
 8008974:	f7ff fcdd 	bl	8008332 <HAL_I2C_MasterRxCpltCallback>
 8008978:	e7c8      	b.n	800890c <I2C_MasterReceive_RXNE+0x38>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800897a:	2300      	movs	r3, #0
 800897c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008980:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008982:	4620      	mov	r0, r4
 8008984:	f7ff fe5d 	bl	8008642 <HAL_I2C_MemRxCpltCallback>
 8008988:	e7c0      	b.n	800890c <I2C_MasterReceive_RXNE+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800898a:	6822      	ldr	r2, [r4, #0]
 800898c:	6853      	ldr	r3, [r2, #4]
 800898e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008992:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800899a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800899c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800899e:	3301      	adds	r3, #1
 80089a0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80089a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80089ac:	2320      	movs	r3, #32
 80089ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7fb ffa7 	bl	800490c <HAL_I2C_ErrorCallback>
}
 80089be:	e7a5      	b.n	800890c <I2C_MasterReceive_RXNE+0x38>

080089c0 <HAL_I2C_AbortCpltCallback>:
}
 80089c0:	4770      	bx	lr
	...

080089c4 <I2C_DMAAbort>:
{
 80089c4:	b500      	push	{lr}
 80089c6:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80089cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089ce:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80089d2:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089d4:	4b32      	ldr	r3, [pc, #200]	; (8008aa0 <I2C_DMAAbort+0xdc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	4932      	ldr	r1, [pc, #200]	; (8008aa4 <I2C_DMAAbort+0xe0>)
 80089dc:	fba1 1303 	umull	r1, r3, r1, r3
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80089e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80089ea:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	b143      	cbz	r3, 8008a02 <I2C_DMAAbort+0x3e>
    count--;
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089f6:	6803      	ldr	r3, [r0, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80089fe:	d1f5      	bne.n	80089ec <I2C_DMAAbort+0x28>
 8008a00:	e003      	b.n	8008a0a <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a04:	f043 0320 	orr.w	r3, r3, #32
 8008a08:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8008a0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008a0c:	b10b      	cbz	r3, 8008a12 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008a0e:	2100      	movs	r1, #0
 8008a10:	63d9      	str	r1, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8008a12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a14:	b10b      	cbz	r3, 8008a1a <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008a16:	2100      	movs	r1, #0
 8008a18:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a1a:	6801      	ldr	r1, [r0, #0]
 8008a1c:	680b      	ldr	r3, [r1, #0]
 8008a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a22:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8008a28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008a2a:	b10b      	cbz	r3, 8008a30 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6519      	str	r1, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8008a30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a32:	b10b      	cbz	r3, 8008a38 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a34:	2100      	movs	r1, #0
 8008a36:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8008a38:	6801      	ldr	r1, [r0, #0]
 8008a3a:	680b      	ldr	r3, [r1, #0]
 8008a3c:	f023 0301 	bic.w	r3, r3, #1
 8008a40:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b60      	cmp	r3, #96	; 0x60
 8008a4a:	d00e      	beq.n	8008a6a <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a4c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008a50:	2a28      	cmp	r2, #40	; 0x28
 8008a52:	d014      	beq.n	8008a7e <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8008a54:	2320      	movs	r3, #32
 8008a56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008a60:	f7fb ff54 	bl	800490c <HAL_I2C_ErrorCallback>
}
 8008a64:	b003      	add	sp, #12
 8008a66:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a6a:	2320      	movs	r3, #32
 8008a6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008a76:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a78:	f7ff ffa2 	bl	80089c0 <HAL_I2C_AbortCpltCallback>
 8008a7c:	e7f2      	b.n	8008a64 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8008a7e:	6802      	ldr	r2, [r0, #0]
 8008a80:	6813      	ldr	r3, [r2, #0]
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a88:	6802      	ldr	r2, [r0, #0]
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a90:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a96:	2328      	movs	r3, #40	; 0x28
 8008a98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8008a9c:	e7e0      	b.n	8008a60 <I2C_DMAAbort+0x9c>
 8008a9e:	bf00      	nop
 8008aa0:	20000188 	.word	0x20000188
 8008aa4:	14f8b589 	.word	0x14f8b589

08008aa8 <I2C_ITError>:
{
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008aac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008ab0:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008ab2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8008ab6:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ab8:	2a10      	cmp	r2, #16
 8008aba:	d036      	beq.n	8008b2a <I2C_ITError+0x82>
 8008abc:	2a40      	cmp	r2, #64	; 0x40
 8008abe:	d034      	beq.n	8008b2a <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ac0:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8008ac4:	2a28      	cmp	r2, #40	; 0x28
 8008ac6:	d038      	beq.n	8008b3a <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	6852      	ldr	r2, [r2, #4]
 8008acc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008ad0:	d107      	bne.n	8008ae2 <I2C_ITError+0x3a>
 8008ad2:	2b60      	cmp	r3, #96	; 0x60
 8008ad4:	d005      	beq.n	8008ae2 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008ad6:	2320      	movs	r3, #32
 8008ad8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008aee:	d048      	beq.n	8008b82 <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008af6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008af8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008afa:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d020      	beq.n	8008b46 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b04:	4b44      	ldr	r3, [pc, #272]	; (8008c18 <I2C_ITError+0x170>)
 8008b06:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b08:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008b0a:	f7fe fc76 	bl	80073fa <HAL_DMA_Abort_IT>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d049      	beq.n	8008ba6 <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	6813      	ldr	r3, [r2, #0]
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b22:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008b24:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008b26:	4798      	blx	r3
 8008b28:	e03d      	b.n	8008ba6 <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008b2a:	2b22      	cmp	r3, #34	; 0x22
 8008b2c:	d1c8      	bne.n	8008ac0 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	680a      	ldr	r2, [r1, #0]
 8008b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b36:	600a      	str	r2, [r1, #0]
 8008b38:	e7c2      	b.n	8008ac0 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b3e:	2328      	movs	r3, #40	; 0x28
 8008b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008b44:	e7cf      	b.n	8008ae6 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b48:	4a33      	ldr	r2, [pc, #204]	; (8008c18 <I2C_ITError+0x170>)
 8008b4a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008b4e:	f7fe fc54 	bl	80073fa <HAL_DMA_Abort_IT>
 8008b52:	b340      	cbz	r0, 8008ba6 <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008b5c:	d005      	beq.n	8008b6a <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b62:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b66:	3301      	adds	r3, #1
 8008b68:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	6813      	ldr	r3, [r2, #0]
 8008b6e:	f023 0301 	bic.w	r3, r3, #1
 8008b72:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008b74:	2320      	movs	r3, #32
 8008b76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008b7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008b7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008b7e:	4798      	blx	r3
 8008b80:	e011      	b.n	8008ba6 <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b82:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	2a60      	cmp	r2, #96	; 0x60
 8008b8a:	d01f      	beq.n	8008bcc <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b8c:	695a      	ldr	r2, [r3, #20]
 8008b8e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008b92:	d005      	beq.n	8008ba0 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b98:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f7fb feb3 	bl	800490c <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8008ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ba8:	f013 0f0f 	tst.w	r3, #15
 8008bac:	d004      	beq.n	8008bb8 <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	6853      	ldr	r3, [r2, #4]
 8008bb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008bb6:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8008bb8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008bbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008bc0:	f012 0f04 	tst.w	r2, #4
 8008bc4:	d001      	beq.n	8008bca <I2C_ITError+0x122>
 8008bc6:	2b28      	cmp	r3, #40	; 0x28
 8008bc8:	d018      	beq.n	8008bfc <I2C_ITError+0x154>
}
 8008bca:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008bdc:	d005      	beq.n	8008bea <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be6:	3301      	adds	r3, #1
 8008be8:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	6813      	ldr	r3, [r2, #0]
 8008bee:	f023 0301 	bic.w	r3, r3, #1
 8008bf2:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff fee3 	bl	80089c0 <HAL_I2C_AbortCpltCallback>
 8008bfa:	e7d4      	b.n	8008ba6 <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008bfc:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <I2C_ITError+0x174>)
 8008bfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c00:	2300      	movs	r3, #0
 8008c02:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c04:	2220      	movs	r2, #32
 8008c06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7ff fc06 	bl	8008420 <HAL_I2C_ListenCpltCallback>
}
 8008c14:	e7d9      	b.n	8008bca <I2C_ITError+0x122>
 8008c16:	bf00      	nop
 8008c18:	080089c5 	.word	0x080089c5
 8008c1c:	ffff0000 	.word	0xffff0000

08008c20 <I2C_Slave_STOPF>:
{
 8008c20:	b530      	push	{r4, r5, lr}
 8008c22:	b083      	sub	sp, #12
 8008c24:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c26:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8008c2a:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c2c:	6802      	ldr	r2, [r0, #0]
 8008c2e:	6853      	ldr	r3, [r2, #4]
 8008c30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008c34:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008c36:	2300      	movs	r3, #0
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	6803      	ldr	r3, [r0, #0]
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	9201      	str	r2, [sp, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c4a:	6802      	ldr	r2, [r0, #0]
 8008c4c:	6813      	ldr	r3, [r2, #0]
 8008c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c52:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c54:	6803      	ldr	r3, [r0, #0]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008c5c:	d038      	beq.n	8008cd0 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c5e:	2d22      	cmp	r5, #34	; 0x22
 8008c60:	d021      	beq.n	8008ca6 <I2C_Slave_STOPF+0x86>
 8008c62:	2d2a      	cmp	r5, #42	; 0x2a
 8008c64:	d01f      	beq.n	8008ca6 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008c66:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008c68:	6812      	ldr	r2, [r2, #0]
 8008c6a:	6852      	ldr	r2, [r2, #4]
 8008c6c:	b292      	uxth	r2, r2
 8008c6e:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8008c70:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008c72:	b292      	uxth	r2, r2
 8008c74:	b11a      	cbz	r2, 8008c7e <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c76:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008c78:	f042 0204 	orr.w	r2, r2, #4
 8008c7c:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c84:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008c88:	f7fe fcb8 	bl	80075fc <HAL_DMA_GetState>
 8008c8c:	2801      	cmp	r0, #1
 8008c8e:	d01f      	beq.n	8008cd0 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c92:	4a44      	ldr	r2, [pc, #272]	; (8008da4 <I2C_Slave_STOPF+0x184>)
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008c98:	f7fe fbaf 	bl	80073fa <HAL_DMA_Abort_IT>
 8008c9c:	b1c0      	cbz	r0, 8008cd0 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008ca0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008ca2:	4798      	blx	r3
 8008ca4:	e014      	b.n	8008cd0 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008ca6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	6852      	ldr	r2, [r2, #4]
 8008cac:	b292      	uxth	r2, r2
 8008cae:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8008cb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008cb2:	b292      	uxth	r2, r2
 8008cb4:	b11a      	cbz	r2, 8008cbe <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008cb8:	f042 0204 	orr.w	r2, r2, #4
 8008cbc:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cc4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008cc8:	f7fe fc98 	bl	80075fc <HAL_DMA_GetState>
 8008ccc:	2801      	cmp	r0, #1
 8008cce:	d142      	bne.n	8008d56 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8008cd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	b333      	cbz	r3, 8008d24 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	f012 0f04 	tst.w	r2, #4
 8008cde:	d00a      	beq.n	8008cf6 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce8:	3301      	adds	r3, #1
 8008cea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008cec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	695a      	ldr	r2, [r3, #20]
 8008cfa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008cfe:	d00a      	beq.n	8008d16 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d04:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d08:	3301      	adds	r3, #1
 8008d0a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8008d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	b11b      	cbz	r3, 8008d24 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d1e:	f043 0304 	orr.w	r3, r3, #4
 8008d22:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d26:	bb13      	cbnz	r3, 8008d6e <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d28:	2d2a      	cmp	r5, #42	; 0x2a
 8008d2a:	d025      	beq.n	8008d78 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d2c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b28      	cmp	r3, #40	; 0x28
 8008d34:	d029      	beq.n	8008d8a <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d38:	2b22      	cmp	r3, #34	; 0x22
 8008d3a:	d001      	beq.n	8008d40 <I2C_Slave_STOPF+0x120>
 8008d3c:	2d22      	cmp	r5, #34	; 0x22
 8008d3e:	d119      	bne.n	8008d74 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008d44:	2220      	movs	r2, #32
 8008d46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff fb17 	bl	8008382 <HAL_I2C_SlaveRxCpltCallback>
}
 8008d54:	e00e      	b.n	8008d74 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d58:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <I2C_Slave_STOPF+0x184>)
 8008d5a:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008d5e:	f7fe fb4c 	bl	80073fa <HAL_DMA_Abort_IT>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0b4      	beq.n	8008cd0 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008d68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d6a:	4798      	blx	r3
 8008d6c:	e7b0      	b.n	8008cd0 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f7ff fe9a 	bl	8008aa8 <I2C_ITError>
}
 8008d74:	b003      	add	sp, #12
 8008d76:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d7c:	2328      	movs	r3, #40	; 0x28
 8008d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7ff fafd 	bl	8008382 <HAL_I2C_SlaveRxCpltCallback>
 8008d88:	e7d0      	b.n	8008d2c <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d8a:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <I2C_Slave_STOPF+0x188>)
 8008d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008d92:	2220      	movs	r2, #32
 8008d94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7ff fb3f 	bl	8008420 <HAL_I2C_ListenCpltCallback>
 8008da2:	e7e7      	b.n	8008d74 <I2C_Slave_STOPF+0x154>
 8008da4:	080089c5 	.word	0x080089c5
 8008da8:	ffff0000 	.word	0xffff0000

08008dac <HAL_I2C_EV_IRQHandler>:
{
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008db0:	6802      	ldr	r2, [r0, #0]
 8008db2:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008db4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008db6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008dba:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dbc:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d014      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0x42>
 8008dc4:	b2c8      	uxtb	r0, r1
 8008dc6:	2b40      	cmp	r3, #64	; 0x40
 8008dc8:	d011      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d077      	beq.n	8008ec0 <HAL_I2C_EV_IRQHandler+0x114>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008dd0:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8008dd2:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dd4:	f013 0f02 	tst.w	r3, #2
 8008dd8:	d075      	beq.n	8008ec6 <HAL_I2C_EV_IRQHandler+0x11a>
 8008dda:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008dde:	d072      	beq.n	8008ec6 <HAL_I2C_EV_IRQHandler+0x11a>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de2:	b103      	cbz	r3, 8008de6 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008de4:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7ff faf3 	bl	80083d2 <I2C_Slave_ADDR>
}
 8008dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008dee:	6997      	ldr	r7, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008df0:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008df2:	f011 0001 	ands.w	r0, r1, #1
 8008df6:	d105      	bne.n	8008e04 <HAL_I2C_EV_IRQHandler+0x58>
 8008df8:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8008dfc:	d0f6      	beq.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
 8008dfe:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8008e02:	d0f3      	beq.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e04:	b110      	cbz	r0, 8008e0c <HAL_I2C_EV_IRQHandler+0x60>
 8008e06:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008e0a:	d127      	bne.n	8008e5c <HAL_I2C_EV_IRQHandler+0xb0>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e0c:	f011 0f08 	tst.w	r1, #8
 8008e10:	d002      	beq.n	8008e18 <HAL_I2C_EV_IRQHandler+0x6c>
 8008e12:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008e16:	d128      	bne.n	8008e6a <HAL_I2C_EV_IRQHandler+0xbe>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e18:	f011 0f02 	tst.w	r1, #2
 8008e1c:	d002      	beq.n	8008e24 <HAL_I2C_EV_IRQHandler+0x78>
 8008e1e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008e22:	d126      	bne.n	8008e72 <HAL_I2C_EV_IRQHandler+0xc6>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008e24:	f017 0f04 	tst.w	r7, #4
 8008e28:	d02f      	beq.n	8008e8a <HAL_I2C_EV_IRQHandler+0xde>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008e2a:	6852      	ldr	r2, [r2, #4]
 8008e2c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008e30:	d1dc      	bne.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e32:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008e36:	d005      	beq.n	8008e44 <HAL_I2C_EV_IRQHandler+0x98>
 8008e38:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8008e3c:	d002      	beq.n	8008e44 <HAL_I2C_EV_IRQHandler+0x98>
 8008e3e:	f011 0f04 	tst.w	r1, #4
 8008e42:	d01a      	beq.n	8008e7a <HAL_I2C_EV_IRQHandler+0xce>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e44:	f011 0f04 	tst.w	r1, #4
 8008e48:	d0d0      	beq.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
 8008e4a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008e4e:	d0cd      	beq.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d016      	beq.n	8008e82 <HAL_I2C_EV_IRQHandler+0xd6>
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff fb30 	bl	80084ba <I2C_MemoryTransmit_TXE_BTF>
 8008e5a:	e7c7      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7fe fe88 	bl	8007b72 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7fe fcba 	bl	80077dc <I2C_Master_SB>
 8008e68:	e7c0      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7fe fd0a 	bl	8007884 <I2C_Master_ADD10>
 8008e70:	e7bc      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7fe fd1d 	bl	80078b2 <I2C_Master_ADDR>
 8008e78:	e7b8      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff fb79 	bl	8008572 <I2C_MasterTransmit_TXE>
 8008e80:	e7b4      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7ff fa12 	bl	80082ac <I2C_MasterTransmit_BTF>
 8008e88:	e7b0      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008e8a:	6853      	ldr	r3, [r2, #4]
 8008e8c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008e90:	d1ac      	bne.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e92:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008e96:	d005      	beq.n	8008ea4 <HAL_I2C_EV_IRQHandler+0xf8>
 8008e98:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8008e9c:	d002      	beq.n	8008ea4 <HAL_I2C_EV_IRQHandler+0xf8>
 8008e9e:	f011 0f04 	tst.w	r1, #4
 8008ea2:	d009      	beq.n	8008eb8 <HAL_I2C_EV_IRQHandler+0x10c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ea4:	f011 0f04 	tst.w	r1, #4
 8008ea8:	d0a0      	beq.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
 8008eaa:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008eae:	d09d      	beq.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f7ff fbc7 	bl	8008644 <I2C_MasterReceive_BTF>
 8008eb6:	e799      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7ff fd0b 	bl	80088d4 <I2C_MasterReceive_RXNE>
 8008ebe:	e795      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008ec0:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ec2:	6953      	ldr	r3, [r2, #20]
 8008ec4:	e786      	b.n	8008dd4 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ec6:	f013 0f10 	tst.w	r3, #16
 8008eca:	d002      	beq.n	8008ed2 <HAL_I2C_EV_IRQHandler+0x126>
 8008ecc:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008ed0:	d118      	bne.n	8008f04 <HAL_I2C_EV_IRQHandler+0x158>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ed2:	2821      	cmp	r0, #33	; 0x21
 8008ed4:	d01a      	beq.n	8008f0c <HAL_I2C_EV_IRQHandler+0x160>
 8008ed6:	2829      	cmp	r0, #41	; 0x29
 8008ed8:	d018      	beq.n	8008f0c <HAL_I2C_EV_IRQHandler+0x160>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008eda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ede:	d005      	beq.n	8008eec <HAL_I2C_EV_IRQHandler+0x140>
 8008ee0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8008ee4:	d002      	beq.n	8008eec <HAL_I2C_EV_IRQHandler+0x140>
 8008ee6:	f013 0f04 	tst.w	r3, #4
 8008eea:	d028      	beq.n	8008f3e <HAL_I2C_EV_IRQHandler+0x192>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eec:	f013 0f04 	tst.w	r3, #4
 8008ef0:	f43f af7c 	beq.w	8008dec <HAL_I2C_EV_IRQHandler+0x40>
 8008ef4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008ef8:	f43f af78 	beq.w	8008dec <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8008efc:	4620      	mov	r0, r4
 8008efe:	f7fe fdeb 	bl	8007ad8 <I2C_SlaveReceive_BTF>
      }
 8008f02:	e773      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7ff fe8b 	bl	8008c20 <I2C_Slave_STOPF>
 8008f0a:	e76f      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f10:	d005      	beq.n	8008f1e <HAL_I2C_EV_IRQHandler+0x172>
 8008f12:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8008f16:	d002      	beq.n	8008f1e <HAL_I2C_EV_IRQHandler+0x172>
 8008f18:	f013 0f04 	tst.w	r3, #4
 8008f1c:	d00b      	beq.n	8008f36 <HAL_I2C_EV_IRQHandler+0x18a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f1e:	f013 0f04 	tst.w	r3, #4
 8008f22:	f43f af63 	beq.w	8008dec <HAL_I2C_EV_IRQHandler+0x40>
 8008f26:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008f2a:	f43f af5f 	beq.w	8008dec <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7fe fdc2 	bl	8007ab8 <I2C_SlaveTransmit_BTF>
 8008f34:	e75a      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7ff f9fd 	bl	8008336 <I2C_SlaveTransmit_TXE>
 8008f3c:	e756      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7ff fa20 	bl	8008384 <I2C_SlaveReceive_RXNE>
 8008f44:	e752      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x40>

08008f46 <HAL_I2C_ER_IRQHandler>:
{
 8008f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f48:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008f4a:	6803      	ldr	r3, [r0, #0]
 8008f4c:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008f4e:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f50:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8008f54:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f56:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008f5a:	d007      	beq.n	8008f6c <HAL_I2C_ER_IRQHandler+0x26>
 8008f5c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8008f60:	d03c      	beq.n	8008fdc <HAL_I2C_ER_IRQHandler+0x96>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f62:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8008f66:	6159      	str	r1, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8008f68:	2601      	movs	r6, #1
 8008f6a:	e000      	b.n	8008f6e <HAL_I2C_ER_IRQHandler+0x28>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008f6c:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f6e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008f72:	d008      	beq.n	8008f86 <HAL_I2C_ER_IRQHandler+0x40>
 8008f74:	f417 7f80 	tst.w	r7, #256	; 0x100
 8008f78:	d005      	beq.n	8008f86 <HAL_I2C_ER_IRQHandler+0x40>
    error |= HAL_I2C_ERROR_ARLO;
 8008f7a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8008f84:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008f86:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8008f8a:	d019      	beq.n	8008fc0 <HAL_I2C_ER_IRQHandler+0x7a>
 8008f8c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8008f90:	d016      	beq.n	8008fc0 <HAL_I2C_ER_IRQHandler+0x7a>
    tmp2 = hi2c->XferCount;
 8008f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f94:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8008f96:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008f9a:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 8008f9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008f9e:	2a20      	cmp	r2, #32
 8008fa0:	d01e      	beq.n	8008fe0 <HAL_I2C_ER_IRQHandler+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8008fa8:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8008faa:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008fae:	2a10      	cmp	r2, #16
 8008fb0:	d001      	beq.n	8008fb6 <HAL_I2C_ER_IRQHandler+0x70>
 8008fb2:	2a40      	cmp	r2, #64	; 0x40
 8008fb4:	d104      	bne.n	8008fc0 <HAL_I2C_ER_IRQHandler+0x7a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	6813      	ldr	r3, [r2, #0]
 8008fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fbe:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008fc0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8008fc4:	d008      	beq.n	8008fd8 <HAL_I2C_ER_IRQHandler+0x92>
 8008fc6:	f417 7f80 	tst.w	r7, #256	; 0x100
 8008fca:	d005      	beq.n	8008fd8 <HAL_I2C_ER_IRQHandler+0x92>
    error |= HAL_I2C_ERROR_OVR;
 8008fcc:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008fd6:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8008fd8:	b986      	cbnz	r6, 8008ffc <HAL_I2C_ER_IRQHandler+0xb6>
}
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008fdc:	2600      	movs	r6, #0
 8008fde:	e7c6      	b.n	8008f6e <HAL_I2C_ER_IRQHandler+0x28>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	d1de      	bne.n	8008fa2 <HAL_I2C_ER_IRQHandler+0x5c>
 8008fe4:	2b21      	cmp	r3, #33	; 0x21
 8008fe6:	d005      	beq.n	8008ff4 <HAL_I2C_ER_IRQHandler+0xae>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008fe8:	2b29      	cmp	r3, #41	; 0x29
 8008fea:	d003      	beq.n	8008ff4 <HAL_I2C_ER_IRQHandler+0xae>
 8008fec:	2b28      	cmp	r3, #40	; 0x28
 8008fee:	d1d8      	bne.n	8008fa2 <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008ff0:	2821      	cmp	r0, #33	; 0x21
 8008ff2:	d1d6      	bne.n	8008fa2 <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff fa15 	bl	8008424 <I2C_Slave_AF>
 8008ffa:	e7e1      	b.n	8008fc0 <HAL_I2C_ER_IRQHandler+0x7a>
    hi2c->ErrorCode |= error;
 8008ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ffe:	431e      	orrs	r6, r3
 8009000:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff fd50 	bl	8008aa8 <I2C_ITError>
}
 8009008:	e7e7      	b.n	8008fda <HAL_I2C_ER_IRQHandler+0x94>

0800900a <HAL_I2C_GetState>:
  return hi2c->State;
 800900a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800900e:	4770      	bx	lr

08009010 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009010:	2800      	cmp	r0, #0
 8009012:	f000 81d9 	beq.w	80093c8 <HAL_RCC_OscConfig+0x3b8>
{
 8009016:	b570      	push	{r4, r5, r6, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800901c:	6803      	ldr	r3, [r0, #0]
 800901e:	f013 0f01 	tst.w	r3, #1
 8009022:	d03b      	beq.n	800909c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009024:	4ba6      	ldr	r3, [pc, #664]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 030c 	and.w	r3, r3, #12
 800902c:	2b04      	cmp	r3, #4
 800902e:	d02c      	beq.n	800908a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009030:	4ba3      	ldr	r3, [pc, #652]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009038:	2b08      	cmp	r3, #8
 800903a:	d021      	beq.n	8009080 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009042:	d04f      	beq.n	80090e4 <HAL_RCC_OscConfig+0xd4>
 8009044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009048:	d052      	beq.n	80090f0 <HAL_RCC_OscConfig+0xe0>
 800904a:	4b9d      	ldr	r3, [pc, #628]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800905a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d050      	beq.n	8009104 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009062:	f7fe f841 	bl	80070e8 <HAL_GetTick>
 8009066:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009068:	4b95      	ldr	r3, [pc, #596]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009070:	d114      	bne.n	800909c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009072:	f7fe f839 	bl	80070e8 <HAL_GetTick>
 8009076:	1b40      	subs	r0, r0, r5
 8009078:	2864      	cmp	r0, #100	; 0x64
 800907a:	d9f5      	bls.n	8009068 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800907c:	2003      	movs	r0, #3
 800907e:	e1aa      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009080:	4b8f      	ldr	r3, [pc, #572]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009088:	d0d8      	beq.n	800903c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800908a:	4b8d      	ldr	r3, [pc, #564]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009092:	d003      	beq.n	800909c <HAL_RCC_OscConfig+0x8c>
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 8198 	beq.w	80093cc <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f013 0f02 	tst.w	r3, #2
 80090a2:	d054      	beq.n	800914e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090a4:	4b86      	ldr	r3, [pc, #536]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f013 0f0c 	tst.w	r3, #12
 80090ac:	d03e      	beq.n	800912c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ae:	4b84      	ldr	r3, [pc, #528]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	d033      	beq.n	8009122 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d067      	beq.n	8009190 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090c0:	4b80      	ldr	r3, [pc, #512]	; (80092c4 <HAL_RCC_OscConfig+0x2b4>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c6:	f7fe f80f 	bl	80070e8 <HAL_GetTick>
 80090ca:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090cc:	4b7c      	ldr	r3, [pc, #496]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f013 0f02 	tst.w	r3, #2
 80090d4:	d153      	bne.n	800917e <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090d6:	f7fe f807 	bl	80070e8 <HAL_GetTick>
 80090da:	1b40      	subs	r0, r0, r5
 80090dc:	2802      	cmp	r0, #2
 80090de:	d9f5      	bls.n	80090cc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80090e0:	2003      	movs	r0, #3
 80090e2:	e178      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090e4:	4a76      	ldr	r2, [pc, #472]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	e7b5      	b.n	800905c <HAL_RCC_OscConfig+0x4c>
 80090f0:	4b73      	ldr	r3, [pc, #460]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e7ab      	b.n	800905c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8009104:	f7fd fff0 	bl	80070e8 <HAL_GetTick>
 8009108:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800910a:	4b6d      	ldr	r3, [pc, #436]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009112:	d0c3      	beq.n	800909c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009114:	f7fd ffe8 	bl	80070e8 <HAL_GetTick>
 8009118:	1b40      	subs	r0, r0, r5
 800911a:	2864      	cmp	r0, #100	; 0x64
 800911c:	d9f5      	bls.n	800910a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800911e:	2003      	movs	r0, #3
 8009120:	e159      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009122:	4b67      	ldr	r3, [pc, #412]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800912a:	d1c6      	bne.n	80090ba <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800912c:	4b64      	ldr	r3, [pc, #400]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f013 0f02 	tst.w	r3, #2
 8009134:	d003      	beq.n	800913e <HAL_RCC_OscConfig+0x12e>
 8009136:	68e3      	ldr	r3, [r4, #12]
 8009138:	2b01      	cmp	r3, #1
 800913a:	f040 8149 	bne.w	80093d0 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800913e:	4a60      	ldr	r2, [pc, #384]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009140:	6813      	ldr	r3, [r2, #0]
 8009142:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009146:	6921      	ldr	r1, [r4, #16]
 8009148:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800914c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f013 0f08 	tst.w	r3, #8
 8009154:	d040      	beq.n	80091d8 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009156:	6963      	ldr	r3, [r4, #20]
 8009158:	b363      	cbz	r3, 80091b4 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800915a:	4b5b      	ldr	r3, [pc, #364]	; (80092c8 <HAL_RCC_OscConfig+0x2b8>)
 800915c:	2201      	movs	r2, #1
 800915e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009160:	f7fd ffc2 	bl	80070e8 <HAL_GetTick>
 8009164:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009166:	4b56      	ldr	r3, [pc, #344]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916a:	f013 0f02 	tst.w	r3, #2
 800916e:	d133      	bne.n	80091d8 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009170:	f7fd ffba 	bl	80070e8 <HAL_GetTick>
 8009174:	1b40      	subs	r0, r0, r5
 8009176:	2802      	cmp	r0, #2
 8009178:	d9f5      	bls.n	8009166 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 800917a:	2003      	movs	r0, #3
 800917c:	e12b      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800917e:	4a50      	ldr	r2, [pc, #320]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009180:	6813      	ldr	r3, [r2, #0]
 8009182:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009186:	6921      	ldr	r1, [r4, #16]
 8009188:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	e7de      	b.n	800914e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8009190:	4b4c      	ldr	r3, [pc, #304]	; (80092c4 <HAL_RCC_OscConfig+0x2b4>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009196:	f7fd ffa7 	bl	80070e8 <HAL_GetTick>
 800919a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919c:	4b48      	ldr	r3, [pc, #288]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f013 0f02 	tst.w	r3, #2
 80091a4:	d0d3      	beq.n	800914e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091a6:	f7fd ff9f 	bl	80070e8 <HAL_GetTick>
 80091aa:	1b40      	subs	r0, r0, r5
 80091ac:	2802      	cmp	r0, #2
 80091ae:	d9f5      	bls.n	800919c <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80091b0:	2003      	movs	r0, #3
 80091b2:	e110      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091b4:	4b44      	ldr	r3, [pc, #272]	; (80092c8 <HAL_RCC_OscConfig+0x2b8>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ba:	f7fd ff95 	bl	80070e8 <HAL_GetTick>
 80091be:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c0:	4b3f      	ldr	r3, [pc, #252]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80091c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c4:	f013 0f02 	tst.w	r3, #2
 80091c8:	d006      	beq.n	80091d8 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ca:	f7fd ff8d 	bl	80070e8 <HAL_GetTick>
 80091ce:	1b40      	subs	r0, r0, r5
 80091d0:	2802      	cmp	r0, #2
 80091d2:	d9f5      	bls.n	80091c0 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80091d4:	2003      	movs	r0, #3
 80091d6:	e0fe      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	f013 0f04 	tst.w	r3, #4
 80091de:	d078      	beq.n	80092d2 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091e0:	4b37      	ldr	r3, [pc, #220]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80091e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80091e8:	d10d      	bne.n	8009206 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ea:	2300      	movs	r3, #0
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	4b34      	ldr	r3, [pc, #208]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80091f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80091f6:	641a      	str	r2, [r3, #64]	; 0x40
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009202:	2501      	movs	r5, #1
 8009204:	e000      	b.n	8009208 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8009206:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009208:	4b30      	ldr	r3, [pc, #192]	; (80092cc <HAL_RCC_OscConfig+0x2bc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009210:	d021      	beq.n	8009256 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d032      	beq.n	800927e <HAL_RCC_OscConfig+0x26e>
 8009218:	2b05      	cmp	r3, #5
 800921a:	d036      	beq.n	800928a <HAL_RCC_OscConfig+0x27a>
 800921c:	4b28      	ldr	r3, [pc, #160]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800921e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009220:	f022 0201 	bic.w	r2, r2, #1
 8009224:	671a      	str	r2, [r3, #112]	; 0x70
 8009226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009228:	f022 0204 	bic.w	r2, r2, #4
 800922c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d034      	beq.n	800929e <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009234:	f7fd ff58 	bl	80070e8 <HAL_GetTick>
 8009238:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800923a:	4b21      	ldr	r3, [pc, #132]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	f013 0f02 	tst.w	r3, #2
 8009242:	d145      	bne.n	80092d0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009244:	f7fd ff50 	bl	80070e8 <HAL_GetTick>
 8009248:	1b80      	subs	r0, r0, r6
 800924a:	f241 3388 	movw	r3, #5000	; 0x1388
 800924e:	4298      	cmp	r0, r3
 8009250:	d9f3      	bls.n	800923a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8009252:	2003      	movs	r0, #3
 8009254:	e0bf      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009256:	4a1d      	ldr	r2, [pc, #116]	; (80092cc <HAL_RCC_OscConfig+0x2bc>)
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009260:	f7fd ff42 	bl	80070e8 <HAL_GetTick>
 8009264:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009266:	4b19      	ldr	r3, [pc, #100]	; (80092cc <HAL_RCC_OscConfig+0x2bc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800926e:	d1d0      	bne.n	8009212 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009270:	f7fd ff3a 	bl	80070e8 <HAL_GetTick>
 8009274:	1b80      	subs	r0, r0, r6
 8009276:	2802      	cmp	r0, #2
 8009278:	d9f5      	bls.n	8009266 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800927a:	2003      	movs	r0, #3
 800927c:	e0ab      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800927e:	4a10      	ldr	r2, [pc, #64]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 8009280:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	6713      	str	r3, [r2, #112]	; 0x70
 8009288:	e7d1      	b.n	800922e <HAL_RCC_OscConfig+0x21e>
 800928a:	4b0d      	ldr	r3, [pc, #52]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 800928c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800928e:	f042 0204 	orr.w	r2, r2, #4
 8009292:	671a      	str	r2, [r3, #112]	; 0x70
 8009294:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	671a      	str	r2, [r3, #112]	; 0x70
 800929c:	e7c7      	b.n	800922e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800929e:	f7fd ff23 	bl	80070e8 <HAL_GetTick>
 80092a2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092a4:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <HAL_RCC_OscConfig+0x2b0>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	f013 0f02 	tst.w	r3, #2
 80092ac:	d010      	beq.n	80092d0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ae:	f7fd ff1b 	bl	80070e8 <HAL_GetTick>
 80092b2:	1b80      	subs	r0, r0, r6
 80092b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80092b8:	4298      	cmp	r0, r3
 80092ba:	d9f3      	bls.n	80092a4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80092bc:	2003      	movs	r0, #3
 80092be:	e08a      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 80092c0:	40023800 	.word	0x40023800
 80092c4:	42470000 	.word	0x42470000
 80092c8:	42470e80 	.word	0x42470e80
 80092cc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092d0:	b9e5      	cbnz	r5, 800930c <HAL_RCC_OscConfig+0x2fc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d2:	69a3      	ldr	r3, [r4, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d07d      	beq.n	80093d4 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092d8:	4a46      	ldr	r2, [pc, #280]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 80092da:	6892      	ldr	r2, [r2, #8]
 80092dc:	f002 020c 	and.w	r2, r2, #12
 80092e0:	2a08      	cmp	r2, #8
 80092e2:	d051      	beq.n	8009388 <HAL_RCC_OscConfig+0x378>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d017      	beq.n	8009318 <HAL_RCC_OscConfig+0x308>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092e8:	4b43      	ldr	r3, [pc, #268]	; (80093f8 <HAL_RCC_OscConfig+0x3e8>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ee:	f7fd fefb 	bl	80070e8 <HAL_GetTick>
 80092f2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092f4:	4b3f      	ldr	r3, [pc, #252]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80092fc:	d042      	beq.n	8009384 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092fe:	f7fd fef3 	bl	80070e8 <HAL_GetTick>
 8009302:	1b00      	subs	r0, r0, r4
 8009304:	2802      	cmp	r0, #2
 8009306:	d9f5      	bls.n	80092f4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8009308:	2003      	movs	r0, #3
 800930a:	e064      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800930c:	4a39      	ldr	r2, [pc, #228]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 800930e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009314:	6413      	str	r3, [r2, #64]	; 0x40
 8009316:	e7dc      	b.n	80092d2 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8009318:	4b37      	ldr	r3, [pc, #220]	; (80093f8 <HAL_RCC_OscConfig+0x3e8>)
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800931e:	f7fd fee3 	bl	80070e8 <HAL_GetTick>
 8009322:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009324:	4b33      	ldr	r3, [pc, #204]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800932c:	d006      	beq.n	800933c <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800932e:	f7fd fedb 	bl	80070e8 <HAL_GetTick>
 8009332:	1b40      	subs	r0, r0, r5
 8009334:	2802      	cmp	r0, #2
 8009336:	d9f5      	bls.n	8009324 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8009338:	2003      	movs	r0, #3
 800933a:	e04c      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800933c:	69e3      	ldr	r3, [r4, #28]
 800933e:	6a22      	ldr	r2, [r4, #32]
 8009340:	4313      	orrs	r3, r2
 8009342:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009344:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009348:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800934a:	0852      	lsrs	r2, r2, #1
 800934c:	3a01      	subs	r2, #1
 800934e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009354:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009358:	4a26      	ldr	r2, [pc, #152]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 800935a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800935c:	4b26      	ldr	r3, [pc, #152]	; (80093f8 <HAL_RCC_OscConfig+0x3e8>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009362:	f7fd fec1 	bl	80070e8 <HAL_GetTick>
 8009366:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009368:	4b22      	ldr	r3, [pc, #136]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009370:	d106      	bne.n	8009380 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009372:	f7fd feb9 	bl	80070e8 <HAL_GetTick>
 8009376:	1b00      	subs	r0, r0, r4
 8009378:	2802      	cmp	r0, #2
 800937a:	d9f5      	bls.n	8009368 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 800937c:	2003      	movs	r0, #3
 800937e:	e02a      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009380:	2000      	movs	r0, #0
 8009382:	e028      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 8009384:	2000      	movs	r0, #0
 8009386:	e026      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009388:	2b01      	cmp	r3, #1
 800938a:	d026      	beq.n	80093da <HAL_RCC_OscConfig+0x3ca>
        pll_config = RCC->PLLCFGR;
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <HAL_RCC_OscConfig+0x3e4>)
 800938e:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009390:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8009394:	69e2      	ldr	r2, [r4, #28]
 8009396:	4291      	cmp	r1, r2
 8009398:	d121      	bne.n	80093de <HAL_RCC_OscConfig+0x3ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800939a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800939e:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093a0:	428a      	cmp	r2, r1
 80093a2:	d11e      	bne.n	80093e2 <HAL_RCC_OscConfig+0x3d2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80093a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093a6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80093aa:	401a      	ands	r2, r3
 80093ac:	428a      	cmp	r2, r1
 80093ae:	d11a      	bne.n	80093e6 <HAL_RCC_OscConfig+0x3d6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80093b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80093b6:	428a      	cmp	r2, r1
 80093b8:	d117      	bne.n	80093ea <HAL_RCC_OscConfig+0x3da>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80093ba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80093be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d114      	bne.n	80093ee <HAL_RCC_OscConfig+0x3de>
  return HAL_OK;
 80093c4:	2000      	movs	r0, #0
 80093c6:	e006      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 80093c8:	2001      	movs	r0, #1
}
 80093ca:	4770      	bx	lr
        return HAL_ERROR;
 80093cc:	2001      	movs	r0, #1
 80093ce:	e002      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
        return HAL_ERROR;
 80093d0:	2001      	movs	r0, #1
 80093d2:	e000      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 80093d4:	2000      	movs	r0, #0
}
 80093d6:	b002      	add	sp, #8
 80093d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80093da:	2001      	movs	r0, #1
 80093dc:	e7fb      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
 80093de:	2001      	movs	r0, #1
 80093e0:	e7f9      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7f7      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 80093e6:	2001      	movs	r0, #1
 80093e8:	e7f5      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7f3      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 80093ee:	2001      	movs	r0, #1
 80093f0:	e7f1      	b.n	80093d6 <HAL_RCC_OscConfig+0x3c6>
 80093f2:	bf00      	nop
 80093f4:	40023800 	.word	0x40023800
 80093f8:	42470060 	.word	0x42470060

080093fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093fe:	4b24      	ldr	r3, [pc, #144]	; (8009490 <HAL_RCC_GetSysClockFreq+0x94>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f003 030c 	and.w	r3, r3, #12
 8009406:	2b04      	cmp	r3, #4
 8009408:	d03d      	beq.n	8009486 <HAL_RCC_GetSysClockFreq+0x8a>
 800940a:	2b08      	cmp	r3, #8
 800940c:	d13d      	bne.n	800948a <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800940e:	4b20      	ldr	r3, [pc, #128]	; (8009490 <HAL_RCC_GetSysClockFreq+0x94>)
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800941c:	d012      	beq.n	8009444 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800941e:	4b1c      	ldr	r3, [pc, #112]	; (8009490 <HAL_RCC_GetSysClockFreq+0x94>)
 8009420:	6859      	ldr	r1, [r3, #4]
 8009422:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009426:	2300      	movs	r3, #0
 8009428:	481a      	ldr	r0, [pc, #104]	; (8009494 <HAL_RCC_GetSysClockFreq+0x98>)
 800942a:	fba1 0100 	umull	r0, r1, r1, r0
 800942e:	f7f7 fc6b 	bl	8000d08 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009432:	4b17      	ldr	r3, [pc, #92]	; (8009490 <HAL_RCC_GetSysClockFreq+0x94>)
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800943a:	3301      	adds	r3, #1
 800943c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800943e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009442:	e023      	b.n	800948c <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009444:	4b12      	ldr	r3, [pc, #72]	; (8009490 <HAL_RCC_GetSysClockFreq+0x94>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800944c:	015c      	lsls	r4, r3, #5
 800944e:	2500      	movs	r5, #0
 8009450:	1ae4      	subs	r4, r4, r3
 8009452:	f165 0500 	sbc.w	r5, r5, #0
 8009456:	01ae      	lsls	r6, r5, #6
 8009458:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 800945c:	01a7      	lsls	r7, r4, #6
 800945e:	1b38      	subs	r0, r7, r4
 8009460:	eb66 0105 	sbc.w	r1, r6, r5
 8009464:	00cc      	lsls	r4, r1, #3
 8009466:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800946a:	00c5      	lsls	r5, r0, #3
 800946c:	18e8      	adds	r0, r5, r3
 800946e:	f144 0100 	adc.w	r1, r4, #0
 8009472:	028b      	lsls	r3, r1, #10
 8009474:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8009478:	0284      	lsls	r4, r0, #10
 800947a:	4620      	mov	r0, r4
 800947c:	4619      	mov	r1, r3
 800947e:	2300      	movs	r3, #0
 8009480:	f7f7 fc42 	bl	8000d08 <__aeabi_uldivmod>
 8009484:	e7d5      	b.n	8009432 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8009486:	4803      	ldr	r0, [pc, #12]	; (8009494 <HAL_RCC_GetSysClockFreq+0x98>)
 8009488:	e000      	b.n	800948c <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800948a:	4803      	ldr	r0, [pc, #12]	; (8009498 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948e:	bf00      	nop
 8009490:	40023800 	.word	0x40023800
 8009494:	017d7840 	.word	0x017d7840
 8009498:	00f42400 	.word	0x00f42400

0800949c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800949c:	2800      	cmp	r0, #0
 800949e:	f000 809b 	beq.w	80095d8 <HAL_RCC_ClockConfig+0x13c>
{
 80094a2:	b570      	push	{r4, r5, r6, lr}
 80094a4:	460d      	mov	r5, r1
 80094a6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094a8:	4b4f      	ldr	r3, [pc, #316]	; (80095e8 <HAL_RCC_ClockConfig+0x14c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	428b      	cmp	r3, r1
 80094b2:	d208      	bcs.n	80094c6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094b4:	b2cb      	uxtb	r3, r1
 80094b6:	4a4c      	ldr	r2, [pc, #304]	; (80095e8 <HAL_RCC_ClockConfig+0x14c>)
 80094b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ba:	6813      	ldr	r3, [r2, #0]
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	428b      	cmp	r3, r1
 80094c2:	f040 808b 	bne.w	80095dc <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f013 0f02 	tst.w	r3, #2
 80094cc:	d017      	beq.n	80094fe <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ce:	f013 0f04 	tst.w	r3, #4
 80094d2:	d004      	beq.n	80094de <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094d4:	4a45      	ldr	r2, [pc, #276]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 80094d6:	6893      	ldr	r3, [r2, #8]
 80094d8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094dc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f013 0f08 	tst.w	r3, #8
 80094e4:	d004      	beq.n	80094f0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094e6:	4a41      	ldr	r2, [pc, #260]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 80094e8:	6893      	ldr	r3, [r2, #8]
 80094ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094ee:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094f0:	4a3e      	ldr	r2, [pc, #248]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 80094f2:	6893      	ldr	r3, [r2, #8]
 80094f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094f8:	68a1      	ldr	r1, [r4, #8]
 80094fa:	430b      	orrs	r3, r1
 80094fc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	f013 0f01 	tst.w	r3, #1
 8009504:	d032      	beq.n	800956c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009506:	6863      	ldr	r3, [r4, #4]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d021      	beq.n	8009550 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800950c:	1e9a      	subs	r2, r3, #2
 800950e:	2a01      	cmp	r2, #1
 8009510:	d925      	bls.n	800955e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009512:	4a36      	ldr	r2, [pc, #216]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 8009514:	6812      	ldr	r2, [r2, #0]
 8009516:	f012 0f02 	tst.w	r2, #2
 800951a:	d061      	beq.n	80095e0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800951c:	4933      	ldr	r1, [pc, #204]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 800951e:	688a      	ldr	r2, [r1, #8]
 8009520:	f022 0203 	bic.w	r2, r2, #3
 8009524:	4313      	orrs	r3, r2
 8009526:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009528:	f7fd fdde 	bl	80070e8 <HAL_GetTick>
 800952c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800952e:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f003 030c 	and.w	r3, r3, #12
 8009536:	6862      	ldr	r2, [r4, #4]
 8009538:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800953c:	d016      	beq.n	800956c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953e:	f7fd fdd3 	bl	80070e8 <HAL_GetTick>
 8009542:	1b80      	subs	r0, r0, r6
 8009544:	f241 3388 	movw	r3, #5000	; 0x1388
 8009548:	4298      	cmp	r0, r3
 800954a:	d9f0      	bls.n	800952e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800954c:	2003      	movs	r0, #3
 800954e:	e042      	b.n	80095d6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009550:	4a26      	ldr	r2, [pc, #152]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 8009552:	6812      	ldr	r2, [r2, #0]
 8009554:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009558:	d1e0      	bne.n	800951c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800955a:	2001      	movs	r0, #1
 800955c:	e03b      	b.n	80095d6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800955e:	4a23      	ldr	r2, [pc, #140]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8009566:	d1d9      	bne.n	800951c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009568:	2001      	movs	r0, #1
 800956a:	e034      	b.n	80095d6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <HAL_RCC_ClockConfig+0x14c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	42ab      	cmp	r3, r5
 8009576:	d907      	bls.n	8009588 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009578:	b2ea      	uxtb	r2, r5
 800957a:	4b1b      	ldr	r3, [pc, #108]	; (80095e8 <HAL_RCC_ClockConfig+0x14c>)
 800957c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	42ab      	cmp	r3, r5
 8009586:	d12d      	bne.n	80095e4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	f013 0f04 	tst.w	r3, #4
 800958e:	d006      	beq.n	800959e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009590:	4a16      	ldr	r2, [pc, #88]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 8009592:	6893      	ldr	r3, [r2, #8]
 8009594:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009598:	68e1      	ldr	r1, [r4, #12]
 800959a:	430b      	orrs	r3, r1
 800959c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	f013 0f08 	tst.w	r3, #8
 80095a4:	d007      	beq.n	80095b6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095a6:	4a11      	ldr	r2, [pc, #68]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 80095a8:	6893      	ldr	r3, [r2, #8]
 80095aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80095ae:	6921      	ldr	r1, [r4, #16]
 80095b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80095b4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80095b6:	f7ff ff21 	bl	80093fc <HAL_RCC_GetSysClockFreq>
 80095ba:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <HAL_RCC_ClockConfig+0x150>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80095c2:	4a0b      	ldr	r2, [pc, #44]	; (80095f0 <HAL_RCC_ClockConfig+0x154>)
 80095c4:	5cd3      	ldrb	r3, [r2, r3]
 80095c6:	40d8      	lsrs	r0, r3
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <HAL_RCC_ClockConfig+0x158>)
 80095ca:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80095cc:	4b0a      	ldr	r3, [pc, #40]	; (80095f8 <HAL_RCC_ClockConfig+0x15c>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	f7fd f8c2 	bl	8006758 <HAL_InitTick>
  return HAL_OK;
 80095d4:	2000      	movs	r0, #0
}
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80095d8:	2001      	movs	r0, #1
}
 80095da:	4770      	bx	lr
      return HAL_ERROR;
 80095dc:	2001      	movs	r0, #1
 80095de:	e7fa      	b.n	80095d6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80095e0:	2001      	movs	r0, #1
 80095e2:	e7f8      	b.n	80095d6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80095e4:	2001      	movs	r0, #1
 80095e6:	e7f6      	b.n	80095d6 <HAL_RCC_ClockConfig+0x13a>
 80095e8:	40023c00 	.word	0x40023c00
 80095ec:	40023800 	.word	0x40023800
 80095f0:	08012e18 	.word	0x08012e18
 80095f4:	20000188 	.word	0x20000188
 80095f8:	200001bc 	.word	0x200001bc

080095fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80095fc:	4b01      	ldr	r3, [pc, #4]	; (8009604 <HAL_RCC_GetHCLKFreq+0x8>)
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000188 	.word	0x20000188

08009608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009608:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800960a:	f7ff fff7 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 800960e:	4b04      	ldr	r3, [pc, #16]	; (8009620 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009616:	4a03      	ldr	r2, [pc, #12]	; (8009624 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009618:	5cd3      	ldrb	r3, [r2, r3]
}
 800961a:	40d8      	lsrs	r0, r3
 800961c:	bd08      	pop	{r3, pc}
 800961e:	bf00      	nop
 8009620:	40023800 	.word	0x40023800
 8009624:	08012e28 	.word	0x08012e28

08009628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009628:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800962a:	f7ff ffe7 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 800962e:	4b04      	ldr	r3, [pc, #16]	; (8009640 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009636:	4a03      	ldr	r2, [pc, #12]	; (8009644 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009638:	5cd3      	ldrb	r3, [r2, r3]
}
 800963a:	40d8      	lsrs	r0, r3
 800963c:	bd08      	pop	{r3, pc}
 800963e:	bf00      	nop
 8009640:	40023800 	.word	0x40023800
 8009644:	08012e28 	.word	0x08012e28

08009648 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009648:	230f      	movs	r3, #15
 800964a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800964c:	4b0b      	ldr	r3, [pc, #44]	; (800967c <HAL_RCC_GetClockConfig+0x34>)
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	f002 0203 	and.w	r2, r2, #3
 8009654:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800965c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8009664:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	08db      	lsrs	r3, r3, #3
 800966a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800966e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009670:	4b03      	ldr	r3, [pc, #12]	; (8009680 <HAL_RCC_GetClockConfig+0x38>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	600b      	str	r3, [r1, #0]
}
 800967a:	4770      	bx	lr
 800967c:	40023800 	.word	0x40023800
 8009680:	40023c00 	.word	0x40023c00

08009684 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009684:	b530      	push	{r4, r5, lr}
 8009686:	b083      	sub	sp, #12
 8009688:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800968a:	6803      	ldr	r3, [r0, #0]
 800968c:	f013 0f05 	tst.w	r3, #5
 8009690:	d10e      	bne.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f013 0f02 	tst.w	r3, #2
 8009698:	d136      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f013 0f08 	tst.w	r3, #8
 80096a0:	f000 8099 	beq.w	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096a4:	7c22      	ldrb	r2, [r4, #16]
 80096a6:	4b4d      	ldr	r3, [pc, #308]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80096a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80096aa:	2000      	movs	r0, #0
}
 80096ac:	b003      	add	sp, #12
 80096ae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80096b0:	4b4b      	ldr	r3, [pc, #300]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80096b6:	f7fd fd17 	bl	80070e8 <HAL_GetTick>
 80096ba:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096bc:	4b49      	ldr	r3, [pc, #292]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80096c4:	d006      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80096c6:	f7fd fd0f 	bl	80070e8 <HAL_GetTick>
 80096ca:	1b43      	subs	r3, r0, r5
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d9f5      	bls.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80096d0:	2003      	movs	r0, #3
 80096d2:	e7eb      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80096d4:	6862      	ldr	r2, [r4, #4]
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	071b      	lsls	r3, r3, #28
 80096da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80096de:	4a41      	ldr	r2, [pc, #260]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80096e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80096e4:	4b3e      	ldr	r3, [pc, #248]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80096ea:	f7fd fcfd 	bl	80070e8 <HAL_GetTick>
 80096ee:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80096f0:	4b3c      	ldr	r3, [pc, #240]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80096f8:	d1cb      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80096fa:	f7fd fcf5 	bl	80070e8 <HAL_GetTick>
 80096fe:	1b40      	subs	r0, r0, r5
 8009700:	2802      	cmp	r0, #2
 8009702:	d9f5      	bls.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8009704:	2003      	movs	r0, #3
 8009706:	e7d1      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8009708:	2300      	movs	r3, #0
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	4b35      	ldr	r3, [pc, #212]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800970e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009714:	641a      	str	r2, [r3, #64]	; 0x40
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8009720:	4a31      	ldr	r2, [pc, #196]	; (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009722:	6813      	ldr	r3, [r2, #0]
 8009724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009728:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800972a:	f7fd fcdd 	bl	80070e8 <HAL_GetTick>
 800972e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009730:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009738:	d106      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800973a:	f7fd fcd5 	bl	80070e8 <HAL_GetTick>
 800973e:	1b43      	subs	r3, r0, r5
 8009740:	2b02      	cmp	r3, #2
 8009742:	d9f5      	bls.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8009744:	2003      	movs	r0, #3
 8009746:	e7b1      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009748:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800974a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800974c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009750:	d012      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009752:	68e2      	ldr	r2, [r4, #12]
 8009754:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009758:	429a      	cmp	r2, r3
 800975a:	d00d      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800975c:	4b21      	ldr	r3, [pc, #132]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800975e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8009764:	4921      	ldr	r1, [pc, #132]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009766:	2001      	movs	r0, #1
 8009768:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800976a:	2000      	movs	r0, #0
 800976c:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800976e:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009772:	f013 0f01 	tst.w	r3, #1
 8009776:	d112      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009778:	68e3      	ldr	r3, [r4, #12]
 800977a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800977e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009782:	d01d      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009784:	4a17      	ldr	r2, [pc, #92]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009786:	6893      	ldr	r3, [r2, #8]
 8009788:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	4915      	ldr	r1, [pc, #84]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009790:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8009792:	68e2      	ldr	r2, [r4, #12]
 8009794:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009798:	4313      	orrs	r3, r2
 800979a:	670b      	str	r3, [r1, #112]	; 0x70
 800979c:	e77d      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 800979e:	f7fd fca3 	bl	80070e8 <HAL_GetTick>
 80097a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097a4:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	f013 0f02 	tst.w	r3, #2
 80097ac:	d1e4      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097ae:	f7fd fc9b 	bl	80070e8 <HAL_GetTick>
 80097b2:	1b40      	subs	r0, r0, r5
 80097b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80097b8:	4298      	cmp	r0, r3
 80097ba:	d9f3      	bls.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 80097bc:	2003      	movs	r0, #3
 80097be:	e775      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097c0:	4908      	ldr	r1, [pc, #32]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097c2:	688a      	ldr	r2, [r1, #8]
 80097c4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80097c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80097cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d0:	4313      	orrs	r3, r2
 80097d2:	608b      	str	r3, [r1, #8]
 80097d4:	e7db      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 80097d6:	2000      	movs	r0, #0
 80097d8:	e768      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x28>
 80097da:	bf00      	nop
 80097dc:	424711e0 	.word	0x424711e0
 80097e0:	42470068 	.word	0x42470068
 80097e4:	40023800 	.word	0x40023800
 80097e8:	40007000 	.word	0x40007000
 80097ec:	42470e40 	.word	0x42470e40

080097f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80097f4:	6802      	ldr	r2, [r0, #0]
 80097f6:	68d3      	ldr	r3, [r2, #12]
 80097f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097fc:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80097fe:	f7fd fc73 	bl	80070e8 <HAL_GetTick>
 8009802:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f013 0f20 	tst.w	r3, #32
 800980c:	d107      	bne.n	800981e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800980e:	f7fd fc6b 	bl	80070e8 <HAL_GetTick>
 8009812:	1b40      	subs	r0, r0, r5
 8009814:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009818:	d9f4      	bls.n	8009804 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800981a:	2003      	movs	r0, #3
 800981c:	e000      	b.n	8009820 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800981e:	2000      	movs	r0, #0
}
 8009820:	bd38      	pop	{r3, r4, r5, pc}

08009822 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009822:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009824:	6803      	ldr	r3, [r0, #0]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	f012 0f40 	tst.w	r2, #64	; 0x40
 800982c:	d001      	beq.n	8009832 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800982e:	2000      	movs	r0, #0
}
 8009830:	bd38      	pop	{r3, r4, r5, pc}
 8009832:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009838:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800983a:	f7fd fc55 	bl	80070e8 <HAL_GetTick>
 800983e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009848:	d107      	bne.n	800985a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800984a:	f7fd fc4d 	bl	80070e8 <HAL_GetTick>
 800984e:	1b43      	subs	r3, r0, r5
 8009850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009854:	d9f4      	bls.n	8009840 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8009856:	2003      	movs	r0, #3
 8009858:	e7ea      	b.n	8009830 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800985a:	2000      	movs	r0, #0
 800985c:	e7e8      	b.n	8009830 <RTC_EnterInitMode+0xe>

0800985e <HAL_RTC_Init>:
{
 800985e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8009860:	2800      	cmp	r0, #0
 8009862:	d05c      	beq.n	800991e <HAL_RTC_Init+0xc0>
 8009864:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009866:	7f43      	ldrb	r3, [r0, #29]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d041      	beq.n	80098f0 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800986c:	2302      	movs	r3, #2
 800986e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	22ca      	movs	r2, #202	; 0xca
 8009874:	625a      	str	r2, [r3, #36]	; 0x24
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	2253      	movs	r2, #83	; 0x53
 800987a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800987c:	4620      	mov	r0, r4
 800987e:	f7ff ffd0 	bl	8009822 <RTC_EnterInitMode>
 8009882:	4605      	mov	r5, r0
 8009884:	2800      	cmp	r0, #0
 8009886:	d137      	bne.n	80098f8 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	6893      	ldr	r3, [r2, #8]
 800988c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009894:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009896:	6821      	ldr	r1, [r4, #0]
 8009898:	688a      	ldr	r2, [r1, #8]
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	6920      	ldr	r0, [r4, #16]
 800989e:	4303      	orrs	r3, r0
 80098a0:	6960      	ldr	r0, [r4, #20]
 80098a2:	4303      	orrs	r3, r0
 80098a4:	4313      	orrs	r3, r2
 80098a6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	68e2      	ldr	r2, [r4, #12]
 80098ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	6913      	ldr	r3, [r2, #16]
 80098b2:	68a1      	ldr	r1, [r4, #8]
 80098b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80098b8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	68d3      	ldr	r3, [r2, #12]
 80098be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098c2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f013 0f20 	tst.w	r3, #32
 80098cc:	d01b      	beq.n	8009906 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80098d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098d6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80098dc:	69a1      	ldr	r1, [r4, #24]
 80098de:	430b      	orrs	r3, r1
 80098e0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80098e8:	2301      	movs	r3, #1
 80098ea:	7763      	strb	r3, [r4, #29]
}
 80098ec:	4628      	mov	r0, r5
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80098f0:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80098f2:	f7fc fd83 	bl	80063fc <HAL_RTC_MspInit>
 80098f6:	e7b9      	b.n	800986c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	22ff      	movs	r2, #255	; 0xff
 80098fc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80098fe:	2304      	movs	r3, #4
 8009900:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8009902:	2501      	movs	r5, #1
 8009904:	e7f2      	b.n	80098ec <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009906:	4620      	mov	r0, r4
 8009908:	f7ff ff72 	bl	80097f0 <HAL_RTC_WaitForSynchro>
 800990c:	2800      	cmp	r0, #0
 800990e:	d0de      	beq.n	80098ce <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	22ff      	movs	r2, #255	; 0xff
 8009914:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009916:	2304      	movs	r3, #4
 8009918:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800991a:	2501      	movs	r5, #1
 800991c:	e7e6      	b.n	80098ec <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 800991e:	2501      	movs	r5, #1
 8009920:	e7e4      	b.n	80098ec <HAL_RTC_Init+0x8e>

08009922 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8009922:	2300      	movs	r3, #0

  while(Value >= 10U)
 8009924:	2809      	cmp	r0, #9
 8009926:	d903      	bls.n	8009930 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8009928:	3301      	adds	r3, #1
    Value -= 10U;
 800992a:	380a      	subs	r0, #10
 800992c:	b2c0      	uxtb	r0, r0
 800992e:	e7f9      	b.n	8009924 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	b2db      	uxtb	r3, r3
}
 8009934:	4318      	orrs	r0, r3
 8009936:	4770      	bx	lr

08009938 <HAL_RTC_SetTime>:
{
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800993a:	7f03      	ldrb	r3, [r0, #28]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d078      	beq.n	8009a32 <HAL_RTC_SetTime+0xfa>
 8009940:	4604      	mov	r4, r0
 8009942:	460e      	mov	r6, r1
 8009944:	2301      	movs	r3, #1
 8009946:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009948:	2302      	movs	r3, #2
 800994a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800994c:	2a00      	cmp	r2, #0
 800994e:	d147      	bne.n	80099e0 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009950:	6803      	ldr	r3, [r0, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009958:	d101      	bne.n	800995e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800995a:	2300      	movs	r3, #0
 800995c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800995e:	7830      	ldrb	r0, [r6, #0]
 8009960:	f7ff ffdf 	bl	8009922 <RTC_ByteToBcd2>
 8009964:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009966:	7870      	ldrb	r0, [r6, #1]
 8009968:	f7ff ffdb 	bl	8009922 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800996c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009970:	78b0      	ldrb	r0, [r6, #2]
 8009972:	f7ff ffd6 	bl	8009922 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009976:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009978:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800997a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	22ca      	movs	r2, #202	; 0xca
 8009982:	625a      	str	r2, [r3, #36]	; 0x24
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	2253      	movs	r2, #83	; 0x53
 8009988:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff ff49 	bl	8009822 <RTC_EnterInitMode>
 8009990:	4607      	mov	r7, r0
 8009992:	2800      	cmp	r0, #0
 8009994:	d136      	bne.n	8009a04 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 800999c:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80099a0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80099a2:	6822      	ldr	r2, [r4, #0]
 80099a4:	6893      	ldr	r3, [r2, #8]
 80099a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099aa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80099ac:	6821      	ldr	r1, [r4, #0]
 80099ae:	688b      	ldr	r3, [r1, #8]
 80099b0:	68f2      	ldr	r2, [r6, #12]
 80099b2:	6930      	ldr	r0, [r6, #16]
 80099b4:	4302      	orrs	r2, r0
 80099b6:	4313      	orrs	r3, r2
 80099b8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80099ba:	6822      	ldr	r2, [r4, #0]
 80099bc:	68d3      	ldr	r3, [r2, #12]
 80099be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099c2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f013 0f20 	tst.w	r3, #32
 80099cc:	d023      	beq.n	8009a16 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	22ff      	movs	r2, #255	; 0xff
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80099d4:	2301      	movs	r3, #1
 80099d6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80099d8:	2300      	movs	r3, #0
 80099da:	7723      	strb	r3, [r4, #28]
}
 80099dc:	4638      	mov	r0, r7
 80099de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80099e0:	6803      	ldr	r3, [r0, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80099e8:	d101      	bne.n	80099ee <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80099ee:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80099f0:	7870      	ldrb	r0, [r6, #1]
 80099f2:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80099f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80099f8:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80099fa:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80099fc:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80099fe:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8009a02:	e7bc      	b.n	800997e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	22ff      	movs	r2, #255	; 0xff
 8009a08:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009a0a:	2304      	movs	r3, #4
 8009a0c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8009a12:	2701      	movs	r7, #1
 8009a14:	e7e2      	b.n	80099dc <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7ff feea 	bl	80097f0 <HAL_RTC_WaitForSynchro>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d0d6      	beq.n	80099ce <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	22ff      	movs	r2, #255	; 0xff
 8009a24:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a26:	2304      	movs	r3, #4
 8009a28:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8009a2e:	2701      	movs	r7, #1
 8009a30:	e7d4      	b.n	80099dc <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8009a32:	2702      	movs	r7, #2
 8009a34:	e7d2      	b.n	80099dc <HAL_RTC_SetTime+0xa4>

08009a36 <HAL_RTC_SetDate>:
{
 8009a36:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8009a38:	7f03      	ldrb	r3, [r0, #28]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d066      	beq.n	8009b0c <HAL_RTC_SetDate+0xd6>
 8009a3e:	4604      	mov	r4, r0
 8009a40:	460e      	mov	r6, r1
 8009a42:	2301      	movs	r3, #1
 8009a44:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a46:	2302      	movs	r3, #2
 8009a48:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a4a:	b93a      	cbnz	r2, 8009a5c <HAL_RTC_SetDate+0x26>
 8009a4c:	784b      	ldrb	r3, [r1, #1]
 8009a4e:	f013 0f10 	tst.w	r3, #16
 8009a52:	d003      	beq.n	8009a5c <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a54:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8009a58:	330a      	adds	r3, #10
 8009a5a:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	d133      	bne.n	8009ac8 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009a60:	78f0      	ldrb	r0, [r6, #3]
 8009a62:	f7ff ff5e 	bl	8009922 <RTC_ByteToBcd2>
 8009a66:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009a68:	7870      	ldrb	r0, [r6, #1]
 8009a6a:	f7ff ff5a 	bl	8009922 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009a6e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009a72:	78b0      	ldrb	r0, [r6, #2]
 8009a74:	f7ff ff55 	bl	8009922 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009a78:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 8009a7a:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009a7c:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	22ca      	movs	r2, #202	; 0xca
 8009a84:	625a      	str	r2, [r3, #36]	; 0x24
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	2253      	movs	r2, #83	; 0x53
 8009a8a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7ff fec8 	bl	8009822 <RTC_EnterInitMode>
 8009a92:	4606      	mov	r6, r0
 8009a94:	bb18      	cbnz	r0, 8009ade <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8009a9c:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8009aa0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	68d3      	ldr	r3, [r2, #12]
 8009aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aaa:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f013 0f20 	tst.w	r3, #32
 8009ab4:	d01c      	beq.n	8009af0 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	22ff      	movs	r2, #255	; 0xff
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8009abc:	2301      	movs	r3, #1
 8009abe:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	7723      	strb	r3, [r4, #28]
}
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ac8:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009aca:	7870      	ldrb	r0, [r6, #1]
 8009acc:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ace:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8009ad2:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009ad4:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009ad6:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ad8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8009adc:	e7d0      	b.n	8009a80 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	22ff      	movs	r2, #255	; 0xff
 8009ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8009ae8:	2300      	movs	r3, #0
 8009aea:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8009aec:	2601      	movs	r6, #1
 8009aee:	e7e9      	b.n	8009ac4 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7ff fe7d 	bl	80097f0 <HAL_RTC_WaitForSynchro>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d0dd      	beq.n	8009ab6 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	22ff      	movs	r2, #255	; 0xff
 8009afe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b00:	2304      	movs	r3, #4
 8009b02:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8009b04:	2300      	movs	r3, #0
 8009b06:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8009b08:	2601      	movs	r6, #1
 8009b0a:	e7db      	b.n	8009ac4 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8009b0c:	2602      	movs	r6, #2
 8009b0e:	e7d9      	b.n	8009ac4 <HAL_RTC_SetDate+0x8e>

08009b10 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009b10:	0903      	lsrs	r3, r0, #4
 8009b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8009b16:	f000 000f 	and.w	r0, r0, #15
 8009b1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8009b1e:	b2c0      	uxtb	r0, r0
 8009b20:	4770      	bx	lr

08009b22 <HAL_RTC_GetTime>:
{
 8009b22:	b570      	push	{r4, r5, r6, lr}
 8009b24:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009b26:	6803      	ldr	r3, [r0, #0]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009b2c:	6803      	ldr	r3, [r0, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009b34:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009b3a:	f3c5 4106 	ubfx	r1, r5, #16, #7
 8009b3e:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8009b42:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009b44:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8009b48:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009b4a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8009b4e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009b50:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8009b54:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8009b56:	b952      	cbnz	r2, 8009b6e <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009b58:	f7ff ffda 	bl	8009b10 <RTC_Bcd2ToByte>
 8009b5c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff ffd6 	bl	8009b10 <RTC_Bcd2ToByte>
 8009b64:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009b66:	4628      	mov	r0, r5
 8009b68:	f7ff ffd2 	bl	8009b10 <RTC_Bcd2ToByte>
 8009b6c:	70a0      	strb	r0, [r4, #2]
}
 8009b6e:	2000      	movs	r0, #0
 8009b70:	bd70      	pop	{r4, r5, r6, pc}

08009b72 <HAL_RTC_GetDate>:
{
 8009b72:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b74:	6803      	ldr	r3, [r0, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009b78:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009b7c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009b7e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8009b82:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b84:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8009b88:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009b8a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009b8e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8009b90:	b95a      	cbnz	r2, 8009baa <HAL_RTC_GetDate+0x38>
 8009b92:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b94:	f7ff ffbc 	bl	8009b10 <RTC_Bcd2ToByte>
 8009b98:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ffb8 	bl	8009b10 <RTC_Bcd2ToByte>
 8009ba0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f7ff ffb4 	bl	8009b10 <RTC_Bcd2ToByte>
 8009ba8:	70a0      	strb	r0, [r4, #2]
}
 8009baa:	2000      	movs	r0, #0
 8009bac:	bd70      	pop	{r4, r5, r6, pc}

08009bae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	4688      	mov	r8, r1
 8009bb6:	4617      	mov	r7, r2
 8009bb8:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bba:	6834      	ldr	r4, [r6, #0]
 8009bbc:	68a4      	ldr	r4, [r4, #8]
 8009bbe:	ea38 0304 	bics.w	r3, r8, r4
 8009bc2:	bf0c      	ite	eq
 8009bc4:	2401      	moveq	r4, #1
 8009bc6:	2400      	movne	r4, #0
 8009bc8:	42bc      	cmp	r4, r7
 8009bca:	d037      	beq.n	8009c3c <SPI_WaitFlagStateUntilTimeout+0x8e>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bcc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009bd0:	d0f3      	beq.n	8009bba <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009bd2:	f7fd fa89 	bl	80070e8 <HAL_GetTick>
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	1ac0      	subs	r0, r0, r3
 8009bda:	42a8      	cmp	r0, r5
 8009bdc:	d201      	bcs.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0x34>
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	d1eb      	bne.n	8009bba <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009be2:	6832      	ldr	r2, [r6, #0]
 8009be4:	6853      	ldr	r3, [r2, #4]
 8009be6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009bea:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bec:	6873      	ldr	r3, [r6, #4]
 8009bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bf2:	d00b      	beq.n	8009c0c <SPI_WaitFlagStateUntilTimeout+0x5e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bf4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bfa:	d014      	beq.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0x78>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c02:	2300      	movs	r3, #0
 8009c04:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c08:	2003      	movs	r0, #3
 8009c0a:	e018      	b.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0x90>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c0c:	68b3      	ldr	r3, [r6, #8]
 8009c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c12:	d002      	beq.n	8009c1a <SPI_WaitFlagStateUntilTimeout+0x6c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c18:	d1ec      	bne.n	8009bf4 <SPI_WaitFlagStateUntilTimeout+0x46>
          __HAL_SPI_DISABLE(hspi);
 8009c1a:	6832      	ldr	r2, [r6, #0]
 8009c1c:	6813      	ldr	r3, [r2, #0]
 8009c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	e7e6      	b.n	8009bf4 <SPI_WaitFlagStateUntilTimeout+0x46>
          SPI_RESET_CRC(hspi);
 8009c26:	6832      	ldr	r2, [r6, #0]
 8009c28:	6813      	ldr	r3, [r2, #0]
 8009c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	6832      	ldr	r2, [r6, #0]
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	e7df      	b.n	8009bfc <SPI_WaitFlagStateUntilTimeout+0x4e>
      }
    }
  }

  return HAL_OK;
 8009c3c:	2000      	movs	r0, #0
}
 8009c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c44:	b530      	push	{r4, r5, lr}
 8009c46:	b085      	sub	sp, #20
 8009c48:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c4a:	4b16      	ldr	r3, [pc, #88]	; (8009ca4 <SPI_EndRxTxTransaction+0x60>)
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	4b16      	ldr	r3, [pc, #88]	; (8009ca8 <SPI_EndRxTxTransaction+0x64>)
 8009c50:	fba3 3000 	umull	r3, r0, r3, r0
 8009c54:	0d40      	lsrs	r0, r0, #21
 8009c56:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8009c5a:	fb05 f000 	mul.w	r0, r5, r0
 8009c5e:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c66:	d00b      	beq.n	8009c80 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	b1bb      	cbz	r3, 8009c9c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c7a:	d1f5      	bne.n	8009c68 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e00e      	b.n	8009c9e <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c80:	9200      	str	r2, [sp, #0]
 8009c82:	460b      	mov	r3, r1
 8009c84:	2200      	movs	r2, #0
 8009c86:	2180      	movs	r1, #128	; 0x80
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff ff90 	bl	8009bae <SPI_WaitFlagStateUntilTimeout>
 8009c8e:	b130      	cbz	r0, 8009c9e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009c92:	f043 0320 	orr.w	r3, r3, #32
 8009c96:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c98:	2003      	movs	r0, #3
 8009c9a:	e000      	b.n	8009c9e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8009c9c:	2000      	movs	r0, #0
}
 8009c9e:	b005      	add	sp, #20
 8009ca0:	bd30      	pop	{r4, r5, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000188 	.word	0x20000188
 8009ca8:	165e9f81 	.word	0x165e9f81

08009cac <SPI_EndRxTransaction>:
{
 8009cac:	b510      	push	{r4, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cb4:	6841      	ldr	r1, [r0, #4]
 8009cb6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8009cba:	d014      	beq.n	8009ce6 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cbc:	6861      	ldr	r1, [r4, #4]
 8009cbe:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8009cc2:	d12a      	bne.n	8009d1a <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009cc4:	68a1      	ldr	r1, [r4, #8]
 8009cc6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009cca:	d019      	beq.n	8009d00 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ccc:	9200      	str	r2, [sp, #0]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2180      	movs	r1, #128	; 0x80
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f7ff ff6b 	bl	8009bae <SPI_WaitFlagStateUntilTimeout>
 8009cd8:	b330      	cbz	r0, 8009d28 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009cdc:	f043 0320 	orr.w	r3, r3, #32
 8009ce0:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ce2:	2003      	movs	r0, #3
 8009ce4:	e020      	b.n	8009d28 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ce6:	6881      	ldr	r1, [r0, #8]
 8009ce8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009cec:	d002      	beq.n	8009cf4 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cee:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009cf2:	d1e3      	bne.n	8009cbc <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	6801      	ldr	r1, [r0, #0]
 8009cf8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009cfc:	6001      	str	r1, [r0, #0]
 8009cfe:	e7dd      	b.n	8009cbc <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d00:	9200      	str	r2, [sp, #0]
 8009d02:	2200      	movs	r2, #0
 8009d04:	2101      	movs	r1, #1
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7ff ff51 	bl	8009bae <SPI_WaitFlagStateUntilTimeout>
 8009d0c:	b160      	cbz	r0, 8009d28 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d10:	f043 0320 	orr.w	r3, r3, #32
 8009d14:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d16:	2003      	movs	r0, #3
 8009d18:	e006      	b.n	8009d28 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d1a:	9200      	str	r2, [sp, #0]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7ff ff44 	bl	8009bae <SPI_WaitFlagStateUntilTimeout>
 8009d26:	b908      	cbnz	r0, 8009d2c <SPI_EndRxTransaction+0x80>
}
 8009d28:	b002      	add	sp, #8
 8009d2a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d2e:	f043 0320 	orr.w	r3, r3, #32
 8009d32:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d34:	2003      	movs	r0, #3
 8009d36:	e7f7      	b.n	8009d28 <SPI_EndRxTransaction+0x7c>

08009d38 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d03b      	beq.n	8009db4 <HAL_SPI_Init+0x7c>
{
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d44:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d02e      	beq.n	8009daa <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	6813      	ldr	r3, [r2, #0]
 8009d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d5a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	68a2      	ldr	r2, [r4, #8]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	68e2      	ldr	r2, [r4, #12]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	6922      	ldr	r2, [r4, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	6962      	ldr	r2, [r4, #20]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	69a2      	ldr	r2, [r4, #24]
 8009d70:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8009d74:	4313      	orrs	r3, r2
 8009d76:	69e2      	ldr	r2, [r4, #28]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	6a22      	ldr	r2, [r4, #32]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	430b      	orrs	r3, r1
 8009d84:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009d86:	8b63      	ldrh	r3, [r4, #26]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d8e:	6822      	ldr	r2, [r4, #0]
 8009d90:	430b      	orrs	r3, r1
 8009d92:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d94:	6822      	ldr	r2, [r4, #0]
 8009d96:	69d3      	ldr	r3, [r2, #28]
 8009d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d9c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d9e:	2000      	movs	r0, #0
 8009da0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8009da8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8009daa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009dae:	f7fc fb33 	bl	8006418 <HAL_SPI_MspInit>
 8009db2:	e7cb      	b.n	8009d4c <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8009db4:	2001      	movs	r0, #1
}
 8009db6:	4770      	bx	lr

08009db8 <HAL_SPI_Transmit>:
{
 8009db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8009dc0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	f000 80c7 	beq.w	8009f58 <HAL_SPI_Transmit+0x1a0>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4688      	mov	r8, r1
 8009dce:	4691      	mov	r9, r2
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009dd6:	f7fd f987 	bl	80070e8 <HAL_GetTick>
 8009dda:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009ddc:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8009de0:	b2f6      	uxtb	r6, r6
 8009de2:	2e01      	cmp	r6, #1
 8009de4:	f040 80a5 	bne.w	8009f32 <HAL_SPI_Transmit+0x17a>
  if ((pData == NULL) || (Size == 0U))
 8009de8:	f1b8 0f00 	cmp.w	r8, #0
 8009dec:	f000 80a2 	beq.w	8009f34 <HAL_SPI_Transmit+0x17c>
 8009df0:	f1b9 0f00 	cmp.w	r9, #0
 8009df4:	f000 809e 	beq.w	8009f34 <HAL_SPI_Transmit+0x17c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009e02:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009e06:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009e0a:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e0e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009e10:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009e12:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009e14:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009e16:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e18:	68a3      	ldr	r3, [r4, #8]
 8009e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e1e:	d01e      	beq.n	8009e5e <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009e28:	d103      	bne.n	8009e32 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e30:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e32:	68e3      	ldr	r3, [r4, #12]
 8009e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e38:	d017      	beq.n	8009e6a <HAL_SPI_Transmit+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	b113      	cbz	r3, 8009e44 <HAL_SPI_Transmit+0x8c>
 8009e3e:	f1b9 0f01 	cmp.w	r9, #1
 8009e42:	d14d      	bne.n	8009ee0 <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e4e:	3301      	adds	r3, #1
 8009e50:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009e52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	3b01      	subs	r3, #1
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009e5c:	e040      	b.n	8009ee0 <HAL_SPI_Transmit+0x128>
    SPI_1LINE_TX(hspi);
 8009e5e:	6822      	ldr	r2, [r4, #0]
 8009e60:	6813      	ldr	r3, [r2, #0]
 8009e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	e7da      	b.n	8009e20 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e6a:	6863      	ldr	r3, [r4, #4]
 8009e6c:	b113      	cbz	r3, 8009e74 <HAL_SPI_Transmit+0xbc>
 8009e6e:	f1b9 0f01 	cmp.w	r9, #1
 8009e72:	d116      	bne.n	8009ea2 <HAL_SPI_Transmit+0xea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	8812      	ldrh	r2, [r2, #0]
 8009e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e7e:	3302      	adds	r3, #2
 8009e80:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009e82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009e8c:	e009      	b.n	8009ea2 <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e8e:	f7fd f92b 	bl	80070e8 <HAL_GetTick>
 8009e92:	1bc0      	subs	r0, r0, r7
 8009e94:	42a8      	cmp	r0, r5
 8009e96:	d302      	bcc.n	8009e9e <HAL_SPI_Transmit+0xe6>
 8009e98:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009e9c:	d154      	bne.n	8009f48 <HAL_SPI_Transmit+0x190>
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	d054      	beq.n	8009f4c <HAL_SPI_Transmit+0x194>
    while (hspi->TxXferCount > 0U)
 8009ea2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d02e      	beq.n	8009f08 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	f012 0f02 	tst.w	r2, #2
 8009eb2:	d0ec      	beq.n	8009e8e <HAL_SPI_Transmit+0xd6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009eb6:	8812      	ldrh	r2, [r2, #0]
 8009eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ebc:	3302      	adds	r3, #2
 8009ebe:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009ec0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009eca:	e7ea      	b.n	8009ea2 <HAL_SPI_Transmit+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ecc:	f7fd f90c 	bl	80070e8 <HAL_GetTick>
 8009ed0:	1bc0      	subs	r0, r0, r7
 8009ed2:	42a8      	cmp	r0, r5
 8009ed4:	d302      	bcc.n	8009edc <HAL_SPI_Transmit+0x124>
 8009ed6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009eda:	d139      	bne.n	8009f50 <HAL_SPI_Transmit+0x198>
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	d039      	beq.n	8009f54 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0U)
 8009ee0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	b183      	cbz	r3, 8009f08 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	f012 0f02 	tst.w	r2, #2
 8009eee:	d0ed      	beq.n	8009ecc <HAL_SPI_Transmit+0x114>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ef0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ef8:	3301      	adds	r3, #1
 8009efa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009efc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009efe:	b292      	uxth	r2, r2
 8009f00:	3a01      	subs	r2, #1
 8009f02:	b292      	uxth	r2, r2
 8009f04:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009f06:	e7eb      	b.n	8009ee0 <HAL_SPI_Transmit+0x128>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f08:	463a      	mov	r2, r7
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7ff fe99 	bl	8009c44 <SPI_EndRxTxTransaction>
 8009f12:	b108      	cbz	r0, 8009f18 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f14:	2320      	movs	r3, #32
 8009f16:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f18:	68a3      	ldr	r3, [r4, #8]
 8009f1a:	b933      	cbnz	r3, 8009f2a <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	9201      	str	r2, [sp, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009f2c:	b913      	cbnz	r3, 8009f34 <HAL_SPI_Transmit+0x17c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f2e:	2600      	movs	r6, #0
 8009f30:	e000      	b.n	8009f34 <HAL_SPI_Transmit+0x17c>
    errorcode = HAL_BUSY;
 8009f32:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009f34:	2301      	movs	r3, #1
 8009f36:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8009f40:	4630      	mov	r0, r6
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8009f48:	2603      	movs	r6, #3
 8009f4a:	e7f3      	b.n	8009f34 <HAL_SPI_Transmit+0x17c>
 8009f4c:	2603      	movs	r6, #3
 8009f4e:	e7f1      	b.n	8009f34 <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 8009f50:	2603      	movs	r6, #3
 8009f52:	e7ef      	b.n	8009f34 <HAL_SPI_Transmit+0x17c>
 8009f54:	2603      	movs	r6, #3
 8009f56:	e7ed      	b.n	8009f34 <HAL_SPI_Transmit+0x17c>
  __HAL_LOCK(hspi);
 8009f58:	2602      	movs	r6, #2
 8009f5a:	e7f1      	b.n	8009f40 <HAL_SPI_Transmit+0x188>

08009f5c <HAL_SPI_TransmitReceive>:
{
 8009f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f60:	b083      	sub	sp, #12
 8009f62:	461f      	mov	r7, r3
 8009f64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8009f66:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	f000 8110 	beq.w	800a190 <HAL_SPI_TransmitReceive+0x234>
 8009f70:	4604      	mov	r4, r0
 8009f72:	4688      	mov	r8, r1
 8009f74:	4691      	mov	r9, r2
 8009f76:	2301      	movs	r3, #1
 8009f78:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009f7c:	f7fd f8b4 	bl	80070e8 <HAL_GetTick>
 8009f80:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8009f82:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009f86:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8009f88:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d00a      	beq.n	8009fa4 <HAL_SPI_TransmitReceive+0x48>
 8009f8e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009f92:	f040 80e3 	bne.w	800a15c <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f96:	68a2      	ldr	r2, [r4, #8]
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	f040 80e9 	bne.w	800a170 <HAL_SPI_TransmitReceive+0x214>
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	f040 80e8 	bne.w	800a174 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009fa4:	f1b8 0f00 	cmp.w	r8, #0
 8009fa8:	f000 80e6 	beq.w	800a178 <HAL_SPI_TransmitReceive+0x21c>
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	f000 80e4 	beq.w	800a17c <HAL_SPI_TransmitReceive+0x220>
 8009fb4:	2f00      	cmp	r7, #0
 8009fb6:	f000 80e3 	beq.w	800a180 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009fba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d002      	beq.n	8009fca <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009fc4:	2305      	movs	r3, #5
 8009fc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009fce:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009fd2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009fd4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009fd6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009fda:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009fdc:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8009fde:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009fe0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009fea:	d103      	bne.n	8009ff4 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ff4:	68e3      	ldr	r3, [r4, #12]
 8009ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ffa:	d011      	beq.n	800a020 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ffc:	6863      	ldr	r3, [r4, #4]
 8009ffe:	b10b      	cbz	r3, 800a004 <HAL_SPI_TransmitReceive+0xa8>
 800a000:	2f01      	cmp	r7, #1
 800a002:	d10b      	bne.n	800a01c <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a004:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	7812      	ldrb	r2, [r2, #0]
 800a00a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a00c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a00e:	3301      	adds	r3, #1
 800a010:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a014:	b29b      	uxth	r3, r3
 800a016:	3b01      	subs	r3, #1
 800a018:	b29b      	uxth	r3, r3
 800a01a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a01c:	2701      	movs	r7, #1
 800a01e:	e06b      	b.n	800a0f8 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a020:	6863      	ldr	r3, [r4, #4]
 800a022:	b10b      	cbz	r3, 800a028 <HAL_SPI_TransmitReceive+0xcc>
 800a024:	2f01      	cmp	r7, #1
 800a026:	d10b      	bne.n	800a040 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a028:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	8812      	ldrh	r2, [r2, #0]
 800a02e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a030:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a032:	3302      	adds	r3, #2
 800a034:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a036:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a040:	2701      	movs	r7, #1
 800a042:	e01c      	b.n	800a07e <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	f012 0f01 	tst.w	r2, #1
 800a04c:	d00e      	beq.n	800a06c <HAL_SPI_TransmitReceive+0x110>
 800a04e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a050:	b292      	uxth	r2, r2
 800a052:	b15a      	cbz	r2, 800a06c <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a05a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a05c:	3302      	adds	r3, #2
 800a05e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a062:	b29b      	uxth	r3, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	b29b      	uxth	r3, r3
 800a068:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a06a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a06c:	f7fd f83c 	bl	80070e8 <HAL_GetTick>
 800a070:	1b80      	subs	r0, r0, r6
 800a072:	42a8      	cmp	r0, r5
 800a074:	d303      	bcc.n	800a07e <HAL_SPI_TransmitReceive+0x122>
 800a076:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a07a:	f040 8083 	bne.w	800a184 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a07e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a080:	b29b      	uxth	r3, r3
 800a082:	b91b      	cbnz	r3, 800a08c <HAL_SPI_TransmitReceive+0x130>
 800a084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a086:	b29b      	uxth	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d053      	beq.n	800a134 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	f012 0f02 	tst.w	r2, #2
 800a094:	d0d6      	beq.n	800a044 <HAL_SPI_TransmitReceive+0xe8>
 800a096:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a098:	b292      	uxth	r2, r2
 800a09a:	2a00      	cmp	r2, #0
 800a09c:	d0d2      	beq.n	800a044 <HAL_SPI_TransmitReceive+0xe8>
 800a09e:	2f00      	cmp	r7, #0
 800a0a0:	d0d0      	beq.n	800a044 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a0a4:	8812      	ldrh	r2, [r2, #0]
 800a0a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0aa:	3302      	adds	r3, #2
 800a0ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a0ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800a0b8:	2700      	movs	r7, #0
 800a0ba:	e7c3      	b.n	800a044 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	f012 0f01 	tst.w	r2, #1
 800a0c4:	d00e      	beq.n	800a0e4 <HAL_SPI_TransmitReceive+0x188>
 800a0c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a0c8:	b292      	uxth	r2, r2
 800a0ca:	b15a      	cbz	r2, 800a0e4 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a0d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a0d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a0e2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0e4:	f7fd f800 	bl	80070e8 <HAL_GetTick>
 800a0e8:	1b83      	subs	r3, r0, r6
 800a0ea:	42ab      	cmp	r3, r5
 800a0ec:	d302      	bcc.n	800a0f4 <HAL_SPI_TransmitReceive+0x198>
 800a0ee:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a0f2:	d149      	bne.n	800a188 <HAL_SPI_TransmitReceive+0x22c>
 800a0f4:	2d00      	cmp	r5, #0
 800a0f6:	d049      	beq.n	800a18c <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	b913      	cbnz	r3, 800a104 <HAL_SPI_TransmitReceive+0x1a8>
 800a0fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a100:	b29b      	uxth	r3, r3
 800a102:	b1bb      	cbz	r3, 800a134 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	f012 0f02 	tst.w	r2, #2
 800a10c:	d0d6      	beq.n	800a0bc <HAL_SPI_TransmitReceive+0x160>
 800a10e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a110:	b292      	uxth	r2, r2
 800a112:	2a00      	cmp	r2, #0
 800a114:	d0d2      	beq.n	800a0bc <HAL_SPI_TransmitReceive+0x160>
 800a116:	2f00      	cmp	r7, #0
 800a118:	d0d0      	beq.n	800a0bc <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a11a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a11c:	7812      	ldrb	r2, [r2, #0]
 800a11e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a120:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a122:	3301      	adds	r3, #1
 800a124:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a126:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a128:	b29b      	uxth	r3, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800a130:	2700      	movs	r7, #0
 800a132:	e7c3      	b.n	800a0bc <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a134:	4632      	mov	r2, r6
 800a136:	4629      	mov	r1, r5
 800a138:	4620      	mov	r0, r4
 800a13a:	f7ff fd83 	bl	8009c44 <SPI_EndRxTxTransaction>
 800a13e:	b948      	cbnz	r0, 800a154 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a140:	68a3      	ldr	r3, [r4, #8]
 800a142:	b963      	cbnz	r3, 800a15e <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	9201      	str	r2, [sp, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	e004      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a154:	2320      	movs	r3, #32
 800a156:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a158:	2001      	movs	r0, #1
    goto error;
 800a15a:	e000      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 800a15c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a15e:	2301      	movs	r3, #1
 800a160:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a164:	2300      	movs	r3, #0
 800a166:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800a170:	2002      	movs	r0, #2
 800a172:	e7f4      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
 800a174:	2002      	movs	r0, #2
 800a176:	e7f2      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 800a178:	2001      	movs	r0, #1
 800a17a:	e7f0      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
 800a17c:	2001      	movs	r0, #1
 800a17e:	e7ee      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
 800a180:	2001      	movs	r0, #1
 800a182:	e7ec      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 800a184:	2003      	movs	r0, #3
 800a186:	e7ea      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 800a188:	2003      	movs	r0, #3
 800a18a:	e7e8      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
 800a18c:	2003      	movs	r0, #3
 800a18e:	e7e6      	b.n	800a15e <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 800a190:	2002      	movs	r0, #2
 800a192:	e7ea      	b.n	800a16a <HAL_SPI_TransmitReceive+0x20e>

0800a194 <HAL_SPI_Receive>:
{
 800a194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a198:	b083      	sub	sp, #12
 800a19a:	4604      	mov	r4, r0
 800a19c:	4688      	mov	r8, r1
 800a19e:	4691      	mov	r9, r2
 800a1a0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a1a2:	6843      	ldr	r3, [r0, #4]
 800a1a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a8:	d036      	beq.n	800a218 <HAL_SPI_Receive+0x84>
  __HAL_LOCK(hspi);
 800a1aa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	f000 80a1 	beq.w	800a2f6 <HAL_SPI_Receive+0x162>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800a1ba:	f7fc ff95 	bl	80070e8 <HAL_GetTick>
 800a1be:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a1c0:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800a1c4:	b2f6      	uxtb	r6, r6
 800a1c6:	2e01      	cmp	r6, #1
 800a1c8:	f040 8082 	bne.w	800a2d0 <HAL_SPI_Receive+0x13c>
  if ((pData == NULL) || (Size == 0U))
 800a1cc:	f1b8 0f00 	cmp.w	r8, #0
 800a1d0:	d07f      	beq.n	800a2d2 <HAL_SPI_Receive+0x13e>
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d07c      	beq.n	800a2d2 <HAL_SPI_Receive+0x13e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a1d8:	2304      	movs	r3, #4
 800a1da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a1e2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a1e6:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a1ea:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a1ee:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a1f0:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a1f2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a1f4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a1f6:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1f8:	68a3      	ldr	r3, [r4, #8]
 800a1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fe:	d018      	beq.n	800a232 <HAL_SPI_Receive+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a208:	d103      	bne.n	800a212 <HAL_SPI_Receive+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a210:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	b1eb      	cbz	r3, 800a252 <HAL_SPI_Receive+0xbe>
 800a216:	e03b      	b.n	800a290 <HAL_SPI_Receive+0xfc>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a218:	6883      	ldr	r3, [r0, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1c5      	bne.n	800a1aa <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a21e:	2304      	movs	r3, #4
 800a220:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a224:	9500      	str	r5, [sp, #0]
 800a226:	4613      	mov	r3, r2
 800a228:	460a      	mov	r2, r1
 800a22a:	f7ff fe97 	bl	8009f5c <HAL_SPI_TransmitReceive>
 800a22e:	4606      	mov	r6, r0
 800a230:	e055      	b.n	800a2de <HAL_SPI_Receive+0x14a>
    SPI_1LINE_RX(hspi);
 800a232:	6822      	ldr	r2, [r4, #0]
 800a234:	6813      	ldr	r3, [r2, #0]
 800a236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	e7e0      	b.n	800a200 <HAL_SPI_Receive+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a23e:	f7fc ff53 	bl	80070e8 <HAL_GetTick>
 800a242:	1bc0      	subs	r0, r0, r7
 800a244:	42a8      	cmp	r0, r5
 800a246:	d302      	bcc.n	800a24e <HAL_SPI_Receive+0xba>
 800a248:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a24c:	d14b      	bne.n	800a2e6 <HAL_SPI_Receive+0x152>
 800a24e:	2d00      	cmp	r5, #0
 800a250:	d04b      	beq.n	800a2ea <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 800a252:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a254:	b29b      	uxth	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d02e      	beq.n	800a2b8 <HAL_SPI_Receive+0x124>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	f012 0f01 	tst.w	r2, #1
 800a262:	d0ec      	beq.n	800a23e <HAL_SPI_Receive+0xaa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a264:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a266:	7b1b      	ldrb	r3, [r3, #12]
 800a268:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a26a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a26c:	3301      	adds	r3, #1
 800a26e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29b      	uxth	r3, r3
 800a278:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a27a:	e7ea      	b.n	800a252 <HAL_SPI_Receive+0xbe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a27c:	f7fc ff34 	bl	80070e8 <HAL_GetTick>
 800a280:	1bc0      	subs	r0, r0, r7
 800a282:	42a8      	cmp	r0, r5
 800a284:	d302      	bcc.n	800a28c <HAL_SPI_Receive+0xf8>
 800a286:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a28a:	d130      	bne.n	800a2ee <HAL_SPI_Receive+0x15a>
 800a28c:	2d00      	cmp	r5, #0
 800a28e:	d030      	beq.n	800a2f2 <HAL_SPI_Receive+0x15e>
    while (hspi->RxXferCount > 0U)
 800a290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a292:	b29b      	uxth	r3, r3
 800a294:	b183      	cbz	r3, 800a2b8 <HAL_SPI_Receive+0x124>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	f012 0f01 	tst.w	r2, #1
 800a29e:	d0ed      	beq.n	800a27c <HAL_SPI_Receive+0xe8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2a8:	3302      	adds	r3, #2
 800a2aa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a2ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a2ae:	b292      	uxth	r2, r2
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	b292      	uxth	r2, r2
 800a2b4:	87e2      	strh	r2, [r4, #62]	; 0x3e
 800a2b6:	e7eb      	b.n	800a290 <HAL_SPI_Receive+0xfc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2b8:	463a      	mov	r2, r7
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7ff fcf5 	bl	8009cac <SPI_EndRxTransaction>
 800a2c2:	b108      	cbz	r0, 800a2c8 <HAL_SPI_Receive+0x134>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a2ca:	b913      	cbnz	r3, 800a2d2 <HAL_SPI_Receive+0x13e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2cc:	2600      	movs	r6, #0
 800a2ce:	e000      	b.n	800a2d2 <HAL_SPI_Receive+0x13e>
    errorcode = HAL_BUSY;
 800a2d0:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a2de:	4630      	mov	r0, r6
 800a2e0:	b003      	add	sp, #12
 800a2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800a2e6:	2603      	movs	r6, #3
 800a2e8:	e7f3      	b.n	800a2d2 <HAL_SPI_Receive+0x13e>
 800a2ea:	2603      	movs	r6, #3
 800a2ec:	e7f1      	b.n	800a2d2 <HAL_SPI_Receive+0x13e>
          errorcode = HAL_TIMEOUT;
 800a2ee:	2603      	movs	r6, #3
 800a2f0:	e7ef      	b.n	800a2d2 <HAL_SPI_Receive+0x13e>
 800a2f2:	2603      	movs	r6, #3
 800a2f4:	e7ed      	b.n	800a2d2 <HAL_SPI_Receive+0x13e>
  __HAL_LOCK(hspi);
 800a2f6:	2602      	movs	r6, #2
 800a2f8:	e7f1      	b.n	800a2de <HAL_SPI_Receive+0x14a>
	...

0800a2fc <HAL_SPI_Transmit_DMA>:
{
 800a2fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800a2fe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800a302:	2b01      	cmp	r3, #1
 800a304:	d05c      	beq.n	800a3c0 <HAL_SPI_Transmit_DMA+0xc4>
 800a306:	4604      	mov	r4, r0
 800a308:	2301      	movs	r3, #1
 800a30a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800a30e:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 800a312:	b2ed      	uxtb	r5, r5
 800a314:	429d      	cmp	r5, r3
 800a316:	d14d      	bne.n	800a3b4 <HAL_SPI_Transmit_DMA+0xb8>
  if ((pData == NULL) || (Size == 0U))
 800a318:	2900      	cmp	r1, #0
 800a31a:	d04c      	beq.n	800a3b6 <HAL_SPI_Transmit_DMA+0xba>
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	d04a      	beq.n	800a3b6 <HAL_SPI_Transmit_DMA+0xba>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a320:	2303      	movs	r3, #3
 800a322:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a326:	2300      	movs	r3, #0
 800a328:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a32a:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a32c:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a32e:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a330:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a332:	6443      	str	r3, [r0, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a334:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a336:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a338:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a33a:	6883      	ldr	r3, [r0, #8]
 800a33c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a340:	d02a      	beq.n	800a398 <HAL_SPI_Transmit_DMA+0x9c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a342:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a344:	4a1f      	ldr	r2, [pc, #124]	; (800a3c4 <HAL_SPI_Transmit_DMA+0xc8>)
 800a346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a348:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a34a:	4a1f      	ldr	r2, [pc, #124]	; (800a3c8 <HAL_SPI_Transmit_DMA+0xcc>)
 800a34c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a34e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a350:	4a1e      	ldr	r2, [pc, #120]	; (800a3cc <HAL_SPI_Transmit_DMA+0xd0>)
 800a352:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800a354:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a356:	2200      	movs	r2, #0
 800a358:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a35a:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800a35c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a35e:	b29b      	uxth	r3, r3
 800a360:	320c      	adds	r2, #12
 800a362:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a364:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a366:	f7fd f813 	bl	8007390 <HAL_DMA_Start_IT>
 800a36a:	4601      	mov	r1, r0
 800a36c:	b9d0      	cbnz	r0, 800a3a4 <HAL_SPI_Transmit_DMA+0xa8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a376:	d103      	bne.n	800a380 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a37e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a380:	6822      	ldr	r2, [r4, #0]
 800a382:	6853      	ldr	r3, [r2, #4]
 800a384:	f043 0320 	orr.w	r3, r3, #32
 800a388:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	6853      	ldr	r3, [r2, #4]
 800a38e:	f043 0302 	orr.w	r3, r3, #2
 800a392:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a394:	460d      	mov	r5, r1
 800a396:	e00e      	b.n	800a3b6 <HAL_SPI_Transmit_DMA+0xba>
    SPI_1LINE_TX(hspi);
 800a398:	6802      	ldr	r2, [r0, #0]
 800a39a:	6813      	ldr	r3, [r2, #0]
 800a39c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e7ce      	b.n	800a342 <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a3a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3a6:	f043 0310 	orr.w	r3, r3, #16
 800a3aa:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 800a3b2:	e000      	b.n	800a3b6 <HAL_SPI_Transmit_DMA+0xba>
    errorcode = HAL_BUSY;
 800a3b4:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a3bc:	4628      	mov	r0, r5
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 800a3c0:	2502      	movs	r5, #2
 800a3c2:	e7fb      	b.n	800a3bc <HAL_SPI_Transmit_DMA+0xc0>
 800a3c4:	0800a523 	.word	0x0800a523
 800a3c8:	0800a567 	.word	0x0800a567
 800a3cc:	0800a545 	.word	0x0800a545

0800a3d0 <HAL_SPI_TransmitReceive_DMA>:
{
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a3d4:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	f000 8094 	beq.w	800a506 <HAL_SPI_TransmitReceive_DMA+0x136>
 800a3de:	2001      	movs	r0, #1
 800a3e0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 800a3e4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a3e8:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800a3ea:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a3ec:	2801      	cmp	r0, #1
 800a3ee:	d007      	beq.n	800a400 <HAL_SPI_TransmitReceive_DMA+0x30>
 800a3f0:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800a3f4:	d178      	bne.n	800a4e8 <HAL_SPI_TransmitReceive_DMA+0x118>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a3f6:	68a5      	ldr	r5, [r4, #8]
 800a3f8:	2d00      	cmp	r5, #0
 800a3fa:	d17a      	bne.n	800a4f2 <HAL_SPI_TransmitReceive_DMA+0x122>
 800a3fc:	2804      	cmp	r0, #4
 800a3fe:	d17a      	bne.n	800a4f6 <HAL_SPI_TransmitReceive_DMA+0x126>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a400:	2900      	cmp	r1, #0
 800a402:	d07a      	beq.n	800a4fa <HAL_SPI_TransmitReceive_DMA+0x12a>
 800a404:	2a00      	cmp	r2, #0
 800a406:	d07a      	beq.n	800a4fe <HAL_SPI_TransmitReceive_DMA+0x12e>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d07a      	beq.n	800a502 <HAL_SPI_TransmitReceive_DMA+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a40c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a410:	b2c0      	uxtb	r0, r0
 800a412:	2804      	cmp	r0, #4
 800a414:	d002      	beq.n	800a41c <HAL_SPI_TransmitReceive_DMA+0x4c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a416:	2005      	movs	r0, #5
 800a418:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a41c:	2000      	movs	r0, #0
 800a41e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a420:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a422:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a424:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a426:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a428:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a42a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a42c:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a42e:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a430:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b04      	cmp	r3, #4
 800a438:	d01c      	beq.n	800a474 <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a43a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a43c:	4a33      	ldr	r2, [pc, #204]	; (800a50c <HAL_SPI_TransmitReceive_DMA+0x13c>)
 800a43e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a440:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a442:	4a33      	ldr	r2, [pc, #204]	; (800a510 <HAL_SPI_TransmitReceive_DMA+0x140>)
 800a444:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a446:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a448:	4a32      	ldr	r2, [pc, #200]	; (800a514 <HAL_SPI_TransmitReceive_DMA+0x144>)
 800a44a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a44c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a44e:	2200      	movs	r2, #0
 800a450:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a452:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800a454:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a456:	b29b      	uxth	r3, r3
 800a458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a45a:	310c      	adds	r1, #12
 800a45c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a45e:	f7fc ff97 	bl	8007390 <HAL_DMA_Start_IT>
 800a462:	b170      	cbz	r0, 800a482 <HAL_SPI_TransmitReceive_DMA+0xb2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a464:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a466:	f043 0310 	orr.w	r3, r3, #16
 800a46a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800a46c:	2001      	movs	r0, #1
 800a46e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 800a472:	e03a      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a474:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a476:	4a28      	ldr	r2, [pc, #160]	; (800a518 <HAL_SPI_TransmitReceive_DMA+0x148>)
 800a478:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a47a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a47c:	4a27      	ldr	r2, [pc, #156]	; (800a51c <HAL_SPI_TransmitReceive_DMA+0x14c>)
 800a47e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a480:	e7e1      	b.n	800a446 <HAL_SPI_TransmitReceive_DMA+0x76>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a482:	6822      	ldr	r2, [r4, #0]
 800a484:	6853      	ldr	r3, [r2, #4]
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a48c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a48e:	2300      	movs	r3, #0
 800a490:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a492:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a494:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a496:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a498:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a49a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a49c:	6513      	str	r3, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a49e:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800a4a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	320c      	adds	r2, #12
 800a4a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a4aa:	f7fc ff71 	bl	8007390 <HAL_DMA_Start_IT>
 800a4ae:	b998      	cbnz	r0, 800a4d8 <HAL_SPI_TransmitReceive_DMA+0x108>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a4b8:	d103      	bne.n	800a4c2 <HAL_SPI_TransmitReceive_DMA+0xf2>
    __HAL_SPI_ENABLE(hspi);
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4c0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	6853      	ldr	r3, [r2, #4]
 800a4c6:	f043 0320 	orr.w	r3, r3, #32
 800a4ca:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a4cc:	6822      	ldr	r2, [r4, #0]
 800a4ce:	6853      	ldr	r3, [r2, #4]
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	6053      	str	r3, [r2, #4]
 800a4d6:	e008      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4da:	f043 0310 	orr.w	r3, r3, #16
 800a4de:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    goto error;
 800a4e6:	e000      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
    errorcode = HAL_BUSY;
 800a4e8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a4f0:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 800a4f2:	2002      	movs	r0, #2
 800a4f4:	e7f9      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
 800a4f6:	2002      	movs	r0, #2
 800a4f8:	e7f7      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
    errorcode = HAL_ERROR;
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e7f5      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
 800a4fe:	2001      	movs	r0, #1
 800a500:	e7f3      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
 800a502:	2001      	movs	r0, #1
 800a504:	e7f1      	b.n	800a4ea <HAL_SPI_TransmitReceive_DMA+0x11a>
  __HAL_LOCK(hspi);
 800a506:	2002      	movs	r0, #2
 800a508:	e7f2      	b.n	800a4f0 <HAL_SPI_TransmitReceive_DMA+0x120>
 800a50a:	bf00      	nop
 800a50c:	0800a53b 	.word	0x0800a53b
 800a510:	0800a645 	.word	0x0800a645
 800a514:	0800a545 	.word	0x0800a545
 800a518:	0800a52f 	.word	0x0800a52f
 800a51c:	0800a5d7 	.word	0x0800a5d7

0800a520 <HAL_SPI_TxHalfCpltCallback>:
}
 800a520:	4770      	bx	lr

0800a522 <SPI_DMAHalfTransmitCplt>:
{
 800a522:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a524:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a526:	f7ff fffb 	bl	800a520 <HAL_SPI_TxHalfCpltCallback>
}
 800a52a:	bd08      	pop	{r3, pc}

0800a52c <HAL_SPI_RxHalfCpltCallback>:
}
 800a52c:	4770      	bx	lr

0800a52e <SPI_DMAHalfReceiveCplt>:
{
 800a52e:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a530:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a532:	f7ff fffb 	bl	800a52c <HAL_SPI_RxHalfCpltCallback>
}
 800a536:	bd08      	pop	{r3, pc}

0800a538 <HAL_SPI_TxRxHalfCpltCallback>:
}
 800a538:	4770      	bx	lr

0800a53a <SPI_DMAHalfTransmitReceiveCplt>:
{
 800a53a:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a53c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a53e:	f7ff fffb 	bl	800a538 <HAL_SPI_TxRxHalfCpltCallback>
}
 800a542:	bd08      	pop	{r3, pc}

0800a544 <SPI_DMAError>:
{
 800a544:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a546:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a548:	6802      	ldr	r2, [r0, #0]
 800a54a:	6853      	ldr	r3, [r2, #4]
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a552:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a554:	f043 0310 	orr.w	r3, r3, #16
 800a558:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a55a:	2301      	movs	r3, #1
 800a55c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800a560:	f7fa fa10 	bl	8004984 <HAL_SPI_ErrorCallback>
}
 800a564:	bd08      	pop	{r3, pc}

0800a566 <SPI_DMATransmitCplt>:
{
 800a566:	b530      	push	{r4, r5, lr}
 800a568:	b083      	sub	sp, #12
 800a56a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a56c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a56e:	f7fc fdbb 	bl	80070e8 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a57a:	d123      	bne.n	800a5c4 <SPI_DMATransmitCplt+0x5e>
 800a57c:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a57e:	6821      	ldr	r1, [r4, #0]
 800a580:	684b      	ldr	r3, [r1, #4]
 800a582:	f023 0320 	bic.w	r3, r3, #32
 800a586:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a588:	6821      	ldr	r1, [r4, #0]
 800a58a:	684b      	ldr	r3, [r1, #4]
 800a58c:	f023 0302 	bic.w	r3, r3, #2
 800a590:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a592:	2164      	movs	r1, #100	; 0x64
 800a594:	4620      	mov	r0, r4
 800a596:	f7ff fb55 	bl	8009c44 <SPI_EndRxTxTransaction>
 800a59a:	b118      	cbz	r0, 800a5a4 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a59c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a59e:	f043 0320 	orr.w	r3, r3, #32
 800a5a2:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5a4:	68a3      	ldr	r3, [r4, #8]
 800a5a6:	b933      	cbnz	r3, 800a5b6 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	9201      	str	r2, [sp, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a5c2:	b923      	cbnz	r3, 800a5ce <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7fa f9d5 	bl	8004974 <HAL_SPI_TxCpltCallback>
}
 800a5ca:	b003      	add	sp, #12
 800a5cc:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7fa f9d8 	bl	8004984 <HAL_SPI_ErrorCallback>
      return;
 800a5d4:	e7f9      	b.n	800a5ca <SPI_DMATransmitCplt+0x64>

0800a5d6 <SPI_DMAReceiveCplt>:
{
 800a5d6:	b538      	push	{r3, r4, r5, lr}
 800a5d8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a5da:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a5dc:	f7fc fd84 	bl	80070e8 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a5e8:	d11e      	bne.n	800a628 <SPI_DMAReceiveCplt+0x52>
 800a5ea:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a5ec:	6821      	ldr	r1, [r4, #0]
 800a5ee:	684b      	ldr	r3, [r1, #4]
 800a5f0:	f023 0320 	bic.w	r3, r3, #32
 800a5f4:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	b91b      	cbnz	r3, 800a602 <SPI_DMAReceiveCplt+0x2c>
 800a5fa:	6863      	ldr	r3, [r4, #4]
 800a5fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a600:	d016      	beq.n	800a630 <SPI_DMAReceiveCplt+0x5a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a602:	6821      	ldr	r1, [r4, #0]
 800a604:	684b      	ldr	r3, [r1, #4]
 800a606:	f023 0301 	bic.w	r3, r3, #1
 800a60a:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a60c:	2164      	movs	r1, #100	; 0x64
 800a60e:	4620      	mov	r0, r4
 800a610:	f7ff fb4c 	bl	8009cac <SPI_EndRxTransaction>
 800a614:	b108      	cbz	r0, 800a61a <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a616:	2320      	movs	r3, #32
 800a618:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a61e:	2301      	movs	r3, #1
 800a620:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a624:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a626:	b94b      	cbnz	r3, 800a63c <SPI_DMAReceiveCplt+0x66>
  HAL_SPI_RxCpltCallback(hspi);
 800a628:	4620      	mov	r0, r4
 800a62a:	f7fa f99f 	bl	800496c <HAL_SPI_RxCpltCallback>
}
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a630:	6821      	ldr	r1, [r4, #0]
 800a632:	684b      	ldr	r3, [r1, #4]
 800a634:	f023 0303 	bic.w	r3, r3, #3
 800a638:	604b      	str	r3, [r1, #4]
 800a63a:	e7e7      	b.n	800a60c <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 800a63c:	4620      	mov	r0, r4
 800a63e:	f7fa f9a1 	bl	8004984 <HAL_SPI_ErrorCallback>
      return;
 800a642:	e7f4      	b.n	800a62e <SPI_DMAReceiveCplt+0x58>

0800a644 <SPI_DMATransmitReceiveCplt>:
{
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a648:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a64a:	f7fc fd4d 	bl	80070e8 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a656:	d11b      	bne.n	800a690 <SPI_DMATransmitReceiveCplt+0x4c>
 800a658:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a65a:	6821      	ldr	r1, [r4, #0]
 800a65c:	684b      	ldr	r3, [r1, #4]
 800a65e:	f023 0320 	bic.w	r3, r3, #32
 800a662:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a664:	2164      	movs	r1, #100	; 0x64
 800a666:	4620      	mov	r0, r4
 800a668:	f7ff faec 	bl	8009c44 <SPI_EndRxTxTransaction>
 800a66c:	b118      	cbz	r0, 800a676 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a66e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a670:	f043 0320 	orr.w	r3, r3, #32
 800a674:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a676:	6822      	ldr	r2, [r4, #0]
 800a678:	6853      	ldr	r3, [r2, #4]
 800a67a:	f023 0303 	bic.w	r3, r3, #3
 800a67e:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a684:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a686:	2301      	movs	r3, #1
 800a688:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a68c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a68e:	b91b      	cbnz	r3, 800a698 <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 800a690:	4620      	mov	r0, r4
 800a692:	f7fa f973 	bl	800497c <HAL_SPI_TxRxCpltCallback>
}
 800a696:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800a698:	4620      	mov	r0, r4
 800a69a:	f7fa f973 	bl	8004984 <HAL_SPI_ErrorCallback>
      return;
 800a69e:	e7fa      	b.n	800a696 <SPI_DMATransmitReceiveCplt+0x52>

0800a6a0 <HAL_SPI_IRQHandler>:
{
 800a6a0:	b530      	push	{r4, r5, lr}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800a6a6:	6802      	ldr	r2, [r0, #0]
 800a6a8:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800a6aa:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a6ac:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800a6b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a6b4:	d105      	bne.n	800a6c2 <HAL_SPI_IRQHandler+0x22>
 800a6b6:	f013 0f01 	tst.w	r3, #1
 800a6ba:	d002      	beq.n	800a6c2 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a6bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a6c0:	d169      	bne.n	800a796 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a6c2:	f013 0f02 	tst.w	r3, #2
 800a6c6:	d002      	beq.n	800a6ce <HAL_SPI_IRQHandler+0x2e>
 800a6c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a6cc:	d167      	bne.n	800a79e <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6ce:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800a6d2:	f013 0f20 	tst.w	r3, #32
 800a6d6:	d103      	bne.n	800a6e0 <HAL_SPI_IRQHandler+0x40>
 800a6d8:	b910      	cbnz	r0, 800a6e0 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a6da:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a6de:	d061      	beq.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
 800a6e0:	f011 0f20 	tst.w	r1, #32
 800a6e4:	d05e      	beq.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6e6:	b178      	cbz	r0, 800a708 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6e8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a6ec:	b2c0      	uxtb	r0, r0
 800a6ee:	2803      	cmp	r0, #3
 800a6f0:	d05a      	beq.n	800a7a8 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6f4:	f040 0004 	orr.w	r0, r0, #4
 800a6f8:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	9000      	str	r0, [sp, #0]
 800a6fe:	68d0      	ldr	r0, [r2, #12]
 800a700:	9000      	str	r0, [sp, #0]
 800a702:	6890      	ldr	r0, [r2, #8]
 800a704:	9000      	str	r0, [sp, #0]
 800a706:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a708:	b165      	cbz	r5, 800a724 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a70a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a70c:	f040 0001 	orr.w	r0, r0, #1
 800a710:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a712:	2000      	movs	r0, #0
 800a714:	9002      	str	r0, [sp, #8]
 800a716:	6890      	ldr	r0, [r2, #8]
 800a718:	9002      	str	r0, [sp, #8]
 800a71a:	6810      	ldr	r0, [r2, #0]
 800a71c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800a720:	6010      	str	r0, [r2, #0]
 800a722:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a724:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a728:	d009      	beq.n	800a73e <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a72a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a72c:	f043 0308 	orr.w	r3, r3, #8
 800a730:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a732:	2300      	movs	r3, #0
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	9303      	str	r3, [sp, #12]
 800a73c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a73e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a740:	2b00      	cmp	r3, #0
 800a742:	d02f      	beq.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a744:	6822      	ldr	r2, [r4, #0]
 800a746:	6853      	ldr	r3, [r2, #4]
 800a748:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a74c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800a74e:	2301      	movs	r3, #1
 800a750:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a754:	f011 0f03 	tst.w	r1, #3
 800a758:	d02e      	beq.n	800a7b8 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a75a:	6822      	ldr	r2, [r4, #0]
 800a75c:	6853      	ldr	r3, [r2, #4]
 800a75e:	f023 0303 	bic.w	r3, r3, #3
 800a762:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800a764:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a766:	b14b      	cbz	r3, 800a77c <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a768:	4a15      	ldr	r2, [pc, #84]	; (800a7c0 <HAL_SPI_IRQHandler+0x120>)
 800a76a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a76c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a76e:	f7fc fe44 	bl	80073fa <HAL_DMA_Abort_IT>
 800a772:	b118      	cbz	r0, 800a77c <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a774:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77a:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a77c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a77e:	b18b      	cbz	r3, 800a7a4 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a780:	4a0f      	ldr	r2, [pc, #60]	; (800a7c0 <HAL_SPI_IRQHandler+0x120>)
 800a782:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a784:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a786:	f7fc fe38 	bl	80073fa <HAL_DMA_Abort_IT>
 800a78a:	b158      	cbz	r0, 800a7a4 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a78c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a792:	6563      	str	r3, [r4, #84]	; 0x54
 800a794:	e006      	b.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 800a796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a798:	4620      	mov	r0, r4
 800a79a:	4798      	blx	r3
    return;
 800a79c:	e002      	b.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800a79e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4798      	blx	r3
}
 800a7a4:	b005      	add	sp, #20
 800a7a6:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	68d3      	ldr	r3, [r2, #12]
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	6893      	ldr	r3, [r2, #8]
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	9b01      	ldr	r3, [sp, #4]
        return;
 800a7b6:	e7f5      	b.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7fa f8e3 	bl	8004984 <HAL_SPI_ErrorCallback>
    return;
 800a7be:	e7f1      	b.n	800a7a4 <HAL_SPI_IRQHandler+0x104>
 800a7c0:	0800a7c5 	.word	0x0800a7c5

0800a7c4 <SPI_DMAAbortOnError>:
{
 800a7c4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a7cc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800a7ce:	f7fa f8d9 	bl	8004984 <HAL_SPI_ErrorCallback>
}
 800a7d2:	bd08      	pop	{r3, pc}

0800a7d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7d4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7d8:	6a05      	ldr	r5, [r0, #32]
 800a7da:	f025 0501 	bic.w	r5, r5, #1
 800a7de:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7e0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7e2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7e6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7ea:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800a7ee:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7f0:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800a7f2:	6203      	str	r3, [r0, #32]
}
 800a7f4:	bc30      	pop	{r4, r5}
 800a7f6:	4770      	bx	lr

0800a7f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7f8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7fa:	6a05      	ldr	r5, [r0, #32]
 800a7fc:	f025 0510 	bic.w	r5, r5, #16
 800a800:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a802:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800a804:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a806:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a80a:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a80e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a812:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a816:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800a818:	6203      	str	r3, [r0, #32]
}
 800a81a:	bc30      	pop	{r4, r5}
 800a81c:	4770      	bx	lr

0800a81e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a81e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a824:	430b      	orrs	r3, r1
 800a826:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a82a:	6083      	str	r3, [r0, #8]
}
 800a82c:	4770      	bx	lr

0800a82e <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800a82e:	2302      	movs	r3, #2
 800a830:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a834:	6802      	ldr	r2, [r0, #0]
 800a836:	6893      	ldr	r3, [r2, #8]
 800a838:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a83c:	2b06      	cmp	r3, #6
 800a83e:	d003      	beq.n	800a848 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 800a840:	6813      	ldr	r3, [r2, #0]
 800a842:	f043 0301 	orr.w	r3, r3, #1
 800a846:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800a848:	2301      	movs	r3, #1
 800a84a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800a84e:	2000      	movs	r0, #0
 800a850:	4770      	bx	lr

0800a852 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a852:	6802      	ldr	r2, [r0, #0]
 800a854:	68d3      	ldr	r3, [r2, #12]
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85c:	6802      	ldr	r2, [r0, #0]
 800a85e:	6893      	ldr	r3, [r2, #8]
 800a860:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a864:	2b06      	cmp	r3, #6
 800a866:	d003      	beq.n	800a870 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 800a868:	6813      	ldr	r3, [r2, #0]
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	6013      	str	r3, [r2, #0]
}
 800a870:	2000      	movs	r0, #0
 800a872:	4770      	bx	lr

0800a874 <HAL_TIM_OC_DelayElapsedCallback>:
}
 800a874:	4770      	bx	lr

0800a876 <HAL_TIM_IC_CaptureCallback>:
}
 800a876:	4770      	bx	lr

0800a878 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800a878:	4770      	bx	lr

0800a87a <HAL_TIM_TriggerCallback>:
}
 800a87a:	4770      	bx	lr

0800a87c <HAL_TIM_IRQHandler>:
{
 800a87c:	b510      	push	{r4, lr}
 800a87e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a880:	6803      	ldr	r3, [r0, #0]
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	f012 0f02 	tst.w	r2, #2
 800a888:	d011      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a88a:	68da      	ldr	r2, [r3, #12]
 800a88c:	f012 0f02 	tst.w	r2, #2
 800a890:	d00d      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a892:	f06f 0202 	mvn.w	r2, #2
 800a896:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a898:	2301      	movs	r3, #1
 800a89a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a89c:	6803      	ldr	r3, [r0, #0]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	f013 0f03 	tst.w	r3, #3
 800a8a4:	d070      	beq.n	800a988 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800a8a6:	f7ff ffe6 	bl	800a876 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	f012 0f04 	tst.w	r2, #4
 800a8b6:	d012      	beq.n	800a8de <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	f012 0f04 	tst.w	r2, #4
 800a8be:	d00e      	beq.n	800a8de <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8c0:	f06f 0204 	mvn.w	r2, #4
 800a8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a8d2:	d05f      	beq.n	800a994 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff ffce 	bl	800a876 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	691a      	ldr	r2, [r3, #16]
 800a8e2:	f012 0f08 	tst.w	r2, #8
 800a8e6:	d012      	beq.n	800a90e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	f012 0f08 	tst.w	r2, #8
 800a8ee:	d00e      	beq.n	800a90e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8f0:	f06f 0208 	mvn.w	r2, #8
 800a8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8f6:	2304      	movs	r3, #4
 800a8f8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	f013 0f03 	tst.w	r3, #3
 800a902:	d04e      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800a904:	4620      	mov	r0, r4
 800a906:	f7ff ffb6 	bl	800a876 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a90a:	2300      	movs	r3, #0
 800a90c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	691a      	ldr	r2, [r3, #16]
 800a912:	f012 0f10 	tst.w	r2, #16
 800a916:	d012      	beq.n	800a93e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	f012 0f10 	tst.w	r2, #16
 800a91e:	d00e      	beq.n	800a93e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a920:	f06f 0210 	mvn.w	r2, #16
 800a924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a926:	2308      	movs	r3, #8
 800a928:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a932:	d03d      	beq.n	800a9b0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800a934:	4620      	mov	r0, r4
 800a936:	f7ff ff9e 	bl	800a876 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93a:	2300      	movs	r3, #0
 800a93c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	691a      	ldr	r2, [r3, #16]
 800a942:	f012 0f01 	tst.w	r2, #1
 800a946:	d003      	beq.n	800a950 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	f012 0f01 	tst.w	r2, #1
 800a94e:	d136      	bne.n	800a9be <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	691a      	ldr	r2, [r3, #16]
 800a954:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a958:	d003      	beq.n	800a962 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a960:	d134      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	691a      	ldr	r2, [r3, #16]
 800a966:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a96a:	d003      	beq.n	800a974 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a972:	d132      	bne.n	800a9da <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	691a      	ldr	r2, [r3, #16]
 800a978:	f012 0f20 	tst.w	r2, #32
 800a97c:	d003      	beq.n	800a986 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	f012 0f20 	tst.w	r2, #32
 800a984:	d130      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x16c>
}
 800a986:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a988:	f7ff ff74 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7ff ff73 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
 800a992:	e78a      	b.n	800a8aa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a994:	4620      	mov	r0, r4
 800a996:	f7ff ff6d 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a99a:	4620      	mov	r0, r4
 800a99c:	f7ff ff6c 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
 800a9a0:	e79b      	b.n	800a8da <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7ff ff66 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f7ff ff65 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
 800a9ae:	e7ac      	b.n	800a90a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f7ff ff5f 	bl	800a874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff ff5e 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
 800a9bc:	e7bd      	b.n	800a93a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9be:	f06f 0201 	mvn.w	r2, #1
 800a9c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f7f9 ffe9 	bl	800499c <HAL_TIM_PeriodElapsedCallback>
 800a9ca:	e7c1      	b.n	800a950 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f92f 	bl	800ac36 <HAL_TIMEx_BreakCallback>
 800a9d8:	e7c3      	b.n	800a962 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7ff ff4a 	bl	800a87a <HAL_TIM_TriggerCallback>
 800a9e6:	e7c5      	b.n	800a974 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9e8:	f06f 0220 	mvn.w	r2, #32
 800a9ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 f920 	bl	800ac34 <HAL_TIMEx_CommutCallback>
}
 800a9f4:	e7c7      	b.n	800a986 <HAL_TIM_IRQHandler+0x10a>
	...

0800a9f8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800a9f8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9fa:	4a25      	ldr	r2, [pc, #148]	; (800aa90 <TIM_Base_SetConfig+0x98>)
 800a9fc:	4290      	cmp	r0, r2
 800a9fe:	d00e      	beq.n	800aa1e <TIM_Base_SetConfig+0x26>
 800aa00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800aa04:	d00b      	beq.n	800aa1e <TIM_Base_SetConfig+0x26>
 800aa06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aa0a:	4290      	cmp	r0, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_Base_SetConfig+0x26>
 800aa0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa12:	4290      	cmp	r0, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_Base_SetConfig+0x26>
 800aa16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa1a:	4290      	cmp	r0, r2
 800aa1c:	d103      	bne.n	800aa26 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800aa22:	684a      	ldr	r2, [r1, #4]
 800aa24:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa26:	4a1a      	ldr	r2, [pc, #104]	; (800aa90 <TIM_Base_SetConfig+0x98>)
 800aa28:	4290      	cmp	r0, r2
 800aa2a:	d01a      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800aa30:	d017      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aa36:	4290      	cmp	r0, r2
 800aa38:	d013      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa3e:	4290      	cmp	r0, r2
 800aa40:	d00f      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa46:	4290      	cmp	r0, r2
 800aa48:	d00b      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa4a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800aa4e:	4290      	cmp	r0, r2
 800aa50:	d007      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa56:	4290      	cmp	r0, r2
 800aa58:	d003      	beq.n	800aa62 <TIM_Base_SetConfig+0x6a>
 800aa5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa5e:	4290      	cmp	r0, r2
 800aa60:	d103      	bne.n	800aa6a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa66:	68ca      	ldr	r2, [r1, #12]
 800aa68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa6e:	694a      	ldr	r2, [r1, #20]
 800aa70:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800aa72:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa74:	688b      	ldr	r3, [r1, #8]
 800aa76:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800aa78:	680b      	ldr	r3, [r1, #0]
 800aa7a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa7c:	4b04      	ldr	r3, [pc, #16]	; (800aa90 <TIM_Base_SetConfig+0x98>)
 800aa7e:	4298      	cmp	r0, r3
 800aa80:	d002      	beq.n	800aa88 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800aa82:	2301      	movs	r3, #1
 800aa84:	6143      	str	r3, [r0, #20]
}
 800aa86:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800aa88:	690b      	ldr	r3, [r1, #16]
 800aa8a:	6303      	str	r3, [r0, #48]	; 0x30
 800aa8c:	e7f9      	b.n	800aa82 <TIM_Base_SetConfig+0x8a>
 800aa8e:	bf00      	nop
 800aa90:	40010000 	.word	0x40010000

0800aa94 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800aa94:	b1b0      	cbz	r0, 800aac4 <HAL_TIM_Base_Init+0x30>
{
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800aa9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800aa9e:	b163      	cbz	r3, 800aaba <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	f851 0b04 	ldr.w	r0, [r1], #4
 800aaac:	f7ff ffa4 	bl	800a9f8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800aab0:	2301      	movs	r3, #1
 800aab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800aab6:	2000      	movs	r0, #0
}
 800aab8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800aaba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800aabe:	f7fb fd2b 	bl	8006518 <HAL_TIM_Base_MspInit>
 800aac2:	e7ed      	b.n	800aaa0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800aac4:	2001      	movs	r0, #1
}
 800aac6:	4770      	bx	lr

0800aac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aac8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aacc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aad0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800aad4:	430a      	orrs	r2, r1
 800aad6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aad8:	6082      	str	r2, [r0, #8]
}
 800aada:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800aae0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d066      	beq.n	800abb6 <HAL_TIM_ConfigClockSource+0xd6>
{
 800aae8:	b510      	push	{r4, lr}
 800aaea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800aaec:	2301      	movs	r3, #1
 800aaee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800aaf8:	6802      	ldr	r2, [r0, #0]
 800aafa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aafc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800ab04:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800ab06:	680b      	ldr	r3, [r1, #0]
 800ab08:	2b60      	cmp	r3, #96	; 0x60
 800ab0a:	d040      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0xae>
 800ab0c:	d822      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x74>
 800ab0e:	2b40      	cmp	r3, #64	; 0x40
 800ab10:	d047      	beq.n	800aba2 <HAL_TIM_ConfigClockSource+0xc2>
 800ab12:	d90b      	bls.n	800ab2c <HAL_TIM_ConfigClockSource+0x4c>
 800ab14:	2b50      	cmp	r3, #80	; 0x50
 800ab16:	d10e      	bne.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab18:	68ca      	ldr	r2, [r1, #12]
 800ab1a:	6849      	ldr	r1, [r1, #4]
 800ab1c:	6800      	ldr	r0, [r0, #0]
 800ab1e:	f7ff fe59 	bl	800a7d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab22:	2150      	movs	r1, #80	; 0x50
 800ab24:	6820      	ldr	r0, [r4, #0]
 800ab26:	f7ff fe7a 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800ab2a:	e004      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	d00c      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x6a>
 800ab30:	d908      	bls.n	800ab44 <HAL_TIM_ConfigClockSource+0x64>
 800ab32:	2b30      	cmp	r3, #48	; 0x30
 800ab34:	d009      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 800ab36:	2301      	movs	r3, #1
 800ab38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ab42:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800ab44:	b10b      	cbz	r3, 800ab4a <HAL_TIM_ConfigClockSource+0x6a>
 800ab46:	2b10      	cmp	r3, #16
 800ab48:	d1f5      	bne.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6820      	ldr	r0, [r4, #0]
 800ab4e:	f7ff fe66 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800ab52:	e7f0      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800ab54:	2b70      	cmp	r3, #112	; 0x70
 800ab56:	d00e      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x96>
 800ab58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5c:	d1eb      	bne.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800ab5e:	68cb      	ldr	r3, [r1, #12]
 800ab60:	684a      	ldr	r2, [r1, #4]
 800ab62:	6889      	ldr	r1, [r1, #8]
 800ab64:	6800      	ldr	r0, [r0, #0]
 800ab66:	f7ff ffaf 	bl	800aac8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	6893      	ldr	r3, [r2, #8]
 800ab6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab72:	6093      	str	r3, [r2, #8]
      break;
 800ab74:	e7df      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800ab76:	68cb      	ldr	r3, [r1, #12]
 800ab78:	684a      	ldr	r2, [r1, #4]
 800ab7a:	6889      	ldr	r1, [r1, #8]
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	f7ff ffa3 	bl	800aac8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ab8a:	6093      	str	r3, [r2, #8]
      break;
 800ab8c:	e7d3      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab8e:	68ca      	ldr	r2, [r1, #12]
 800ab90:	6849      	ldr	r1, [r1, #4]
 800ab92:	6800      	ldr	r0, [r0, #0]
 800ab94:	f7ff fe30 	bl	800a7f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab98:	2160      	movs	r1, #96	; 0x60
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	f7ff fe3f 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800aba0:	e7c9      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aba2:	68ca      	ldr	r2, [r1, #12]
 800aba4:	6849      	ldr	r1, [r1, #4]
 800aba6:	6800      	ldr	r0, [r0, #0]
 800aba8:	f7ff fe14 	bl	800a7d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abac:	2140      	movs	r1, #64	; 0x40
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	f7ff fe35 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800abb4:	e7bf      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800abb6:	2002      	movs	r0, #2
}
 800abb8:	4770      	bx	lr
	...

0800abbc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d033      	beq.n	800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 800abc4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800abc6:	2301      	movs	r3, #1
 800abc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abcc:	2302      	movs	r3, #2
 800abce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abd2:	6803      	ldr	r3, [r0, #0]
 800abd4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abd6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abd8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abdc:	680a      	ldr	r2, [r1, #0]
 800abde:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe2:	6803      	ldr	r3, [r0, #0]
 800abe4:	4a12      	ldr	r2, [pc, #72]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d012      	beq.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800abea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abee:	d00f      	beq.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800abf0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d00b      	beq.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800abf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d007      	beq.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ac00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d003      	beq.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800ac08:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d104      	bne.n	800ac1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac10:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac14:	684a      	ldr	r2, [r1, #4]
 800ac16:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac18:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac20:	2300      	movs	r3, #0
 800ac22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800ac26:	4618      	mov	r0, r3
}
 800ac28:	bc30      	pop	{r4, r5}
 800ac2a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ac2c:	2002      	movs	r0, #2
}
 800ac2e:	4770      	bx	lr
 800ac30:	40010000 	.word	0x40010000

0800ac34 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac34:	4770      	bx	lr

0800ac36 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac36:	4770      	bx	lr

0800ac38 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac38:	6802      	ldr	r2, [r0, #0]
 800ac3a:	68d3      	ldr	r3, [r2, #12]
 800ac3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac40:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac42:	2320      	movs	r3, #32
 800ac44:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 800ac48:	4770      	bx	lr

0800ac4a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac4a:	6802      	ldr	r2, [r0, #0]
 800ac4c:	68d3      	ldr	r3, [r2, #12]
 800ac4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac52:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac54:	6802      	ldr	r2, [r0, #0]
 800ac56:	6953      	ldr	r3, [r2, #20]
 800ac58:	f023 0301 	bic.w	r3, r3, #1
 800ac5c:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac5e:	2320      	movs	r3, #32
 800ac60:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800ac64:	4770      	bx	lr

0800ac66 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac66:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b21      	cmp	r3, #33	; 0x21
 800ac6e:	d001      	beq.n	800ac74 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800ac70:	2002      	movs	r0, #2
  }
}
 800ac72:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ac74:	6883      	ldr	r3, [r0, #8]
 800ac76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7a:	d017      	beq.n	800acac <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac7c:	6a03      	ldr	r3, [r0, #32]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	6202      	str	r2, [r0, #32]
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	6803      	ldr	r3, [r0, #0]
 800ac86:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800ac88:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ac92:	b94b      	cbnz	r3, 800aca8 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac94:	6802      	ldr	r2, [r0, #0]
 800ac96:	68d3      	ldr	r3, [r2, #12]
 800ac98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac9c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac9e:	6802      	ldr	r2, [r0, #0]
 800aca0:	68d3      	ldr	r3, [r2, #12]
 800aca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca6:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800aca8:	2000      	movs	r0, #0
 800acaa:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800acac:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	6802      	ldr	r2, [r0, #0]
 800acb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb6:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800acb8:	6903      	ldr	r3, [r0, #16]
 800acba:	b91b      	cbnz	r3, 800acc4 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 800acbc:	6a03      	ldr	r3, [r0, #32]
 800acbe:	3302      	adds	r3, #2
 800acc0:	6203      	str	r3, [r0, #32]
 800acc2:	e7e1      	b.n	800ac88 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 800acc4:	6a03      	ldr	r3, [r0, #32]
 800acc6:	3301      	adds	r3, #1
 800acc8:	6203      	str	r3, [r0, #32]
 800acca:	e7dd      	b.n	800ac88 <UART_Transmit_IT+0x22>

0800accc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acd0:	6802      	ldr	r2, [r0, #0]
 800acd2:	6913      	ldr	r3, [r2, #16]
 800acd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800acd8:	68c1      	ldr	r1, [r0, #12]
 800acda:	430b      	orrs	r3, r1
 800acdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acde:	6883      	ldr	r3, [r0, #8]
 800ace0:	6902      	ldr	r2, [r0, #16]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	6942      	ldr	r2, [r0, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	69c2      	ldr	r2, [r0, #28]
 800acea:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800acec:	6801      	ldr	r1, [r0, #0]
 800acee:	68cb      	ldr	r3, [r1, #12]
 800acf0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800acf4:	f023 030c 	bic.w	r3, r3, #12
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acfc:	6802      	ldr	r2, [r0, #0]
 800acfe:	6953      	ldr	r3, [r2, #20]
 800ad00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad04:	6981      	ldr	r1, [r0, #24]
 800ad06:	430b      	orrs	r3, r1
 800ad08:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad0a:	69c3      	ldr	r3, [r0, #28]
 800ad0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad10:	d036      	beq.n	800ad80 <UART_SetConfig+0xb4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad12:	6803      	ldr	r3, [r0, #0]
 800ad14:	4a65      	ldr	r2, [pc, #404]	; (800aeac <UART_SetConfig+0x1e0>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	f000 809a 	beq.w	800ae50 <UART_SetConfig+0x184>
 800ad1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad20:	4293      	cmp	r3, r2
 800ad22:	f000 8095 	beq.w	800ae50 <UART_SetConfig+0x184>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad26:	f7fe fc6f 	bl	8009608 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad2a:	2600      	movs	r6, #0
 800ad2c:	1805      	adds	r5, r0, r0
 800ad2e:	eb46 0106 	adc.w	r1, r6, r6
 800ad32:	182d      	adds	r5, r5, r0
 800ad34:	eb46 0101 	adc.w	r1, r6, r1
 800ad38:	00cb      	lsls	r3, r1, #3
 800ad3a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800ad3e:	00ea      	lsls	r2, r5, #3
 800ad40:	4615      	mov	r5, r2
 800ad42:	4619      	mov	r1, r3
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	009a      	lsls	r2, r3, #2
 800ad48:	0f9b      	lsrs	r3, r3, #30
 800ad4a:	1828      	adds	r0, r5, r0
 800ad4c:	eb46 0101 	adc.w	r1, r6, r1
 800ad50:	f7f5 ffda 	bl	8000d08 <__aeabi_uldivmod>
 800ad54:	4d56      	ldr	r5, [pc, #344]	; (800aeb0 <UART_SetConfig+0x1e4>)
 800ad56:	fba5 3200 	umull	r3, r2, r5, r0
 800ad5a:	0951      	lsrs	r1, r2, #5
 800ad5c:	2364      	movs	r3, #100	; 0x64
 800ad5e:	fb03 0311 	mls	r3, r3, r1, r0
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	3332      	adds	r3, #50	; 0x32
 800ad66:	fba5 2303 	umull	r2, r3, r5, r3
 800ad6a:	095b      	lsrs	r3, r3, #5
 800ad6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad70:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ad74:	f003 030f 	and.w	r3, r3, #15
 800ad78:	6821      	ldr	r1, [r4, #0]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	608b      	str	r3, [r1, #8]
    }
  }
}
 800ad7e:	e093      	b.n	800aea8 <UART_SetConfig+0x1dc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad80:	6803      	ldr	r3, [r0, #0]
 800ad82:	4a4a      	ldr	r2, [pc, #296]	; (800aeac <UART_SetConfig+0x1e0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d033      	beq.n	800adf0 <UART_SetConfig+0x124>
 800ad88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d02f      	beq.n	800adf0 <UART_SetConfig+0x124>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad90:	f7fe fc3a 	bl	8009608 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad94:	2600      	movs	r6, #0
 800ad96:	1805      	adds	r5, r0, r0
 800ad98:	eb46 0106 	adc.w	r1, r6, r6
 800ad9c:	182d      	adds	r5, r5, r0
 800ad9e:	eb46 0101 	adc.w	r1, r6, r1
 800ada2:	00cb      	lsls	r3, r1, #3
 800ada4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800ada8:	00ea      	lsls	r2, r5, #3
 800adaa:	4615      	mov	r5, r2
 800adac:	4619      	mov	r1, r3
 800adae:	6862      	ldr	r2, [r4, #4]
 800adb0:	4633      	mov	r3, r6
 800adb2:	1892      	adds	r2, r2, r2
 800adb4:	eb46 0303 	adc.w	r3, r6, r3
 800adb8:	1828      	adds	r0, r5, r0
 800adba:	eb46 0101 	adc.w	r1, r6, r1
 800adbe:	f7f5 ffa3 	bl	8000d08 <__aeabi_uldivmod>
 800adc2:	4d3b      	ldr	r5, [pc, #236]	; (800aeb0 <UART_SetConfig+0x1e4>)
 800adc4:	fba5 3200 	umull	r3, r2, r5, r0
 800adc8:	0951      	lsrs	r1, r2, #5
 800adca:	2364      	movs	r3, #100	; 0x64
 800adcc:	fb03 0311 	mls	r3, r3, r1, r0
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	3332      	adds	r3, #50	; 0x32
 800add4:	fba5 2303 	umull	r2, r3, r5, r3
 800add8:	095b      	lsrs	r3, r3, #5
 800adda:	005a      	lsls	r2, r3, #1
 800addc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800ade0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ade4:	f003 0307 	and.w	r3, r3, #7
 800ade8:	6821      	ldr	r1, [r4, #0]
 800adea:	4413      	add	r3, r2
 800adec:	608b      	str	r3, [r1, #8]
 800adee:	e05b      	b.n	800aea8 <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800adf0:	f7fe fc1a 	bl	8009628 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800adf4:	2600      	movs	r6, #0
 800adf6:	1805      	adds	r5, r0, r0
 800adf8:	eb46 0106 	adc.w	r1, r6, r6
 800adfc:	182d      	adds	r5, r5, r0
 800adfe:	eb46 0101 	adc.w	r1, r6, r1
 800ae02:	00cb      	lsls	r3, r1, #3
 800ae04:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800ae08:	00ea      	lsls	r2, r5, #3
 800ae0a:	4615      	mov	r5, r2
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6862      	ldr	r2, [r4, #4]
 800ae10:	4633      	mov	r3, r6
 800ae12:	1892      	adds	r2, r2, r2
 800ae14:	eb46 0303 	adc.w	r3, r6, r3
 800ae18:	1828      	adds	r0, r5, r0
 800ae1a:	eb46 0101 	adc.w	r1, r6, r1
 800ae1e:	f7f5 ff73 	bl	8000d08 <__aeabi_uldivmod>
 800ae22:	4d23      	ldr	r5, [pc, #140]	; (800aeb0 <UART_SetConfig+0x1e4>)
 800ae24:	fba5 3200 	umull	r3, r2, r5, r0
 800ae28:	0951      	lsrs	r1, r2, #5
 800ae2a:	2364      	movs	r3, #100	; 0x64
 800ae2c:	fb03 0311 	mls	r3, r3, r1, r0
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	3332      	adds	r3, #50	; 0x32
 800ae34:	fba5 2303 	umull	r2, r3, r5, r3
 800ae38:	095b      	lsrs	r3, r3, #5
 800ae3a:	005a      	lsls	r2, r3, #1
 800ae3c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800ae40:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	6821      	ldr	r1, [r4, #0]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	608b      	str	r3, [r1, #8]
 800ae4e:	e02b      	b.n	800aea8 <UART_SetConfig+0x1dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae50:	f7fe fbea 	bl	8009628 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae54:	2600      	movs	r6, #0
 800ae56:	1805      	adds	r5, r0, r0
 800ae58:	eb46 0106 	adc.w	r1, r6, r6
 800ae5c:	182d      	adds	r5, r5, r0
 800ae5e:	eb46 0101 	adc.w	r1, r6, r1
 800ae62:	00cb      	lsls	r3, r1, #3
 800ae64:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800ae68:	00ea      	lsls	r2, r5, #3
 800ae6a:	4615      	mov	r5, r2
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6863      	ldr	r3, [r4, #4]
 800ae70:	009a      	lsls	r2, r3, #2
 800ae72:	0f9b      	lsrs	r3, r3, #30
 800ae74:	1828      	adds	r0, r5, r0
 800ae76:	eb46 0101 	adc.w	r1, r6, r1
 800ae7a:	f7f5 ff45 	bl	8000d08 <__aeabi_uldivmod>
 800ae7e:	4d0c      	ldr	r5, [pc, #48]	; (800aeb0 <UART_SetConfig+0x1e4>)
 800ae80:	fba5 3200 	umull	r3, r2, r5, r0
 800ae84:	0951      	lsrs	r1, r2, #5
 800ae86:	2364      	movs	r3, #100	; 0x64
 800ae88:	fb03 0311 	mls	r3, r3, r1, r0
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	3332      	adds	r3, #50	; 0x32
 800ae90:	fba5 2303 	umull	r2, r3, r5, r3
 800ae94:	095b      	lsrs	r3, r3, #5
 800ae96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ae9a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	6821      	ldr	r1, [r4, #0]
 800aea4:	4413      	add	r3, r2
 800aea6:	608b      	str	r3, [r1, #8]
}
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	bf00      	nop
 800aeac:	40011000 	.word	0x40011000
 800aeb0:	51eb851f 	.word	0x51eb851f

0800aeb4 <HAL_UART_Init>:
  if (huart == NULL)
 800aeb4:	b358      	cbz	r0, 800af0e <HAL_UART_Init+0x5a>
{
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800aeba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800aebe:	b30b      	cbz	r3, 800af04 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800aec0:	2324      	movs	r3, #36	; 0x24
 800aec2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	68d3      	ldr	r3, [r2, #12]
 800aeca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aece:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800aed0:	4620      	mov	r0, r4
 800aed2:	f7ff fefb 	bl	800accc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aed6:	6822      	ldr	r2, [r4, #0]
 800aed8:	6913      	ldr	r3, [r2, #16]
 800aeda:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800aede:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aee0:	6822      	ldr	r2, [r4, #0]
 800aee2:	6953      	ldr	r3, [r2, #20]
 800aee4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800aee8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800aeea:	6822      	ldr	r2, [r4, #0]
 800aeec:	68d3      	ldr	r3, [r2, #12]
 800aeee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aef2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef4:	2000      	movs	r0, #0
 800aef6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800aef8:	2320      	movs	r3, #32
 800aefa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800aefe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800af02:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800af04:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800af08:	f7fb fb40 	bl	800658c <HAL_UART_MspInit>
 800af0c:	e7d8      	b.n	800aec0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800af0e:	2001      	movs	r0, #1
}
 800af10:	4770      	bx	lr

0800af12 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800af12:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b20      	cmp	r3, #32
 800af1a:	d120      	bne.n	800af5e <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 800af1c:	b309      	cbz	r1, 800af62 <HAL_UART_Receive_IT+0x50>
 800af1e:	b312      	cbz	r2, 800af66 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 800af20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800af24:	2b01      	cmp	r3, #1
 800af26:	d020      	beq.n	800af6a <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 800af28:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800af2a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800af2c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2e:	2300      	movs	r3, #0
 800af30:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af32:	2222      	movs	r2, #34	; 0x22
 800af34:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800af38:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800af3c:	6801      	ldr	r1, [r0, #0]
 800af3e:	68ca      	ldr	r2, [r1, #12]
 800af40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af44:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af46:	6801      	ldr	r1, [r0, #0]
 800af48:	694a      	ldr	r2, [r1, #20]
 800af4a:	f042 0201 	orr.w	r2, r2, #1
 800af4e:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af50:	6801      	ldr	r1, [r0, #0]
 800af52:	68ca      	ldr	r2, [r1, #12]
 800af54:	f042 0220 	orr.w	r2, r2, #32
 800af58:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800af5a:	4618      	mov	r0, r3
 800af5c:	4770      	bx	lr
    return HAL_BUSY;
 800af5e:	2002      	movs	r0, #2
 800af60:	4770      	bx	lr
      return HAL_ERROR;
 800af62:	2001      	movs	r0, #1
 800af64:	4770      	bx	lr
 800af66:	2001      	movs	r0, #1
 800af68:	4770      	bx	lr
    __HAL_LOCK(huart);
 800af6a:	2002      	movs	r0, #2
}
 800af6c:	4770      	bx	lr
	...

0800af70 <HAL_UART_Transmit_DMA>:
{
 800af70:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800af72:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b20      	cmp	r3, #32
 800af7a:	d131      	bne.n	800afe0 <HAL_UART_Transmit_DMA+0x70>
 800af7c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800af7e:	2900      	cmp	r1, #0
 800af80:	d030      	beq.n	800afe4 <HAL_UART_Transmit_DMA+0x74>
 800af82:	2a00      	cmp	r2, #0
 800af84:	d030      	beq.n	800afe8 <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 800af86:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d02e      	beq.n	800afec <HAL_UART_Transmit_DMA+0x7c>
 800af8e:	2301      	movs	r3, #1
 800af90:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 800af94:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800af96:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800af98:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9a:	2500      	movs	r5, #0
 800af9c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af9e:	2321      	movs	r3, #33	; 0x21
 800afa0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800afa4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800afa6:	4812      	ldr	r0, [pc, #72]	; (800aff0 <HAL_UART_Transmit_DMA+0x80>)
 800afa8:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800afaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afac:	4811      	ldr	r0, [pc, #68]	; (800aff4 <HAL_UART_Transmit_DMA+0x84>)
 800afae:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800afb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afb2:	4811      	ldr	r0, [pc, #68]	; (800aff8 <HAL_UART_Transmit_DMA+0x88>)
 800afb4:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 800afb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afb8:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800afba:	6820      	ldr	r0, [r4, #0]
 800afbc:	4613      	mov	r3, r2
 800afbe:	1d02      	adds	r2, r0, #4
 800afc0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800afc2:	f7fc f9e5 	bl	8007390 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afcc:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800afce:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afd2:	6822      	ldr	r2, [r4, #0]
 800afd4:	6953      	ldr	r3, [r2, #20]
 800afd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afda:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800afdc:	4628      	mov	r0, r5
 800afde:	e000      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 800afe0:	2002      	movs	r0, #2
}
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800afe4:	2001      	movs	r0, #1
 800afe6:	e7fc      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x72>
 800afe8:	2001      	movs	r0, #1
 800afea:	e7fa      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 800afec:	2002      	movs	r0, #2
 800afee:	e7f8      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x72>
 800aff0:	0800affd 	.word	0x0800affd
 800aff4:	0800b049 	.word	0x0800b049
 800aff8:	0800b0f3 	.word	0x0800b0f3

0800affc <UART_DMATransmitCplt>:
{
 800affc:	b508      	push	{r3, lr}
 800affe:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b000:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b00a:	d10c      	bne.n	800b026 <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0x00U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b010:	6802      	ldr	r2, [r0, #0]
 800b012:	6953      	ldr	r3, [r2, #20]
 800b014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b018:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b01a:	6802      	ldr	r2, [r0, #0]
 800b01c:	68d3      	ldr	r3, [r2, #12]
 800b01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b022:	60d3      	str	r3, [r2, #12]
}
 800b024:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b026:	f7f9 fc15 	bl	8004854 <HAL_UART_TxCpltCallback>
}
 800b02a:	e7fb      	b.n	800b024 <UART_DMATransmitCplt+0x28>

0800b02c <UART_EndTransmit_IT>:
{
 800b02c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b02e:	6801      	ldr	r1, [r0, #0]
 800b030:	68ca      	ldr	r2, [r1, #12]
 800b032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b036:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b038:	2220      	movs	r2, #32
 800b03a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800b03e:	f7f9 fc09 	bl	8004854 <HAL_UART_TxCpltCallback>
}
 800b042:	2000      	movs	r0, #0
 800b044:	bd08      	pop	{r3, pc}

0800b046 <HAL_UART_TxHalfCpltCallback>:
}
 800b046:	4770      	bx	lr

0800b048 <UART_DMATxHalfCplt>:
{
 800b048:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800b04a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b04c:	f7ff fffb 	bl	800b046 <HAL_UART_TxHalfCpltCallback>
}
 800b050:	bd08      	pop	{r3, pc}

0800b052 <UART_Receive_IT>:
{
 800b052:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b054:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b22      	cmp	r3, #34	; 0x22
 800b05c:	d146      	bne.n	800b0ec <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b05e:	6883      	ldr	r3, [r0, #8]
 800b060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b064:	d00f      	beq.n	800b086 <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b066:	6903      	ldr	r3, [r0, #16]
 800b068:	bb0b      	cbnz	r3, 800b0ae <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b06a:	6803      	ldr	r3, [r0, #0]
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b070:	1c59      	adds	r1, r3, #1
 800b072:	6281      	str	r1, [r0, #40]	; 0x28
 800b074:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800b076:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3b01      	subs	r3, #1
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b080:	b1f3      	cbz	r3, 800b0c0 <UART_Receive_IT+0x6e>
    return HAL_OK;
 800b082:	2000      	movs	r0, #0
}
 800b084:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b086:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b088:	6903      	ldr	r3, [r0, #16]
 800b08a:	b943      	cbnz	r3, 800b09e <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b08c:	6803      	ldr	r3, [r0, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b094:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800b096:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b098:	3302      	adds	r3, #2
 800b09a:	6283      	str	r3, [r0, #40]	; 0x28
 800b09c:	e7eb      	b.n	800b076 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b09e:	6803      	ldr	r3, [r0, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800b0a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	6283      	str	r3, [r0, #40]	; 0x28
 800b0ac:	e7e3      	b.n	800b076 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0ae:	6803      	ldr	r3, [r0, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b0b4:	1c51      	adds	r1, r2, #1
 800b0b6:	6281      	str	r1, [r0, #40]	; 0x28
 800b0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0bc:	7013      	strb	r3, [r2, #0]
 800b0be:	e7da      	b.n	800b076 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0c0:	6802      	ldr	r2, [r0, #0]
 800b0c2:	68d3      	ldr	r3, [r2, #12]
 800b0c4:	f023 0320 	bic.w	r3, r3, #32
 800b0c8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0ca:	6802      	ldr	r2, [r0, #0]
 800b0cc:	68d3      	ldr	r3, [r2, #12]
 800b0ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0d2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0d4:	6802      	ldr	r2, [r0, #0]
 800b0d6:	6953      	ldr	r3, [r2, #20]
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800b0de:	2320      	movs	r3, #32
 800b0e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800b0e4:	f7f9 fbd8 	bl	8004898 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	e7cb      	b.n	800b084 <UART_Receive_IT+0x32>
    return HAL_BUSY;
 800b0ec:	2002      	movs	r0, #2
 800b0ee:	e7c9      	b.n	800b084 <UART_Receive_IT+0x32>

0800b0f0 <HAL_UART_ErrorCallback>:
}
 800b0f0:	4770      	bx	lr

0800b0f2 <UART_DMAError>:
{
 800b0f2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0f4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b0fa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b21      	cmp	r3, #33	; 0x21
 800b102:	d010      	beq.n	800b126 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	695a      	ldr	r2, [r3, #20]
 800b108:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b10c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b22      	cmp	r3, #34	; 0x22
 800b114:	d011      	beq.n	800b13a <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b118:	f043 0310 	orr.w	r3, r3, #16
 800b11c:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff ffe6 	bl	800b0f0 <HAL_UART_ErrorCallback>
}
 800b124:	bd10      	pop	{r4, pc}
 800b126:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	d0ea      	beq.n	800b104 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800b12e:	2300      	movs	r3, #0
 800b130:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b132:	4620      	mov	r0, r4
 800b134:	f7ff fd80 	bl	800ac38 <UART_EndTxTransfer>
 800b138:	e7e4      	b.n	800b104 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b13a:	2a00      	cmp	r2, #0
 800b13c:	d0eb      	beq.n	800b116 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800b13e:	2300      	movs	r3, #0
 800b140:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b142:	4620      	mov	r0, r4
 800b144:	f7ff fd81 	bl	800ac4a <UART_EndRxTransfer>
 800b148:	e7e5      	b.n	800b116 <UART_DMAError+0x24>
	...

0800b14c <HAL_UART_IRQHandler>:
{
 800b14c:	b510      	push	{r4, lr}
 800b14e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b150:	6802      	ldr	r2, [r0, #0]
 800b152:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b154:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b156:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 800b158:	f013 000f 	ands.w	r0, r3, #15
 800b15c:	d105      	bne.n	800b16a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b15e:	f013 0f20 	tst.w	r3, #32
 800b162:	d002      	beq.n	800b16a <HAL_UART_IRQHandler+0x1e>
 800b164:	f011 0f20 	tst.w	r1, #32
 800b168:	d113      	bne.n	800b192 <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b16a:	b128      	cbz	r0, 800b178 <HAL_UART_IRQHandler+0x2c>
 800b16c:	f012 0201 	ands.w	r2, r2, #1
 800b170:	d113      	bne.n	800b19a <HAL_UART_IRQHandler+0x4e>
 800b172:	f411 7f90 	tst.w	r1, #288	; 0x120
 800b176:	d110      	bne.n	800b19a <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b178:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b17c:	d002      	beq.n	800b184 <HAL_UART_IRQHandler+0x38>
 800b17e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b182:	d16c      	bne.n	800b25e <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b184:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b188:	d002      	beq.n	800b190 <HAL_UART_IRQHandler+0x44>
 800b18a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b18e:	d16a      	bne.n	800b266 <HAL_UART_IRQHandler+0x11a>
}
 800b190:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff ff5d 	bl	800b052 <UART_Receive_IT>
      return;
 800b198:	e7fa      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b19a:	f013 0f01 	tst.w	r3, #1
 800b19e:	d006      	beq.n	800b1ae <HAL_UART_IRQHandler+0x62>
 800b1a0:	f411 7f80 	tst.w	r1, #256	; 0x100
 800b1a4:	d003      	beq.n	800b1ae <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b1a8:	f040 0001 	orr.w	r0, r0, #1
 800b1ac:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1ae:	f013 0f04 	tst.w	r3, #4
 800b1b2:	d004      	beq.n	800b1be <HAL_UART_IRQHandler+0x72>
 800b1b4:	b11a      	cbz	r2, 800b1be <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b1b8:	f040 0002 	orr.w	r0, r0, #2
 800b1bc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1be:	f013 0f02 	tst.w	r3, #2
 800b1c2:	d004      	beq.n	800b1ce <HAL_UART_IRQHandler+0x82>
 800b1c4:	b11a      	cbz	r2, 800b1ce <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b1c8:	f040 0004 	orr.w	r0, r0, #4
 800b1cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1ce:	f013 0f08 	tst.w	r3, #8
 800b1d2:	d007      	beq.n	800b1e4 <HAL_UART_IRQHandler+0x98>
 800b1d4:	f011 0f20 	tst.w	r1, #32
 800b1d8:	d100      	bne.n	800b1dc <HAL_UART_IRQHandler+0x90>
 800b1da:	b11a      	cbz	r2, 800b1e4 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b1de:	f042 0208 	orr.w	r2, r2, #8
 800b1e2:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	d0d2      	beq.n	800b190 <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1ea:	f013 0f20 	tst.w	r3, #32
 800b1ee:	d002      	beq.n	800b1f6 <HAL_UART_IRQHandler+0xaa>
 800b1f0:	f011 0f20 	tst.w	r1, #32
 800b1f4:	d121      	bne.n	800b23a <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b200:	f012 0f08 	tst.w	r2, #8
 800b204:	d100      	bne.n	800b208 <HAL_UART_IRQHandler+0xbc>
 800b206:	b323      	cbz	r3, 800b252 <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 800b208:	4620      	mov	r0, r4
 800b20a:	f7ff fd1e 	bl	800ac4a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	695a      	ldr	r2, [r3, #20]
 800b212:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b216:	d018      	beq.n	800b24a <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b218:	695a      	ldr	r2, [r3, #20]
 800b21a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b21e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b222:	b173      	cbz	r3, 800b242 <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b224:	4a12      	ldr	r2, [pc, #72]	; (800b270 <HAL_UART_IRQHandler+0x124>)
 800b226:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b228:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b22a:	f7fc f8e6 	bl	80073fa <HAL_DMA_Abort_IT>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d0ae      	beq.n	800b190 <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b232:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b234:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b236:	4798      	blx	r3
 800b238:	e7aa      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7ff ff09 	bl	800b052 <UART_Receive_IT>
 800b240:	e7d9      	b.n	800b1f6 <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 800b242:	4620      	mov	r0, r4
 800b244:	f7ff ff54 	bl	800b0f0 <HAL_UART_ErrorCallback>
 800b248:	e7a2      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff ff50 	bl	800b0f0 <HAL_UART_ErrorCallback>
 800b250:	e79e      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff ff4c 	bl	800b0f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b258:	2300      	movs	r3, #0
 800b25a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 800b25c:	e798      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 800b25e:	4620      	mov	r0, r4
 800b260:	f7ff fd01 	bl	800ac66 <UART_Transmit_IT>
    return;
 800b264:	e794      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 800b266:	4620      	mov	r0, r4
 800b268:	f7ff fee0 	bl	800b02c <UART_EndTransmit_IT>
    return;
 800b26c:	e790      	b.n	800b190 <HAL_UART_IRQHandler+0x44>
 800b26e:	bf00      	nop
 800b270:	0800b275 	.word	0x0800b275

0800b274 <UART_DMAAbortOnError>:
{
 800b274:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b276:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800b278:	2300      	movs	r3, #0
 800b27a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b27c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800b27e:	f7ff ff37 	bl	800b0f0 <HAL_UART_ErrorCallback>
}
 800b282:	bd08      	pop	{r3, pc}

0800b284 <HAL_UART_GetState>:
  temp1 = huart->gState;
 800b284:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 800b288:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 800b28c:	4318      	orrs	r0, r3
 800b28e:	4770      	bx	lr

0800b290 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b290:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b292:	4903      	ldr	r1, [pc, #12]	; (800b2a0 <MX_FATFS_Init+0x10>)
 800b294:	4803      	ldr	r0, [pc, #12]	; (800b2a4 <MX_FATFS_Init+0x14>)
 800b296:	f000 f8a3 	bl	800b3e0 <FATFS_LinkDriver>
 800b29a:	4b03      	ldr	r3, [pc, #12]	; (800b2a8 <MX_FATFS_Init+0x18>)
 800b29c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b29e:	bd08      	pop	{r3, pc}
 800b2a0:	20007fec 	.word	0x20007fec
 800b2a4:	200001c4 	.word	0x200001c4
 800b2a8:	20007ff0 	.word	0x20007ff0

0800b2ac <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <USER_initialize+0x14>)
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b2b8:	701a      	strb	r2, [r3, #0]
    	}*/
    //

//    Report(__func__, true, "Dev:%u status:0x%X\r\n", pdrv, Stat);

    return Stat;
 800b2ba:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	200001c0 	.word	0x200001c0

0800b2c4 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b2c4:	4b04      	ldr	r3, [pc, #16]	; (800b2d8 <USER_status+0x14>)
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	701a      	strb	r2, [r3, #0]
    //
    //uint32_t cid = W25qxx_getChipID();
    //if ((cid >= W25Q10) && (cid <= W25Q128)) Stat &= ~STA_NOINIT;
    Stat &= ~STA_NOINIT;
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b2d0:	701a      	strb	r2, [r3, #0]
    //

//    Report(__func__, true, "Dev:%u stat:0x%X\r\n", pdrv, Stat);

    return Stat;
 800b2d2:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	200001c0 	.word	0x200001c0

0800b2dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	4615      	mov	r5, r2
 800b2e4:	461f      	mov	r7, r3
  /* USER CODE BEGIN READ */
	//
	uint32_t ss = W25qxx_getSectorSize();
 800b2e6:	f7fb fc87 	bl	8006bf8 <W25qxx_getSectorSize>
 800b2ea:	4680      	mov	r8, r0
	int i = -1;
 800b2ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	while (++i < count) {
 800b2f0:	3401      	adds	r4, #1
 800b2f2:	42bc      	cmp	r4, r7
 800b2f4:	d208      	bcs.n	800b308 <USER_read+0x2c>
//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
		W25qxx_ReadSector((BYTE *)buff, sector++, 0, ss);
 800b2f6:	1c6e      	adds	r6, r5, #1
 800b2f8:	4643      	mov	r3, r8
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4648      	mov	r0, r9
 800b300:	f7fb fe96 	bl	8007030 <W25qxx_ReadSector>
 800b304:	4635      	mov	r5, r6
 800b306:	e7f3      	b.n	800b2f0 <USER_read+0x14>
	}
	//
    return RES_OK;
  /* USER CODE END READ */
}
 800b308:	2000      	movs	r0, #0
 800b30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b30e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b312:	4689      	mov	r9, r1
 800b314:	4614      	mov	r4, r2
 800b316:	4698      	mov	r8, r3
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	//
	uint32_t ss = W25qxx_getSectorSize();
 800b318:	f7fb fc6e 	bl	8006bf8 <W25qxx_getSectorSize>
 800b31c:	4606      	mov	r6, r0
	int i = -1;
 800b31e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	while (++i < count) {
 800b322:	e00a      	b.n	800b33a <USER_write+0x2c>
//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
		if (!W25qxx_IsEmptySector(sector, 0, ss)) W25qxx_EraseSector(sector);
 800b324:	4620      	mov	r0, r4
 800b326:	f7fb fc79 	bl	8006c1c <W25qxx_EraseSector>
		W25qxx_WriteSector((BYTE *)buff, sector++, 0, ss);
 800b32a:	1c67      	adds	r7, r4, #1
 800b32c:	4633      	mov	r3, r6
 800b32e:	2200      	movs	r2, #0
 800b330:	4621      	mov	r1, r4
 800b332:	4648      	mov	r0, r9
 800b334:	f7fb fdc6 	bl	8006ec4 <W25qxx_WriteSector>
 800b338:	463c      	mov	r4, r7
	while (++i < count) {
 800b33a:	3501      	adds	r5, #1
 800b33c:	4545      	cmp	r5, r8
 800b33e:	d207      	bcs.n	800b350 <USER_write+0x42>
		if (!W25qxx_IsEmptySector(sector, 0, ss)) W25qxx_EraseSector(sector);
 800b340:	4632      	mov	r2, r6
 800b342:	2100      	movs	r1, #0
 800b344:	4620      	mov	r0, r4
 800b346:	f7fb fcc9 	bl	8006cdc <W25qxx_IsEmptySector>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d1ed      	bne.n	800b32a <USER_write+0x1c>
 800b34e:	e7e9      	b.n	800b324 <USER_write+0x16>
	}
	//
    return RES_OK;
  /* USER CODE END WRITE */
}
 800b350:	2000      	movs	r0, #0
 800b352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b356 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b356:	b510      	push	{r4, lr}
 800b358:	4614      	mov	r4, r2
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    //
    switch (cmd) {
 800b35a:	2903      	cmp	r1, #3
 800b35c:	d814      	bhi.n	800b388 <USER_ioctl+0x32>
 800b35e:	e8df f001 	tbb	[pc, r1]
 800b362:	0402      	.short	0x0402
 800b364:	0e09      	.short	0x0e09
    		*(DWORD *)buff = W25qxx_getSectorSize();
    		res = RES_OK;
    	break;
    	case GET_BLOCK_SIZE:
    		*(DWORD *)buff = W25qxx_getBlockSize();//W25qxx_getSectorSize();//W25qxx_getBlockSize();
    		res = RES_OK;
 800b366:	4608      	mov	r0, r1

//    Report(__func__, true, "Dev:%u cmd:%u buff:%u res:%d\r\n", pdrv, cmd, *(DWORD *)buff, res);

    return res;
  /* USER CODE END IOCTL */
}
 800b368:	bd10      	pop	{r4, pc}
    		*(DWORD *)buff = W25qxx_getSectorCount();
 800b36a:	f7fb fc3f 	bl	8006bec <W25qxx_getSectorCount>
 800b36e:	6020      	str	r0, [r4, #0]
    		res = RES_OK;
 800b370:	2000      	movs	r0, #0
    	break;
 800b372:	e7f9      	b.n	800b368 <USER_ioctl+0x12>
    		*(DWORD *)buff = W25qxx_getSectorSize();
 800b374:	f7fb fc40 	bl	8006bf8 <W25qxx_getSectorSize>
 800b378:	6020      	str	r0, [r4, #0]
    		res = RES_OK;
 800b37a:	2000      	movs	r0, #0
    	break;
 800b37c:	e7f4      	b.n	800b368 <USER_ioctl+0x12>
    		*(DWORD *)buff = W25qxx_getBlockSize();//W25qxx_getSectorSize();//W25qxx_getBlockSize();
 800b37e:	f7fb fc47 	bl	8006c10 <W25qxx_getBlockSize>
 800b382:	6020      	str	r0, [r4, #0]
    		res = RES_OK;
 800b384:	2000      	movs	r0, #0
    	break;
 800b386:	e7ef      	b.n	800b368 <USER_ioctl+0x12>
        		res = RES_PARERR;
 800b388:	2004      	movs	r0, #4
 800b38a:	e7ed      	b.n	800b368 <USER_ioctl+0x12>

0800b38c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800b38c:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <FATFS_LinkDriverEx+0x50>)
 800b38e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b04      	cmp	r3, #4
 800b396:	d81f      	bhi.n	800b3d8 <FATFS_LinkDriverEx+0x4c>
{
 800b398:	b430      	push	{r4, r5}
 800b39a:	4604      	mov	r4, r0
  {
    disk.is_initialized[disk.nbr] = 0;
 800b39c:	4b0f      	ldr	r3, [pc, #60]	; (800b3dc <FATFS_LinkDriverEx+0x50>)
 800b39e:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
 800b3a2:	b2ed      	uxtb	r5, r5
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	5558      	strb	r0, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800b3a8:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
 800b3ac:	3502      	adds	r5, #2
 800b3ae:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    disk.lun[disk.nbr] = lun;
 800b3b2:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800b3b6:	441c      	add	r4, r3
 800b3b8:	7722      	strb	r2, [r4, #28]
    DiskNum = disk.nbr++;
 800b3ba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b3be:	1c54      	adds	r4, r2, #1
 800b3c0:	b2e4      	uxtb	r4, r4
 800b3c2:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
    path[0] = DiskNum + '0';
 800b3c6:	3230      	adds	r2, #48	; 0x30
 800b3c8:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800b3ca:	233a      	movs	r3, #58	; 0x3a
 800b3cc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800b3ce:	232f      	movs	r3, #47	; 0x2f
 800b3d0:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800b3d2:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800b3d4:	bc30      	pop	{r4, r5}
 800b3d6:	4770      	bx	lr
  uint8_t ret = 1;
 800b3d8:	2001      	movs	r0, #1
}
 800b3da:	4770      	bx	lr
 800b3dc:	20002944 	.word	0x20002944

0800b3e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b3e0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f7ff ffd2 	bl	800b38c <FATFS_LinkDriverEx>
}
 800b3e8:	bd08      	pop	{r3, pc}
	...

0800b3ec <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ec:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3f0:	b97b      	cbnz	r3, 800b412 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3f6:	b913      	cbnz	r3, 800b3fe <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3f8:	f3ef 8311 	mrs	r3, BASEPRI
 800b3fc:	b11b      	cbz	r3, 800b406 <osKernelInitialize+0x1a>
 800b3fe:	4b09      	ldr	r3, [pc, #36]	; (800b424 <osKernelInitialize+0x38>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b02      	cmp	r3, #2
 800b404:	d008      	beq.n	800b418 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b406:	4b07      	ldr	r3, [pc, #28]	; (800b424 <osKernelInitialize+0x38>)
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	b940      	cbnz	r0, 800b41e <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b40c:	2201      	movs	r2, #1
 800b40e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b410:	4770      	bx	lr
    stat = osErrorISR;
 800b412:	f06f 0005 	mvn.w	r0, #5
 800b416:	4770      	bx	lr
 800b418:	f06f 0005 	mvn.w	r0, #5
 800b41c:	4770      	bx	lr
    } else {
      stat = osError;
 800b41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 800b422:	4770      	bx	lr
 800b424:	20002968 	.word	0x20002968

0800b428 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b428:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b42a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b42e:	b9a3      	cbnz	r3, 800b45a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b430:	f3ef 8310 	mrs	r3, PRIMASK
 800b434:	b913      	cbnz	r3, 800b43c <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b436:	f3ef 8311 	mrs	r3, BASEPRI
 800b43a:	b11b      	cbz	r3, 800b444 <osKernelStart+0x1c>
 800b43c:	4b0b      	ldr	r3, [pc, #44]	; (800b46c <osKernelStart+0x44>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b02      	cmp	r3, #2
 800b442:	d00d      	beq.n	800b460 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b444:	4b09      	ldr	r3, [pc, #36]	; (800b46c <osKernelStart+0x44>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d10c      	bne.n	800b466 <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b44c:	4b07      	ldr	r3, [pc, #28]	; (800b46c <osKernelStart+0x44>)
 800b44e:	2202      	movs	r2, #2
 800b450:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b452:	f001 fac5 	bl	800c9e0 <vTaskStartScheduler>
      stat = osOK;
 800b456:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800b458:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800b45a:	f06f 0005 	mvn.w	r0, #5
 800b45e:	e7fb      	b.n	800b458 <osKernelStart+0x30>
 800b460:	f06f 0005 	mvn.w	r0, #5
 800b464:	e7f8      	b.n	800b458 <osKernelStart+0x30>
      stat = osError;
 800b466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 800b46a:	e7f5      	b.n	800b458 <osKernelStart+0x30>
 800b46c:	20002968 	.word	0x20002968

0800b470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b472:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b474:	2400      	movs	r4, #0
 800b476:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b478:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b47c:	2c00      	cmp	r4, #0
 800b47e:	d138      	bne.n	800b4f2 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b480:	f3ef 8310 	mrs	r3, PRIMASK
 800b484:	b913      	cbnz	r3, 800b48c <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b486:	f3ef 8311 	mrs	r3, BASEPRI
 800b48a:	b11b      	cbz	r3, 800b494 <osThreadNew+0x24>
 800b48c:	4b2d      	ldr	r3, [pc, #180]	; (800b544 <osThreadNew+0xd4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d02e      	beq.n	800b4f2 <osThreadNew+0x82>
 800b494:	b368      	cbz	r0, 800b4f2 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b496:	b322      	cbz	r2, 800b4e2 <osThreadNew+0x72>
      if (attr->name != NULL) {
 800b498:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b49a:	6993      	ldr	r3, [r2, #24]
 800b49c:	b903      	cbnz	r3, 800b4a0 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 800b49e:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4a0:	1e5c      	subs	r4, r3, #1
 800b4a2:	2c37      	cmp	r4, #55	; 0x37
 800b4a4:	d849      	bhi.n	800b53a <osThreadNew+0xca>
 800b4a6:	6854      	ldr	r4, [r2, #4]
 800b4a8:	f014 0f01 	tst.w	r4, #1
 800b4ac:	d147      	bne.n	800b53e <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b4ae:	6956      	ldr	r6, [r2, #20]
 800b4b0:	b16e      	cbz	r6, 800b4ce <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4b2:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4b6:	6894      	ldr	r4, [r2, #8]
 800b4b8:	b12c      	cbz	r4, 800b4c6 <osThreadNew+0x56>
 800b4ba:	68d7      	ldr	r7, [r2, #12]
 800b4bc:	2f5b      	cmp	r7, #91	; 0x5b
 800b4be:	d902      	bls.n	800b4c6 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4c0:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4c2:	b107      	cbz	r7, 800b4c6 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4c4:	b9c6      	cbnz	r6, 800b4f8 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4c6:	b12c      	cbz	r4, 800b4d4 <osThreadNew+0x64>
    mem  = -1;
 800b4c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b4cc:	e00e      	b.n	800b4ec <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 800b4ce:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800b4d2:	e7f0      	b.n	800b4b6 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4d4:	68d4      	ldr	r4, [r2, #12]
 800b4d6:	b98c      	cbnz	r4, 800b4fc <osThreadNew+0x8c>
 800b4d8:	6914      	ldr	r4, [r2, #16]
 800b4da:	b194      	cbz	r4, 800b502 <osThreadNew+0x92>
    mem  = -1;
 800b4dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b4e0:	e004      	b.n	800b4ec <osThreadNew+0x7c>
    name = NULL;
 800b4e2:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800b4e4:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800b4e6:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800b4e8:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800b4ec:	2c01      	cmp	r4, #1
 800b4ee:	d00a      	beq.n	800b506 <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800b4f0:	b1ac      	cbz	r4, 800b51e <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b4f2:	9805      	ldr	r0, [sp, #20]
}
 800b4f4:	b007      	add	sp, #28
 800b4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800b4f8:	2401      	movs	r4, #1
 800b4fa:	e7f7      	b.n	800b4ec <osThreadNew+0x7c>
    mem  = -1;
 800b4fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b500:	e7f4      	b.n	800b4ec <osThreadNew+0x7c>
          mem = 0;
 800b502:	2400      	movs	r4, #0
 800b504:	e7f2      	b.n	800b4ec <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b506:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b508:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b50a:	9202      	str	r2, [sp, #8]
 800b50c:	9401      	str	r4, [sp, #4]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	460b      	mov	r3, r1
 800b512:	4662      	mov	r2, ip
 800b514:	4629      	mov	r1, r5
 800b516:	f001 f99b 	bl	800c850 <xTaskCreateStatic>
 800b51a:	9005      	str	r0, [sp, #20]
 800b51c:	e7e9      	b.n	800b4f2 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b51e:	aa05      	add	r2, sp, #20
 800b520:	9201      	str	r2, [sp, #4]
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	460b      	mov	r3, r1
 800b526:	fa1f f28c 	uxth.w	r2, ip
 800b52a:	4629      	mov	r1, r5
 800b52c:	f001 f9ca 	bl	800c8c4 <xTaskCreate>
 800b530:	2801      	cmp	r0, #1
 800b532:	d0de      	beq.n	800b4f2 <osThreadNew+0x82>
          hTask = NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	9305      	str	r3, [sp, #20]
 800b538:	e7db      	b.n	800b4f2 <osThreadNew+0x82>
        return (NULL);
 800b53a:	2000      	movs	r0, #0
 800b53c:	e7da      	b.n	800b4f4 <osThreadNew+0x84>
 800b53e:	2000      	movs	r0, #0
 800b540:	e7d8      	b.n	800b4f4 <osThreadNew+0x84>
 800b542:	bf00      	nop
 800b544:	20002968 	.word	0x20002968

0800b548 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800b548:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800b54a:	2000      	movs	r0, #0
 800b54c:	f001 f9ee 	bl	800c92c <vTaskDelete>
#endif
  for (;;);
 800b550:	e7fe      	b.n	800b550 <osThreadExit+0x8>
	...

0800b554 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b554:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b556:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b55a:	b983      	cbnz	r3, 800b57e <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b55c:	f3ef 8310 	mrs	r3, PRIMASK
 800b560:	b913      	cbnz	r3, 800b568 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b562:	f3ef 8311 	mrs	r3, BASEPRI
 800b566:	b11b      	cbz	r3, 800b570 <osDelay+0x1c>
 800b568:	4b08      	ldr	r3, [pc, #32]	; (800b58c <osDelay+0x38>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d009      	beq.n	800b584 <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800b570:	b908      	cbnz	r0, 800b576 <osDelay+0x22>
    stat = osOK;
 800b572:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800b574:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800b576:	f001 fb89 	bl	800cc8c <vTaskDelay>
    stat = osOK;
 800b57a:	2000      	movs	r0, #0
 800b57c:	e7fa      	b.n	800b574 <osDelay+0x20>
    stat = osErrorISR;
 800b57e:	f06f 0005 	mvn.w	r0, #5
 800b582:	e7f7      	b.n	800b574 <osDelay+0x20>
 800b584:	f06f 0005 	mvn.w	r0, #5
 800b588:	e7f4      	b.n	800b574 <osDelay+0x20>
 800b58a:	bf00      	nop
 800b58c:	20002968 	.word	0x20002968

0800b590 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b590:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b592:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b596:	2b00      	cmp	r3, #0
 800b598:	d149      	bne.n	800b62e <osMutexNew+0x9e>
 800b59a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b59c:	f3ef 8210 	mrs	r2, PRIMASK
 800b5a0:	b912      	cbnz	r2, 800b5a8 <osMutexNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b5a6:	b11a      	cbz	r2, 800b5b0 <osMutexNew+0x20>
 800b5a8:	4a24      	ldr	r2, [pc, #144]	; (800b63c <osMutexNew+0xac>)
 800b5aa:	6812      	ldr	r2, [r2, #0]
 800b5ac:	2a02      	cmp	r2, #2
 800b5ae:	d041      	beq.n	800b634 <osMutexNew+0xa4>
    if (attr != NULL) {
 800b5b0:	b104      	cbz	r4, 800b5b4 <osMutexNew+0x24>
      type = attr->attr_bits;
 800b5b2:	6863      	ldr	r3, [r4, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b5b4:	f013 0601 	ands.w	r6, r3, #1
 800b5b8:	d000      	beq.n	800b5bc <osMutexNew+0x2c>
      rmtx = 1U;
 800b5ba:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b5bc:	f013 0f08 	tst.w	r3, #8
 800b5c0:	d13a      	bne.n	800b638 <osMutexNew+0xa8>
      mem = -1;

      if (attr != NULL) {
 800b5c2:	b34c      	cbz	r4, 800b618 <osMutexNew+0x88>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b5c4:	68a1      	ldr	r1, [r4, #8]
 800b5c6:	b111      	cbz	r1, 800b5ce <osMutexNew+0x3e>
 800b5c8:	68e3      	ldr	r3, [r4, #12]
 800b5ca:	2b4f      	cmp	r3, #79	; 0x4f
 800b5cc:	d819      	bhi.n	800b602 <osMutexNew+0x72>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5ce:	b199      	cbz	r1, 800b5f8 <osMutexNew+0x68>
      mem = -1;
 800b5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 800b5d4:	bb4b      	cbnz	r3, 800b62a <osMutexNew+0x9a>
          if (rmtx != 0U) {
 800b5d6:	b31e      	cbz	r6, 800b620 <osMutexNew+0x90>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b5d8:	2004      	movs	r0, #4
 800b5da:	f000 fc71 	bl	800bec0 <xQueueCreateMutex>
 800b5de:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b5e0:	b12d      	cbz	r5, 800b5ee <osMutexNew+0x5e>
        if (attr != NULL) {
 800b5e2:	b104      	cbz	r4, 800b5e6 <osMutexNew+0x56>
          name = attr->name;
 800b5e4:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f000 ff5b 	bl	800c4a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b5ee:	b1fd      	cbz	r5, 800b630 <osMutexNew+0xa0>
 800b5f0:	b1f6      	cbz	r6, 800b630 <osMutexNew+0xa0>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b5f2:	f045 0501 	orr.w	r5, r5, #1
 800b5f6:	e01b      	b.n	800b630 <osMutexNew+0xa0>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5f8:	68e3      	ldr	r3, [r4, #12]
 800b5fa:	b17b      	cbz	r3, 800b61c <osMutexNew+0x8c>
      mem = -1;
 800b5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b600:	e7e8      	b.n	800b5d4 <osMutexNew+0x44>
        if (rmtx != 0U) {
 800b602:	b126      	cbz	r6, 800b60e <osMutexNew+0x7e>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b604:	2004      	movs	r0, #4
 800b606:	f000 fc66 	bl	800bed6 <xQueueCreateMutexStatic>
 800b60a:	4605      	mov	r5, r0
 800b60c:	e7e8      	b.n	800b5e0 <osMutexNew+0x50>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b60e:	2001      	movs	r0, #1
 800b610:	f000 fc61 	bl	800bed6 <xQueueCreateMutexStatic>
 800b614:	4605      	mov	r5, r0
 800b616:	e7e3      	b.n	800b5e0 <osMutexNew+0x50>
        mem = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	e7db      	b.n	800b5d4 <osMutexNew+0x44>
            mem = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e7d9      	b.n	800b5d4 <osMutexNew+0x44>
            hMutex = xSemaphoreCreateMutex ();
 800b620:	2001      	movs	r0, #1
 800b622:	f000 fc4d 	bl	800bec0 <xQueueCreateMutex>
 800b626:	4605      	mov	r5, r0
 800b628:	e7da      	b.n	800b5e0 <osMutexNew+0x50>
  hMutex = NULL;
 800b62a:	2500      	movs	r5, #0
 800b62c:	e7df      	b.n	800b5ee <osMutexNew+0x5e>
 800b62e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b630:	4628      	mov	r0, r5
 800b632:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 800b634:	2500      	movs	r5, #0
 800b636:	e7fb      	b.n	800b630 <osMutexNew+0xa0>
 800b638:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 800b63a:	e7f9      	b.n	800b630 <osMutexNew+0xa0>
 800b63c:	20002968 	.word	0x20002968

0800b640 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b640:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800b644:	bb22      	cbnz	r2, 800b690 <osMutexAcquire+0x50>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b646:	b510      	push	{r4, lr}
 800b648:	4603      	mov	r3, r0
 800b64a:	460c      	mov	r4, r1
 800b64c:	f020 0001 	bic.w	r0, r0, #1
 800b650:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b654:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800b658:	b912      	cbnz	r2, 800b660 <osMutexAcquire+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b65a:	f3ef 8211 	mrs	r2, BASEPRI
 800b65e:	b11a      	cbz	r2, 800b668 <osMutexAcquire+0x28>
 800b660:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <osMutexAcquire+0x78>)
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	2a02      	cmp	r2, #2
 800b666:	d016      	beq.n	800b696 <osMutexAcquire+0x56>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b668:	b1c0      	cbz	r0, 800b69c <osMutexAcquire+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b66a:	b143      	cbz	r3, 800b67e <osMutexAcquire+0x3e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b66c:	4621      	mov	r1, r4
 800b66e:	f000 fea1 	bl	800c3b4 <xQueueTakeMutexRecursive>
 800b672:	2801      	cmp	r0, #1
 800b674:	d015      	beq.n	800b6a2 <osMutexAcquire+0x62>
        if (timeout != 0U) {
 800b676:	b1b4      	cbz	r4, 800b6a6 <osMutexAcquire+0x66>
          stat = osErrorTimeout;
 800b678:	f06f 0001 	mvn.w	r0, #1
 800b67c:	e012      	b.n	800b6a4 <osMutexAcquire+0x64>
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b67e:	4621      	mov	r1, r4
 800b680:	f000 fdc6 	bl	800c210 <xQueueSemaphoreTake>
 800b684:	2801      	cmp	r0, #1
 800b686:	d011      	beq.n	800b6ac <osMutexAcquire+0x6c>
        if (timeout != 0U) {
 800b688:	b194      	cbz	r4, 800b6b0 <osMutexAcquire+0x70>
          stat = osErrorTimeout;
 800b68a:	f06f 0001 	mvn.w	r0, #1
 800b68e:	e009      	b.n	800b6a4 <osMutexAcquire+0x64>
    stat = osErrorISR;
 800b690:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800b694:	4770      	bx	lr
    stat = osErrorISR;
 800b696:	f06f 0005 	mvn.w	r0, #5
 800b69a:	e003      	b.n	800b6a4 <osMutexAcquire+0x64>
    stat = osErrorParameter;
 800b69c:	f06f 0003 	mvn.w	r0, #3
 800b6a0:	e000      	b.n	800b6a4 <osMutexAcquire+0x64>
  stat = osOK;
 800b6a2:	2000      	movs	r0, #0
}
 800b6a4:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 800b6a6:	f06f 0002 	mvn.w	r0, #2
 800b6aa:	e7fb      	b.n	800b6a4 <osMutexAcquire+0x64>
  stat = osOK;
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	e7f9      	b.n	800b6a4 <osMutexAcquire+0x64>
          stat = osErrorResource;
 800b6b0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b6b4:	e7f6      	b.n	800b6a4 <osMutexAcquire+0x64>
 800b6b6:	bf00      	nop
 800b6b8:	20002968 	.word	0x20002968

0800b6bc <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6bc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800b6c0:	bb02      	cbnz	r2, 800b704 <osMutexRelease+0x48>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b6c2:	b508      	push	{r3, lr}
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f020 0001 	bic.w	r0, r0, #1
 800b6ca:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ce:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800b6d2:	b912      	cbnz	r2, 800b6da <osMutexRelease+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b6d4:	f3ef 8211 	mrs	r2, BASEPRI
 800b6d8:	b11a      	cbz	r2, 800b6e2 <osMutexRelease+0x26>
 800b6da:	4a12      	ldr	r2, [pc, #72]	; (800b724 <osMutexRelease+0x68>)
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	2a02      	cmp	r2, #2
 800b6e0:	d013      	beq.n	800b70a <osMutexRelease+0x4e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b6e2:	b1a8      	cbz	r0, 800b710 <osMutexRelease+0x54>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b6e4:	b12b      	cbz	r3, 800b6f2 <osMutexRelease+0x36>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b6e6:	f000 fc05 	bl	800bef4 <xQueueGiveMutexRecursive>
 800b6ea:	2801      	cmp	r0, #1
 800b6ec:	d113      	bne.n	800b716 <osMutexRelease+0x5a>
  stat = osOK;
 800b6ee:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b6f0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f000 fb16 	bl	800bd28 <xQueueGenericSend>
 800b6fc:	2801      	cmp	r0, #1
 800b6fe:	d10d      	bne.n	800b71c <osMutexRelease+0x60>
  stat = osOK;
 800b700:	2000      	movs	r0, #0
 800b702:	e7f5      	b.n	800b6f0 <osMutexRelease+0x34>
    stat = osErrorISR;
 800b704:	f06f 0005 	mvn.w	r0, #5
}
 800b708:	4770      	bx	lr
    stat = osErrorISR;
 800b70a:	f06f 0005 	mvn.w	r0, #5
 800b70e:	e7ef      	b.n	800b6f0 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800b710:	f06f 0003 	mvn.w	r0, #3
 800b714:	e7ec      	b.n	800b6f0 <osMutexRelease+0x34>
        stat = osErrorResource;
 800b716:	f06f 0002 	mvn.w	r0, #2
 800b71a:	e7e9      	b.n	800b6f0 <osMutexRelease+0x34>
        stat = osErrorResource;
 800b71c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b720:	e7e6      	b.n	800b6f0 <osMutexRelease+0x34>
 800b722:	bf00      	nop
 800b724:	20002968 	.word	0x20002968

0800b728 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b72c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b730:	2b00      	cmp	r3, #0
 800b732:	d153      	bne.n	800b7dc <osSemaphoreNew+0xb4>
 800b734:	460e      	mov	r6, r1
 800b736:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b738:	f3ef 8310 	mrs	r3, PRIMASK
 800b73c:	b913      	cbnz	r3, 800b744 <osSemaphoreNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b73e:	f3ef 8311 	mrs	r3, BASEPRI
 800b742:	b11b      	cbz	r3, 800b74c <osSemaphoreNew+0x24>
 800b744:	4b2b      	ldr	r3, [pc, #172]	; (800b7f4 <osSemaphoreNew+0xcc>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d04b      	beq.n	800b7e4 <osSemaphoreNew+0xbc>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d04b      	beq.n	800b7e8 <osSemaphoreNew+0xc0>
 800b750:	42b0      	cmp	r0, r6
 800b752:	d34b      	bcc.n	800b7ec <osSemaphoreNew+0xc4>
    mem = -1;

    if (attr != NULL) {
 800b754:	b14d      	cbz	r5, 800b76a <osSemaphoreNew+0x42>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b756:	68ac      	ldr	r4, [r5, #8]
 800b758:	b114      	cbz	r4, 800b760 <osSemaphoreNew+0x38>
 800b75a:	68eb      	ldr	r3, [r5, #12]
 800b75c:	2b4f      	cmp	r3, #79	; 0x4f
 800b75e:	d814      	bhi.n	800b78a <osSemaphoreNew+0x62>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b760:	2c00      	cmp	r4, #0
 800b762:	d145      	bne.n	800b7f0 <osSemaphoreNew+0xc8>
 800b764:	68eb      	ldr	r3, [r5, #12]
 800b766:	b10b      	cbz	r3, 800b76c <osSemaphoreNew+0x44>
 800b768:	e039      	b.n	800b7de <osSemaphoreNew+0xb6>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800b76a:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800b76c:	2801      	cmp	r0, #1
 800b76e:	d00e      	beq.n	800b78e <osSemaphoreNew+0x66>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800b770:	bb73      	cbnz	r3, 800b7d0 <osSemaphoreNew+0xa8>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b772:	4631      	mov	r1, r6
 800b774:	f000 fab7 	bl	800bce6 <xQueueCreateCountingSemaphore>
 800b778:	4604      	mov	r4, r0
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b77a:	b384      	cbz	r4, 800b7de <osSemaphoreNew+0xb6>
        if (attr != NULL) {
 800b77c:	b105      	cbz	r5, 800b780 <osSemaphoreNew+0x58>
          name = attr->name;
 800b77e:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b780:	4629      	mov	r1, r5
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fe8e 	bl	800c4a4 <vQueueAddToRegistry>
 800b788:	e029      	b.n	800b7de <osSemaphoreNew+0xb6>
        mem = 1;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7ee      	b.n	800b76c <osSemaphoreNew+0x44>
        if (mem == 1) {
 800b78e:	b9b3      	cbnz	r3, 800b7be <osSemaphoreNew+0x96>
          hSemaphore = xSemaphoreCreateBinary();
 800b790:	2203      	movs	r2, #3
 800b792:	2100      	movs	r1, #0
 800b794:	2001      	movs	r0, #1
 800b796:	f000 fa5a 	bl	800bc4e <xQueueGenericCreate>
 800b79a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b79c:	2c00      	cmp	r4, #0
 800b79e:	d0ec      	beq.n	800b77a <osSemaphoreNew+0x52>
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	d0ea      	beq.n	800b77a <osSemaphoreNew+0x52>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f000 fabc 	bl	800bd28 <xQueueGenericSend>
 800b7b0:	2801      	cmp	r0, #1
 800b7b2:	d0e2      	beq.n	800b77a <osSemaphoreNew+0x52>
            vSemaphoreDelete (hSemaphore);
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 fe9f 	bl	800c4f8 <vQueueDelete>
            hSemaphore = NULL;
 800b7ba:	2400      	movs	r4, #0
 800b7bc:	e00f      	b.n	800b7de <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b7be:	68ab      	ldr	r3, [r5, #8]
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	9200      	str	r2, [sp, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	f000 f9f7 	bl	800bbba <xQueueGenericCreateStatic>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	e7e5      	b.n	800b79c <osSemaphoreNew+0x74>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b7d0:	68aa      	ldr	r2, [r5, #8]
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	f000 fa62 	bl	800bc9c <xQueueCreateCountingSemaphoreStatic>
 800b7d8:	4604      	mov	r4, r0
 800b7da:	e7ce      	b.n	800b77a <osSemaphoreNew+0x52>
  hSemaphore = NULL;
 800b7dc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b7de:	4620      	mov	r0, r4
 800b7e0:	b002      	add	sp, #8
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800b7e4:	2400      	movs	r4, #0
 800b7e6:	e7fa      	b.n	800b7de <osSemaphoreNew+0xb6>
 800b7e8:	2400      	movs	r4, #0
 800b7ea:	e7f8      	b.n	800b7de <osSemaphoreNew+0xb6>
 800b7ec:	2400      	movs	r4, #0
 800b7ee:	e7f6      	b.n	800b7de <osSemaphoreNew+0xb6>
 800b7f0:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 800b7f2:	e7f4      	b.n	800b7de <osSemaphoreNew+0xb6>
 800b7f4:	20002968 	.word	0x20002968

0800b7f8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b7f8:	b380      	cbz	r0, 800b85c <osSemaphoreAcquire+0x64>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b7fa:	b530      	push	{r4, r5, lr}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	460c      	mov	r4, r1
 800b800:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b802:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b806:	b99b      	cbnz	r3, 800b830 <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b808:	f3ef 8310 	mrs	r3, PRIMASK
 800b80c:	b913      	cbnz	r3, 800b814 <osSemaphoreAcquire+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b80e:	f3ef 8311 	mrs	r3, BASEPRI
 800b812:	b11b      	cbz	r3, 800b81c <osSemaphoreAcquire+0x24>
 800b814:	4b18      	ldr	r3, [pc, #96]	; (800b878 <osSemaphoreAcquire+0x80>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d009      	beq.n	800b830 <osSemaphoreAcquire+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b81c:	4621      	mov	r1, r4
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 fcf6 	bl	800c210 <xQueueSemaphoreTake>
 800b824:	2801      	cmp	r0, #1
 800b826:	d022      	beq.n	800b86e <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 800b828:	b31c      	cbz	r4, 800b872 <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 800b82a:	f06f 0001 	mvn.w	r0, #1
 800b82e:	e013      	b.n	800b858 <osSemaphoreAcquire+0x60>
    if (timeout != 0U) {
 800b830:	b9bc      	cbnz	r4, 800b862 <osSemaphoreAcquire+0x6a>
      yield = pdFALSE;
 800b832:	2100      	movs	r1, #0
 800b834:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b836:	aa01      	add	r2, sp, #4
 800b838:	4628      	mov	r0, r5
 800b83a:	f000 fddd 	bl	800c3f8 <xQueueReceiveFromISR>
 800b83e:	2801      	cmp	r0, #1
 800b840:	d112      	bne.n	800b868 <osSemaphoreAcquire+0x70>
        portYIELD_FROM_ISR (yield);
 800b842:	9801      	ldr	r0, [sp, #4]
 800b844:	b140      	cbz	r0, 800b858 <osSemaphoreAcquire+0x60>
 800b846:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <osSemaphoreAcquire+0x84>)
 800b848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b856:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b858:	b003      	add	sp, #12
 800b85a:	bd30      	pop	{r4, r5, pc}
    stat = osErrorParameter;
 800b85c:	f06f 0003 	mvn.w	r0, #3
}
 800b860:	4770      	bx	lr
      stat = osErrorParameter;
 800b862:	f06f 0003 	mvn.w	r0, #3
 800b866:	e7f7      	b.n	800b858 <osSemaphoreAcquire+0x60>
        stat = osErrorResource;
 800b868:	f06f 0002 	mvn.w	r0, #2
 800b86c:	e7f4      	b.n	800b858 <osSemaphoreAcquire+0x60>
  stat = osOK;
 800b86e:	2000      	movs	r0, #0
 800b870:	e7f2      	b.n	800b858 <osSemaphoreAcquire+0x60>
        stat = osErrorResource;
 800b872:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b876:	e7ef      	b.n	800b858 <osSemaphoreAcquire+0x60>
 800b878:	20002968 	.word	0x20002968
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b880:	b378      	cbz	r0, 800b8e2 <osSemaphoreRelease+0x62>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b882:	b510      	push	{r4, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b888:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b88c:	b9a3      	cbnz	r3, 800b8b8 <osSemaphoreRelease+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b88e:	f3ef 8310 	mrs	r3, PRIMASK
 800b892:	b913      	cbnz	r3, 800b89a <osSemaphoreRelease+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b894:	f3ef 8311 	mrs	r3, BASEPRI
 800b898:	b11b      	cbz	r3, 800b8a2 <osSemaphoreRelease+0x22>
 800b89a:	4b16      	ldr	r3, [pc, #88]	; (800b8f4 <osSemaphoreRelease+0x74>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d00a      	beq.n	800b8b8 <osSemaphoreRelease+0x38>
    } else {
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 fa3d 	bl	800bd28 <xQueueGenericSend>
 800b8ae:	2801      	cmp	r0, #1
 800b8b0:	d11d      	bne.n	800b8ee <osSemaphoreRelease+0x6e>
  stat = osOK;
 800b8b2:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800b8b4:	b002      	add	sp, #8
 800b8b6:	bd10      	pop	{r4, pc}
    yield = pdFALSE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b8bc:	a901      	add	r1, sp, #4
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f000 fb9f 	bl	800c002 <xQueueGiveFromISR>
 800b8c4:	2801      	cmp	r0, #1
 800b8c6:	d10f      	bne.n	800b8e8 <osSemaphoreRelease+0x68>
      portYIELD_FROM_ISR (yield);
 800b8c8:	9801      	ldr	r0, [sp, #4]
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d0f2      	beq.n	800b8b4 <osSemaphoreRelease+0x34>
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <osSemaphoreRelease+0x78>)
 800b8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d4:	601a      	str	r2, [r3, #0]
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e7e8      	b.n	800b8b4 <osSemaphoreRelease+0x34>
    stat = osErrorParameter;
 800b8e2:	f06f 0003 	mvn.w	r0, #3
}
 800b8e6:	4770      	bx	lr
      stat = osErrorResource;
 800b8e8:	f06f 0002 	mvn.w	r0, #2
 800b8ec:	e7e2      	b.n	800b8b4 <osSemaphoreRelease+0x34>
      stat = osErrorResource;
 800b8ee:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b8f2:	e7df      	b.n	800b8b4 <osSemaphoreRelease+0x34>
 800b8f4:	20002968 	.word	0x20002968
 800b8f8:	e000ed04 	.word	0xe000ed04

0800b8fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8fc:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <vApplicationGetIdleTaskMemory+0x18>)
 800b900:	1d1c      	adds	r4, r3, #4
 800b902:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b904:	3360      	adds	r3, #96	; 0x60
 800b906:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b908:	2380      	movs	r3, #128	; 0x80
 800b90a:	6013      	str	r3, [r2, #0]
}
 800b90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	20002968 	.word	0x20002968

0800b918 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b918:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b91a:	4b06      	ldr	r3, [pc, #24]	; (800b934 <vApplicationGetTimerTaskMemory+0x1c>)
 800b91c:	f503 7418 	add.w	r4, r3, #608	; 0x260
 800b920:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b922:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800b926:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b92c:	6013      	str	r3, [r2, #0]
}
 800b92e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	20002968 	.word	0x20002968

0800b938 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b938:	f100 0308 	add.w	r3, r0, #8
 800b93c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b93e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b942:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b944:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b946:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b948:	2300      	movs	r3, #0
 800b94a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b94c:	4770      	bx	lr

0800b94e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b952:	4770      	bx	lr

0800b954 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b954:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b956:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b958:	689a      	ldr	r2, [r3, #8]
 800b95a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b95c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b95e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b960:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800b962:	6803      	ldr	r3, [r0, #0]
 800b964:	3301      	adds	r3, #1
 800b966:	6003      	str	r3, [r0, #0]
}
 800b968:	4770      	bx	lr

0800b96a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b96a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b96c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b96e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800b972:	d011      	beq.n	800b998 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b974:	f100 0308 	add.w	r3, r0, #8
 800b978:	461c      	mov	r4, r3
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	42aa      	cmp	r2, r5
 800b980:	d9fa      	bls.n	800b978 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b982:	6863      	ldr	r3, [r4, #4]
 800b984:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b986:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b988:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b98a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b98c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800b98e:	6803      	ldr	r3, [r0, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	6003      	str	r3, [r0, #0]
}
 800b994:	bc30      	pop	{r4, r5}
 800b996:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800b998:	6904      	ldr	r4, [r0, #16]
 800b99a:	e7f2      	b.n	800b982 <vListInsert+0x18>

0800b99c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b99c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b99e:	6841      	ldr	r1, [r0, #4]
 800b9a0:	6882      	ldr	r2, [r0, #8]
 800b9a2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9a4:	6841      	ldr	r1, [r0, #4]
 800b9a6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	4282      	cmp	r2, r0
 800b9ac:	d006      	beq.n	800b9bc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	3a01      	subs	r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9b8:	6818      	ldr	r0, [r3, #0]
}
 800b9ba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9bc:	6882      	ldr	r2, [r0, #8]
 800b9be:	605a      	str	r2, [r3, #4]
 800b9c0:	e7f5      	b.n	800b9ae <uxListRemove+0x12>

0800b9c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b9c2:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b9c6:	b118      	cbz	r0, 800b9d0 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800b9d0:	4770      	bx	lr

0800b9d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b9d2:	b510      	push	{r4, lr}
 800b9d4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9d6:	f001 fe35 	bl	800d644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b9dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d004      	beq.n	800b9ec <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800b9e2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800b9e4:	f001 fe50 	bl	800d688 <vPortExitCritical>

	return xReturn;
}
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800b9ec:	2401      	movs	r4, #1
 800b9ee:	e7f9      	b.n	800b9e4 <prvIsQueueFull+0x12>

0800b9f0 <prvIsQueueEmpty>:
{
 800b9f0:	b510      	push	{r4, lr}
 800b9f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b9f4:	f001 fe26 	bl	800d644 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9fa:	b923      	cbnz	r3, 800ba06 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800b9fc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800b9fe:	f001 fe43 	bl	800d688 <vPortExitCritical>
}
 800ba02:	4620      	mov	r0, r4
 800ba04:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800ba06:	2400      	movs	r4, #0
 800ba08:	e7f9      	b.n	800b9fe <prvIsQueueEmpty+0xe>

0800ba0a <prvCopyDataToQueue>:
{
 800ba0a:	b570      	push	{r4, r5, r6, lr}
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba10:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba12:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ba14:	b95a      	cbnz	r2, 800ba2e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba16:	6803      	ldr	r3, [r0, #0]
 800ba18:	b11b      	cbz	r3, 800ba22 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800ba1a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba1c:	3601      	adds	r6, #1
 800ba1e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba22:	6880      	ldr	r0, [r0, #8]
 800ba24:	f001 fad4 	bl	800cfd0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60a3      	str	r3, [r4, #8]
 800ba2c:	e7f6      	b.n	800ba1c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800ba2e:	b96d      	cbnz	r5, 800ba4c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba30:	6840      	ldr	r0, [r0, #4]
 800ba32:	f002 f977 	bl	800dd24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ba38:	6863      	ldr	r3, [r4, #4]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba3e:	68a2      	ldr	r2, [r4, #8]
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d319      	bcc.n	800ba78 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ba48:	4628      	mov	r0, r5
 800ba4a:	e7e7      	b.n	800ba1c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba4c:	68c0      	ldr	r0, [r0, #12]
 800ba4e:	f002 f969 	bl	800dd24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ba54:	4251      	negs	r1, r2
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	1a9b      	subs	r3, r3, r2
 800ba5a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba5c:	6822      	ldr	r2, [r4, #0]
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d202      	bcs.n	800ba68 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	440b      	add	r3, r1
 800ba66:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ba68:	2d02      	cmp	r5, #2
 800ba6a:	d001      	beq.n	800ba70 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	e7d5      	b.n	800ba1c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba70:	b126      	cbz	r6, 800ba7c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800ba72:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800ba74:	2000      	movs	r0, #0
 800ba76:	e7d1      	b.n	800ba1c <prvCopyDataToQueue+0x12>
 800ba78:	4628      	mov	r0, r5
 800ba7a:	e7cf      	b.n	800ba1c <prvCopyDataToQueue+0x12>
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	e7cd      	b.n	800ba1c <prvCopyDataToQueue+0x12>

0800ba80 <prvCopyDataFromQueue>:
{
 800ba80:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ba84:	b16a      	cbz	r2, 800baa2 <prvCopyDataFromQueue+0x22>
{
 800ba86:	b510      	push	{r4, lr}
 800ba88:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba8a:	68d9      	ldr	r1, [r3, #12]
 800ba8c:	4411      	add	r1, r2
 800ba8e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba90:	689c      	ldr	r4, [r3, #8]
 800ba92:	42a1      	cmp	r1, r4
 800ba94:	d301      	bcc.n	800ba9a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba96:	6819      	ldr	r1, [r3, #0]
 800ba98:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba9a:	68d9      	ldr	r1, [r3, #12]
 800ba9c:	f002 f942 	bl	800dd24 <memcpy>
}
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	4770      	bx	lr

0800baa4 <prvUnlockQueue>:
{
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800baa8:	f001 fdcc 	bl	800d644 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800baac:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800bab0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bab2:	e003      	b.n	800babc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800bab4:	f001 fa1e 	bl	800cef4 <vTaskMissedYield>
			--cTxLock;
 800bab8:	3c01      	subs	r4, #1
 800baba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800babc:	2c00      	cmp	r4, #0
 800babe:	dd08      	ble.n	800bad2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bac0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bac2:	b133      	cbz	r3, 800bad2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bac4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800bac8:	f001 f984 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d0f3      	beq.n	800bab8 <prvUnlockQueue+0x14>
 800bad0:	e7f0      	b.n	800bab4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800bad2:	23ff      	movs	r3, #255	; 0xff
 800bad4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800bad8:	f001 fdd6 	bl	800d688 <vPortExitCritical>
	taskENTER_CRITICAL();
 800badc:	f001 fdb2 	bl	800d644 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800bae0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800bae4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bae6:	e003      	b.n	800baf0 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800bae8:	f001 fa04 	bl	800cef4 <vTaskMissedYield>
				--cRxLock;
 800baec:	3c01      	subs	r4, #1
 800baee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	dd08      	ble.n	800bb06 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baf4:	692b      	ldr	r3, [r5, #16]
 800baf6:	b133      	cbz	r3, 800bb06 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baf8:	f105 0010 	add.w	r0, r5, #16
 800bafc:	f001 f96a 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0f3      	beq.n	800baec <prvUnlockQueue+0x48>
 800bb04:	e7f0      	b.n	800bae8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800bb06:	23ff      	movs	r3, #255	; 0xff
 800bb08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800bb0c:	f001 fdbc 	bl	800d688 <vPortExitCritical>
}
 800bb10:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bb14 <xQueueGenericReset>:
{
 800bb14:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800bb16:	b1e0      	cbz	r0, 800bb52 <xQueueGenericReset+0x3e>
 800bb18:	460d      	mov	r5, r1
 800bb1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bb1c:	f001 fd92 	bl	800d644 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb20:	6821      	ldr	r1, [r4, #0]
 800bb22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bb24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb26:	fb03 1002 	mla	r0, r3, r2, r1
 800bb2a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb30:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb32:	3a01      	subs	r2, #1
 800bb34:	fb02 1303 	mla	r3, r2, r3, r1
 800bb38:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb3a:	23ff      	movs	r3, #255	; 0xff
 800bb3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800bb44:	b9ed      	cbnz	r5, 800bb82 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	b963      	cbnz	r3, 800bb64 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800bb4a:	f001 fd9d 	bl	800d688 <vPortExitCritical>
}
 800bb4e:	2001      	movs	r0, #1
 800bb50:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800bb62:	e7fe      	b.n	800bb62 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb64:	f104 0010 	add.w	r0, r4, #16
 800bb68:	f001 f934 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d0ec      	beq.n	800bb4a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800bb70:	4b08      	ldr	r3, [pc, #32]	; (800bb94 <xQueueGenericReset+0x80>)
 800bb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	e7e3      	b.n	800bb4a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb82:	f104 0010 	add.w	r0, r4, #16
 800bb86:	f7ff fed7 	bl	800b938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bb8e:	f7ff fed3 	bl	800b938 <vListInitialise>
 800bb92:	e7da      	b.n	800bb4a <xQueueGenericReset+0x36>
 800bb94:	e000ed04 	.word	0xe000ed04

0800bb98 <prvInitialiseNewQueue>:
{
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	461d      	mov	r5, r3
 800bb9c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb9e:	460b      	mov	r3, r1
 800bba0:	b949      	cbnz	r1, 800bbb6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bba2:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800bba4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bba6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bba8:	2101      	movs	r1, #1
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff ffb2 	bl	800bb14 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bbb0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800bbb4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bbb6:	6022      	str	r2, [r4, #0]
 800bbb8:	e7f4      	b.n	800bba4 <prvInitialiseNewQueue+0xc>

0800bbba <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbba:	b940      	cbnz	r0, 800bbce <xQueueGenericCreateStatic+0x14>
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	e7fe      	b.n	800bbcc <xQueueGenericCreateStatic+0x12>
	{
 800bbce:	b530      	push	{r4, r5, lr}
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	461c      	mov	r4, r3
 800bbd4:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 800bbd6:	b153      	cbz	r3, 800bbee <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbd8:	b192      	cbz	r2, 800bc00 <xQueueGenericCreateStatic+0x46>
 800bbda:	b989      	cbnz	r1, 800bc00 <xQueueGenericCreateStatic+0x46>
 800bbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	e7fe      	b.n	800bbec <xQueueGenericCreateStatic+0x32>
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800bbfe:	e7fe      	b.n	800bbfe <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc00:	b16a      	cbz	r2, 800bc1e <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc02:	2350      	movs	r3, #80	; 0x50
 800bc04:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	2b50      	cmp	r3, #80	; 0x50
 800bc0a:	d013      	beq.n	800bc34 <xQueueGenericCreateStatic+0x7a>
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	e7fe      	b.n	800bc1c <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc1e:	2900      	cmp	r1, #0
 800bc20:	d0ef      	beq.n	800bc02 <xQueueGenericCreateStatic+0x48>
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	e7fe      	b.n	800bc32 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc34:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc3c:	9400      	str	r4, [sp, #0]
 800bc3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800bc42:	4628      	mov	r0, r5
 800bc44:	f7ff ffa8 	bl	800bb98 <prvInitialiseNewQueue>
	}
 800bc48:	4620      	mov	r0, r4
 800bc4a:	b005      	add	sp, #20
 800bc4c:	bd30      	pop	{r4, r5, pc}

0800bc4e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc4e:	b940      	cbnz	r0, 800bc62 <xQueueGenericCreate+0x14>
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	e7fe      	b.n	800bc60 <xQueueGenericCreate+0x12>
	{
 800bc62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc64:	b083      	sub	sp, #12
 800bc66:	460c      	mov	r4, r1
 800bc68:	4616      	mov	r6, r2
 800bc6a:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc6c:	b1a1      	cbz	r1, 800bc98 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc6e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc72:	3050      	adds	r0, #80	; 0x50
 800bc74:	f001 fe88 	bl	800d988 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bc78:	4605      	mov	r5, r0
 800bc7a:	b150      	cbz	r0, 800bc92 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc82:	9000      	str	r0, [sp, #0]
 800bc84:	4633      	mov	r3, r6
 800bc86:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7ff ff83 	bl	800bb98 <prvInitialiseNewQueue>
	}
 800bc92:	4628      	mov	r0, r5
 800bc94:	b003      	add	sp, #12
 800bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 800bc98:	4608      	mov	r0, r1
 800bc9a:	e7ea      	b.n	800bc72 <xQueueGenericCreate+0x24>

0800bc9c <xQueueCreateCountingSemaphoreStatic>:
	{
 800bc9c:	b530      	push	{r4, r5, lr}
 800bc9e:	b083      	sub	sp, #12
		configASSERT( uxMaxCount != 0 );
 800bca0:	b940      	cbnz	r0, 800bcb4 <xQueueCreateCountingSemaphoreStatic+0x18>
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	e7fe      	b.n	800bcb2 <xQueueCreateCountingSemaphoreStatic+0x16>
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	4613      	mov	r3, r2
		configASSERT( uxInitialCount <= uxMaxCount );
 800bcb8:	4288      	cmp	r0, r1
 800bcba:	d208      	bcs.n	800bcce <xQueueCreateCountingSemaphoreStatic+0x32>
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	e7fe      	b.n	800bccc <xQueueCreateCountingSemaphoreStatic+0x30>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bcce:	2202      	movs	r2, #2
 800bcd0:	9200      	str	r2, [sp, #0]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	f7ff ff70 	bl	800bbba <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bcda:	4603      	mov	r3, r0
 800bcdc:	b100      	cbz	r0, 800bce0 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcde:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800bce0:	4618      	mov	r0, r3
 800bce2:	b003      	add	sp, #12
 800bce4:	bd30      	pop	{r4, r5, pc}

0800bce6 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800bce6:	b940      	cbnz	r0, 800bcfa <xQueueCreateCountingSemaphore+0x14>
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	e7fe      	b.n	800bcf8 <xQueueCreateCountingSemaphore+0x12>
	{
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800bcfe:	4288      	cmp	r0, r1
 800bd00:	d208      	bcs.n	800bd14 <xQueueCreateCountingSemaphore+0x2e>
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	e7fe      	b.n	800bd12 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd14:	2202      	movs	r2, #2
 800bd16:	2100      	movs	r1, #0
 800bd18:	f7ff ff99 	bl	800bc4e <xQueueGenericCreate>
		if( xHandle != NULL )
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	b100      	cbz	r0, 800bd22 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd20:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800bd22:	4618      	mov	r0, r3
 800bd24:	bd10      	pop	{r4, pc}
	...

0800bd28 <xQueueGenericSend>:
{
 800bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bd2e:	b188      	cbz	r0, 800bd54 <xQueueGenericSend+0x2c>
 800bd30:	460e      	mov	r6, r1
 800bd32:	461d      	mov	r5, r3
 800bd34:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd36:	b1b1      	cbz	r1, 800bd66 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd38:	2d02      	cmp	r5, #2
 800bd3a:	d120      	bne.n	800bd7e <xQueueGenericSend+0x56>
 800bd3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d01d      	beq.n	800bd7e <xQueueGenericSend+0x56>
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	e7fe      	b.n	800bd52 <xQueueGenericSend+0x2a>
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800bd64:	e7fe      	b.n	800bd64 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0e5      	beq.n	800bd38 <xQueueGenericSend+0x10>
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	e7fe      	b.n	800bd7c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd7e:	f001 f8c7 	bl	800cf10 <xTaskGetSchedulerState>
 800bd82:	4607      	mov	r7, r0
 800bd84:	b958      	cbnz	r0, 800bd9e <xQueueGenericSend+0x76>
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d044      	beq.n	800be16 <xQueueGenericSend+0xee>
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	e7fe      	b.n	800bd9c <xQueueGenericSend+0x74>
 800bd9e:	2700      	movs	r7, #0
 800bda0:	e039      	b.n	800be16 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bda2:	462a      	mov	r2, r5
 800bda4:	4631      	mov	r1, r6
 800bda6:	4620      	mov	r0, r4
 800bda8:	f7ff fe2f 	bl	800ba0a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bdae:	b96a      	cbnz	r2, 800bdcc <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 800bdb0:	b138      	cbz	r0, 800bdc2 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800bdb2:	4b3c      	ldr	r3, [pc, #240]	; (800bea4 <xQueueGenericSend+0x17c>)
 800bdb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bdc2:	f001 fc61 	bl	800d688 <vPortExitCritical>
				return pdPASS;
 800bdc6:	2001      	movs	r0, #1
}
 800bdc8:	b005      	add	sp, #20
 800bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bdd0:	f001 f800 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d0f4      	beq.n	800bdc2 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 800bdd8:	4b32      	ldr	r3, [pc, #200]	; (800bea4 <xQueueGenericSend+0x17c>)
 800bdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	e7eb      	b.n	800bdc2 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 800bdea:	f001 fc4d 	bl	800d688 <vPortExitCritical>
					return errQUEUE_FULL;
 800bdee:	2000      	movs	r0, #0
 800bdf0:	e7ea      	b.n	800bdc8 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdf2:	a802      	add	r0, sp, #8
 800bdf4:	f001 f832 	bl	800ce5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdf8:	2701      	movs	r7, #1
 800bdfa:	e019      	b.n	800be30 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800be02:	e021      	b.n	800be48 <xQueueGenericSend+0x120>
 800be04:	2300      	movs	r3, #0
 800be06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be0a:	e023      	b.n	800be54 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7ff fe49 	bl	800baa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be12:	f000 fec3 	bl	800cb9c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800be16:	f001 fc15 	bl	800d644 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800be1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be1e:	429a      	cmp	r2, r3
 800be20:	d3bf      	bcc.n	800bda2 <xQueueGenericSend+0x7a>
 800be22:	2d02      	cmp	r5, #2
 800be24:	d0bd      	beq.n	800bda2 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0de      	beq.n	800bdea <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 800be2c:	2f00      	cmp	r7, #0
 800be2e:	d0e0      	beq.n	800bdf2 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 800be30:	f001 fc2a 	bl	800d688 <vPortExitCritical>
		vTaskSuspendAll();
 800be34:	f000 fe1a 	bl	800ca6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be38:	f001 fc04 	bl	800d644 <vPortEnterCritical>
 800be3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800be40:	b25b      	sxtb	r3, r3
 800be42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be46:	d0d9      	beq.n	800bdfc <xQueueGenericSend+0xd4>
 800be48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be52:	d0d7      	beq.n	800be04 <xQueueGenericSend+0xdc>
 800be54:	f001 fc18 	bl	800d688 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be58:	a901      	add	r1, sp, #4
 800be5a:	a802      	add	r0, sp, #8
 800be5c:	f001 f808 	bl	800ce70 <xTaskCheckForTimeOut>
 800be60:	b9c8      	cbnz	r0, 800be96 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be62:	4620      	mov	r0, r4
 800be64:	f7ff fdb5 	bl	800b9d2 <prvIsQueueFull>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0cf      	beq.n	800be0c <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be6c:	9901      	ldr	r1, [sp, #4]
 800be6e:	f104 0010 	add.w	r0, r4, #16
 800be72:	f000 ff77 	bl	800cd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be76:	4620      	mov	r0, r4
 800be78:	f7ff fe14 	bl	800baa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be7c:	f000 fe8e 	bl	800cb9c <xTaskResumeAll>
 800be80:	2800      	cmp	r0, #0
 800be82:	d1c8      	bne.n	800be16 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 800be84:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <xQueueGenericSend+0x17c>)
 800be86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	e7bf      	b.n	800be16 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800be96:	4620      	mov	r0, r4
 800be98:	f7ff fe04 	bl	800baa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be9c:	f000 fe7e 	bl	800cb9c <xTaskResumeAll>
			return errQUEUE_FULL;
 800bea0:	2000      	movs	r0, #0
 800bea2:	e791      	b.n	800bdc8 <xQueueGenericSend+0xa0>
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800bea8:	b148      	cbz	r0, 800bebe <prvInitialiseMutex+0x16>
	{
 800beaa:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800beac:	2100      	movs	r1, #0
 800beae:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800beb0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800beb2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800beb4:	460b      	mov	r3, r1
 800beb6:	460a      	mov	r2, r1
 800beb8:	f7ff ff36 	bl	800bd28 <xQueueGenericSend>
	}
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	4770      	bx	lr

0800bec0 <xQueueCreateMutex>:
	{
 800bec0:	b510      	push	{r4, lr}
 800bec2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bec4:	2100      	movs	r1, #0
 800bec6:	2001      	movs	r0, #1
 800bec8:	f7ff fec1 	bl	800bc4e <xQueueGenericCreate>
 800becc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bece:	f7ff ffeb 	bl	800bea8 <prvInitialiseMutex>
	}
 800bed2:	4620      	mov	r0, r4
 800bed4:	bd10      	pop	{r4, pc}

0800bed6 <xQueueCreateMutexStatic>:
	{
 800bed6:	b510      	push	{r4, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bedc:	9000      	str	r0, [sp, #0]
 800bede:	2200      	movs	r2, #0
 800bee0:	4611      	mov	r1, r2
 800bee2:	2001      	movs	r0, #1
 800bee4:	f7ff fe69 	bl	800bbba <xQueueGenericCreateStatic>
 800bee8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800beea:	f7ff ffdd 	bl	800bea8 <prvInitialiseMutex>
	}
 800beee:	4620      	mov	r0, r4
 800bef0:	b002      	add	sp, #8
 800bef2:	bd10      	pop	{r4, pc}

0800bef4 <xQueueGiveMutexRecursive>:
	{
 800bef4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800bef6:	b138      	cbz	r0, 800bf08 <xQueueGiveMutexRecursive+0x14>
 800bef8:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800befa:	6885      	ldr	r5, [r0, #8]
 800befc:	f001 f802 	bl	800cf04 <xTaskGetCurrentTaskHandle>
 800bf00:	4285      	cmp	r5, r0
 800bf02:	d00a      	beq.n	800bf1a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800bf04:	2000      	movs	r0, #0
	}
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800bf18:	e7fe      	b.n	800bf18 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bf1a:	68e3      	ldr	r3, [r4, #12]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bf20:	b10b      	cbz	r3, 800bf26 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800bf22:	2001      	movs	r0, #1
		return xReturn;
 800bf24:	e7ef      	b.n	800bf06 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bf26:	461a      	mov	r2, r3
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7ff fefc 	bl	800bd28 <xQueueGenericSend>
			xReturn = pdPASS;
 800bf30:	2001      	movs	r0, #1
 800bf32:	e7e8      	b.n	800bf06 <xQueueGiveMutexRecursive+0x12>

0800bf34 <xQueueGenericSendFromISR>:
{
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800bf38:	b190      	cbz	r0, 800bf60 <xQueueGenericSendFromISR+0x2c>
 800bf3a:	4689      	mov	r9, r1
 800bf3c:	4690      	mov	r8, r2
 800bf3e:	461f      	mov	r7, r3
 800bf40:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf42:	b1b1      	cbz	r1, 800bf72 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf44:	2f02      	cmp	r7, #2
 800bf46:	d120      	bne.n	800bf8a <xQueueGenericSendFromISR+0x56>
 800bf48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d01d      	beq.n	800bf8a <xQueueGenericSendFromISR+0x56>
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	e7fe      	b.n	800bf5e <xQueueGenericSendFromISR+0x2a>
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800bf70:	e7fe      	b.n	800bf70 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d0e5      	beq.n	800bf44 <xQueueGenericSendFromISR+0x10>
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	e7fe      	b.n	800bf88 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf8a:	f001 fc81 	bl	800d890 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf8e:	f3ef 8611 	mrs	r6, BASEPRI
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfa2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bfa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d306      	bcc.n	800bfb8 <xQueueGenericSendFromISR+0x84>
 800bfaa:	2f02      	cmp	r7, #2
 800bfac:	d004      	beq.n	800bfb8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800bfae:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfb0:	f386 8811 	msr	BASEPRI, r6
}
 800bfb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfb8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800bfbc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfbe:	463a      	mov	r2, r7
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f7ff fd21 	bl	800ba0a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800bfc8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800bfcc:	d005      	beq.n	800bfda <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfce:	1c6b      	adds	r3, r5, #1
 800bfd0:	b25b      	sxtb	r3, r3
 800bfd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800bfd6:	2001      	movs	r0, #1
 800bfd8:	e7ea      	b.n	800bfb0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfdc:	b90b      	cbnz	r3, 800bfe2 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
 800bfde:	2001      	movs	r0, #1
 800bfe0:	e7e6      	b.n	800bfb0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfe2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bfe6:	f000 fef5 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bfea:	b130      	cbz	r0, 800bffa <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800bfec:	f1b8 0f00 	cmp.w	r8, #0
 800bff0:	d005      	beq.n	800bffe <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bff2:	2001      	movs	r0, #1
 800bff4:	f8c8 0000 	str.w	r0, [r8]
 800bff8:	e7da      	b.n	800bfb0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800bffa:	2001      	movs	r0, #1
 800bffc:	e7d8      	b.n	800bfb0 <xQueueGenericSendFromISR+0x7c>
 800bffe:	2001      	movs	r0, #1
 800c000:	e7d6      	b.n	800bfb0 <xQueueGenericSendFromISR+0x7c>

0800c002 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800c002:	b168      	cbz	r0, 800c020 <xQueueGiveFromISR+0x1e>
{
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	460e      	mov	r6, r1
 800c008:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c00a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c00c:	b18b      	cbz	r3, 800c032 <xQueueGiveFromISR+0x30>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	e7fe      	b.n	800c01e <xQueueGiveFromISR+0x1c>
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c030:	e7fe      	b.n	800c030 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c032:	6803      	ldr	r3, [r0, #0]
 800c034:	b1eb      	cbz	r3, 800c072 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c036:	f001 fc2b 	bl	800d890 <vPortValidateInterruptPriority>
	__asm volatile
 800c03a:	f3ef 8511 	mrs	r5, BASEPRI
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c04e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c052:	4293      	cmp	r3, r2
 800c054:	d926      	bls.n	800c0a4 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c056:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c05a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c05c:	3201      	adds	r2, #1
 800c05e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c064:	d011      	beq.n	800c08a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c066:	3301      	adds	r3, #1
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800c06e:	2001      	movs	r0, #1
 800c070:	e019      	b.n	800c0a6 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c072:	6883      	ldr	r3, [r0, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0de      	beq.n	800c036 <xQueueGiveFromISR+0x34>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	e7fe      	b.n	800c088 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c08c:	b90b      	cbnz	r3, 800c092 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c08e:	2001      	movs	r0, #1
 800c090:	e009      	b.n	800c0a6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c092:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c096:	f000 fe9d 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c09a:	b138      	cbz	r0, 800c0ac <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800c09c:	b146      	cbz	r6, 800c0b0 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c09e:	2001      	movs	r0, #1
 800c0a0:	6030      	str	r0, [r6, #0]
 800c0a2:	e000      	b.n	800c0a6 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800c0a4:	2000      	movs	r0, #0
	__asm volatile
 800c0a6:	f385 8811 	msr	BASEPRI, r5
}
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800c0ac:	2001      	movs	r0, #1
 800c0ae:	e7fa      	b.n	800c0a6 <xQueueGiveFromISR+0xa4>
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	e7f8      	b.n	800c0a6 <xQueueGiveFromISR+0xa4>

0800c0b4 <xQueueReceive>:
{
 800c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c0ba:	b190      	cbz	r0, 800c0e2 <xQueueReceive+0x2e>
 800c0bc:	460e      	mov	r6, r1
 800c0be:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c0:	b1c1      	cbz	r1, 800c0f4 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0c2:	f000 ff25 	bl	800cf10 <xTaskGetSchedulerState>
 800c0c6:	4607      	mov	r7, r0
 800c0c8:	bb00      	cbnz	r0, 800c10c <xQueueReceive+0x58>
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d05c      	beq.n	800c18a <xQueueReceive+0xd6>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	e7fe      	b.n	800c0e0 <xQueueReceive+0x2c>
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c0f2:	e7fe      	b.n	800c0f2 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0e3      	beq.n	800c0c2 <xQueueReceive+0xe>
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	e7fe      	b.n	800c10a <xQueueReceive+0x56>
 800c10c:	2700      	movs	r7, #0
 800c10e:	e03c      	b.n	800c18a <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c110:	4631      	mov	r1, r6
 800c112:	4620      	mov	r0, r4
 800c114:	f7ff fcb4 	bl	800ba80 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c118:	3d01      	subs	r5, #1
 800c11a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	b923      	cbnz	r3, 800c12a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800c120:	f001 fab2 	bl	800d688 <vPortExitCritical>
				return pdPASS;
 800c124:	2001      	movs	r0, #1
}
 800c126:	b005      	add	sp, #20
 800c128:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c12a:	f104 0010 	add.w	r0, r4, #16
 800c12e:	f000 fe51 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c132:	2800      	cmp	r0, #0
 800c134:	d0f4      	beq.n	800c120 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800c136:	4b35      	ldr	r3, [pc, #212]	; (800c20c <xQueueReceive+0x158>)
 800c138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	e7eb      	b.n	800c120 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800c148:	f001 fa9e 	bl	800d688 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c14c:	2000      	movs	r0, #0
 800c14e:	e7ea      	b.n	800c126 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c150:	a802      	add	r0, sp, #8
 800c152:	f000 fe83 	bl	800ce5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c156:	2701      	movs	r7, #1
 800c158:	e021      	b.n	800c19e <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 800c15a:	2300      	movs	r3, #0
 800c15c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c160:	e029      	b.n	800c1b6 <xQueueReceive+0x102>
 800c162:	2300      	movs	r3, #0
 800c164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c168:	e02b      	b.n	800c1c2 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff fc9a 	bl	800baa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c170:	f000 fd14 	bl	800cb9c <xTaskResumeAll>
 800c174:	e009      	b.n	800c18a <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800c176:	4620      	mov	r0, r4
 800c178:	f7ff fc94 	bl	800baa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c17c:	f000 fd0e 	bl	800cb9c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff fc35 	bl	800b9f0 <prvIsQueueEmpty>
 800c186:	2800      	cmp	r0, #0
 800c188:	d13d      	bne.n	800c206 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 800c18a:	f001 fa5b 	bl	800d644 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c18e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c190:	2d00      	cmp	r5, #0
 800c192:	d1bd      	bne.n	800c110 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d0d6      	beq.n	800c148 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 800c19a:	2f00      	cmp	r7, #0
 800c19c:	d0d8      	beq.n	800c150 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 800c19e:	f001 fa73 	bl	800d688 <vPortExitCritical>
		vTaskSuspendAll();
 800c1a2:	f000 fc63 	bl	800ca6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1a6:	f001 fa4d 	bl	800d644 <vPortEnterCritical>
 800c1aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b4:	d0d1      	beq.n	800c15a <xQueueReceive+0xa6>
 800c1b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c1ba:	b25b      	sxtb	r3, r3
 800c1bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1c0:	d0cf      	beq.n	800c162 <xQueueReceive+0xae>
 800c1c2:	f001 fa61 	bl	800d688 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1c6:	a901      	add	r1, sp, #4
 800c1c8:	a802      	add	r0, sp, #8
 800c1ca:	f000 fe51 	bl	800ce70 <xTaskCheckForTimeOut>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d1d1      	bne.n	800c176 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff fc0c 	bl	800b9f0 <prvIsQueueEmpty>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d0c6      	beq.n	800c16a <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1dc:	9901      	ldr	r1, [sp, #4]
 800c1de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c1e2:	f000 fdbf 	bl	800cd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7ff fc5c 	bl	800baa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1ec:	f000 fcd6 	bl	800cb9c <xTaskResumeAll>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d1ca      	bne.n	800c18a <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800c1f4:	4b05      	ldr	r3, [pc, #20]	; (800c20c <xQueueReceive+0x158>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	e7c1      	b.n	800c18a <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 800c206:	2000      	movs	r0, #0
 800c208:	e78d      	b.n	800c126 <xQueueReceive+0x72>
 800c20a:	bf00      	nop
 800c20c:	e000ed04 	.word	0xe000ed04

0800c210 <xQueueSemaphoreTake>:
{
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c216:	b158      	cbz	r0, 800c230 <xQueueSemaphoreTake+0x20>
 800c218:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c21a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c21c:	b18b      	cbz	r3, 800c242 <xQueueSemaphoreTake+0x32>
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	e7fe      	b.n	800c22e <xQueueSemaphoreTake+0x1e>
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c240:	e7fe      	b.n	800c240 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c242:	f000 fe65 	bl	800cf10 <xTaskGetSchedulerState>
 800c246:	4606      	mov	r6, r0
 800c248:	b950      	cbnz	r0, 800c260 <xQueueSemaphoreTake+0x50>
 800c24a:	9b01      	ldr	r3, [sp, #4]
 800c24c:	b15b      	cbz	r3, 800c266 <xQueueSemaphoreTake+0x56>
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	e7fe      	b.n	800c25e <xQueueSemaphoreTake+0x4e>
 800c260:	2500      	movs	r5, #0
 800c262:	462e      	mov	r6, r5
 800c264:	e053      	b.n	800c30e <xQueueSemaphoreTake+0xfe>
 800c266:	4605      	mov	r5, r0
 800c268:	e051      	b.n	800c30e <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c26a:	3b01      	subs	r3, #1
 800c26c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	b13b      	cbz	r3, 800c282 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	b94b      	cbnz	r3, 800c28a <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800c276:	f001 fa07 	bl	800d688 <vPortExitCritical>
				return pdPASS;
 800c27a:	2501      	movs	r5, #1
}
 800c27c:	4628      	mov	r0, r5
 800c27e:	b004      	add	sp, #16
 800c280:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c282:	f000 ff41 	bl	800d108 <pvTaskIncrementMutexHeldCount>
 800c286:	60a0      	str	r0, [r4, #8]
 800c288:	e7f3      	b.n	800c272 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c28a:	f104 0010 	add.w	r0, r4, #16
 800c28e:	f000 fda1 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c292:	2800      	cmp	r0, #0
 800c294:	d0ef      	beq.n	800c276 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800c296:	4b46      	ldr	r3, [pc, #280]	; (800c3b0 <xQueueSemaphoreTake+0x1a0>)
 800c298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	e7e6      	b.n	800c276 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c2a8:	b145      	cbz	r5, 800c2bc <xQueueSemaphoreTake+0xac>
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	e7fe      	b.n	800c2ba <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 800c2bc:	f001 f9e4 	bl	800d688 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c2c0:	e7dc      	b.n	800c27c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2c2:	a802      	add	r0, sp, #8
 800c2c4:	f000 fdca 	bl	800ce5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2c8:	2601      	movs	r6, #1
 800c2ca:	e02a      	b.n	800c322 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c2d2:	e032      	b.n	800c33a <xQueueSemaphoreTake+0x12a>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2da:	e034      	b.n	800c346 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 800c2dc:	f001 f9b2 	bl	800d644 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2e0:	68a0      	ldr	r0, [r4, #8]
 800c2e2:	f000 fe25 	bl	800cf30 <xTaskPriorityInherit>
 800c2e6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c2e8:	f001 f9ce 	bl	800d688 <vPortExitCritical>
 800c2ec:	e03b      	b.n	800c366 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7ff fbd8 	bl	800baa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2f4:	f000 fc52 	bl	800cb9c <xTaskResumeAll>
 800c2f8:	e009      	b.n	800c30e <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f7ff fbd2 	bl	800baa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c300:	f000 fc4c 	bl	800cb9c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff fb73 	bl	800b9f0 <prvIsQueueEmpty>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d140      	bne.n	800c390 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 800c30e:	f001 f999 	bl	800d644 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1a8      	bne.n	800c26a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c318:	9b01      	ldr	r3, [sp, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0c4      	beq.n	800c2a8 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800c31e:	2e00      	cmp	r6, #0
 800c320:	d0cf      	beq.n	800c2c2 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 800c322:	f001 f9b1 	bl	800d688 <vPortExitCritical>
		vTaskSuspendAll();
 800c326:	f000 fba1 	bl	800ca6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c32a:	f001 f98b 	bl	800d644 <vPortEnterCritical>
 800c32e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c332:	b25b      	sxtb	r3, r3
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c338:	d0c8      	beq.n	800c2cc <xQueueSemaphoreTake+0xbc>
 800c33a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c33e:	b25b      	sxtb	r3, r3
 800c340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c344:	d0c6      	beq.n	800c2d4 <xQueueSemaphoreTake+0xc4>
 800c346:	f001 f99f 	bl	800d688 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c34a:	a901      	add	r1, sp, #4
 800c34c:	a802      	add	r0, sp, #8
 800c34e:	f000 fd8f 	bl	800ce70 <xTaskCheckForTimeOut>
 800c352:	2800      	cmp	r0, #0
 800c354:	d1d1      	bne.n	800c2fa <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c356:	4620      	mov	r0, r4
 800c358:	f7ff fb4a 	bl	800b9f0 <prvIsQueueEmpty>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d0c6      	beq.n	800c2ee <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0ba      	beq.n	800c2dc <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c366:	9901      	ldr	r1, [sp, #4]
 800c368:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c36c:	f000 fcfa 	bl	800cd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c370:	4620      	mov	r0, r4
 800c372:	f7ff fb97 	bl	800baa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c376:	f000 fc11 	bl	800cb9c <xTaskResumeAll>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d1c7      	bne.n	800c30e <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 800c37e:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <xQueueSemaphoreTake+0x1a0>)
 800c380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	e7be      	b.n	800c30e <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 800c390:	b90d      	cbnz	r5, 800c396 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 800c392:	2500      	movs	r5, #0
 800c394:	e772      	b.n	800c27c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800c396:	f001 f955 	bl	800d644 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c39a:	4620      	mov	r0, r4
 800c39c:	f7ff fb11 	bl	800b9c2 <prvGetDisinheritPriorityAfterTimeout>
 800c3a0:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c3a2:	68a0      	ldr	r0, [r4, #8]
 800c3a4:	f000 fe5e 	bl	800d064 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c3a8:	f001 f96e 	bl	800d688 <vPortExitCritical>
 800c3ac:	e7f1      	b.n	800c392 <xQueueSemaphoreTake+0x182>
 800c3ae:	bf00      	nop
 800c3b0:	e000ed04 	.word	0xe000ed04

0800c3b4 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800c3b4:	b188      	cbz	r0, 800c3da <xQueueTakeMutexRecursive+0x26>
	{
 800c3b6:	b570      	push	{r4, r5, r6, lr}
 800c3b8:	460d      	mov	r5, r1
 800c3ba:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3bc:	6886      	ldr	r6, [r0, #8]
 800c3be:	f000 fda1 	bl	800cf04 <xTaskGetCurrentTaskHandle>
 800c3c2:	4286      	cmp	r6, r0
 800c3c4:	d012      	beq.n	800c3ec <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff ff21 	bl	800c210 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	b180      	cbz	r0, 800c3f4 <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3d2:	68e3      	ldr	r3, [r4, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800c3d8:	e00c      	b.n	800c3f4 <xQueueTakeMutexRecursive+0x40>
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800c3ea:	e7fe      	b.n	800c3ea <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3ec:	68e3      	ldr	r3, [r4, #12]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 800c3f2:	2201      	movs	r2, #1
	}
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}

0800c3f8 <xQueueReceiveFromISR>:
{
 800c3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800c3fc:	b1c8      	cbz	r0, 800c432 <xQueueReceiveFromISR+0x3a>
 800c3fe:	4689      	mov	r9, r1
 800c400:	4617      	mov	r7, r2
 800c402:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c404:	b1f1      	cbz	r1, 800c444 <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c406:	f001 fa43 	bl	800d890 <vPortValidateInterruptPriority>
	__asm volatile
 800c40a:	f3ef 8611 	mrs	r6, BASEPRI
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c41e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c422:	f1b8 0f00 	cmp.w	r8, #0
 800c426:	d119      	bne.n	800c45c <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 800c428:	2000      	movs	r0, #0
	__asm volatile
 800c42a:	f386 8811 	msr	BASEPRI, r6
}
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c442:	e7fe      	b.n	800c442 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c444:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0dd      	beq.n	800c406 <xQueueReceiveFromISR+0xe>
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	e7fe      	b.n	800c45a <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c45c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c460:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c462:	4649      	mov	r1, r9
 800c464:	4620      	mov	r0, r4
 800c466:	f7ff fb0b 	bl	800ba80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c46a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c46e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800c470:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c474:	d005      	beq.n	800c482 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c476:	1c6b      	adds	r3, r5, #1
 800c478:	b25b      	sxtb	r3, r3
 800c47a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800c47e:	2001      	movs	r0, #1
 800c480:	e7d3      	b.n	800c42a <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	b90b      	cbnz	r3, 800c48a <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 800c486:	2001      	movs	r0, #1
 800c488:	e7cf      	b.n	800c42a <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c48a:	f104 0010 	add.w	r0, r4, #16
 800c48e:	f000 fca1 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c492:	b118      	cbz	r0, 800c49c <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
 800c494:	b127      	cbz	r7, 800c4a0 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c496:	2001      	movs	r0, #1
 800c498:	6038      	str	r0, [r7, #0]
 800c49a:	e7c6      	b.n	800c42a <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 800c49c:	2001      	movs	r0, #1
 800c49e:	e7c4      	b.n	800c42a <xQueueReceiveFromISR+0x32>
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e7c2      	b.n	800c42a <xQueueReceiveFromISR+0x32>

0800c4a4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	e000      	b.n	800c4aa <vQueueAddToRegistry+0x6>
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	2b07      	cmp	r3, #7
 800c4ac:	d80b      	bhi.n	800c4c6 <vQueueAddToRegistry+0x22>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4ae:	4a06      	ldr	r2, [pc, #24]	; (800c4c8 <vQueueAddToRegistry+0x24>)
 800c4b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c4b4:	2a00      	cmp	r2, #0
 800c4b6:	d1f7      	bne.n	800c4a8 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4b8:	4a03      	ldr	r2, [pc, #12]	; (800c4c8 <vQueueAddToRegistry+0x24>)
 800c4ba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4c2:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c4c4:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c4c6:	4770      	bx	lr
 800c4c8:	2000a058 	.word	0x2000a058

0800c4cc <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e000      	b.n	800c4d2 <vQueueUnregisterQueue+0x6>
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	2b07      	cmp	r3, #7
 800c4d4:	d80d      	bhi.n	800c4f2 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c4d6:	4a07      	ldr	r2, [pc, #28]	; (800c4f4 <vQueueUnregisterQueue+0x28>)
 800c4d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c4dc:	6852      	ldr	r2, [r2, #4]
 800c4de:	4282      	cmp	r2, r0
 800c4e0:	d1f6      	bne.n	800c4d0 <vQueueUnregisterQueue+0x4>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c4e2:	4a04      	ldr	r2, [pc, #16]	; (800c4f4 <vQueueUnregisterQueue+0x28>)
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c4ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4ee:	6059      	str	r1, [r3, #4]
				break;
 800c4f0:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c4f2:	4770      	bx	lr
 800c4f4:	2000a058 	.word	0x2000a058

0800c4f8 <vQueueDelete>:
	configASSERT( pxQueue );
 800c4f8:	b138      	cbz	r0, 800c50a <vQueueDelete+0x12>
{
 800c4fa:	b510      	push	{r4, lr}
 800c4fc:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800c4fe:	f7ff ffe5 	bl	800c4cc <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c502:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c506:	b14b      	cbz	r3, 800c51c <vQueueDelete+0x24>
}
 800c508:	bd10      	pop	{r4, pc}
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c51a:	e7fe      	b.n	800c51a <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800c51c:	4620      	mov	r0, r4
 800c51e:	f001 faa1 	bl	800da64 <vPortFree>
}
 800c522:	e7f1      	b.n	800c508 <vQueueDelete+0x10>

0800c524 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4604      	mov	r4, r0
 800c528:	460d      	mov	r5, r1
 800c52a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c52c:	f001 f88a 	bl	800d644 <vPortEnterCritical>
 800c530:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c534:	b25b      	sxtb	r3, r3
 800c536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c53a:	d00d      	beq.n	800c558 <vQueueWaitForMessageRestricted+0x34>
 800c53c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c540:	b25b      	sxtb	r3, r3
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c546:	d00b      	beq.n	800c560 <vQueueWaitForMessageRestricted+0x3c>
 800c548:	f001 f89e 	bl	800d688 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c54c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c54e:	b15b      	cbz	r3, 800c568 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c550:	4620      	mov	r0, r4
 800c552:	f7ff faa7 	bl	800baa4 <prvUnlockQueue>
	}
 800c556:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800c558:	2300      	movs	r3, #0
 800c55a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c55e:	e7ed      	b.n	800c53c <vQueueWaitForMessageRestricted+0x18>
 800c560:	2300      	movs	r3, #0
 800c562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c566:	e7ef      	b.n	800c548 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c568:	4632      	mov	r2, r6
 800c56a:	4629      	mov	r1, r5
 800c56c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c570:	f000 fc12 	bl	800cd98 <vTaskPlaceOnEventListRestricted>
 800c574:	e7ec      	b.n	800c550 <vQueueWaitForMessageRestricted+0x2c>
	...

0800c578 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c578:	4b07      	ldr	r3, [pc, #28]	; (800c598 <prvResetNextTaskUnblockTime+0x20>)
 800c57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	b923      	cbnz	r3, 800c58a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c580:	4b05      	ldr	r3, [pc, #20]	; (800c598 <prvResetNextTaskUnblockTime+0x20>)
 800c582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c586:	62da      	str	r2, [r3, #44]	; 0x2c
 800c588:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c58a:	4b03      	ldr	r3, [pc, #12]	; (800c598 <prvResetNextTaskUnblockTime+0x20>)
 800c58c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c58e:	68d2      	ldr	r2, [r2, #12]
 800c590:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c592:	6852      	ldr	r2, [r2, #4]
 800c594:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800c596:	4770      	bx	lr
 800c598:	20003024 	.word	0x20003024

0800c59c <prvInitialiseNewTask>:
{
 800c59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a0:	4680      	mov	r8, r0
 800c5a2:	460d      	mov	r5, r1
 800c5a4:	4617      	mov	r7, r2
 800c5a6:	4699      	mov	r9, r3
 800c5a8:	9e08      	ldr	r6, [sp, #32]
 800c5aa:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800c5ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5b0:	0092      	lsls	r2, r2, #2
 800c5b2:	21a5      	movs	r1, #165	; 0xa5
 800c5b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c5b6:	f001 fbc3 	bl	800dd40 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c5bc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800c5c0:	3a01      	subs	r2, #1
 800c5c2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5c6:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800c5ca:	b385      	cbz	r5, 800c62e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2a0f      	cmp	r2, #15
 800c5d0:	d807      	bhi.n	800c5e2 <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5d2:	5ca9      	ldrb	r1, [r5, r2]
 800c5d4:	18a3      	adds	r3, r4, r2
 800c5d6:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800c5da:	5cab      	ldrb	r3, [r5, r2]
 800c5dc:	b10b      	cbz	r3, 800c5e2 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5de:	3201      	adds	r2, #1
 800c5e0:	e7f5      	b.n	800c5ce <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5e8:	2e37      	cmp	r6, #55	; 0x37
 800c5ea:	d900      	bls.n	800c5ee <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5ec:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c5ee:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c5f0:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c5f2:	2500      	movs	r5, #0
 800c5f4:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5f6:	1d20      	adds	r0, r4, #4
 800c5f8:	f7ff f9a9 	bl	800b94e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5fc:	f104 0018 	add.w	r0, r4, #24
 800c600:	f7ff f9a5 	bl	800b94e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c604:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c606:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800c60a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c60c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800c60e:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c610:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c614:	464a      	mov	r2, r9
 800c616:	4641      	mov	r1, r8
 800c618:	4638      	mov	r0, r7
 800c61a:	f000 ffe9 	bl	800d5f0 <pxPortInitialiseStack>
 800c61e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c620:	f1ba 0f00 	cmp.w	sl, #0
 800c624:	d001      	beq.n	800c62a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c626:	f8ca 4000 	str.w	r4, [sl]
}
 800c62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c62e:	2300      	movs	r3, #0
 800c630:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800c634:	e7d8      	b.n	800c5e8 <prvInitialiseNewTask+0x4c>
	...

0800c638 <prvInitialiseTaskLists>:
{
 800c638:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c63a:	2400      	movs	r4, #0
 800c63c:	2c37      	cmp	r4, #55	; 0x37
 800c63e:	d808      	bhi.n	800c652 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c640:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800c644:	0093      	lsls	r3, r2, #2
 800c646:	4810      	ldr	r0, [pc, #64]	; (800c688 <prvInitialiseTaskLists+0x50>)
 800c648:	4418      	add	r0, r3
 800c64a:	f7ff f975 	bl	800b938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c64e:	3401      	adds	r4, #1
 800c650:	e7f4      	b.n	800c63c <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
 800c652:	4c0e      	ldr	r4, [pc, #56]	; (800c68c <prvInitialiseTaskLists+0x54>)
 800c654:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 800c658:	4630      	mov	r0, r6
 800c65a:	f7ff f96d 	bl	800b938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c65e:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 800c662:	4628      	mov	r0, r5
 800c664:	f7ff f968 	bl	800b938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c668:	f104 0014 	add.w	r0, r4, #20
 800c66c:	f7ff f964 	bl	800b938 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800c670:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 800c674:	f7ff f960 	bl	800b938 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800c678:	4620      	mov	r0, r4
 800c67a:	f7ff f95d 	bl	800b938 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800c67e:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c680:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 800c684:	bd70      	pop	{r4, r5, r6, pc}
 800c686:	bf00      	nop
 800c688:	20003054 	.word	0x20003054
 800c68c:	20003024 	.word	0x20003024

0800c690 <prvAddNewTaskToReadyList>:
{
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c694:	f000 ffd6 	bl	800d644 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800c698:	4b27      	ldr	r3, [pc, #156]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c69a:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 800c69e:	3201      	adds	r2, #1
 800c6a0:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 800c6a4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800c6a8:	b173      	cbz	r3, 800c6c8 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 800c6aa:	4b23      	ldr	r3, [pc, #140]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6ac:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800c6b0:	b98b      	cbnz	r3, 800c6d6 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6b2:	4b21      	ldr	r3, [pc, #132]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800c6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d80a      	bhi.n	800c6d6 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 800c6c0:	4b1d      	ldr	r3, [pc, #116]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6c2:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 800c6c6:	e006      	b.n	800c6d6 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 800c6c8:	4b1b      	ldr	r3, [pc, #108]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6ca:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6ce:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d02c      	beq.n	800c730 <prvAddNewTaskToReadyList+0xa0>
		uxTaskNumber++;
 800c6d6:	4a18      	ldr	r2, [pc, #96]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6d8:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 800c6dc:	3301      	adds	r3, #1
 800c6de:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6e2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c6e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c6e6:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d902      	bls.n	800c6f4 <prvAddNewTaskToReadyList+0x64>
 800c6ee:	4a12      	ldr	r2, [pc, #72]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 800c6f4:	4d10      	ldr	r5, [pc, #64]	; (800c738 <prvAddNewTaskToReadyList+0xa8>)
 800c6f6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800c6fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c6fe:	1d21      	adds	r1, r4, #4
 800c700:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c704:	f7ff f926 	bl	800b954 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c708:	f000 ffbe 	bl	800d688 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c70c:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 800c710:	b16b      	cbz	r3, 800c72e <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c712:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d207      	bcs.n	800c72e <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 800c71e:	4b07      	ldr	r3, [pc, #28]	; (800c73c <prvAddNewTaskToReadyList+0xac>)
 800c720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	f3bf 8f6f 	isb	sy
}
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 800c730:	f7ff ff82 	bl	800c638 <prvInitialiseTaskLists>
 800c734:	e7cf      	b.n	800c6d6 <prvAddNewTaskToReadyList+0x46>
 800c736:	bf00      	nop
 800c738:	20003024 	.word	0x20003024
 800c73c:	e000ed04 	.word	0xe000ed04

0800c740 <prvDeleteTCB>:
	{
 800c740:	b510      	push	{r4, lr}
 800c742:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c744:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800c748:	b163      	cbz	r3, 800c764 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d011      	beq.n	800c772 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d00e      	beq.n	800c770 <prvDeleteTCB+0x30>
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	e7fe      	b.n	800c762 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800c764:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c766:	f001 f97d 	bl	800da64 <vPortFree>
				vPortFree( pxTCB );
 800c76a:	4620      	mov	r0, r4
 800c76c:	f001 f97a 	bl	800da64 <vPortFree>
	}
 800c770:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800c772:	f001 f977 	bl	800da64 <vPortFree>
 800c776:	e7fb      	b.n	800c770 <prvDeleteTCB+0x30>

0800c778 <prvCheckTasksWaitingTermination>:
{
 800c778:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c77a:	4b0f      	ldr	r3, [pc, #60]	; (800c7b8 <prvCheckTasksWaitingTermination+0x40>)
 800c77c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800c780:	b1c3      	cbz	r3, 800c7b4 <prvCheckTasksWaitingTermination+0x3c>
			taskENTER_CRITICAL();
 800c782:	f000 ff5f 	bl	800d644 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c786:	4c0c      	ldr	r4, [pc, #48]	; (800c7b8 <prvCheckTasksWaitingTermination+0x40>)
 800c788:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 800c78c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c78e:	1d28      	adds	r0, r5, #4
 800c790:	f7ff f904 	bl	800b99c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c794:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 800c798:	3b01      	subs	r3, #1
 800c79a:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 800c79e:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 800c7a8:	f000 ff6e 	bl	800d688 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f7ff ffc7 	bl	800c740 <prvDeleteTCB>
 800c7b2:	e7e2      	b.n	800c77a <prvCheckTasksWaitingTermination+0x2>
}
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20003024 	.word	0x20003024

0800c7bc <prvIdleTask>:
{
 800c7bc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800c7be:	f7ff ffdb 	bl	800c778 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7c2:	4b06      	ldr	r3, [pc, #24]	; (800c7dc <prvIdleTask+0x20>)
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d9f9      	bls.n	800c7be <prvIdleTask+0x2>
				taskYIELD();
 800c7ca:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <prvIdleTask+0x24>)
 800c7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	e7f0      	b.n	800c7be <prvIdleTask+0x2>
 800c7dc:	20003024 	.word	0x20003024
 800c7e0:	e000ed04 	.word	0xe000ed04

0800c7e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7ea:	4b18      	ldr	r3, [pc, #96]	; (800c84c <prvAddCurrentTaskToDelayedList+0x68>)
 800c7ec:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7f0:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 800c7f4:	3004      	adds	r0, #4
 800c7f6:	f7ff f8d1 	bl	800b99c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7fa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800c7fe:	d00f      	beq.n	800c820 <prvAddCurrentTaskToDelayedList+0x3c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c800:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c802:	4b12      	ldr	r3, [pc, #72]	; (800c84c <prvAddCurrentTaskToDelayedList+0x68>)
 800c804:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800c808:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800c80a:	42a6      	cmp	r6, r4
 800c80c:	d911      	bls.n	800c832 <prvAddCurrentTaskToDelayedList+0x4e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c80e:	4b0f      	ldr	r3, [pc, #60]	; (800c84c <prvAddCurrentTaskToDelayedList+0x68>)
 800c810:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 800c814:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 800c818:	3104      	adds	r1, #4
 800c81a:	f7ff f8a6 	bl	800b96a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c820:	2d00      	cmp	r5, #0
 800c822:	d0ed      	beq.n	800c800 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c824:	4809      	ldr	r0, [pc, #36]	; (800c84c <prvAddCurrentTaskToDelayedList+0x68>)
 800c826:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 800c82a:	3104      	adds	r1, #4
 800c82c:	f7ff f892 	bl	800b954 <vListInsertEnd>
 800c830:	e7f5      	b.n	800c81e <prvAddCurrentTaskToDelayedList+0x3a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c832:	4d06      	ldr	r5, [pc, #24]	; (800c84c <prvAddCurrentTaskToDelayedList+0x68>)
 800c834:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800c836:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 800c83a:	3104      	adds	r1, #4
 800c83c:	f7ff f895 	bl	800b96a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c840:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c842:	42a3      	cmp	r3, r4
 800c844:	d9eb      	bls.n	800c81e <prvAddCurrentTaskToDelayedList+0x3a>
					xNextTaskUnblockTime = xTimeToWake;
 800c846:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800c848:	e7e9      	b.n	800c81e <prvAddCurrentTaskToDelayedList+0x3a>
 800c84a:	bf00      	nop
 800c84c:	20003024 	.word	0x20003024

0800c850 <xTaskCreateStatic>:
	{
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c856:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800c858:	b175      	cbz	r5, 800c878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c85a:	b1b4      	cbz	r4, 800c88a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c85c:	265c      	movs	r6, #92	; 0x5c
 800c85e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c860:	9e04      	ldr	r6, [sp, #16]
 800c862:	2e5c      	cmp	r6, #92	; 0x5c
 800c864:	d01a      	beq.n	800c89c <xTaskCreateStatic+0x4c>
 800c866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	e7fe      	b.n	800c876 <xTaskCreateStatic+0x26>
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800c888:	e7fe      	b.n	800c888 <xTaskCreateStatic+0x38>
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800c89a:	e7fe      	b.n	800c89a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c89c:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c89e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8a0:	2502      	movs	r5, #2
 800c8a2:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8a6:	2500      	movs	r5, #0
 800c8a8:	9503      	str	r5, [sp, #12]
 800c8aa:	9402      	str	r4, [sp, #8]
 800c8ac:	ad05      	add	r5, sp, #20
 800c8ae:	9501      	str	r5, [sp, #4]
 800c8b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8b2:	9500      	str	r5, [sp, #0]
 800c8b4:	f7ff fe72 	bl	800c59c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f7ff fee9 	bl	800c690 <prvAddNewTaskToReadyList>
	}
 800c8be:	9805      	ldr	r0, [sp, #20]
 800c8c0:	b006      	add	sp, #24
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}

0800c8c4 <xTaskCreate>:
	{
 800c8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	b085      	sub	sp, #20
 800c8ca:	4607      	mov	r7, r0
 800c8cc:	4688      	mov	r8, r1
 800c8ce:	4614      	mov	r4, r2
 800c8d0:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8d2:	0090      	lsls	r0, r2, #2
 800c8d4:	f001 f858 	bl	800d988 <pvPortMalloc>
			if( pxStack != NULL )
 800c8d8:	b300      	cbz	r0, 800c91c <xTaskCreate+0x58>
 800c8da:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8dc:	205c      	movs	r0, #92	; 0x5c
 800c8de:	f001 f853 	bl	800d988 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	b1b0      	cbz	r0, 800c914 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800c8e6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800c8ea:	b1e5      	cbz	r5, 800c926 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8f2:	9303      	str	r3, [sp, #12]
 800c8f4:	9502      	str	r5, [sp, #8]
 800c8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	4633      	mov	r3, r6
 800c900:	4622      	mov	r2, r4
 800c902:	4641      	mov	r1, r8
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff fe49 	bl	800c59c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c90a:	4628      	mov	r0, r5
 800c90c:	f7ff fec0 	bl	800c690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c910:	2001      	movs	r0, #1
 800c912:	e005      	b.n	800c920 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800c914:	4648      	mov	r0, r9
 800c916:	f001 f8a5 	bl	800da64 <vPortFree>
 800c91a:	e7e6      	b.n	800c8ea <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800c920:	b005      	add	sp, #20
 800c922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800c92a:	e7f9      	b.n	800c920 <xTaskCreate+0x5c>

0800c92c <vTaskDelete>:
	{
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800c930:	f000 fe88 	bl	800d644 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c934:	b354      	cbz	r4, 800c98c <vTaskDelete+0x60>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c936:	1d26      	adds	r6, r4, #4
 800c938:	4630      	mov	r0, r6
 800c93a:	f7ff f82f 	bl	800b99c <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c93e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c940:	b11b      	cbz	r3, 800c94a <vTaskDelete+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c942:	f104 0018 	add.w	r0, r4, #24
 800c946:	f7ff f829 	bl	800b99c <uxListRemove>
			uxTaskNumber++;
 800c94a:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <vTaskDelete+0xac>)
 800c94c:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	; 0x4dc
 800c950:	3201      	adds	r2, #1
 800c952:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
			if( pxTCB == pxCurrentTCB )
 800c956:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800c95a:	42a3      	cmp	r3, r4
 800c95c:	d01a      	beq.n	800c994 <vTaskDelete+0x68>
				--uxCurrentNumberOfTasks;
 800c95e:	4a1e      	ldr	r2, [pc, #120]	; (800c9d8 <vTaskDelete+0xac>)
 800c960:	f8d2 34d0 	ldr.w	r3, [r2, #1232]	; 0x4d0
 800c964:	3b01      	subs	r3, #1
 800c966:	f8c2 34d0 	str.w	r3, [r2, #1232]	; 0x4d0
				prvDeleteTCB( pxTCB );
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff fee8 	bl	800c740 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800c970:	f7ff fe02 	bl	800c578 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 800c974:	f000 fe88 	bl	800d688 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800c978:	4b17      	ldr	r3, [pc, #92]	; (800c9d8 <vTaskDelete+0xac>)
 800c97a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800c97e:	b123      	cbz	r3, 800c98a <vTaskDelete+0x5e>
			if( pxTCB == pxCurrentTCB )
 800c980:	4b15      	ldr	r3, [pc, #84]	; (800c9d8 <vTaskDelete+0xac>)
 800c982:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800c986:	42a3      	cmp	r3, r4
 800c988:	d010      	beq.n	800c9ac <vTaskDelete+0x80>
	}
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <vTaskDelete+0xac>)
 800c98e:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
 800c992:	e7d0      	b.n	800c936 <vTaskDelete+0xa>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c994:	4d10      	ldr	r5, [pc, #64]	; (800c9d8 <vTaskDelete+0xac>)
 800c996:	4631      	mov	r1, r6
 800c998:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 800c99c:	f7fe ffda 	bl	800b954 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800c9a0:	f8d5 34e4 	ldr.w	r3, [r5, #1252]	; 0x4e4
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 800c9aa:	e7e3      	b.n	800c974 <vTaskDelete+0x48>
				configASSERT( uxSchedulerSuspended == 0 );
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <vTaskDelete+0xac>)
 800c9ae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800c9b2:	b143      	cbz	r3, 800c9c6 <vTaskDelete+0x9a>
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	e7fe      	b.n	800c9c4 <vTaskDelete+0x98>
				portYIELD_WITHIN_API();
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <vTaskDelete+0xb0>)
 800c9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
	}
 800c9d6:	e7d8      	b.n	800c98a <vTaskDelete+0x5e>
 800c9d8:	20003024 	.word	0x20003024
 800c9dc:	e000ed04 	.word	0xe000ed04

0800c9e0 <vTaskStartScheduler>:
{
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9e4:	2400      	movs	r4, #0
 800c9e6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9e8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9ea:	aa07      	add	r2, sp, #28
 800c9ec:	a906      	add	r1, sp, #24
 800c9ee:	a805      	add	r0, sp, #20
 800c9f0:	f7fe ff84 	bl	800b8fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9f4:	9b05      	ldr	r3, [sp, #20]
 800c9f6:	9302      	str	r3, [sp, #8]
 800c9f8:	9b06      	ldr	r3, [sp, #24]
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	9400      	str	r4, [sp, #0]
 800c9fe:	4623      	mov	r3, r4
 800ca00:	9a07      	ldr	r2, [sp, #28]
 800ca02:	4917      	ldr	r1, [pc, #92]	; (800ca60 <vTaskStartScheduler+0x80>)
 800ca04:	4817      	ldr	r0, [pc, #92]	; (800ca64 <vTaskStartScheduler+0x84>)
 800ca06:	f7ff ff23 	bl	800c850 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800ca0a:	b148      	cbz	r0, 800ca20 <vTaskStartScheduler+0x40>
			xReturn = xTimerCreateTimerTask();
 800ca0c:	f000 fbec 	bl	800d1e8 <xTimerCreateTimerTask>
 800ca10:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d006      	beq.n	800ca24 <vTaskStartScheduler+0x44>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca1a:	d018      	beq.n	800ca4e <vTaskStartScheduler+0x6e>
}
 800ca1c:	b008      	add	sp, #32
 800ca1e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e7f6      	b.n	800ca12 <vTaskStartScheduler+0x32>
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca34:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <vTaskStartScheduler+0x88>)
 800ca36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca3a:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 800ca48:	f000 fe9e 	bl	800d788 <xPortStartScheduler>
 800ca4c:	e7e6      	b.n	800ca1c <vTaskStartScheduler+0x3c>
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca5e:	e7fe      	b.n	800ca5e <vTaskStartScheduler+0x7e>
 800ca60:	08013a70 	.word	0x08013a70
 800ca64:	0800c7bd 	.word	0x0800c7bd
 800ca68:	20003024 	.word	0x20003024

0800ca6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ca6c:	4a03      	ldr	r2, [pc, #12]	; (800ca7c <vTaskSuspendAll+0x10>)
 800ca6e:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 800ca72:	3301      	adds	r3, #1
 800ca74:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	20003024 	.word	0x20003024

0800ca80 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ca80:	4b01      	ldr	r3, [pc, #4]	; (800ca88 <xTaskGetTickCount+0x8>)
 800ca82:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 800ca86:	4770      	bx	lr
 800ca88:	20003024 	.word	0x20003024

0800ca8c <xTaskIncrementTick>:
{
 800ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca90:	4b41      	ldr	r3, [pc, #260]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800ca92:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d16e      	bne.n	800cb78 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca9a:	4b3f      	ldr	r3, [pc, #252]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800ca9c:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 800caa0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800caa2:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800caa6:	b9cd      	cbnz	r5, 800cadc <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 800caa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	b143      	cbz	r3, 800cac0 <xTaskIncrementTick+0x34>
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	e7fe      	b.n	800cabe <xTaskIncrementTick+0x32>
 800cac0:	4b35      	ldr	r3, [pc, #212]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cac4:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 800cac8:	6299      	str	r1, [r3, #40]	; 0x28
 800caca:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 800cace:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800cad2:	3201      	adds	r2, #1
 800cad4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800cad8:	f7ff fd4e 	bl	800c578 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cadc:	4b2e      	ldr	r3, [pc, #184]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	42ab      	cmp	r3, r5
 800cae2:	d90d      	bls.n	800cb00 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800cae4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cae6:	4a2c      	ldr	r2, [pc, #176]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cae8:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800caec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800caf2:	0099      	lsls	r1, r3, #2
 800caf4:	440a      	add	r2, r1
 800caf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d944      	bls.n	800cb86 <xTaskIncrementTick+0xfa>
				xSwitchRequired = pdTRUE;
 800cafc:	2401      	movs	r4, #1
 800cafe:	e042      	b.n	800cb86 <xTaskIncrementTick+0xfa>
BaseType_t xSwitchRequired = pdFALSE;
 800cb00:	2400      	movs	r4, #0
 800cb02:	e018      	b.n	800cb36 <xTaskIncrementTick+0xaa>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb04:	4b24      	ldr	r3, [pc, #144]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb0a:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 800cb0c:	e7eb      	b.n	800cae6 <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 800cb0e:	4a22      	ldr	r2, [pc, #136]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb10:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb12:	e7e8      	b.n	800cae6 <xTaskIncrementTick+0x5a>
					prvAddTaskToReadyList( pxTCB );
 800cb14:	4f20      	ldr	r7, [pc, #128]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cb1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cb1e:	009a      	lsls	r2, r3, #2
 800cb20:	4641      	mov	r1, r8
 800cb22:	4410      	add	r0, r2
 800cb24:	f7fe ff16 	bl	800b954 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb28:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800cb2a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d300      	bcc.n	800cb36 <xTaskIncrementTick+0xaa>
							xSwitchRequired = pdTRUE;
 800cb34:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb36:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d0e1      	beq.n	800cb04 <xTaskIncrementTick+0x78>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb40:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb48:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800cb4a:	429d      	cmp	r5, r3
 800cb4c:	d3df      	bcc.n	800cb0e <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb4e:	f106 0804 	add.w	r8, r6, #4
 800cb52:	4640      	mov	r0, r8
 800cb54:	f7fe ff22 	bl	800b99c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb58:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800cb5a:	b11b      	cbz	r3, 800cb64 <xTaskIncrementTick+0xd8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb5c:	f106 0018 	add.w	r0, r6, #24
 800cb60:	f7fe ff1c 	bl	800b99c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb64:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cb66:	4a0c      	ldr	r2, [pc, #48]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb68:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d9d1      	bls.n	800cb14 <xTaskIncrementTick+0x88>
 800cb70:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb72:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 800cb76:	e7cd      	b.n	800cb14 <xTaskIncrementTick+0x88>
		++uxPendedTicks;
 800cb78:	4a07      	ldr	r2, [pc, #28]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb7a:	f8d2 34f4 	ldr.w	r3, [r2, #1268]	; 0x4f4
 800cb7e:	3301      	adds	r3, #1
 800cb80:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
BaseType_t xSwitchRequired = pdFALSE;
 800cb84:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800cb86:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <xTaskIncrementTick+0x10c>)
 800cb88:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800cb8c:	b103      	cbz	r3, 800cb90 <xTaskIncrementTick+0x104>
			xSwitchRequired = pdTRUE;
 800cb8e:	2401      	movs	r4, #1
}
 800cb90:	4620      	mov	r0, r4
 800cb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb96:	bf00      	nop
 800cb98:	20003024 	.word	0x20003024

0800cb9c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800cb9c:	4b39      	ldr	r3, [pc, #228]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cb9e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800cba2:	b943      	cbnz	r3, 800cbb6 <xTaskResumeAll+0x1a>
 800cba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskResumeAll+0x18>
{
 800cbb6:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800cbb8:	f000 fd44 	bl	800d644 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800cbbc:	4b31      	ldr	r3, [pc, #196]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cbbe:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 800cbc2:	3a01      	subs	r2, #1
 800cbc4:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbc8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d154      	bne.n	800cc7a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cbd0:	4b2c      	ldr	r3, [pc, #176]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cbd2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800cbd6:	b90b      	cbnz	r3, 800cbdc <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800cbd8:	2400      	movs	r4, #0
 800cbda:	e04f      	b.n	800cc7c <xTaskResumeAll+0xe0>
TCB_t *pxTCB = NULL;
 800cbdc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbde:	4b29      	ldr	r3, [pc, #164]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	b32b      	cbz	r3, 800cc30 <xTaskResumeAll+0x94>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe4:	4d27      	ldr	r5, [pc, #156]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cbe6:	6a2b      	ldr	r3, [r5, #32]
 800cbe8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbea:	f104 0018 	add.w	r0, r4, #24
 800cbee:	f7fe fed5 	bl	800b99c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf2:	1d26      	adds	r6, r4, #4
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7fe fed1 	bl	800b99c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cbfc:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d901      	bls.n	800cc08 <xTaskResumeAll+0x6c>
 800cc04:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 800cc08:	4d1e      	ldr	r5, [pc, #120]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cc0a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800cc0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cc12:	4631      	mov	r1, r6
 800cc14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cc18:	f7fe fe9c 	bl	800b954 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cc1e:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d3da      	bcc.n	800cbde <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f8c5 24f8 	str.w	r2, [r5, #1272]	; 0x4f8
 800cc2e:	e7d6      	b.n	800cbde <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 800cc30:	b10c      	cbz	r4, 800cc36 <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 800cc32:	f7ff fca1 	bl	800c578 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cc36:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cc38:	f8d3 44f4 	ldr.w	r4, [r3, #1268]	; 0x4f4
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cc3c:	b97c      	cbnz	r4, 800cc5e <xTaskResumeAll+0xc2>
				if( xYieldPending != pdFALSE )
 800cc3e:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cc40:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
 800cc44:	b1d4      	cbz	r4, 800cc7c <xTaskResumeAll+0xe0>
					taskYIELD_IF_USING_PREEMPTION();
 800cc46:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <xTaskResumeAll+0xec>)
 800cc48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800cc56:	2401      	movs	r4, #1
 800cc58:	e010      	b.n	800cc7c <xTaskResumeAll+0xe0>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc5a:	3c01      	subs	r4, #1
 800cc5c:	d008      	beq.n	800cc70 <xTaskResumeAll+0xd4>
							if( xTaskIncrementTick() != pdFALSE )
 800cc5e:	f7ff ff15 	bl	800ca8c <xTaskIncrementTick>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d0f9      	beq.n	800cc5a <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800cc66:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cc68:	2201      	movs	r2, #1
 800cc6a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800cc6e:	e7f4      	b.n	800cc5a <xTaskResumeAll+0xbe>
						uxPendedTicks = 0;
 800cc70:	4b04      	ldr	r3, [pc, #16]	; (800cc84 <xTaskResumeAll+0xe8>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 800cc78:	e7e1      	b.n	800cc3e <xTaskResumeAll+0xa2>
BaseType_t xAlreadyYielded = pdFALSE;
 800cc7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cc7c:	f000 fd04 	bl	800d688 <vPortExitCritical>
}
 800cc80:	4620      	mov	r0, r4
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
 800cc84:	20003024 	.word	0x20003024
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <vTaskDelay>:
	{
 800cc8c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc8e:	b1b0      	cbz	r0, 800ccbe <vTaskDelay+0x32>
 800cc90:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <vTaskDelay+0x44>)
 800cc94:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800cc98:	b143      	cbz	r3, 800ccac <vTaskDelay+0x20>
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	e7fe      	b.n	800ccaa <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800ccac:	f7ff fede 	bl	800ca6c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f7ff fd96 	bl	800c7e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ccb8:	f7ff ff70 	bl	800cb9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ccbc:	b938      	cbnz	r0, 800ccce <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 800ccbe:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <vTaskDelay+0x48>)
 800ccc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	f3bf 8f6f 	isb	sy
	}
 800ccce:	bd10      	pop	{r4, pc}
 800ccd0:	20003024 	.word	0x20003024
 800ccd4:	e000ed04 	.word	0xe000ed04

0800ccd8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccd8:	4b21      	ldr	r3, [pc, #132]	; (800cd60 <vTaskSwitchContext+0x88>)
 800ccda:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800ccde:	b123      	cbz	r3, 800ccea <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800cce0:	4b1f      	ldr	r3, [pc, #124]	; (800cd60 <vTaskSwitchContext+0x88>)
 800cce2:	2201      	movs	r2, #1
 800cce4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800cce8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800ccea:	4b1d      	ldr	r3, [pc, #116]	; (800cd60 <vTaskSwitchContext+0x88>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ccf6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800ccfa:	0091      	lsls	r1, r2, #2
 800ccfc:	4a18      	ldr	r2, [pc, #96]	; (800cd60 <vTaskSwitchContext+0x88>)
 800ccfe:	440a      	add	r2, r1
 800cd00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd02:	b95a      	cbnz	r2, 800cd1c <vTaskSwitchContext+0x44>
 800cd04:	b10b      	cbz	r3, 800cd0a <vTaskSwitchContext+0x32>
 800cd06:	3b01      	subs	r3, #1
 800cd08:	e7f5      	b.n	800ccf6 <vTaskSwitchContext+0x1e>
 800cd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0e:	f383 8811 	msr	BASEPRI, r3
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	e7fe      	b.n	800cd1a <vTaskSwitchContext+0x42>
{
 800cd1c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1e:	4a10      	ldr	r2, [pc, #64]	; (800cd60 <vTaskSwitchContext+0x88>)
 800cd20:	4411      	add	r1, r2
 800cd22:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800cd24:	6840      	ldr	r0, [r0, #4]
 800cd26:	6348      	str	r0, [r1, #52]	; 0x34
 800cd28:	3230      	adds	r2, #48	; 0x30
 800cd2a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800cd2e:	00a1      	lsls	r1, r4, #2
 800cd30:	460c      	mov	r4, r1
 800cd32:	3108      	adds	r1, #8
 800cd34:	440a      	add	r2, r1
 800cd36:	4290      	cmp	r0, r2
 800cd38:	d00d      	beq.n	800cd56 <vTaskSwitchContext+0x7e>
 800cd3a:	4909      	ldr	r1, [pc, #36]	; (800cd60 <vTaskSwitchContext+0x88>)
 800cd3c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800cd40:	0082      	lsls	r2, r0, #2
 800cd42:	440a      	add	r2, r1
 800cd44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cd46:	68d2      	ldr	r2, [r2, #12]
 800cd48:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 800cd4c:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 800cd50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd54:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd56:	6840      	ldr	r0, [r0, #4]
 800cd58:	4a01      	ldr	r2, [pc, #4]	; (800cd60 <vTaskSwitchContext+0x88>)
 800cd5a:	4422      	add	r2, r4
 800cd5c:	6350      	str	r0, [r2, #52]	; 0x34
 800cd5e:	e7ec      	b.n	800cd3a <vTaskSwitchContext+0x62>
 800cd60:	20003024 	.word	0x20003024

0800cd64 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800cd64:	b160      	cbz	r0, 800cd80 <vTaskPlaceOnEventList+0x1c>
{
 800cd66:	b510      	push	{r4, lr}
 800cd68:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd6a:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <vTaskPlaceOnEventList+0x30>)
 800cd6c:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 800cd70:	3118      	adds	r1, #24
 800cd72:	f7fe fdfa 	bl	800b96a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd76:	2101      	movs	r1, #1
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f7ff fd33 	bl	800c7e4 <prvAddCurrentTaskToDelayedList>
}
 800cd7e:	bd10      	pop	{r4, pc}
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800cd90:	e7fe      	b.n	800cd90 <vTaskPlaceOnEventList+0x2c>
 800cd92:	bf00      	nop
 800cd94:	20003024 	.word	0x20003024

0800cd98 <vTaskPlaceOnEventListRestricted>:
	{
 800cd98:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800cd9a:	b178      	cbz	r0, 800cdbc <vTaskPlaceOnEventListRestricted+0x24>
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cda0:	4b0b      	ldr	r3, [pc, #44]	; (800cdd0 <vTaskPlaceOnEventListRestricted+0x38>)
 800cda2:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 800cda6:	3118      	adds	r1, #24
 800cda8:	f7fe fdd4 	bl	800b954 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800cdac:	b10d      	cbz	r5, 800cdb2 <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 800cdae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f7ff fd15 	bl	800c7e4 <prvAddCurrentTaskToDelayedList>
	}
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800cdcc:	e7fe      	b.n	800cdcc <vTaskPlaceOnEventListRestricted+0x34>
 800cdce:	bf00      	nop
 800cdd0:	20003024 	.word	0x20003024

0800cdd4 <xTaskRemoveFromEventList>:
{
 800cdd4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd6:	68c3      	ldr	r3, [r0, #12]
 800cdd8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cdda:	b34c      	cbz	r4, 800ce30 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cddc:	f104 0518 	add.w	r5, r4, #24
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7fe fddb 	bl	800b99c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cde6:	4b1a      	ldr	r3, [pc, #104]	; (800ce50 <xTaskRemoveFromEventList+0x7c>)
 800cde8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800cdec:	bb4b      	cbnz	r3, 800ce42 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdee:	1d25      	adds	r5, r4, #4
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	f7fe fdd3 	bl	800b99c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdf6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <xTaskRemoveFromEventList+0x7c>)
 800cdfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cdfe:	4298      	cmp	r0, r3
 800ce00:	d902      	bls.n	800ce08 <xTaskRemoveFromEventList+0x34>
 800ce02:	4b13      	ldr	r3, [pc, #76]	; (800ce50 <xTaskRemoveFromEventList+0x7c>)
 800ce04:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800ce08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4b11      	ldr	r3, [pc, #68]	; (800ce54 <xTaskRemoveFromEventList+0x80>)
 800ce10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce14:	f7fe fd9e 	bl	800b954 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ce1a:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <xTaskRemoveFromEventList+0x7c>)
 800ce1c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d912      	bls.n	800ce4c <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 800ce26:	2001      	movs	r0, #1
 800ce28:	4b09      	ldr	r3, [pc, #36]	; (800ce50 <xTaskRemoveFromEventList+0x7c>)
 800ce2a:	f8c3 04f8 	str.w	r0, [r3, #1272]	; 0x4f8
 800ce2e:	e00e      	b.n	800ce4e <xTaskRemoveFromEventList+0x7a>
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800ce40:	e7fe      	b.n	800ce40 <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce42:	4629      	mov	r1, r5
 800ce44:	4804      	ldr	r0, [pc, #16]	; (800ce58 <xTaskRemoveFromEventList+0x84>)
 800ce46:	f7fe fd85 	bl	800b954 <vListInsertEnd>
 800ce4a:	e7e5      	b.n	800ce18 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 800ce4c:	2000      	movs	r0, #0
}
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	20003024 	.word	0x20003024
 800ce54:	20003054 	.word	0x20003054
 800ce58:	20003038 	.word	0x20003038

0800ce5c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce5c:	4b03      	ldr	r3, [pc, #12]	; (800ce6c <vTaskInternalSetTimeOutState+0x10>)
 800ce5e:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800ce62:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce64:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ce68:	6043      	str	r3, [r0, #4]
}
 800ce6a:	4770      	bx	lr
 800ce6c:	20003024 	.word	0x20003024

0800ce70 <xTaskCheckForTimeOut>:
{
 800ce70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800ce72:	b1d8      	cbz	r0, 800ceac <xTaskCheckForTimeOut+0x3c>
 800ce74:	460c      	mov	r4, r1
 800ce76:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800ce78:	b309      	cbz	r1, 800cebe <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800ce7a:	f000 fbe3 	bl	800d644 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ce7e:	4b1c      	ldr	r3, [pc, #112]	; (800cef0 <xTaskCheckForTimeOut+0x80>)
 800ce80:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce84:	686b      	ldr	r3, [r5, #4]
 800ce86:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800ce88:	6822      	ldr	r2, [r4, #0]
 800ce8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ce8e:	d027      	beq.n	800cee0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce90:	682f      	ldr	r7, [r5, #0]
 800ce92:	4e17      	ldr	r6, [pc, #92]	; (800cef0 <xTaskCheckForTimeOut+0x80>)
 800ce94:	f8d6 64f0 	ldr.w	r6, [r6, #1264]	; 0x4f0
 800ce98:	42b7      	cmp	r7, r6
 800ce9a:	d001      	beq.n	800cea0 <xTaskCheckForTimeOut+0x30>
 800ce9c:	428b      	cmp	r3, r1
 800ce9e:	d924      	bls.n	800ceea <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cea0:	4282      	cmp	r2, r0
 800cea2:	d815      	bhi.n	800ced0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cea8:	2401      	movs	r4, #1
 800ceaa:	e01a      	b.n	800cee2 <xTaskCheckForTimeOut+0x72>
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800cebc:	e7fe      	b.n	800cebc <xTaskCheckForTimeOut+0x4c>
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800cece:	e7fe      	b.n	800cece <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 800ced0:	1a5b      	subs	r3, r3, r1
 800ced2:	4413      	add	r3, r2
 800ced4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ced6:	4628      	mov	r0, r5
 800ced8:	f7ff ffc0 	bl	800ce5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cedc:	2400      	movs	r4, #0
 800cede:	e000      	b.n	800cee2 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 800cee0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cee2:	f000 fbd1 	bl	800d688 <vPortExitCritical>
}
 800cee6:	4620      	mov	r0, r4
 800cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800ceea:	2401      	movs	r4, #1
 800ceec:	e7f9      	b.n	800cee2 <xTaskCheckForTimeOut+0x72>
 800ceee:	bf00      	nop
 800cef0:	20003024 	.word	0x20003024

0800cef4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <vTaskMissedYield+0xc>)
 800cef6:	2201      	movs	r2, #1
 800cef8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
}
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	20003024 	.word	0x20003024

0800cf04 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800cf04:	4b01      	ldr	r3, [pc, #4]	; (800cf0c <xTaskGetCurrentTaskHandle+0x8>)
 800cf06:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 800cf0a:	4770      	bx	lr
 800cf0c:	20003024 	.word	0x20003024

0800cf10 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cf10:	4b06      	ldr	r3, [pc, #24]	; (800cf2c <xTaskGetSchedulerState+0x1c>)
 800cf12:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800cf16:	b13b      	cbz	r3, 800cf28 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf18:	4b04      	ldr	r3, [pc, #16]	; (800cf2c <xTaskGetSchedulerState+0x1c>)
 800cf1a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800cf1e:	b10b      	cbz	r3, 800cf24 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf20:	2000      	movs	r0, #0
	}
 800cf22:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800cf24:	2002      	movs	r0, #2
 800cf26:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf28:	2001      	movs	r0, #1
 800cf2a:	4770      	bx	lr
 800cf2c:	20003024 	.word	0x20003024

0800cf30 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d044      	beq.n	800cfbe <xTaskPriorityInherit+0x8e>
	{
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cf38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cf3a:	4a23      	ldr	r2, [pc, #140]	; (800cfc8 <xTaskPriorityInherit+0x98>)
 800cf3c:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 800cf40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d232      	bcs.n	800cfac <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf46:	6982      	ldr	r2, [r0, #24]
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	db06      	blt.n	800cf5a <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf4c:	4a1e      	ldr	r2, [pc, #120]	; (800cfc8 <xTaskPriorityInherit+0x98>)
 800cf4e:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 800cf52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf54:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800cf58:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cf5a:	6961      	ldr	r1, [r4, #20]
 800cf5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cf60:	4a1a      	ldr	r2, [pc, #104]	; (800cfcc <xTaskPriorityInherit+0x9c>)
 800cf62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf66:	4299      	cmp	r1, r3
 800cf68:	d006      	beq.n	800cf78 <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf6a:	4b17      	ldr	r3, [pc, #92]	; (800cfc8 <xTaskPriorityInherit+0x98>)
 800cf6c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800cf74:	2001      	movs	r0, #1
	}
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf78:	1d25      	adds	r5, r4, #4
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	f7fe fd0e 	bl	800b99c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf80:	4b11      	ldr	r3, [pc, #68]	; (800cfc8 <xTaskPriorityInherit+0x98>)
 800cf82:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 800cf86:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800cf88:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf8e:	4298      	cmp	r0, r3
 800cf90:	d902      	bls.n	800cf98 <xTaskPriorityInherit+0x68>
 800cf92:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <xTaskPriorityInherit+0x98>)
 800cf94:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800cf98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <xTaskPriorityInherit+0x9c>)
 800cfa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfa4:	f7fe fcd6 	bl	800b954 <vListInsertEnd>
				xReturn = pdTRUE;
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	e7e4      	b.n	800cf76 <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cfac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800cfae:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <xTaskPriorityInherit+0x98>)
 800cfb0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d303      	bcc.n	800cfc2 <xTaskPriorityInherit+0x92>
	BaseType_t xReturn = pdFALSE;
 800cfba:	2000      	movs	r0, #0
 800cfbc:	e7db      	b.n	800cf76 <xTaskPriorityInherit+0x46>
 800cfbe:	2000      	movs	r0, #0
	}
 800cfc0:	4770      	bx	lr
					xReturn = pdTRUE;
 800cfc2:	2001      	movs	r0, #1
		return xReturn;
 800cfc4:	e7d7      	b.n	800cf76 <xTaskPriorityInherit+0x46>
 800cfc6:	bf00      	nop
 800cfc8:	20003024 	.word	0x20003024
 800cfcc:	20003054 	.word	0x20003054

0800cfd0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d03e      	beq.n	800d052 <xTaskPriorityDisinherit+0x82>
	{
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800cfd8:	4b20      	ldr	r3, [pc, #128]	; (800d05c <xTaskPriorityDisinherit+0x8c>)
 800cfda:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800cfde:	4283      	cmp	r3, r0
 800cfe0:	d008      	beq.n	800cff4 <xTaskPriorityDisinherit+0x24>
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	e7fe      	b.n	800cff2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800cff4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800cff6:	b943      	cbnz	r3, 800d00a <xTaskPriorityDisinherit+0x3a>
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	e7fe      	b.n	800d008 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 800d00a:	3b01      	subs	r3, #1
 800d00c:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d00e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d010:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d012:	4291      	cmp	r1, r2
 800d014:	d01f      	beq.n	800d056 <xTaskPriorityDisinherit+0x86>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d016:	b10b      	cbz	r3, 800d01c <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 800d018:	2000      	movs	r0, #0
	}
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d01c:	1d05      	adds	r5, r0, #4
 800d01e:	4628      	mov	r0, r5
 800d020:	f7fe fcbc 	bl	800b99c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d024:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d026:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d028:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800d02c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d02e:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <xTaskPriorityDisinherit+0x8c>)
 800d030:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800d034:	4298      	cmp	r0, r3
 800d036:	d902      	bls.n	800d03e <xTaskPriorityDisinherit+0x6e>
 800d038:	4b08      	ldr	r3, [pc, #32]	; (800d05c <xTaskPriorityDisinherit+0x8c>)
 800d03a:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800d03e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d042:	4629      	mov	r1, r5
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <xTaskPriorityDisinherit+0x90>)
 800d046:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d04a:	f7fe fc83 	bl	800b954 <vListInsertEnd>
					xReturn = pdTRUE;
 800d04e:	2001      	movs	r0, #1
 800d050:	e7e3      	b.n	800d01a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d052:	2000      	movs	r0, #0
	}
 800d054:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800d056:	2000      	movs	r0, #0
 800d058:	e7df      	b.n	800d01a <xTaskPriorityDisinherit+0x4a>
 800d05a:	bf00      	nop
 800d05c:	20003024 	.word	0x20003024
 800d060:	20003054 	.word	0x20003054

0800d064 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800d064:	2800      	cmp	r0, #0
 800d066:	d04a      	beq.n	800d0fe <vTaskPriorityDisinheritAfterTimeout+0x9a>
	{
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	460a      	mov	r2, r1
 800d06c:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800d06e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800d070:	b941      	cbnz	r1, 800d084 <vTaskPriorityDisinheritAfterTimeout+0x20>
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	e7fe      	b.n	800d082 <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d084:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d086:	4293      	cmp	r3, r2
 800d088:	d200      	bcs.n	800d08c <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d08a:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d08c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d08e:	429a      	cmp	r2, r3
 800d090:	d001      	beq.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d092:	2901      	cmp	r1, #1
 800d094:	d000      	beq.n	800d098 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 800d096:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800d098:	4919      	ldr	r1, [pc, #100]	; (800d100 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d09a:	f8d1 14d4 	ldr.w	r1, [r1, #1236]	; 0x4d4
 800d09e:	42a1      	cmp	r1, r4
 800d0a0:	d024      	beq.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0x88>
					pxTCB->uxPriority = uxPriorityToUse;
 800d0a2:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0a4:	69a1      	ldr	r1, [r4, #24]
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	db02      	blt.n	800d0b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0aa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d0ae:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d0b0:	6961      	ldr	r1, [r4, #20]
 800d0b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d0b6:	4b13      	ldr	r3, [pc, #76]	; (800d104 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800d0b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d0bc:	4291      	cmp	r1, r2
 800d0be:	d1ea      	bne.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0c0:	1d25      	adds	r5, r4, #4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f7fe fc6a 	bl	800b99c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d0c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d0ca:	4b0d      	ldr	r3, [pc, #52]	; (800d100 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d0cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800d0d0:	4298      	cmp	r0, r3
 800d0d2:	d902      	bls.n	800d0da <vTaskPriorityDisinheritAfterTimeout+0x76>
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d0d6:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800d0da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800d0e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0e6:	f7fe fc35 	bl	800b954 <vListInsertEnd>
	}
 800d0ea:	e7d4      	b.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x32>
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800d0fc:	e7fe      	b.n	800d0fc <vTaskPriorityDisinheritAfterTimeout+0x98>
 800d0fe:	4770      	bx	lr
 800d100:	20003024 	.word	0x20003024
 800d104:	20003054 	.word	0x20003054

0800d108 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <pvTaskIncrementMutexHeldCount+0x1c>)
 800d10a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800d10e:	b12b      	cbz	r3, 800d11c <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d110:	4b04      	ldr	r3, [pc, #16]	; (800d124 <pvTaskIncrementMutexHeldCount+0x1c>)
 800d112:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 800d116:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d118:	3301      	adds	r3, #1
 800d11a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800d11c:	4b01      	ldr	r3, [pc, #4]	; (800d124 <pvTaskIncrementMutexHeldCount+0x1c>)
 800d11e:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 800d122:	4770      	bx	lr
 800d124:	20003024 	.word	0x20003024

0800d128 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d128:	4b06      	ldr	r3, [pc, #24]	; (800d144 <prvGetNextExpireTime+0x1c>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6813      	ldr	r3, [r2, #0]
 800d12e:	b92b      	cbnz	r3, 800d13c <prvGetNextExpireTime+0x14>
 800d130:	2301      	movs	r3, #1
 800d132:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d134:	b923      	cbnz	r3, 800d140 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d136:	68d3      	ldr	r3, [r2, #12]
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d13c:	2300      	movs	r3, #0
 800d13e:	e7f8      	b.n	800d132 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d140:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800d142:	4770      	bx	lr
 800d144:	20003520 	.word	0x20003520

0800d148 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d148:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d14a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d14c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d14e:	4291      	cmp	r1, r2
 800d150:	d80c      	bhi.n	800d16c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d152:	1ad2      	subs	r2, r2, r3
 800d154:	6983      	ldr	r3, [r0, #24]
 800d156:	429a      	cmp	r2, r3
 800d158:	d301      	bcc.n	800d15e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d15a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800d15c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d15e:	1d01      	adds	r1, r0, #4
 800d160:	4b09      	ldr	r3, [pc, #36]	; (800d188 <prvInsertTimerInActiveList+0x40>)
 800d162:	6858      	ldr	r0, [r3, #4]
 800d164:	f7fe fc01 	bl	800b96a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d168:	2000      	movs	r0, #0
 800d16a:	e7f7      	b.n	800d15c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d201      	bcs.n	800d174 <prvInsertTimerInActiveList+0x2c>
 800d170:	4299      	cmp	r1, r3
 800d172:	d206      	bcs.n	800d182 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d174:	1d01      	adds	r1, r0, #4
 800d176:	4b04      	ldr	r3, [pc, #16]	; (800d188 <prvInsertTimerInActiveList+0x40>)
 800d178:	6818      	ldr	r0, [r3, #0]
 800d17a:	f7fe fbf6 	bl	800b96a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d17e:	2000      	movs	r0, #0
 800d180:	e7ec      	b.n	800d15c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800d182:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d184:	e7ea      	b.n	800d15c <prvInsertTimerInActiveList+0x14>
 800d186:	bf00      	nop
 800d188:	20003520 	.word	0x20003520

0800d18c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d190:	f000 fa58 	bl	800d644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d194:	4b12      	ldr	r3, [pc, #72]	; (800d1e0 <prvCheckForValidListAndQueue+0x54>)
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	b11b      	cbz	r3, 800d1a2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d19a:	f000 fa75 	bl	800d688 <vPortExitCritical>
}
 800d19e:	b002      	add	sp, #8
 800d1a0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800d1a2:	4c0f      	ldr	r4, [pc, #60]	; (800d1e0 <prvCheckForValidListAndQueue+0x54>)
 800d1a4:	f104 060c 	add.w	r6, r4, #12
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f7fe fbc5 	bl	800b938 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1ae:	f104 0520 	add.w	r5, r4, #32
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f7fe fbc0 	bl	800b938 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1b8:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1ba:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1bc:	2300      	movs	r3, #0
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800d1c4:	f104 0284 	add.w	r2, r4, #132	; 0x84
 800d1c8:	2110      	movs	r1, #16
 800d1ca:	200a      	movs	r0, #10
 800d1cc:	f7fe fcf5 	bl	800bbba <xQueueGenericCreateStatic>
 800d1d0:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0e1      	beq.n	800d19a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1d6:	4903      	ldr	r1, [pc, #12]	; (800d1e4 <prvCheckForValidListAndQueue+0x58>)
 800d1d8:	f7ff f964 	bl	800c4a4 <vQueueAddToRegistry>
 800d1dc:	e7dd      	b.n	800d19a <prvCheckForValidListAndQueue+0xe>
 800d1de:	bf00      	nop
 800d1e0:	20003520 	.word	0x20003520
 800d1e4:	08013a78 	.word	0x08013a78

0800d1e8 <xTimerCreateTimerTask>:
{
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d1ec:	f7ff ffce 	bl	800d18c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d1f0:	4b13      	ldr	r3, [pc, #76]	; (800d240 <xTimerCreateTimerTask+0x58>)
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	b1d3      	cbz	r3, 800d22c <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d1fa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d1fc:	aa07      	add	r2, sp, #28
 800d1fe:	a906      	add	r1, sp, #24
 800d200:	a805      	add	r0, sp, #20
 800d202:	f7fe fb89 	bl	800b918 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d206:	9b05      	ldr	r3, [sp, #20]
 800d208:	9302      	str	r3, [sp, #8]
 800d20a:	9b06      	ldr	r3, [sp, #24]
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	2302      	movs	r3, #2
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	4623      	mov	r3, r4
 800d214:	9a07      	ldr	r2, [sp, #28]
 800d216:	490b      	ldr	r1, [pc, #44]	; (800d244 <xTimerCreateTimerTask+0x5c>)
 800d218:	480b      	ldr	r0, [pc, #44]	; (800d248 <xTimerCreateTimerTask+0x60>)
 800d21a:	f7ff fb19 	bl	800c850 <xTaskCreateStatic>
 800d21e:	4a08      	ldr	r2, [pc, #32]	; (800d240 <xTimerCreateTimerTask+0x58>)
 800d220:	f8c2 0124 	str.w	r0, [r2, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 800d224:	b110      	cbz	r0, 800d22c <xTimerCreateTimerTask+0x44>
}
 800d226:	2001      	movs	r0, #1
 800d228:	b008      	add	sp, #32
 800d22a:	bd10      	pop	{r4, pc}
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d23c:	e7fe      	b.n	800d23c <xTimerCreateTimerTask+0x54>
 800d23e:	bf00      	nop
 800d240:	20003520 	.word	0x20003520
 800d244:	08013a80 	.word	0x08013a80
 800d248:	0800d55d 	.word	0x0800d55d

0800d24c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800d24c:	b1c0      	cbz	r0, 800d280 <xTimerGenericCommand+0x34>
{
 800d24e:	b510      	push	{r4, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	4614      	mov	r4, r2
 800d254:	461a      	mov	r2, r3
 800d256:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800d258:	4816      	ldr	r0, [pc, #88]	; (800d2b4 <xTimerGenericCommand+0x68>)
 800d25a:	6880      	ldr	r0, [r0, #8]
 800d25c:	b338      	cbz	r0, 800d2ae <xTimerGenericCommand+0x62>
		xMessage.xMessageID = xCommandID;
 800d25e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d260:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d262:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d264:	2905      	cmp	r1, #5
 800d266:	dc1c      	bgt.n	800d2a2 <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d268:	f7ff fe52 	bl	800cf10 <xTaskGetSchedulerState>
 800d26c:	2802      	cmp	r0, #2
 800d26e:	d010      	beq.n	800d292 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d270:	2300      	movs	r3, #0
 800d272:	461a      	mov	r2, r3
 800d274:	4669      	mov	r1, sp
 800d276:	480f      	ldr	r0, [pc, #60]	; (800d2b4 <xTimerGenericCommand+0x68>)
 800d278:	6880      	ldr	r0, [r0, #8]
 800d27a:	f7fe fd55 	bl	800bd28 <xQueueGenericSend>
 800d27e:	e014      	b.n	800d2aa <xTimerGenericCommand+0x5e>
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800d290:	e7fe      	b.n	800d290 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d292:	2300      	movs	r3, #0
 800d294:	9a06      	ldr	r2, [sp, #24]
 800d296:	4669      	mov	r1, sp
 800d298:	4806      	ldr	r0, [pc, #24]	; (800d2b4 <xTimerGenericCommand+0x68>)
 800d29a:	6880      	ldr	r0, [r0, #8]
 800d29c:	f7fe fd44 	bl	800bd28 <xQueueGenericSend>
 800d2a0:	e003      	b.n	800d2aa <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	4669      	mov	r1, sp
 800d2a6:	f7fe fe45 	bl	800bf34 <xQueueGenericSendFromISR>
}
 800d2aa:	b004      	add	sp, #16
 800d2ac:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
 800d2ae:	2000      	movs	r0, #0
	return xReturn;
 800d2b0:	e7fb      	b.n	800d2aa <xTimerGenericCommand+0x5e>
 800d2b2:	bf00      	nop
 800d2b4:	20003520 	.word	0x20003520

0800d2b8 <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2b8:	4b21      	ldr	r3, [pc, #132]	; (800d340 <prvSwitchTimerLists+0x88>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	d039      	beq.n	800d336 <prvSwitchTimerLists+0x7e>
{
 800d2c2:	b570      	push	{r4, r5, r6, lr}
 800d2c4:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ca:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2cc:	1d25      	adds	r5, r4, #4
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f7fe fb64 	bl	800b99c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2d4:	6a23      	ldr	r3, [r4, #32]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d2de:	f013 0f04 	tst.w	r3, #4
 800d2e2:	d10a      	bne.n	800d2fa <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2e4:	4b16      	ldr	r3, [pc, #88]	; (800d340 <prvSwitchTimerLists+0x88>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	d1eb      	bne.n	800d2c6 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 800d2ee:	4a14      	ldr	r2, [pc, #80]	; (800d340 <prvSwitchTimerLists+0x88>)
 800d2f0:	6851      	ldr	r1, [r2, #4]
 800d2f2:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d2f4:	6053      	str	r3, [r2, #4]
}
 800d2f6:	b002      	add	sp, #8
 800d2f8:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2fa:	69a3      	ldr	r3, [r4, #24]
 800d2fc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800d2fe:	429e      	cmp	r6, r3
 800d300:	d207      	bcs.n	800d312 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d302:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d304:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d306:	4629      	mov	r1, r5
 800d308:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <prvSwitchTimerLists+0x88>)
 800d30a:	6818      	ldr	r0, [r3, #0]
 800d30c:	f7fe fb2d 	bl	800b96a <vListInsert>
 800d310:	e7e8      	b.n	800d2e4 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d312:	2100      	movs	r1, #0
 800d314:	9100      	str	r1, [sp, #0]
 800d316:	460b      	mov	r3, r1
 800d318:	4632      	mov	r2, r6
 800d31a:	4620      	mov	r0, r4
 800d31c:	f7ff ff96 	bl	800d24c <xTimerGenericCommand>
				configASSERT( xResult );
 800d320:	2800      	cmp	r0, #0
 800d322:	d1df      	bne.n	800d2e4 <prvSwitchTimerLists+0x2c>
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	e7fe      	b.n	800d334 <prvSwitchTimerLists+0x7c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d336:	4a02      	ldr	r2, [pc, #8]	; (800d340 <prvSwitchTimerLists+0x88>)
 800d338:	6851      	ldr	r1, [r2, #4]
 800d33a:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d33c:	6053      	str	r3, [r2, #4]
 800d33e:	4770      	bx	lr
 800d340:	20003520 	.word	0x20003520

0800d344 <prvSampleTimeNow>:
{
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800d348:	f7ff fb9a 	bl	800ca80 <xTaskGetTickCount>
 800d34c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800d34e:	4b08      	ldr	r3, [pc, #32]	; (800d370 <prvSampleTimeNow+0x2c>)
 800d350:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800d354:	4283      	cmp	r3, r0
 800d356:	d806      	bhi.n	800d366 <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 800d358:	2300      	movs	r3, #0
 800d35a:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800d35c:	4b04      	ldr	r3, [pc, #16]	; (800d370 <prvSampleTimeNow+0x2c>)
 800d35e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 800d362:	4620      	mov	r0, r4
 800d364:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800d366:	f7ff ffa7 	bl	800d2b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d36a:	2301      	movs	r3, #1
 800d36c:	602b      	str	r3, [r5, #0]
 800d36e:	e7f5      	b.n	800d35c <prvSampleTimeNow+0x18>
 800d370:	20003520 	.word	0x20003520

0800d374 <prvProcessExpiredTimer>:
{
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	4605      	mov	r5, r0
 800d37a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d37c:	4b17      	ldr	r3, [pc, #92]	; (800d3dc <prvProcessExpiredTimer+0x68>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d384:	1d20      	adds	r0, r4, #4
 800d386:	f7fe fb09 	bl	800b99c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d38a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d38e:	f013 0f04 	tst.w	r3, #4
 800d392:	d108      	bne.n	800d3a6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d394:	f023 0301 	bic.w	r3, r3, #1
 800d398:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d39c:	6a23      	ldr	r3, [r4, #32]
 800d39e:	4620      	mov	r0, r4
 800d3a0:	4798      	blx	r3
}
 800d3a2:	b002      	add	sp, #8
 800d3a4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3a6:	69a1      	ldr	r1, [r4, #24]
 800d3a8:	462b      	mov	r3, r5
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	4429      	add	r1, r5
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f7ff feca 	bl	800d148 <prvInsertTimerInActiveList>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d0f1      	beq.n	800d39c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	9100      	str	r1, [sp, #0]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	462a      	mov	r2, r5
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f7ff ff43 	bl	800d24c <xTimerGenericCommand>
			configASSERT( xResult );
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d1e8      	bne.n	800d39c <prvProcessExpiredTimer+0x28>
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	e7fe      	b.n	800d3da <prvProcessExpiredTimer+0x66>
 800d3dc:	20003520 	.word	0x20003520

0800d3e0 <prvProcessTimerOrBlockTask>:
{
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800d3e8:	f7ff fb40 	bl	800ca6c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3ec:	a801      	add	r0, sp, #4
 800d3ee:	f7ff ffa9 	bl	800d344 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d3f2:	9b01      	ldr	r3, [sp, #4]
 800d3f4:	bb23      	cbnz	r3, 800d440 <prvProcessTimerOrBlockTask+0x60>
 800d3f6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d3f8:	b90c      	cbnz	r4, 800d3fe <prvProcessTimerOrBlockTask+0x1e>
 800d3fa:	42b0      	cmp	r0, r6
 800d3fc:	d217      	bcs.n	800d42e <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800d3fe:	b124      	cbz	r4, 800d40a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d400:	4a11      	ldr	r2, [pc, #68]	; (800d448 <prvProcessTimerOrBlockTask+0x68>)
 800d402:	6852      	ldr	r2, [r2, #4]
 800d404:	6812      	ldr	r2, [r2, #0]
 800d406:	b9ca      	cbnz	r2, 800d43c <prvProcessTimerOrBlockTask+0x5c>
 800d408:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d40a:	4622      	mov	r2, r4
 800d40c:	1b71      	subs	r1, r6, r5
 800d40e:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <prvProcessTimerOrBlockTask+0x68>)
 800d410:	6898      	ldr	r0, [r3, #8]
 800d412:	f7ff f887 	bl	800c524 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d416:	f7ff fbc1 	bl	800cb9c <xTaskResumeAll>
 800d41a:	b998      	cbnz	r0, 800d444 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800d41c:	4b0b      	ldr	r3, [pc, #44]	; (800d44c <prvProcessTimerOrBlockTask+0x6c>)
 800d41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f3bf 8f4f 	dsb	sy
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	e00a      	b.n	800d444 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800d42e:	f7ff fbb5 	bl	800cb9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d432:	4629      	mov	r1, r5
 800d434:	4630      	mov	r0, r6
 800d436:	f7ff ff9d 	bl	800d374 <prvProcessExpiredTimer>
 800d43a:	e003      	b.n	800d444 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d43c:	461c      	mov	r4, r3
 800d43e:	e7e4      	b.n	800d40a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800d440:	f7ff fbac 	bl	800cb9c <xTaskResumeAll>
}
 800d444:	b002      	add	sp, #8
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	20003520 	.word	0x20003520
 800d44c:	e000ed04 	.word	0xe000ed04

0800d450 <prvProcessReceivedCommands>:
{
 800d450:	b510      	push	{r4, lr}
 800d452:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d454:	e006      	b.n	800d464 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d456:	9907      	ldr	r1, [sp, #28]
 800d458:	9806      	ldr	r0, [sp, #24]
 800d45a:	9b05      	ldr	r3, [sp, #20]
 800d45c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	da0b      	bge.n	800d47c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d464:	2200      	movs	r2, #0
 800d466:	a904      	add	r1, sp, #16
 800d468:	4b3b      	ldr	r3, [pc, #236]	; (800d558 <prvProcessReceivedCommands+0x108>)
 800d46a:	6898      	ldr	r0, [r3, #8]
 800d46c:	f7fe fe22 	bl	800c0b4 <xQueueReceive>
 800d470:	2800      	cmp	r0, #0
 800d472:	d06f      	beq.n	800d554 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d474:	9b04      	ldr	r3, [sp, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	daf1      	bge.n	800d45e <prvProcessReceivedCommands+0xe>
 800d47a:	e7ec      	b.n	800d456 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d47c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d47e:	6963      	ldr	r3, [r4, #20]
 800d480:	b113      	cbz	r3, 800d488 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d482:	1d20      	adds	r0, r4, #4
 800d484:	f7fe fa8a 	bl	800b99c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d488:	a803      	add	r0, sp, #12
 800d48a:	f7ff ff5b 	bl	800d344 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	2b09      	cmp	r3, #9
 800d492:	d8e7      	bhi.n	800d464 <prvProcessReceivedCommands+0x14>
 800d494:	e8df f003 	tbb	[pc, r3]
 800d498:	30050505 	.word	0x30050505
 800d49c:	05055037 	.word	0x05055037
 800d4a0:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4ae:	9b05      	ldr	r3, [sp, #20]
 800d4b0:	69a1      	ldr	r1, [r4, #24]
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4419      	add	r1, r3
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f7ff fe46 	bl	800d148 <prvInsertTimerInActiveList>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d0d1      	beq.n	800d464 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4c0:	6a23      	ldr	r3, [r4, #32]
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d4ca:	f013 0f04 	tst.w	r3, #4
 800d4ce:	d0c9      	beq.n	800d464 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d4d0:	69a2      	ldr	r2, [r4, #24]
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	9100      	str	r1, [sp, #0]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	9805      	ldr	r0, [sp, #20]
 800d4da:	4402      	add	r2, r0
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f7ff feb5 	bl	800d24c <xTimerGenericCommand>
							configASSERT( xResult );
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d1be      	bne.n	800d464 <prvProcessReceivedCommands+0x14>
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	e7fe      	b.n	800d4f6 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d4fc:	f023 0301 	bic.w	r3, r3, #1
 800d500:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800d504:	e7ae      	b.n	800d464 <prvProcessReceivedCommands+0x14>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d506:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d50a:	f043 0301 	orr.w	r3, r3, #1
 800d50e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d512:	9905      	ldr	r1, [sp, #20]
 800d514:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d516:	b131      	cbz	r1, 800d526 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d518:	4603      	mov	r3, r0
 800d51a:	4602      	mov	r2, r0
 800d51c:	4401      	add	r1, r0
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff fe12 	bl	800d148 <prvInsertTimerInActiveList>
					break;
 800d524:	e79e      	b.n	800d464 <prvProcessReceivedCommands+0x14>
 800d526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d536:	e7fe      	b.n	800d536 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d538:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d53c:	f013 0f02 	tst.w	r3, #2
 800d540:	d004      	beq.n	800d54c <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d542:	f023 0301 	bic.w	r3, r3, #1
 800d546:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800d54a:	e78b      	b.n	800d464 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
 800d54c:	4620      	mov	r0, r4
 800d54e:	f000 fa89 	bl	800da64 <vPortFree>
 800d552:	e787      	b.n	800d464 <prvProcessReceivedCommands+0x14>
}
 800d554:	b008      	add	sp, #32
 800d556:	bd10      	pop	{r4, pc}
 800d558:	20003520 	.word	0x20003520

0800d55c <prvTimerTask>:
{
 800d55c:	b500      	push	{lr}
 800d55e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d560:	a801      	add	r0, sp, #4
 800d562:	f7ff fde1 	bl	800d128 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d566:	9901      	ldr	r1, [sp, #4]
 800d568:	f7ff ff3a 	bl	800d3e0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800d56c:	f7ff ff70 	bl	800d450 <prvProcessReceivedCommands>
	for( ;; )
 800d570:	e7f6      	b.n	800d560 <prvTimerTask+0x4>
	...

0800d574 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d574:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d57a:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <prvTaskExitError+0x3c>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d582:	d008      	beq.n	800d596 <prvTaskExitError+0x22>
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	e7fe      	b.n	800d594 <prvTaskExitError+0x20>
 800d596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5a6:	9b01      	ldr	r3, [sp, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d0fc      	beq.n	800d5a6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5ac:	b002      	add	sp, #8
 800d5ae:	4770      	bx	lr
 800d5b0:	200001d8 	.word	0x200001d8

0800d5b4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5b4:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <prvPortStartFirstTask+0x24>)
 800d5b6:	6800      	ldr	r0, [r0, #0]
 800d5b8:	6800      	ldr	r0, [r0, #0]
 800d5ba:	f380 8808 	msr	MSP, r0
 800d5be:	f04f 0000 	mov.w	r0, #0
 800d5c2:	f380 8814 	msr	CONTROL, r0
 800d5c6:	b662      	cpsie	i
 800d5c8:	b661      	cpsie	f
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	df00      	svc	0
 800d5d4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5d6:	0000      	.short	0x0000
 800d5d8:	e000ed08 	.word	0xe000ed08

0800d5dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d5ec <vPortEnableVFP+0x10>
 800d5e0:	6801      	ldr	r1, [r0, #0]
 800d5e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5e6:	6001      	str	r1, [r0, #0]
 800d5e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5ea:	0000      	.short	0x0000
 800d5ec:	e000ed88 	.word	0xe000ed88

0800d5f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5f8:	f021 0101 	bic.w	r1, r1, #1
 800d5fc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d600:	4b05      	ldr	r3, [pc, #20]	; (800d618 <pxPortInitialiseStack+0x28>)
 800d602:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d606:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d60a:	f06f 0302 	mvn.w	r3, #2
 800d60e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800d612:	3844      	subs	r0, #68	; 0x44
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	0800d575 	.word	0x0800d575
 800d61c:	00000000 	.word	0x00000000

0800d620 <SVC_Handler>:
	__asm volatile (
 800d620:	4b07      	ldr	r3, [pc, #28]	; (800d640 <pxCurrentTCBConst2>)
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	6808      	ldr	r0, [r1, #0]
 800d626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62a:	f380 8809 	msr	PSP, r0
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f04f 0000 	mov.w	r0, #0
 800d636:	f380 8811 	msr	BASEPRI, r0
 800d63a:	4770      	bx	lr
 800d63c:	f3af 8000 	nop.w

0800d640 <pxCurrentTCBConst2>:
 800d640:	200034f8 	.word	0x200034f8

0800d644 <vPortEnterCritical>:
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d654:	4a0a      	ldr	r2, [pc, #40]	; (800d680 <vPortEnterCritical+0x3c>)
 800d656:	6813      	ldr	r3, [r2, #0]
 800d658:	3301      	adds	r3, #1
 800d65a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d000      	beq.n	800d662 <vPortEnterCritical+0x1e>
}
 800d660:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d662:	4b08      	ldr	r3, [pc, #32]	; (800d684 <vPortEnterCritical+0x40>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d66a:	d0f9      	beq.n	800d660 <vPortEnterCritical+0x1c>
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	e7fe      	b.n	800d67c <vPortEnterCritical+0x38>
 800d67e:	bf00      	nop
 800d680:	200001d8 	.word	0x200001d8
 800d684:	e000ed04 	.word	0xe000ed04

0800d688 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d688:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <vPortExitCritical+0x28>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	b943      	cbnz	r3, 800d6a0 <vPortExitCritical+0x18>
 800d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	e7fe      	b.n	800d69e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	4a03      	ldr	r2, [pc, #12]	; (800d6b0 <vPortExitCritical+0x28>)
 800d6a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6a6:	b90b      	cbnz	r3, 800d6ac <vPortExitCritical+0x24>
	__asm volatile
 800d6a8:	f383 8811 	msr	BASEPRI, r3
}
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	200001d8 	.word	0x200001d8
	...

0800d6c0 <PendSV_Handler>:
	__asm volatile
 800d6c0:	f3ef 8009 	mrs	r0, PSP
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	4b15      	ldr	r3, [pc, #84]	; (800d720 <pxCurrentTCBConst>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	f01e 0f10 	tst.w	lr, #16
 800d6d0:	bf08      	it	eq
 800d6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6da:	6010      	str	r0, [r2, #0]
 800d6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d6e4:	f380 8811 	msr	BASEPRI, r0
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f7ff faf2 	bl	800ccd8 <vTaskSwitchContext>
 800d6f4:	f04f 0000 	mov.w	r0, #0
 800d6f8:	f380 8811 	msr	BASEPRI, r0
 800d6fc:	bc09      	pop	{r0, r3}
 800d6fe:	6819      	ldr	r1, [r3, #0]
 800d700:	6808      	ldr	r0, [r1, #0]
 800d702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d706:	f01e 0f10 	tst.w	lr, #16
 800d70a:	bf08      	it	eq
 800d70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d710:	f380 8809 	msr	PSP, r0
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	f3af 8000 	nop.w

0800d720 <pxCurrentTCBConst>:
 800d720:	200034f8 	.word	0x200034f8

0800d724 <SysTick_Handler>:
{
 800d724:	b508      	push	{r3, lr}
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d736:	f7ff f9a9 	bl	800ca8c <xTaskIncrementTick>
 800d73a:	b118      	cbz	r0, 800d744 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d73c:	4b03      	ldr	r3, [pc, #12]	; (800d74c <SysTick_Handler+0x28>)
 800d73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d742:	601a      	str	r2, [r3, #0]
	__asm volatile
 800d744:	2300      	movs	r3, #0
 800d746:	f383 8811 	msr	BASEPRI, r3
}
 800d74a:	bd08      	pop	{r3, pc}
 800d74c:	e000ed04 	.word	0xe000ed04

0800d750 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d750:	4a08      	ldr	r2, [pc, #32]	; (800d774 <vPortSetupTimerInterrupt+0x24>)
 800d752:	2300      	movs	r3, #0
 800d754:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d756:	4908      	ldr	r1, [pc, #32]	; (800d778 <vPortSetupTimerInterrupt+0x28>)
 800d758:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d75a:	4b08      	ldr	r3, [pc, #32]	; (800d77c <vPortSetupTimerInterrupt+0x2c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4908      	ldr	r1, [pc, #32]	; (800d780 <vPortSetupTimerInterrupt+0x30>)
 800d760:	fba1 1303 	umull	r1, r3, r1, r3
 800d764:	099b      	lsrs	r3, r3, #6
 800d766:	3b01      	subs	r3, #1
 800d768:	4906      	ldr	r1, [pc, #24]	; (800d784 <vPortSetupTimerInterrupt+0x34>)
 800d76a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d76c:	2307      	movs	r3, #7
 800d76e:	6013      	str	r3, [r2, #0]
}
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop
 800d774:	e000e010 	.word	0xe000e010
 800d778:	e000e018 	.word	0xe000e018
 800d77c:	20000188 	.word	0x20000188
 800d780:	10624dd3 	.word	0x10624dd3
 800d784:	e000e014 	.word	0xe000e014

0800d788 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d788:	4b39      	ldr	r3, [pc, #228]	; (800d870 <xPortStartScheduler+0xe8>)
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	4b39      	ldr	r3, [pc, #228]	; (800d874 <xPortStartScheduler+0xec>)
 800d78e:	429a      	cmp	r2, r3
 800d790:	d028      	beq.n	800d7e4 <xPortStartScheduler+0x5c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d792:	4b37      	ldr	r3, [pc, #220]	; (800d870 <xPortStartScheduler+0xe8>)
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	4b38      	ldr	r3, [pc, #224]	; (800d878 <xPortStartScheduler+0xf0>)
 800d798:	429a      	cmp	r2, r3
 800d79a:	d02c      	beq.n	800d7f6 <xPortStartScheduler+0x6e>
{
 800d79c:	b510      	push	{r4, lr}
 800d79e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7a0:	4b36      	ldr	r3, [pc, #216]	; (800d87c <xPortStartScheduler+0xf4>)
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	b2d2      	uxtb	r2, r2
 800d7a6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7a8:	22ff      	movs	r2, #255	; 0xff
 800d7aa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d7b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7bc:	4a30      	ldr	r2, [pc, #192]	; (800d880 <xPortStartScheduler+0xf8>)
 800d7be:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7c0:	2307      	movs	r3, #7
 800d7c2:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d7c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d7cc:	d01c      	beq.n	800d808 <xPortStartScheduler+0x80>
			ulMaxPRIGROUPValue--;
 800d7ce:	4a2c      	ldr	r2, [pc, #176]	; (800d880 <xPortStartScheduler+0xf8>)
 800d7d0:	6853      	ldr	r3, [r2, #4]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	f88d 3003 	strb.w	r3, [sp, #3]
 800d7e2:	e7ef      	b.n	800d7c4 <xPortStartScheduler+0x3c>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7f4:	e7fe      	b.n	800d7f4 <xPortStartScheduler+0x6c>
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d806:	e7fe      	b.n	800d806 <xPortStartScheduler+0x7e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d808:	4b1d      	ldr	r3, [pc, #116]	; (800d880 <xPortStartScheduler+0xf8>)
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	d008      	beq.n	800d822 <xPortStartScheduler+0x9a>
 800d810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	e7fe      	b.n	800d820 <xPortStartScheduler+0x98>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d822:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d828:	4a15      	ldr	r2, [pc, #84]	; (800d880 <xPortStartScheduler+0xf8>)
 800d82a:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d82c:	9b01      	ldr	r3, [sp, #4]
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	4a12      	ldr	r2, [pc, #72]	; (800d87c <xPortStartScheduler+0xf4>)
 800d832:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d834:	4b13      	ldr	r3, [pc, #76]	; (800d884 <xPortStartScheduler+0xfc>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800d83c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800d844:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800d846:	f7ff ff83 	bl	800d750 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d84a:	2400      	movs	r4, #0
 800d84c:	4b0e      	ldr	r3, [pc, #56]	; (800d888 <xPortStartScheduler+0x100>)
 800d84e:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800d850:	f7ff fec4 	bl	800d5dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d854:	4a0d      	ldr	r2, [pc, #52]	; (800d88c <xPortStartScheduler+0x104>)
 800d856:	6813      	ldr	r3, [r2, #0]
 800d858:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d85c:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800d85e:	f7ff fea9 	bl	800d5b4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d862:	f7ff fa39 	bl	800ccd8 <vTaskSwitchContext>
	prvTaskExitError();
 800d866:	f7ff fe85 	bl	800d574 <prvTaskExitError>
}
 800d86a:	4620      	mov	r0, r4
 800d86c:	b002      	add	sp, #8
 800d86e:	bd10      	pop	{r4, pc}
 800d870:	e000ed00 	.word	0xe000ed00
 800d874:	410fc271 	.word	0x410fc271
 800d878:	410fc270 	.word	0x410fc270
 800d87c:	e000e400 	.word	0xe000e400
 800d880:	2000364c 	.word	0x2000364c
 800d884:	e000ed20 	.word	0xe000ed20
 800d888:	200001d8 	.word	0x200001d8
 800d88c:	e000ef34 	.word	0xe000ef34

0800d890 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d890:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d894:	2b0f      	cmp	r3, #15
 800d896:	d90f      	bls.n	800d8b8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d898:	4a10      	ldr	r2, [pc, #64]	; (800d8dc <vPortValidateInterruptPriority+0x4c>)
 800d89a:	5c9b      	ldrb	r3, [r3, r2]
 800d89c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d89e:	4a10      	ldr	r2, [pc, #64]	; (800d8e0 <vPortValidateInterruptPriority+0x50>)
 800d8a0:	7812      	ldrb	r2, [r2, #0]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d908      	bls.n	800d8b8 <vPortValidateInterruptPriority+0x28>
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	e7fe      	b.n	800d8b6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8b8:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <vPortValidateInterruptPriority+0x54>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8c0:	4a07      	ldr	r2, [pc, #28]	; (800d8e0 <vPortValidateInterruptPriority+0x50>)
 800d8c2:	6852      	ldr	r2, [r2, #4]
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d908      	bls.n	800d8da <vPortValidateInterruptPriority+0x4a>
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	e7fe      	b.n	800d8d8 <vPortValidateInterruptPriority+0x48>
	}
 800d8da:	4770      	bx	lr
 800d8dc:	e000e3f0 	.word	0xe000e3f0
 800d8e0:	2000364c 	.word	0x2000364c
 800d8e4:	e000ed0c 	.word	0xe000ed0c

0800d8e8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8e8:	4a10      	ldr	r2, [pc, #64]	; (800d92c <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8ea:	f012 0f07 	tst.w	r2, #7
 800d8ee:	d01a      	beq.n	800d926 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8f0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8f6:	f5c1 4380 	rsb	r3, r1, #16384	; 0x4000
 800d8fa:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8fc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8fe:	490c      	ldr	r1, [pc, #48]	; (800d930 <prvHeapInit+0x48>)
 800d900:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d902:	2000      	movs	r0, #0
 800d904:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d906:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d908:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d90a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800d90e:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800d910:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d912:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d914:	1a98      	subs	r0, r3, r2
 800d916:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d918:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d91a:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d91c:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d91e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d922:	614b      	str	r3, [r1, #20]
}
 800d924:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d92a:	e7e8      	b.n	800d8fe <prvHeapInit+0x16>
 800d92c:	2000366c 	.word	0x2000366c
 800d930:	20003654 	.word	0x20003654

0800d934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d934:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d936:	4b13      	ldr	r3, [pc, #76]	; (800d984 <prvInsertBlockIntoFreeList+0x50>)
 800d938:	461a      	mov	r2, r3
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4283      	cmp	r3, r0
 800d93e:	d3fb      	bcc.n	800d938 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d940:	6851      	ldr	r1, [r2, #4]
 800d942:	1854      	adds	r4, r2, r1
 800d944:	4284      	cmp	r4, r0
 800d946:	d00a      	beq.n	800d95e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d948:	6841      	ldr	r1, [r0, #4]
 800d94a:	1844      	adds	r4, r0, r1
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	d00b      	beq.n	800d968 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d950:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d952:	4290      	cmp	r0, r2
 800d954:	d000      	beq.n	800d958 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d956:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d95c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d95e:	6840      	ldr	r0, [r0, #4]
 800d960:	4401      	add	r1, r0
 800d962:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800d964:	4610      	mov	r0, r2
 800d966:	e7ef      	b.n	800d948 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d968:	4c06      	ldr	r4, [pc, #24]	; (800d984 <prvInsertBlockIntoFreeList+0x50>)
 800d96a:	68a4      	ldr	r4, [r4, #8]
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	d006      	beq.n	800d97e <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	4419      	add	r1, r3
 800d974:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d976:	6813      	ldr	r3, [r2, #0]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	6003      	str	r3, [r0, #0]
 800d97c:	e7e9      	b.n	800d952 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d97e:	6004      	str	r4, [r0, #0]
 800d980:	e7e7      	b.n	800d952 <prvInsertBlockIntoFreeList+0x1e>
 800d982:	bf00      	nop
 800d984:	20003654 	.word	0x20003654

0800d988 <pvPortMalloc>:
{
 800d988:	b570      	push	{r4, r5, r6, lr}
 800d98a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d98c:	f7ff f86e 	bl	800ca6c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d990:	4b33      	ldr	r3, [pc, #204]	; (800da60 <pvPortMalloc+0xd8>)
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	b1a3      	cbz	r3, 800d9c0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d996:	4b32      	ldr	r3, [pc, #200]	; (800da60 <pvPortMalloc+0xd8>)
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	421c      	tst	r4, r3
 800d99c:	d149      	bne.n	800da32 <pvPortMalloc+0xaa>
			if( xWantedSize > 0 )
 800d99e:	b134      	cbz	r4, 800d9ae <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800d9a0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9a2:	f014 0f07 	tst.w	r4, #7
 800d9a6:	d002      	beq.n	800d9ae <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9a8:	f024 0407 	bic.w	r4, r4, #7
 800d9ac:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9ae:	2c00      	cmp	r4, #0
 800d9b0:	d041      	beq.n	800da36 <pvPortMalloc+0xae>
 800d9b2:	4b2b      	ldr	r3, [pc, #172]	; (800da60 <pvPortMalloc+0xd8>)
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	42a3      	cmp	r3, r4
 800d9b8:	d34c      	bcc.n	800da54 <pvPortMalloc+0xcc>
				pxBlock = xStart.pxNextFreeBlock;
 800d9ba:	4b29      	ldr	r3, [pc, #164]	; (800da60 <pvPortMalloc+0xd8>)
 800d9bc:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9be:	e004      	b.n	800d9ca <pvPortMalloc+0x42>
			prvHeapInit();
 800d9c0:	f7ff ff92 	bl	800d8e8 <prvHeapInit>
 800d9c4:	e7e7      	b.n	800d996 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800d9c6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9c8:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ca:	686a      	ldr	r2, [r5, #4]
 800d9cc:	42a2      	cmp	r2, r4
 800d9ce:	d202      	bcs.n	800d9d6 <pvPortMalloc+0x4e>
 800d9d0:	682a      	ldr	r2, [r5, #0]
 800d9d2:	2a00      	cmp	r2, #0
 800d9d4:	d1f7      	bne.n	800d9c6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800d9d6:	4a22      	ldr	r2, [pc, #136]	; (800da60 <pvPortMalloc+0xd8>)
 800d9d8:	6892      	ldr	r2, [r2, #8]
 800d9da:	42aa      	cmp	r2, r5
 800d9dc:	d03c      	beq.n	800da58 <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9de:	681e      	ldr	r6, [r3, #0]
 800d9e0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9e2:	682a      	ldr	r2, [r5, #0]
 800d9e4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9e6:	686b      	ldr	r3, [r5, #4]
 800d9e8:	1b1b      	subs	r3, r3, r4
 800d9ea:	2b10      	cmp	r3, #16
 800d9ec:	d910      	bls.n	800da10 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9ee:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f0:	f010 0f07 	tst.w	r0, #7
 800d9f4:	d008      	beq.n	800da08 <pvPortMalloc+0x80>
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	e7fe      	b.n	800da06 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da08:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da0a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da0c:	f7ff ff92 	bl	800d934 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da10:	6869      	ldr	r1, [r5, #4]
 800da12:	4a13      	ldr	r2, [pc, #76]	; (800da60 <pvPortMalloc+0xd8>)
 800da14:	6913      	ldr	r3, [r2, #16]
 800da16:	1a5b      	subs	r3, r3, r1
 800da18:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da1a:	68d2      	ldr	r2, [r2, #12]
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d201      	bcs.n	800da24 <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da20:	4a0f      	ldr	r2, [pc, #60]	; (800da60 <pvPortMalloc+0xd8>)
 800da22:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da24:	4b0e      	ldr	r3, [pc, #56]	; (800da60 <pvPortMalloc+0xd8>)
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	430b      	orrs	r3, r1
 800da2a:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	e002      	b.n	800da38 <pvPortMalloc+0xb0>
void *pvReturn = NULL;
 800da32:	2600      	movs	r6, #0
 800da34:	e000      	b.n	800da38 <pvPortMalloc+0xb0>
 800da36:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800da38:	f7ff f8b0 	bl	800cb9c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da3c:	f016 0f07 	tst.w	r6, #7
 800da40:	d00c      	beq.n	800da5c <pvPortMalloc+0xd4>
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	e7fe      	b.n	800da52 <pvPortMalloc+0xca>
void *pvReturn = NULL;
 800da54:	2600      	movs	r6, #0
 800da56:	e7ef      	b.n	800da38 <pvPortMalloc+0xb0>
 800da58:	2600      	movs	r6, #0
 800da5a:	e7ed      	b.n	800da38 <pvPortMalloc+0xb0>
}
 800da5c:	4630      	mov	r0, r6
 800da5e:	bd70      	pop	{r4, r5, r6, pc}
 800da60:	20003654 	.word	0x20003654

0800da64 <vPortFree>:
	if( pv != NULL )
 800da64:	b380      	cbz	r0, 800dac8 <vPortFree+0x64>
{
 800da66:	b538      	push	{r3, r4, r5, lr}
 800da68:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800da6a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800da72:	4a16      	ldr	r2, [pc, #88]	; (800dacc <vPortFree+0x68>)
 800da74:	6952      	ldr	r2, [r2, #20]
 800da76:	4213      	tst	r3, r2
 800da78:	d108      	bne.n	800da8c <vPortFree+0x28>
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	e7fe      	b.n	800da8a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da8c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800da90:	b141      	cbz	r1, 800daa4 <vPortFree+0x40>
 800da92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	e7fe      	b.n	800daa2 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800daa4:	ea23 0302 	bic.w	r3, r3, r2
 800daa8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800daac:	f7fe ffde 	bl	800ca6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dab0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800dab4:	4a05      	ldr	r2, [pc, #20]	; (800dacc <vPortFree+0x68>)
 800dab6:	6913      	ldr	r3, [r2, #16]
 800dab8:	440b      	add	r3, r1
 800daba:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dabc:	4628      	mov	r0, r5
 800dabe:	f7ff ff39 	bl	800d934 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800dac2:	f7ff f86b 	bl	800cb9c <xTaskResumeAll>
}
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	20003654 	.word	0x20003654

0800dad0 <xPortGetFreeHeapSize>:
}
 800dad0:	4b01      	ldr	r3, [pc, #4]	; (800dad8 <xPortGetFreeHeapSize+0x8>)
 800dad2:	6918      	ldr	r0, [r3, #16]
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	20003654 	.word	0x20003654

0800dadc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dadc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800db14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dae2:	e003      	b.n	800daec <LoopCopyDataInit>

0800dae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800daea:	3104      	adds	r1, #4

0800daec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800daec:	480b      	ldr	r0, [pc, #44]	; (800db1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800daee:	4b0c      	ldr	r3, [pc, #48]	; (800db20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800daf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800daf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800daf4:	d3f6      	bcc.n	800dae4 <CopyDataInit>
  ldr  r2, =_sbss
 800daf6:	4a0b      	ldr	r2, [pc, #44]	; (800db24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800daf8:	e002      	b.n	800db00 <LoopFillZerobss>

0800dafa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dafa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dafc:	f842 3b04 	str.w	r3, [r2], #4

0800db00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800db00:	4b09      	ldr	r3, [pc, #36]	; (800db28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800db02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800db04:	d3f9      	bcc.n	800dafa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800db06:	f7f8 ff0f 	bl	8006928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800db0a:	f000 f8d7 	bl	800dcbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800db0e:	f7f7 f90d 	bl	8004d2c <main>
  bx  lr    
 800db12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800db14:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800db18:	08013ef8 	.word	0x08013ef8
  ldr  r0, =_sdata
 800db1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800db20:	200003b0 	.word	0x200003b0
  ldr  r2, =_sbss
 800db24:	200003b0 	.word	0x200003b0
  ldr  r3, = _ebss
 800db28:	2000a0a8 	.word	0x2000a0a8

0800db2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800db2c:	e7fe      	b.n	800db2c <ADC_IRQHandler>

0800db2e <atoi>:
 800db2e:	220a      	movs	r2, #10
 800db30:	2100      	movs	r1, #0
 800db32:	f001 bb93 	b.w	800f25c <strtol>

0800db36 <atol>:
 800db36:	220a      	movs	r2, #10
 800db38:	2100      	movs	r1, #0
 800db3a:	f001 bb8f 	b.w	800f25c <strtol>
	...

0800db40 <calloc>:
 800db40:	4b02      	ldr	r3, [pc, #8]	; (800db4c <calloc+0xc>)
 800db42:	460a      	mov	r2, r1
 800db44:	4601      	mov	r1, r0
 800db46:	6818      	ldr	r0, [r3, #0]
 800db48:	f000 b902 	b.w	800dd50 <_calloc_r>
 800db4c:	200001dc 	.word	0x200001dc

0800db50 <__errno>:
 800db50:	4b01      	ldr	r3, [pc, #4]	; (800db58 <__errno+0x8>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	200001dc 	.word	0x200001dc

0800db5c <gmtime_r>:
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	e9d0 6700 	ldrd	r6, r7, [r0]
 800db64:	460c      	mov	r4, r1
 800db66:	4a51      	ldr	r2, [pc, #324]	; (800dcac <gmtime_r+0x150>)
 800db68:	2300      	movs	r3, #0
 800db6a:	4630      	mov	r0, r6
 800db6c:	4639      	mov	r1, r7
 800db6e:	f7f3 f87b 	bl	8000c68 <__aeabi_ldivmod>
 800db72:	4639      	mov	r1, r7
 800db74:	4605      	mov	r5, r0
 800db76:	4a4d      	ldr	r2, [pc, #308]	; (800dcac <gmtime_r+0x150>)
 800db78:	4630      	mov	r0, r6
 800db7a:	2300      	movs	r3, #0
 800db7c:	f7f3 f874 	bl	8000c68 <__aeabi_ldivmod>
 800db80:	2a00      	cmp	r2, #0
 800db82:	bfbc      	itt	lt
 800db84:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800db88:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800db8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800db90:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800db94:	fbb2 f3f1 	udiv	r3, r2, r1
 800db98:	fb01 2213 	mls	r2, r1, r3, r2
 800db9c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800dba0:	bfac      	ite	ge
 800dba2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800dba6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800dbaa:	60a3      	str	r3, [r4, #8]
 800dbac:	fbb2 f3f1 	udiv	r3, r2, r1
 800dbb0:	fb01 2213 	mls	r2, r1, r3, r2
 800dbb4:	6063      	str	r3, [r4, #4]
 800dbb6:	6022      	str	r2, [r4, #0]
 800dbb8:	1cc3      	adds	r3, r0, #3
 800dbba:	2207      	movs	r2, #7
 800dbbc:	fb93 f2f2 	sdiv	r2, r3, r2
 800dbc0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	bf48      	it	mi
 800dbc8:	3307      	addmi	r3, #7
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	61a3      	str	r3, [r4, #24]
 800dbce:	bfb8      	it	lt
 800dbd0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800dbd4:	4936      	ldr	r1, [pc, #216]	; (800dcb0 <gmtime_r+0x154>)
 800dbd6:	bfae      	itee	ge
 800dbd8:	fb90 f1f1 	sdivge	r1, r0, r1
 800dbdc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800dbe0:	fb93 f1f1 	sdivlt	r1, r3, r1
 800dbe4:	4b33      	ldr	r3, [pc, #204]	; (800dcb4 <gmtime_r+0x158>)
 800dbe6:	fb03 0001 	mla	r0, r3, r1, r0
 800dbea:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800dbee:	fbb0 f2f2 	udiv	r2, r0, r2
 800dbf2:	4402      	add	r2, r0
 800dbf4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800dbf8:	fbb0 f3fc 	udiv	r3, r0, ip
 800dbfc:	1ad2      	subs	r2, r2, r3
 800dbfe:	f240 176d 	movw	r7, #365	; 0x16d
 800dc02:	4b2d      	ldr	r3, [pc, #180]	; (800dcb8 <gmtime_r+0x15c>)
 800dc04:	fbb0 f3f3 	udiv	r3, r0, r3
 800dc08:	2664      	movs	r6, #100	; 0x64
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	fbb3 f5f7 	udiv	r5, r3, r7
 800dc10:	fbb3 f3fc 	udiv	r3, r3, ip
 800dc14:	fbb5 f2f6 	udiv	r2, r5, r6
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	4403      	add	r3, r0
 800dc1c:	fb07 3315 	mls	r3, r7, r5, r3
 800dc20:	2099      	movs	r0, #153	; 0x99
 800dc22:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800dc26:	f10c 0c02 	add.w	ip, ip, #2
 800dc2a:	f103 0e01 	add.w	lr, r3, #1
 800dc2e:	fbbc f7f0 	udiv	r7, ip, r0
 800dc32:	4378      	muls	r0, r7
 800dc34:	3002      	adds	r0, #2
 800dc36:	f04f 0805 	mov.w	r8, #5
 800dc3a:	fbb0 f0f8 	udiv	r0, r0, r8
 800dc3e:	ebae 0000 	sub.w	r0, lr, r0
 800dc42:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800dc46:	45f4      	cmp	ip, lr
 800dc48:	bf94      	ite	ls
 800dc4a:	f04f 0c02 	movls.w	ip, #2
 800dc4e:	f06f 0c09 	mvnhi.w	ip, #9
 800dc52:	4467      	add	r7, ip
 800dc54:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800dc58:	fb0c 5101 	mla	r1, ip, r1, r5
 800dc5c:	2f01      	cmp	r7, #1
 800dc5e:	bf98      	it	ls
 800dc60:	3101      	addls	r1, #1
 800dc62:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800dc66:	d30c      	bcc.n	800dc82 <gmtime_r+0x126>
 800dc68:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800dc6c:	61e3      	str	r3, [r4, #28]
 800dc6e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800dc72:	2300      	movs	r3, #0
 800dc74:	60e0      	str	r0, [r4, #12]
 800dc76:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800dc7a:	6223      	str	r3, [r4, #32]
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc82:	f015 0f03 	tst.w	r5, #3
 800dc86:	d102      	bne.n	800dc8e <gmtime_r+0x132>
 800dc88:	fb06 5212 	mls	r2, r6, r2, r5
 800dc8c:	b95a      	cbnz	r2, 800dca6 <gmtime_r+0x14a>
 800dc8e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800dc92:	fbb5 f2f6 	udiv	r2, r5, r6
 800dc96:	fb06 5212 	mls	r2, r6, r2, r5
 800dc9a:	fab2 f282 	clz	r2, r2
 800dc9e:	0952      	lsrs	r2, r2, #5
 800dca0:	333b      	adds	r3, #59	; 0x3b
 800dca2:	4413      	add	r3, r2
 800dca4:	e7e2      	b.n	800dc6c <gmtime_r+0x110>
 800dca6:	2201      	movs	r2, #1
 800dca8:	e7fa      	b.n	800dca0 <gmtime_r+0x144>
 800dcaa:	bf00      	nop
 800dcac:	00015180 	.word	0x00015180
 800dcb0:	00023ab1 	.word	0x00023ab1
 800dcb4:	fffdc54f 	.word	0xfffdc54f
 800dcb8:	00023ab0 	.word	0x00023ab0

0800dcbc <__libc_init_array>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	4d0d      	ldr	r5, [pc, #52]	; (800dcf4 <__libc_init_array+0x38>)
 800dcc0:	4c0d      	ldr	r4, [pc, #52]	; (800dcf8 <__libc_init_array+0x3c>)
 800dcc2:	1b64      	subs	r4, r4, r5
 800dcc4:	10a4      	asrs	r4, r4, #2
 800dcc6:	2600      	movs	r6, #0
 800dcc8:	42a6      	cmp	r6, r4
 800dcca:	d109      	bne.n	800dce0 <__libc_init_array+0x24>
 800dccc:	4d0b      	ldr	r5, [pc, #44]	; (800dcfc <__libc_init_array+0x40>)
 800dcce:	4c0c      	ldr	r4, [pc, #48]	; (800dd00 <__libc_init_array+0x44>)
 800dcd0:	f003 ffcc 	bl	8011c6c <_init>
 800dcd4:	1b64      	subs	r4, r4, r5
 800dcd6:	10a4      	asrs	r4, r4, #2
 800dcd8:	2600      	movs	r6, #0
 800dcda:	42a6      	cmp	r6, r4
 800dcdc:	d105      	bne.n	800dcea <__libc_init_array+0x2e>
 800dcde:	bd70      	pop	{r4, r5, r6, pc}
 800dce0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dce4:	4798      	blx	r3
 800dce6:	3601      	adds	r6, #1
 800dce8:	e7ee      	b.n	800dcc8 <__libc_init_array+0xc>
 800dcea:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcee:	4798      	blx	r3
 800dcf0:	3601      	adds	r6, #1
 800dcf2:	e7f2      	b.n	800dcda <__libc_init_array+0x1e>
 800dcf4:	08013ef0 	.word	0x08013ef0
 800dcf8:	08013ef0 	.word	0x08013ef0
 800dcfc:	08013ef0 	.word	0x08013ef0
 800dd00:	08013ef4 	.word	0x08013ef4

0800dd04 <malloc>:
 800dd04:	4b02      	ldr	r3, [pc, #8]	; (800dd10 <malloc+0xc>)
 800dd06:	4601      	mov	r1, r0
 800dd08:	6818      	ldr	r0, [r3, #0]
 800dd0a:	f000 b881 	b.w	800de10 <_malloc_r>
 800dd0e:	bf00      	nop
 800dd10:	200001dc 	.word	0x200001dc

0800dd14 <free>:
 800dd14:	4b02      	ldr	r3, [pc, #8]	; (800dd20 <free+0xc>)
 800dd16:	4601      	mov	r1, r0
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	f000 b829 	b.w	800dd70 <_free_r>
 800dd1e:	bf00      	nop
 800dd20:	200001dc 	.word	0x200001dc

0800dd24 <memcpy>:
 800dd24:	440a      	add	r2, r1
 800dd26:	4291      	cmp	r1, r2
 800dd28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dd2c:	d100      	bne.n	800dd30 <memcpy+0xc>
 800dd2e:	4770      	bx	lr
 800dd30:	b510      	push	{r4, lr}
 800dd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd3a:	4291      	cmp	r1, r2
 800dd3c:	d1f9      	bne.n	800dd32 <memcpy+0xe>
 800dd3e:	bd10      	pop	{r4, pc}

0800dd40 <memset>:
 800dd40:	4402      	add	r2, r0
 800dd42:	4603      	mov	r3, r0
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d100      	bne.n	800dd4a <memset+0xa>
 800dd48:	4770      	bx	lr
 800dd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd4e:	e7f9      	b.n	800dd44 <memset+0x4>

0800dd50 <_calloc_r>:
 800dd50:	b513      	push	{r0, r1, r4, lr}
 800dd52:	434a      	muls	r2, r1
 800dd54:	4611      	mov	r1, r2
 800dd56:	9201      	str	r2, [sp, #4]
 800dd58:	f000 f85a 	bl	800de10 <_malloc_r>
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	b118      	cbz	r0, 800dd68 <_calloc_r+0x18>
 800dd60:	9a01      	ldr	r2, [sp, #4]
 800dd62:	2100      	movs	r1, #0
 800dd64:	f7ff ffec 	bl	800dd40 <memset>
 800dd68:	4620      	mov	r0, r4
 800dd6a:	b002      	add	sp, #8
 800dd6c:	bd10      	pop	{r4, pc}
	...

0800dd70 <_free_r>:
 800dd70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd72:	2900      	cmp	r1, #0
 800dd74:	d048      	beq.n	800de08 <_free_r+0x98>
 800dd76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd7a:	9001      	str	r0, [sp, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f1a1 0404 	sub.w	r4, r1, #4
 800dd82:	bfb8      	it	lt
 800dd84:	18e4      	addlt	r4, r4, r3
 800dd86:	f001 fe67 	bl	800fa58 <__malloc_lock>
 800dd8a:	4a20      	ldr	r2, [pc, #128]	; (800de0c <_free_r+0x9c>)
 800dd8c:	9801      	ldr	r0, [sp, #4]
 800dd8e:	6813      	ldr	r3, [r2, #0]
 800dd90:	4615      	mov	r5, r2
 800dd92:	b933      	cbnz	r3, 800dda2 <_free_r+0x32>
 800dd94:	6063      	str	r3, [r4, #4]
 800dd96:	6014      	str	r4, [r2, #0]
 800dd98:	b003      	add	sp, #12
 800dd9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd9e:	f001 be61 	b.w	800fa64 <__malloc_unlock>
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	d90b      	bls.n	800ddbe <_free_r+0x4e>
 800dda6:	6821      	ldr	r1, [r4, #0]
 800dda8:	1862      	adds	r2, r4, r1
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	bf04      	itt	eq
 800ddae:	681a      	ldreq	r2, [r3, #0]
 800ddb0:	685b      	ldreq	r3, [r3, #4]
 800ddb2:	6063      	str	r3, [r4, #4]
 800ddb4:	bf04      	itt	eq
 800ddb6:	1852      	addeq	r2, r2, r1
 800ddb8:	6022      	streq	r2, [r4, #0]
 800ddba:	602c      	str	r4, [r5, #0]
 800ddbc:	e7ec      	b.n	800dd98 <_free_r+0x28>
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	b10b      	cbz	r3, 800ddc8 <_free_r+0x58>
 800ddc4:	42a3      	cmp	r3, r4
 800ddc6:	d9fa      	bls.n	800ddbe <_free_r+0x4e>
 800ddc8:	6811      	ldr	r1, [r2, #0]
 800ddca:	1855      	adds	r5, r2, r1
 800ddcc:	42a5      	cmp	r5, r4
 800ddce:	d10b      	bne.n	800dde8 <_free_r+0x78>
 800ddd0:	6824      	ldr	r4, [r4, #0]
 800ddd2:	4421      	add	r1, r4
 800ddd4:	1854      	adds	r4, r2, r1
 800ddd6:	42a3      	cmp	r3, r4
 800ddd8:	6011      	str	r1, [r2, #0]
 800ddda:	d1dd      	bne.n	800dd98 <_free_r+0x28>
 800dddc:	681c      	ldr	r4, [r3, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	6053      	str	r3, [r2, #4]
 800dde2:	4421      	add	r1, r4
 800dde4:	6011      	str	r1, [r2, #0]
 800dde6:	e7d7      	b.n	800dd98 <_free_r+0x28>
 800dde8:	d902      	bls.n	800ddf0 <_free_r+0x80>
 800ddea:	230c      	movs	r3, #12
 800ddec:	6003      	str	r3, [r0, #0]
 800ddee:	e7d3      	b.n	800dd98 <_free_r+0x28>
 800ddf0:	6825      	ldr	r5, [r4, #0]
 800ddf2:	1961      	adds	r1, r4, r5
 800ddf4:	428b      	cmp	r3, r1
 800ddf6:	bf04      	itt	eq
 800ddf8:	6819      	ldreq	r1, [r3, #0]
 800ddfa:	685b      	ldreq	r3, [r3, #4]
 800ddfc:	6063      	str	r3, [r4, #4]
 800ddfe:	bf04      	itt	eq
 800de00:	1949      	addeq	r1, r1, r5
 800de02:	6021      	streq	r1, [r4, #0]
 800de04:	6054      	str	r4, [r2, #4]
 800de06:	e7c7      	b.n	800dd98 <_free_r+0x28>
 800de08:	b003      	add	sp, #12
 800de0a:	bd30      	pop	{r4, r5, pc}
 800de0c:	2000766c 	.word	0x2000766c

0800de10 <_malloc_r>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	1ccd      	adds	r5, r1, #3
 800de14:	f025 0503 	bic.w	r5, r5, #3
 800de18:	3508      	adds	r5, #8
 800de1a:	2d0c      	cmp	r5, #12
 800de1c:	bf38      	it	cc
 800de1e:	250c      	movcc	r5, #12
 800de20:	2d00      	cmp	r5, #0
 800de22:	4606      	mov	r6, r0
 800de24:	db01      	blt.n	800de2a <_malloc_r+0x1a>
 800de26:	42a9      	cmp	r1, r5
 800de28:	d903      	bls.n	800de32 <_malloc_r+0x22>
 800de2a:	230c      	movs	r3, #12
 800de2c:	6033      	str	r3, [r6, #0]
 800de2e:	2000      	movs	r0, #0
 800de30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de32:	f001 fe11 	bl	800fa58 <__malloc_lock>
 800de36:	4921      	ldr	r1, [pc, #132]	; (800debc <_malloc_r+0xac>)
 800de38:	680a      	ldr	r2, [r1, #0]
 800de3a:	4614      	mov	r4, r2
 800de3c:	b99c      	cbnz	r4, 800de66 <_malloc_r+0x56>
 800de3e:	4f20      	ldr	r7, [pc, #128]	; (800dec0 <_malloc_r+0xb0>)
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	b923      	cbnz	r3, 800de4e <_malloc_r+0x3e>
 800de44:	4621      	mov	r1, r4
 800de46:	4630      	mov	r0, r6
 800de48:	f000 fa4c 	bl	800e2e4 <_sbrk_r>
 800de4c:	6038      	str	r0, [r7, #0]
 800de4e:	4629      	mov	r1, r5
 800de50:	4630      	mov	r0, r6
 800de52:	f000 fa47 	bl	800e2e4 <_sbrk_r>
 800de56:	1c43      	adds	r3, r0, #1
 800de58:	d123      	bne.n	800dea2 <_malloc_r+0x92>
 800de5a:	230c      	movs	r3, #12
 800de5c:	6033      	str	r3, [r6, #0]
 800de5e:	4630      	mov	r0, r6
 800de60:	f001 fe00 	bl	800fa64 <__malloc_unlock>
 800de64:	e7e3      	b.n	800de2e <_malloc_r+0x1e>
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	1b5b      	subs	r3, r3, r5
 800de6a:	d417      	bmi.n	800de9c <_malloc_r+0x8c>
 800de6c:	2b0b      	cmp	r3, #11
 800de6e:	d903      	bls.n	800de78 <_malloc_r+0x68>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	441c      	add	r4, r3
 800de74:	6025      	str	r5, [r4, #0]
 800de76:	e004      	b.n	800de82 <_malloc_r+0x72>
 800de78:	6863      	ldr	r3, [r4, #4]
 800de7a:	42a2      	cmp	r2, r4
 800de7c:	bf0c      	ite	eq
 800de7e:	600b      	streq	r3, [r1, #0]
 800de80:	6053      	strne	r3, [r2, #4]
 800de82:	4630      	mov	r0, r6
 800de84:	f001 fdee 	bl	800fa64 <__malloc_unlock>
 800de88:	f104 000b 	add.w	r0, r4, #11
 800de8c:	1d23      	adds	r3, r4, #4
 800de8e:	f020 0007 	bic.w	r0, r0, #7
 800de92:	1ac2      	subs	r2, r0, r3
 800de94:	d0cc      	beq.n	800de30 <_malloc_r+0x20>
 800de96:	1a1b      	subs	r3, r3, r0
 800de98:	50a3      	str	r3, [r4, r2]
 800de9a:	e7c9      	b.n	800de30 <_malloc_r+0x20>
 800de9c:	4622      	mov	r2, r4
 800de9e:	6864      	ldr	r4, [r4, #4]
 800dea0:	e7cc      	b.n	800de3c <_malloc_r+0x2c>
 800dea2:	1cc4      	adds	r4, r0, #3
 800dea4:	f024 0403 	bic.w	r4, r4, #3
 800dea8:	42a0      	cmp	r0, r4
 800deaa:	d0e3      	beq.n	800de74 <_malloc_r+0x64>
 800deac:	1a21      	subs	r1, r4, r0
 800deae:	4630      	mov	r0, r6
 800deb0:	f000 fa18 	bl	800e2e4 <_sbrk_r>
 800deb4:	3001      	adds	r0, #1
 800deb6:	d1dd      	bne.n	800de74 <_malloc_r+0x64>
 800deb8:	e7cf      	b.n	800de5a <_malloc_r+0x4a>
 800deba:	bf00      	nop
 800debc:	2000766c 	.word	0x2000766c
 800dec0:	20007670 	.word	0x20007670

0800dec4 <_scanf_float>:
 800dec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec8:	b087      	sub	sp, #28
 800deca:	4617      	mov	r7, r2
 800decc:	9303      	str	r3, [sp, #12]
 800dece:	688b      	ldr	r3, [r1, #8]
 800ded0:	1e5a      	subs	r2, r3, #1
 800ded2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ded6:	bf83      	ittte	hi
 800ded8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dedc:	195b      	addhi	r3, r3, r5
 800dede:	9302      	strhi	r3, [sp, #8]
 800dee0:	2300      	movls	r3, #0
 800dee2:	bf86      	itte	hi
 800dee4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dee8:	608b      	strhi	r3, [r1, #8]
 800deea:	9302      	strls	r3, [sp, #8]
 800deec:	680b      	ldr	r3, [r1, #0]
 800deee:	468b      	mov	fp, r1
 800def0:	2500      	movs	r5, #0
 800def2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800def6:	f84b 3b1c 	str.w	r3, [fp], #28
 800defa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800defe:	4680      	mov	r8, r0
 800df00:	460c      	mov	r4, r1
 800df02:	465e      	mov	r6, fp
 800df04:	46aa      	mov	sl, r5
 800df06:	46a9      	mov	r9, r5
 800df08:	9501      	str	r5, [sp, #4]
 800df0a:	68a2      	ldr	r2, [r4, #8]
 800df0c:	b152      	cbz	r2, 800df24 <_scanf_float+0x60>
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b4e      	cmp	r3, #78	; 0x4e
 800df14:	d864      	bhi.n	800dfe0 <_scanf_float+0x11c>
 800df16:	2b40      	cmp	r3, #64	; 0x40
 800df18:	d83c      	bhi.n	800df94 <_scanf_float+0xd0>
 800df1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800df1e:	b2c8      	uxtb	r0, r1
 800df20:	280e      	cmp	r0, #14
 800df22:	d93a      	bls.n	800df9a <_scanf_float+0xd6>
 800df24:	f1b9 0f00 	cmp.w	r9, #0
 800df28:	d003      	beq.n	800df32 <_scanf_float+0x6e>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800df36:	f1ba 0f01 	cmp.w	sl, #1
 800df3a:	f200 8113 	bhi.w	800e164 <_scanf_float+0x2a0>
 800df3e:	455e      	cmp	r6, fp
 800df40:	f200 8105 	bhi.w	800e14e <_scanf_float+0x28a>
 800df44:	2501      	movs	r5, #1
 800df46:	4628      	mov	r0, r5
 800df48:	b007      	add	sp, #28
 800df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800df52:	2a0d      	cmp	r2, #13
 800df54:	d8e6      	bhi.n	800df24 <_scanf_float+0x60>
 800df56:	a101      	add	r1, pc, #4	; (adr r1, 800df5c <_scanf_float+0x98>)
 800df58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df5c:	0800e09b 	.word	0x0800e09b
 800df60:	0800df25 	.word	0x0800df25
 800df64:	0800df25 	.word	0x0800df25
 800df68:	0800df25 	.word	0x0800df25
 800df6c:	0800e0fb 	.word	0x0800e0fb
 800df70:	0800e0d3 	.word	0x0800e0d3
 800df74:	0800df25 	.word	0x0800df25
 800df78:	0800df25 	.word	0x0800df25
 800df7c:	0800e0a9 	.word	0x0800e0a9
 800df80:	0800df25 	.word	0x0800df25
 800df84:	0800df25 	.word	0x0800df25
 800df88:	0800df25 	.word	0x0800df25
 800df8c:	0800df25 	.word	0x0800df25
 800df90:	0800e061 	.word	0x0800e061
 800df94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800df98:	e7db      	b.n	800df52 <_scanf_float+0x8e>
 800df9a:	290e      	cmp	r1, #14
 800df9c:	d8c2      	bhi.n	800df24 <_scanf_float+0x60>
 800df9e:	a001      	add	r0, pc, #4	; (adr r0, 800dfa4 <_scanf_float+0xe0>)
 800dfa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dfa4:	0800e053 	.word	0x0800e053
 800dfa8:	0800df25 	.word	0x0800df25
 800dfac:	0800e053 	.word	0x0800e053
 800dfb0:	0800e0e7 	.word	0x0800e0e7
 800dfb4:	0800df25 	.word	0x0800df25
 800dfb8:	0800e001 	.word	0x0800e001
 800dfbc:	0800e03d 	.word	0x0800e03d
 800dfc0:	0800e03d 	.word	0x0800e03d
 800dfc4:	0800e03d 	.word	0x0800e03d
 800dfc8:	0800e03d 	.word	0x0800e03d
 800dfcc:	0800e03d 	.word	0x0800e03d
 800dfd0:	0800e03d 	.word	0x0800e03d
 800dfd4:	0800e03d 	.word	0x0800e03d
 800dfd8:	0800e03d 	.word	0x0800e03d
 800dfdc:	0800e03d 	.word	0x0800e03d
 800dfe0:	2b6e      	cmp	r3, #110	; 0x6e
 800dfe2:	d809      	bhi.n	800dff8 <_scanf_float+0x134>
 800dfe4:	2b60      	cmp	r3, #96	; 0x60
 800dfe6:	d8b2      	bhi.n	800df4e <_scanf_float+0x8a>
 800dfe8:	2b54      	cmp	r3, #84	; 0x54
 800dfea:	d077      	beq.n	800e0dc <_scanf_float+0x218>
 800dfec:	2b59      	cmp	r3, #89	; 0x59
 800dfee:	d199      	bne.n	800df24 <_scanf_float+0x60>
 800dff0:	2d07      	cmp	r5, #7
 800dff2:	d197      	bne.n	800df24 <_scanf_float+0x60>
 800dff4:	2508      	movs	r5, #8
 800dff6:	e029      	b.n	800e04c <_scanf_float+0x188>
 800dff8:	2b74      	cmp	r3, #116	; 0x74
 800dffa:	d06f      	beq.n	800e0dc <_scanf_float+0x218>
 800dffc:	2b79      	cmp	r3, #121	; 0x79
 800dffe:	e7f6      	b.n	800dfee <_scanf_float+0x12a>
 800e000:	6821      	ldr	r1, [r4, #0]
 800e002:	05c8      	lsls	r0, r1, #23
 800e004:	d51a      	bpl.n	800e03c <_scanf_float+0x178>
 800e006:	9b02      	ldr	r3, [sp, #8]
 800e008:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e00c:	6021      	str	r1, [r4, #0]
 800e00e:	f109 0901 	add.w	r9, r9, #1
 800e012:	b11b      	cbz	r3, 800e01c <_scanf_float+0x158>
 800e014:	3b01      	subs	r3, #1
 800e016:	3201      	adds	r2, #1
 800e018:	9302      	str	r3, [sp, #8]
 800e01a:	60a2      	str	r2, [r4, #8]
 800e01c:	68a3      	ldr	r3, [r4, #8]
 800e01e:	3b01      	subs	r3, #1
 800e020:	60a3      	str	r3, [r4, #8]
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	3301      	adds	r3, #1
 800e026:	6123      	str	r3, [r4, #16]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	607b      	str	r3, [r7, #4]
 800e030:	f340 8084 	ble.w	800e13c <_scanf_float+0x278>
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	3301      	adds	r3, #1
 800e038:	603b      	str	r3, [r7, #0]
 800e03a:	e766      	b.n	800df0a <_scanf_float+0x46>
 800e03c:	eb1a 0f05 	cmn.w	sl, r5
 800e040:	f47f af70 	bne.w	800df24 <_scanf_float+0x60>
 800e044:	6822      	ldr	r2, [r4, #0]
 800e046:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e04a:	6022      	str	r2, [r4, #0]
 800e04c:	f806 3b01 	strb.w	r3, [r6], #1
 800e050:	e7e4      	b.n	800e01c <_scanf_float+0x158>
 800e052:	6822      	ldr	r2, [r4, #0]
 800e054:	0610      	lsls	r0, r2, #24
 800e056:	f57f af65 	bpl.w	800df24 <_scanf_float+0x60>
 800e05a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e05e:	e7f4      	b.n	800e04a <_scanf_float+0x186>
 800e060:	f1ba 0f00 	cmp.w	sl, #0
 800e064:	d10e      	bne.n	800e084 <_scanf_float+0x1c0>
 800e066:	f1b9 0f00 	cmp.w	r9, #0
 800e06a:	d10e      	bne.n	800e08a <_scanf_float+0x1c6>
 800e06c:	6822      	ldr	r2, [r4, #0]
 800e06e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e072:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e076:	d108      	bne.n	800e08a <_scanf_float+0x1c6>
 800e078:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e07c:	6022      	str	r2, [r4, #0]
 800e07e:	f04f 0a01 	mov.w	sl, #1
 800e082:	e7e3      	b.n	800e04c <_scanf_float+0x188>
 800e084:	f1ba 0f02 	cmp.w	sl, #2
 800e088:	d055      	beq.n	800e136 <_scanf_float+0x272>
 800e08a:	2d01      	cmp	r5, #1
 800e08c:	d002      	beq.n	800e094 <_scanf_float+0x1d0>
 800e08e:	2d04      	cmp	r5, #4
 800e090:	f47f af48 	bne.w	800df24 <_scanf_float+0x60>
 800e094:	3501      	adds	r5, #1
 800e096:	b2ed      	uxtb	r5, r5
 800e098:	e7d8      	b.n	800e04c <_scanf_float+0x188>
 800e09a:	f1ba 0f01 	cmp.w	sl, #1
 800e09e:	f47f af41 	bne.w	800df24 <_scanf_float+0x60>
 800e0a2:	f04f 0a02 	mov.w	sl, #2
 800e0a6:	e7d1      	b.n	800e04c <_scanf_float+0x188>
 800e0a8:	b97d      	cbnz	r5, 800e0ca <_scanf_float+0x206>
 800e0aa:	f1b9 0f00 	cmp.w	r9, #0
 800e0ae:	f47f af3c 	bne.w	800df2a <_scanf_float+0x66>
 800e0b2:	6822      	ldr	r2, [r4, #0]
 800e0b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e0b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e0bc:	f47f af39 	bne.w	800df32 <_scanf_float+0x6e>
 800e0c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0c4:	6022      	str	r2, [r4, #0]
 800e0c6:	2501      	movs	r5, #1
 800e0c8:	e7c0      	b.n	800e04c <_scanf_float+0x188>
 800e0ca:	2d03      	cmp	r5, #3
 800e0cc:	d0e2      	beq.n	800e094 <_scanf_float+0x1d0>
 800e0ce:	2d05      	cmp	r5, #5
 800e0d0:	e7de      	b.n	800e090 <_scanf_float+0x1cc>
 800e0d2:	2d02      	cmp	r5, #2
 800e0d4:	f47f af26 	bne.w	800df24 <_scanf_float+0x60>
 800e0d8:	2503      	movs	r5, #3
 800e0da:	e7b7      	b.n	800e04c <_scanf_float+0x188>
 800e0dc:	2d06      	cmp	r5, #6
 800e0de:	f47f af21 	bne.w	800df24 <_scanf_float+0x60>
 800e0e2:	2507      	movs	r5, #7
 800e0e4:	e7b2      	b.n	800e04c <_scanf_float+0x188>
 800e0e6:	6822      	ldr	r2, [r4, #0]
 800e0e8:	0591      	lsls	r1, r2, #22
 800e0ea:	f57f af1b 	bpl.w	800df24 <_scanf_float+0x60>
 800e0ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e0f2:	6022      	str	r2, [r4, #0]
 800e0f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0f8:	e7a8      	b.n	800e04c <_scanf_float+0x188>
 800e0fa:	6822      	ldr	r2, [r4, #0]
 800e0fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e100:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e104:	d006      	beq.n	800e114 <_scanf_float+0x250>
 800e106:	0550      	lsls	r0, r2, #21
 800e108:	f57f af0c 	bpl.w	800df24 <_scanf_float+0x60>
 800e10c:	f1b9 0f00 	cmp.w	r9, #0
 800e110:	f43f af0f 	beq.w	800df32 <_scanf_float+0x6e>
 800e114:	0591      	lsls	r1, r2, #22
 800e116:	bf58      	it	pl
 800e118:	9901      	ldrpl	r1, [sp, #4]
 800e11a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e11e:	bf58      	it	pl
 800e120:	eba9 0101 	subpl.w	r1, r9, r1
 800e124:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e128:	bf58      	it	pl
 800e12a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e12e:	6022      	str	r2, [r4, #0]
 800e130:	f04f 0900 	mov.w	r9, #0
 800e134:	e78a      	b.n	800e04c <_scanf_float+0x188>
 800e136:	f04f 0a03 	mov.w	sl, #3
 800e13a:	e787      	b.n	800e04c <_scanf_float+0x188>
 800e13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e140:	4639      	mov	r1, r7
 800e142:	4640      	mov	r0, r8
 800e144:	4798      	blx	r3
 800e146:	2800      	cmp	r0, #0
 800e148:	f43f aedf 	beq.w	800df0a <_scanf_float+0x46>
 800e14c:	e6ea      	b.n	800df24 <_scanf_float+0x60>
 800e14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e156:	463a      	mov	r2, r7
 800e158:	4640      	mov	r0, r8
 800e15a:	4798      	blx	r3
 800e15c:	6923      	ldr	r3, [r4, #16]
 800e15e:	3b01      	subs	r3, #1
 800e160:	6123      	str	r3, [r4, #16]
 800e162:	e6ec      	b.n	800df3e <_scanf_float+0x7a>
 800e164:	1e6b      	subs	r3, r5, #1
 800e166:	2b06      	cmp	r3, #6
 800e168:	d825      	bhi.n	800e1b6 <_scanf_float+0x2f2>
 800e16a:	2d02      	cmp	r5, #2
 800e16c:	d836      	bhi.n	800e1dc <_scanf_float+0x318>
 800e16e:	455e      	cmp	r6, fp
 800e170:	f67f aee8 	bls.w	800df44 <_scanf_float+0x80>
 800e174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e178:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e17c:	463a      	mov	r2, r7
 800e17e:	4640      	mov	r0, r8
 800e180:	4798      	blx	r3
 800e182:	6923      	ldr	r3, [r4, #16]
 800e184:	3b01      	subs	r3, #1
 800e186:	6123      	str	r3, [r4, #16]
 800e188:	e7f1      	b.n	800e16e <_scanf_float+0x2aa>
 800e18a:	9802      	ldr	r0, [sp, #8]
 800e18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e190:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e194:	9002      	str	r0, [sp, #8]
 800e196:	463a      	mov	r2, r7
 800e198:	4640      	mov	r0, r8
 800e19a:	4798      	blx	r3
 800e19c:	6923      	ldr	r3, [r4, #16]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	6123      	str	r3, [r4, #16]
 800e1a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e1a6:	fa5f fa8a 	uxtb.w	sl, sl
 800e1aa:	f1ba 0f02 	cmp.w	sl, #2
 800e1ae:	d1ec      	bne.n	800e18a <_scanf_float+0x2c6>
 800e1b0:	3d03      	subs	r5, #3
 800e1b2:	b2ed      	uxtb	r5, r5
 800e1b4:	1b76      	subs	r6, r6, r5
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	05da      	lsls	r2, r3, #23
 800e1ba:	d52f      	bpl.n	800e21c <_scanf_float+0x358>
 800e1bc:	055b      	lsls	r3, r3, #21
 800e1be:	d510      	bpl.n	800e1e2 <_scanf_float+0x31e>
 800e1c0:	455e      	cmp	r6, fp
 800e1c2:	f67f aebf 	bls.w	800df44 <_scanf_float+0x80>
 800e1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e1ce:	463a      	mov	r2, r7
 800e1d0:	4640      	mov	r0, r8
 800e1d2:	4798      	blx	r3
 800e1d4:	6923      	ldr	r3, [r4, #16]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	6123      	str	r3, [r4, #16]
 800e1da:	e7f1      	b.n	800e1c0 <_scanf_float+0x2fc>
 800e1dc:	46aa      	mov	sl, r5
 800e1de:	9602      	str	r6, [sp, #8]
 800e1e0:	e7df      	b.n	800e1a2 <_scanf_float+0x2de>
 800e1e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e1e6:	6923      	ldr	r3, [r4, #16]
 800e1e8:	2965      	cmp	r1, #101	; 0x65
 800e1ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e1ee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800e1f2:	6123      	str	r3, [r4, #16]
 800e1f4:	d00c      	beq.n	800e210 <_scanf_float+0x34c>
 800e1f6:	2945      	cmp	r1, #69	; 0x45
 800e1f8:	d00a      	beq.n	800e210 <_scanf_float+0x34c>
 800e1fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1fe:	463a      	mov	r2, r7
 800e200:	4640      	mov	r0, r8
 800e202:	4798      	blx	r3
 800e204:	6923      	ldr	r3, [r4, #16]
 800e206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	1eb5      	subs	r5, r6, #2
 800e20e:	6123      	str	r3, [r4, #16]
 800e210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e214:	463a      	mov	r2, r7
 800e216:	4640      	mov	r0, r8
 800e218:	4798      	blx	r3
 800e21a:	462e      	mov	r6, r5
 800e21c:	6825      	ldr	r5, [r4, #0]
 800e21e:	f015 0510 	ands.w	r5, r5, #16
 800e222:	d158      	bne.n	800e2d6 <_scanf_float+0x412>
 800e224:	7035      	strb	r5, [r6, #0]
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e22c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e230:	d11c      	bne.n	800e26c <_scanf_float+0x3a8>
 800e232:	9b01      	ldr	r3, [sp, #4]
 800e234:	454b      	cmp	r3, r9
 800e236:	eba3 0209 	sub.w	r2, r3, r9
 800e23a:	d124      	bne.n	800e286 <_scanf_float+0x3c2>
 800e23c:	2200      	movs	r2, #0
 800e23e:	4659      	mov	r1, fp
 800e240:	4640      	mov	r0, r8
 800e242:	f000 ff7f 	bl	800f144 <_strtod_r>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	6821      	ldr	r1, [r4, #0]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f011 0f02 	tst.w	r1, #2
 800e250:	ec57 6b10 	vmov	r6, r7, d0
 800e254:	f103 0204 	add.w	r2, r3, #4
 800e258:	d020      	beq.n	800e29c <_scanf_float+0x3d8>
 800e25a:	9903      	ldr	r1, [sp, #12]
 800e25c:	600a      	str	r2, [r1, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	e9c3 6700 	strd	r6, r7, [r3]
 800e264:	68e3      	ldr	r3, [r4, #12]
 800e266:	3301      	adds	r3, #1
 800e268:	60e3      	str	r3, [r4, #12]
 800e26a:	e66c      	b.n	800df46 <_scanf_float+0x82>
 800e26c:	9b04      	ldr	r3, [sp, #16]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d0e4      	beq.n	800e23c <_scanf_float+0x378>
 800e272:	9905      	ldr	r1, [sp, #20]
 800e274:	230a      	movs	r3, #10
 800e276:	462a      	mov	r2, r5
 800e278:	3101      	adds	r1, #1
 800e27a:	4640      	mov	r0, r8
 800e27c:	f000 ffec 	bl	800f258 <_strtol_r>
 800e280:	9b04      	ldr	r3, [sp, #16]
 800e282:	9e05      	ldr	r6, [sp, #20]
 800e284:	1ac2      	subs	r2, r0, r3
 800e286:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e28a:	429e      	cmp	r6, r3
 800e28c:	bf28      	it	cs
 800e28e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e292:	4912      	ldr	r1, [pc, #72]	; (800e2dc <_scanf_float+0x418>)
 800e294:	4630      	mov	r0, r6
 800e296:	f000 f83b 	bl	800e310 <siprintf>
 800e29a:	e7cf      	b.n	800e23c <_scanf_float+0x378>
 800e29c:	f011 0f04 	tst.w	r1, #4
 800e2a0:	9903      	ldr	r1, [sp, #12]
 800e2a2:	600a      	str	r2, [r1, #0]
 800e2a4:	d1db      	bne.n	800e25e <_scanf_float+0x39a>
 800e2a6:	f8d3 8000 	ldr.w	r8, [r3]
 800e2aa:	ee10 2a10 	vmov	r2, s0
 800e2ae:	ee10 0a10 	vmov	r0, s0
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	f7f2 fc51 	bl	8000b5c <__aeabi_dcmpun>
 800e2ba:	b128      	cbz	r0, 800e2c8 <_scanf_float+0x404>
 800e2bc:	4808      	ldr	r0, [pc, #32]	; (800e2e0 <_scanf_float+0x41c>)
 800e2be:	f000 f821 	bl	800e304 <nanf>
 800e2c2:	ed88 0a00 	vstr	s0, [r8]
 800e2c6:	e7cd      	b.n	800e264 <_scanf_float+0x3a0>
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f2 fc7c 	bl	8000bc8 <__aeabi_d2f>
 800e2d0:	f8c8 0000 	str.w	r0, [r8]
 800e2d4:	e7c6      	b.n	800e264 <_scanf_float+0x3a0>
 800e2d6:	2500      	movs	r5, #0
 800e2d8:	e635      	b.n	800df46 <_scanf_float+0x82>
 800e2da:	bf00      	nop
 800e2dc:	08013b90 	.word	0x08013b90
 800e2e0:	08013e85 	.word	0x08013e85

0800e2e4 <_sbrk_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d06      	ldr	r5, [pc, #24]	; (800e300 <_sbrk_r+0x1c>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	602b      	str	r3, [r5, #0]
 800e2f0:	f7f8 faf0 	bl	80068d4 <_sbrk>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	d102      	bne.n	800e2fe <_sbrk_r+0x1a>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	b103      	cbz	r3, 800e2fe <_sbrk_r+0x1a>
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	2000a0a4 	.word	0x2000a0a4

0800e304 <nanf>:
 800e304:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e30c <nanf+0x8>
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	7fc00000 	.word	0x7fc00000

0800e310 <siprintf>:
 800e310:	b40e      	push	{r1, r2, r3}
 800e312:	b500      	push	{lr}
 800e314:	b09c      	sub	sp, #112	; 0x70
 800e316:	ab1d      	add	r3, sp, #116	; 0x74
 800e318:	9002      	str	r0, [sp, #8]
 800e31a:	9006      	str	r0, [sp, #24]
 800e31c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e320:	4809      	ldr	r0, [pc, #36]	; (800e348 <siprintf+0x38>)
 800e322:	9107      	str	r1, [sp, #28]
 800e324:	9104      	str	r1, [sp, #16]
 800e326:	4909      	ldr	r1, [pc, #36]	; (800e34c <siprintf+0x3c>)
 800e328:	f853 2b04 	ldr.w	r2, [r3], #4
 800e32c:	9105      	str	r1, [sp, #20]
 800e32e:	6800      	ldr	r0, [r0, #0]
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	a902      	add	r1, sp, #8
 800e334:	f002 f8b2 	bl	801049c <_svfiprintf_r>
 800e338:	9b02      	ldr	r3, [sp, #8]
 800e33a:	2200      	movs	r2, #0
 800e33c:	701a      	strb	r2, [r3, #0]
 800e33e:	b01c      	add	sp, #112	; 0x70
 800e340:	f85d eb04 	ldr.w	lr, [sp], #4
 800e344:	b003      	add	sp, #12
 800e346:	4770      	bx	lr
 800e348:	200001dc 	.word	0x200001dc
 800e34c:	ffff0208 	.word	0xffff0208

0800e350 <siscanf>:
 800e350:	b40e      	push	{r1, r2, r3}
 800e352:	b510      	push	{r4, lr}
 800e354:	b09f      	sub	sp, #124	; 0x7c
 800e356:	ac21      	add	r4, sp, #132	; 0x84
 800e358:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e35c:	f854 2b04 	ldr.w	r2, [r4], #4
 800e360:	9201      	str	r2, [sp, #4]
 800e362:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e366:	9004      	str	r0, [sp, #16]
 800e368:	9008      	str	r0, [sp, #32]
 800e36a:	f7f1 ff43 	bl	80001f4 <strlen>
 800e36e:	4b0c      	ldr	r3, [pc, #48]	; (800e3a0 <siscanf+0x50>)
 800e370:	9005      	str	r0, [sp, #20]
 800e372:	9009      	str	r0, [sp, #36]	; 0x24
 800e374:	930d      	str	r3, [sp, #52]	; 0x34
 800e376:	480b      	ldr	r0, [pc, #44]	; (800e3a4 <siscanf+0x54>)
 800e378:	9a01      	ldr	r2, [sp, #4]
 800e37a:	6800      	ldr	r0, [r0, #0]
 800e37c:	9403      	str	r4, [sp, #12]
 800e37e:	2300      	movs	r3, #0
 800e380:	9311      	str	r3, [sp, #68]	; 0x44
 800e382:	9316      	str	r3, [sp, #88]	; 0x58
 800e384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e388:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e38c:	a904      	add	r1, sp, #16
 800e38e:	4623      	mov	r3, r4
 800e390:	f002 f9de 	bl	8010750 <__ssvfiscanf_r>
 800e394:	b01f      	add	sp, #124	; 0x7c
 800e396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e39a:	b003      	add	sp, #12
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	0800e3cb 	.word	0x0800e3cb
 800e3a4:	200001dc 	.word	0x200001dc

0800e3a8 <__sread>:
 800e3a8:	b510      	push	{r4, lr}
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b0:	f002 fe26 	bl	8011000 <_read_r>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	bfab      	itete	ge
 800e3b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e3bc:	181b      	addge	r3, r3, r0
 800e3be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3c2:	bfac      	ite	ge
 800e3c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3c6:	81a3      	strhlt	r3, [r4, #12]
 800e3c8:	bd10      	pop	{r4, pc}

0800e3ca <__seofread>:
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	4770      	bx	lr

0800e3ce <__swrite>:
 800e3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d2:	461f      	mov	r7, r3
 800e3d4:	898b      	ldrh	r3, [r1, #12]
 800e3d6:	05db      	lsls	r3, r3, #23
 800e3d8:	4605      	mov	r5, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	4616      	mov	r6, r2
 800e3de:	d505      	bpl.n	800e3ec <__swrite+0x1e>
 800e3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f001 fb12 	bl	800fa10 <_lseek_r>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	4632      	mov	r2, r6
 800e3fa:	463b      	mov	r3, r7
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e402:	f000 bf6f 	b.w	800f2e4 <_write_r>

0800e406 <__sseek>:
 800e406:	b510      	push	{r4, lr}
 800e408:	460c      	mov	r4, r1
 800e40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e40e:	f001 faff 	bl	800fa10 <_lseek_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	bf15      	itete	ne
 800e418:	6560      	strne	r0, [r4, #84]	; 0x54
 800e41a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e41e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e422:	81a3      	strheq	r3, [r4, #12]
 800e424:	bf18      	it	ne
 800e426:	81a3      	strhne	r3, [r4, #12]
 800e428:	bd10      	pop	{r4, pc}

0800e42a <__sclose>:
 800e42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e42e:	f000 bf6b 	b.w	800f308 <_close_r>

0800e432 <strcat>:
 800e432:	b510      	push	{r4, lr}
 800e434:	4602      	mov	r2, r0
 800e436:	7814      	ldrb	r4, [r2, #0]
 800e438:	4613      	mov	r3, r2
 800e43a:	3201      	adds	r2, #1
 800e43c:	2c00      	cmp	r4, #0
 800e43e:	d1fa      	bne.n	800e436 <strcat+0x4>
 800e440:	3b01      	subs	r3, #1
 800e442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e44a:	2a00      	cmp	r2, #0
 800e44c:	d1f9      	bne.n	800e442 <strcat+0x10>
 800e44e:	bd10      	pop	{r4, pc}

0800e450 <strchr>:
 800e450:	b2c9      	uxtb	r1, r1
 800e452:	4603      	mov	r3, r0
 800e454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e458:	b11a      	cbz	r2, 800e462 <strchr+0x12>
 800e45a:	428a      	cmp	r2, r1
 800e45c:	d1f9      	bne.n	800e452 <strchr+0x2>
 800e45e:	4618      	mov	r0, r3
 800e460:	4770      	bx	lr
 800e462:	2900      	cmp	r1, #0
 800e464:	bf18      	it	ne
 800e466:	2300      	movne	r3, #0
 800e468:	e7f9      	b.n	800e45e <strchr+0xe>

0800e46a <strcpy>:
 800e46a:	4603      	mov	r3, r0
 800e46c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e470:	f803 2b01 	strb.w	r2, [r3], #1
 800e474:	2a00      	cmp	r2, #0
 800e476:	d1f9      	bne.n	800e46c <strcpy+0x2>
 800e478:	4770      	bx	lr

0800e47a <strncmp>:
 800e47a:	b510      	push	{r4, lr}
 800e47c:	b16a      	cbz	r2, 800e49a <strncmp+0x20>
 800e47e:	3901      	subs	r1, #1
 800e480:	1884      	adds	r4, r0, r2
 800e482:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e486:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d103      	bne.n	800e496 <strncmp+0x1c>
 800e48e:	42a0      	cmp	r0, r4
 800e490:	d001      	beq.n	800e496 <strncmp+0x1c>
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1f5      	bne.n	800e482 <strncmp+0x8>
 800e496:	1a98      	subs	r0, r3, r2
 800e498:	bd10      	pop	{r4, pc}
 800e49a:	4610      	mov	r0, r2
 800e49c:	e7fc      	b.n	800e498 <strncmp+0x1e>

0800e49e <strncpy>:
 800e49e:	b510      	push	{r4, lr}
 800e4a0:	3901      	subs	r1, #1
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	b132      	cbz	r2, 800e4b4 <strncpy+0x16>
 800e4a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4aa:	f803 4b01 	strb.w	r4, [r3], #1
 800e4ae:	3a01      	subs	r2, #1
 800e4b0:	2c00      	cmp	r4, #0
 800e4b2:	d1f7      	bne.n	800e4a4 <strncpy+0x6>
 800e4b4:	441a      	add	r2, r3
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d100      	bne.n	800e4be <strncpy+0x20>
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	f803 1b01 	strb.w	r1, [r3], #1
 800e4c2:	e7f9      	b.n	800e4b8 <strncpy+0x1a>

0800e4c4 <strstr>:
 800e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c6:	780c      	ldrb	r4, [r1, #0]
 800e4c8:	b164      	cbz	r4, 800e4e4 <strstr+0x20>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	781a      	ldrb	r2, [r3, #0]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	1c5e      	adds	r6, r3, #1
 800e4d2:	b90a      	cbnz	r2, 800e4d8 <strstr+0x14>
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	e005      	b.n	800e4e4 <strstr+0x20>
 800e4d8:	4294      	cmp	r4, r2
 800e4da:	d108      	bne.n	800e4ee <strstr+0x2a>
 800e4dc:	460d      	mov	r5, r1
 800e4de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e4e2:	b902      	cbnz	r2, 800e4e6 <strstr+0x22>
 800e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e4ea:	4297      	cmp	r7, r2
 800e4ec:	d0f7      	beq.n	800e4de <strstr+0x1a>
 800e4ee:	4633      	mov	r3, r6
 800e4f0:	e7ec      	b.n	800e4cc <strstr+0x8>

0800e4f2 <sulp>:
 800e4f2:	b570      	push	{r4, r5, r6, lr}
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	460d      	mov	r5, r1
 800e4f8:	ec45 4b10 	vmov	d0, r4, r5
 800e4fc:	4616      	mov	r6, r2
 800e4fe:	f001 fe23 	bl	8010148 <__ulp>
 800e502:	ec51 0b10 	vmov	r0, r1, d0
 800e506:	b17e      	cbz	r6, 800e528 <sulp+0x36>
 800e508:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e50c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e510:	2b00      	cmp	r3, #0
 800e512:	dd09      	ble.n	800e528 <sulp+0x36>
 800e514:	051b      	lsls	r3, r3, #20
 800e516:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e51a:	2400      	movs	r4, #0
 800e51c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e520:	4622      	mov	r2, r4
 800e522:	462b      	mov	r3, r5
 800e524:	f7f2 f880 	bl	8000628 <__aeabi_dmul>
 800e528:	bd70      	pop	{r4, r5, r6, pc}
 800e52a:	0000      	movs	r0, r0
 800e52c:	0000      	movs	r0, r0
	...

0800e530 <_strtod_l>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	b0a3      	sub	sp, #140	; 0x8c
 800e536:	461f      	mov	r7, r3
 800e538:	2300      	movs	r3, #0
 800e53a:	931e      	str	r3, [sp, #120]	; 0x78
 800e53c:	4ba4      	ldr	r3, [pc, #656]	; (800e7d0 <_strtod_l+0x2a0>)
 800e53e:	9219      	str	r2, [sp, #100]	; 0x64
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	9307      	str	r3, [sp, #28]
 800e544:	4604      	mov	r4, r0
 800e546:	4618      	mov	r0, r3
 800e548:	4688      	mov	r8, r1
 800e54a:	f7f1 fe53 	bl	80001f4 <strlen>
 800e54e:	f04f 0a00 	mov.w	sl, #0
 800e552:	4605      	mov	r5, r0
 800e554:	f04f 0b00 	mov.w	fp, #0
 800e558:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e55e:	781a      	ldrb	r2, [r3, #0]
 800e560:	2a2b      	cmp	r2, #43	; 0x2b
 800e562:	d04c      	beq.n	800e5fe <_strtod_l+0xce>
 800e564:	d839      	bhi.n	800e5da <_strtod_l+0xaa>
 800e566:	2a0d      	cmp	r2, #13
 800e568:	d832      	bhi.n	800e5d0 <_strtod_l+0xa0>
 800e56a:	2a08      	cmp	r2, #8
 800e56c:	d832      	bhi.n	800e5d4 <_strtod_l+0xa4>
 800e56e:	2a00      	cmp	r2, #0
 800e570:	d03c      	beq.n	800e5ec <_strtod_l+0xbc>
 800e572:	2300      	movs	r3, #0
 800e574:	930e      	str	r3, [sp, #56]	; 0x38
 800e576:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e578:	7833      	ldrb	r3, [r6, #0]
 800e57a:	2b30      	cmp	r3, #48	; 0x30
 800e57c:	f040 80b4 	bne.w	800e6e8 <_strtod_l+0x1b8>
 800e580:	7873      	ldrb	r3, [r6, #1]
 800e582:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e586:	2b58      	cmp	r3, #88	; 0x58
 800e588:	d16c      	bne.n	800e664 <_strtod_l+0x134>
 800e58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	ab1e      	add	r3, sp, #120	; 0x78
 800e590:	9702      	str	r7, [sp, #8]
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	4a8f      	ldr	r2, [pc, #572]	; (800e7d4 <_strtod_l+0x2a4>)
 800e596:	ab1f      	add	r3, sp, #124	; 0x7c
 800e598:	a91d      	add	r1, sp, #116	; 0x74
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 ff2c 	bl	800f3f8 <__gethex>
 800e5a0:	f010 0707 	ands.w	r7, r0, #7
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	d005      	beq.n	800e5b4 <_strtod_l+0x84>
 800e5a8:	2f06      	cmp	r7, #6
 800e5aa:	d12a      	bne.n	800e602 <_strtod_l+0xd2>
 800e5ac:	3601      	adds	r6, #1
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	961d      	str	r6, [sp, #116]	; 0x74
 800e5b2:	930e      	str	r3, [sp, #56]	; 0x38
 800e5b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f040 8596 	bne.w	800f0e8 <_strtod_l+0xbb8>
 800e5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5be:	b1db      	cbz	r3, 800e5f8 <_strtod_l+0xc8>
 800e5c0:	4652      	mov	r2, sl
 800e5c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e5c6:	ec43 2b10 	vmov	d0, r2, r3
 800e5ca:	b023      	add	sp, #140	; 0x8c
 800e5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d0:	2a20      	cmp	r2, #32
 800e5d2:	d1ce      	bne.n	800e572 <_strtod_l+0x42>
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	931d      	str	r3, [sp, #116]	; 0x74
 800e5d8:	e7c0      	b.n	800e55c <_strtod_l+0x2c>
 800e5da:	2a2d      	cmp	r2, #45	; 0x2d
 800e5dc:	d1c9      	bne.n	800e572 <_strtod_l+0x42>
 800e5de:	2201      	movs	r2, #1
 800e5e0:	920e      	str	r2, [sp, #56]	; 0x38
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	921d      	str	r2, [sp, #116]	; 0x74
 800e5e6:	785b      	ldrb	r3, [r3, #1]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1c4      	bne.n	800e576 <_strtod_l+0x46>
 800e5ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f040 8576 	bne.w	800f0e4 <_strtod_l+0xbb4>
 800e5f8:	4652      	mov	r2, sl
 800e5fa:	465b      	mov	r3, fp
 800e5fc:	e7e3      	b.n	800e5c6 <_strtod_l+0x96>
 800e5fe:	2200      	movs	r2, #0
 800e600:	e7ee      	b.n	800e5e0 <_strtod_l+0xb0>
 800e602:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e604:	b13a      	cbz	r2, 800e616 <_strtod_l+0xe6>
 800e606:	2135      	movs	r1, #53	; 0x35
 800e608:	a820      	add	r0, sp, #128	; 0x80
 800e60a:	f001 fea8 	bl	801035e <__copybits>
 800e60e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e610:	4620      	mov	r0, r4
 800e612:	f001 fa6d 	bl	800faf0 <_Bfree>
 800e616:	3f01      	subs	r7, #1
 800e618:	2f05      	cmp	r7, #5
 800e61a:	d807      	bhi.n	800e62c <_strtod_l+0xfc>
 800e61c:	e8df f007 	tbb	[pc, r7]
 800e620:	1d180b0e 	.word	0x1d180b0e
 800e624:	030e      	.short	0x030e
 800e626:	f04f 0b00 	mov.w	fp, #0
 800e62a:	46da      	mov	sl, fp
 800e62c:	0728      	lsls	r0, r5, #28
 800e62e:	d5c1      	bpl.n	800e5b4 <_strtod_l+0x84>
 800e630:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e634:	e7be      	b.n	800e5b4 <_strtod_l+0x84>
 800e636:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e63a:	e7f7      	b.n	800e62c <_strtod_l+0xfc>
 800e63c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e640:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e642:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e646:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e64a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e64e:	e7ed      	b.n	800e62c <_strtod_l+0xfc>
 800e650:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e7d8 <_strtod_l+0x2a8>
 800e654:	f04f 0a00 	mov.w	sl, #0
 800e658:	e7e8      	b.n	800e62c <_strtod_l+0xfc>
 800e65a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e65e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e662:	e7e3      	b.n	800e62c <_strtod_l+0xfc>
 800e664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e666:	1c5a      	adds	r2, r3, #1
 800e668:	921d      	str	r2, [sp, #116]	; 0x74
 800e66a:	785b      	ldrb	r3, [r3, #1]
 800e66c:	2b30      	cmp	r3, #48	; 0x30
 800e66e:	d0f9      	beq.n	800e664 <_strtod_l+0x134>
 800e670:	2b00      	cmp	r3, #0
 800e672:	d09f      	beq.n	800e5b4 <_strtod_l+0x84>
 800e674:	2301      	movs	r3, #1
 800e676:	f04f 0900 	mov.w	r9, #0
 800e67a:	9304      	str	r3, [sp, #16]
 800e67c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e67e:	930a      	str	r3, [sp, #40]	; 0x28
 800e680:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e684:	464f      	mov	r7, r9
 800e686:	220a      	movs	r2, #10
 800e688:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e68a:	7806      	ldrb	r6, [r0, #0]
 800e68c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e690:	b2d9      	uxtb	r1, r3
 800e692:	2909      	cmp	r1, #9
 800e694:	d92a      	bls.n	800e6ec <_strtod_l+0x1bc>
 800e696:	9907      	ldr	r1, [sp, #28]
 800e698:	462a      	mov	r2, r5
 800e69a:	f7ff feee 	bl	800e47a <strncmp>
 800e69e:	b398      	cbz	r0, 800e708 <_strtod_l+0x1d8>
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	4633      	mov	r3, r6
 800e6a4:	463d      	mov	r5, r7
 800e6a6:	9007      	str	r0, [sp, #28]
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	2b65      	cmp	r3, #101	; 0x65
 800e6ac:	d001      	beq.n	800e6b2 <_strtod_l+0x182>
 800e6ae:	2b45      	cmp	r3, #69	; 0x45
 800e6b0:	d118      	bne.n	800e6e4 <_strtod_l+0x1b4>
 800e6b2:	b91d      	cbnz	r5, 800e6bc <_strtod_l+0x18c>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	4303      	orrs	r3, r0
 800e6b8:	d098      	beq.n	800e5ec <_strtod_l+0xbc>
 800e6ba:	2500      	movs	r5, #0
 800e6bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e6c0:	f108 0301 	add.w	r3, r8, #1
 800e6c4:	931d      	str	r3, [sp, #116]	; 0x74
 800e6c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e6ca:	2b2b      	cmp	r3, #43	; 0x2b
 800e6cc:	d075      	beq.n	800e7ba <_strtod_l+0x28a>
 800e6ce:	2b2d      	cmp	r3, #45	; 0x2d
 800e6d0:	d07b      	beq.n	800e7ca <_strtod_l+0x29a>
 800e6d2:	f04f 0c00 	mov.w	ip, #0
 800e6d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e6da:	2909      	cmp	r1, #9
 800e6dc:	f240 8082 	bls.w	800e7e4 <_strtod_l+0x2b4>
 800e6e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e6e4:	2600      	movs	r6, #0
 800e6e6:	e09d      	b.n	800e824 <_strtod_l+0x2f4>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	e7c4      	b.n	800e676 <_strtod_l+0x146>
 800e6ec:	2f08      	cmp	r7, #8
 800e6ee:	bfd8      	it	le
 800e6f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e6f2:	f100 0001 	add.w	r0, r0, #1
 800e6f6:	bfda      	itte	le
 800e6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e6fc:	9309      	strle	r3, [sp, #36]	; 0x24
 800e6fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e702:	3701      	adds	r7, #1
 800e704:	901d      	str	r0, [sp, #116]	; 0x74
 800e706:	e7bf      	b.n	800e688 <_strtod_l+0x158>
 800e708:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e70a:	195a      	adds	r2, r3, r5
 800e70c:	921d      	str	r2, [sp, #116]	; 0x74
 800e70e:	5d5b      	ldrb	r3, [r3, r5]
 800e710:	2f00      	cmp	r7, #0
 800e712:	d037      	beq.n	800e784 <_strtod_l+0x254>
 800e714:	9007      	str	r0, [sp, #28]
 800e716:	463d      	mov	r5, r7
 800e718:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e71c:	2a09      	cmp	r2, #9
 800e71e:	d912      	bls.n	800e746 <_strtod_l+0x216>
 800e720:	2201      	movs	r2, #1
 800e722:	e7c2      	b.n	800e6aa <_strtod_l+0x17a>
 800e724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	921d      	str	r2, [sp, #116]	; 0x74
 800e72a:	785b      	ldrb	r3, [r3, #1]
 800e72c:	3001      	adds	r0, #1
 800e72e:	2b30      	cmp	r3, #48	; 0x30
 800e730:	d0f8      	beq.n	800e724 <_strtod_l+0x1f4>
 800e732:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e736:	2a08      	cmp	r2, #8
 800e738:	f200 84db 	bhi.w	800f0f2 <_strtod_l+0xbc2>
 800e73c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e73e:	9007      	str	r0, [sp, #28]
 800e740:	2000      	movs	r0, #0
 800e742:	920a      	str	r2, [sp, #40]	; 0x28
 800e744:	4605      	mov	r5, r0
 800e746:	3b30      	subs	r3, #48	; 0x30
 800e748:	f100 0201 	add.w	r2, r0, #1
 800e74c:	d014      	beq.n	800e778 <_strtod_l+0x248>
 800e74e:	9907      	ldr	r1, [sp, #28]
 800e750:	4411      	add	r1, r2
 800e752:	9107      	str	r1, [sp, #28]
 800e754:	462a      	mov	r2, r5
 800e756:	eb00 0e05 	add.w	lr, r0, r5
 800e75a:	210a      	movs	r1, #10
 800e75c:	4572      	cmp	r2, lr
 800e75e:	d113      	bne.n	800e788 <_strtod_l+0x258>
 800e760:	182a      	adds	r2, r5, r0
 800e762:	2a08      	cmp	r2, #8
 800e764:	f105 0501 	add.w	r5, r5, #1
 800e768:	4405      	add	r5, r0
 800e76a:	dc1c      	bgt.n	800e7a6 <_strtod_l+0x276>
 800e76c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e76e:	220a      	movs	r2, #10
 800e770:	fb02 3301 	mla	r3, r2, r1, r3
 800e774:	9309      	str	r3, [sp, #36]	; 0x24
 800e776:	2200      	movs	r2, #0
 800e778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e77a:	1c59      	adds	r1, r3, #1
 800e77c:	911d      	str	r1, [sp, #116]	; 0x74
 800e77e:	785b      	ldrb	r3, [r3, #1]
 800e780:	4610      	mov	r0, r2
 800e782:	e7c9      	b.n	800e718 <_strtod_l+0x1e8>
 800e784:	4638      	mov	r0, r7
 800e786:	e7d2      	b.n	800e72e <_strtod_l+0x1fe>
 800e788:	2a08      	cmp	r2, #8
 800e78a:	dc04      	bgt.n	800e796 <_strtod_l+0x266>
 800e78c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e78e:	434e      	muls	r6, r1
 800e790:	9609      	str	r6, [sp, #36]	; 0x24
 800e792:	3201      	adds	r2, #1
 800e794:	e7e2      	b.n	800e75c <_strtod_l+0x22c>
 800e796:	f102 0c01 	add.w	ip, r2, #1
 800e79a:	f1bc 0f10 	cmp.w	ip, #16
 800e79e:	bfd8      	it	le
 800e7a0:	fb01 f909 	mulle.w	r9, r1, r9
 800e7a4:	e7f5      	b.n	800e792 <_strtod_l+0x262>
 800e7a6:	2d10      	cmp	r5, #16
 800e7a8:	bfdc      	itt	le
 800e7aa:	220a      	movle	r2, #10
 800e7ac:	fb02 3909 	mlale	r9, r2, r9, r3
 800e7b0:	e7e1      	b.n	800e776 <_strtod_l+0x246>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	9307      	str	r3, [sp, #28]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	e77c      	b.n	800e6b4 <_strtod_l+0x184>
 800e7ba:	f04f 0c00 	mov.w	ip, #0
 800e7be:	f108 0302 	add.w	r3, r8, #2
 800e7c2:	931d      	str	r3, [sp, #116]	; 0x74
 800e7c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e7c8:	e785      	b.n	800e6d6 <_strtod_l+0x1a6>
 800e7ca:	f04f 0c01 	mov.w	ip, #1
 800e7ce:	e7f6      	b.n	800e7be <_strtod_l+0x28e>
 800e7d0:	08013c74 	.word	0x08013c74
 800e7d4:	08013ba4 	.word	0x08013ba4
 800e7d8:	7ff00000 	.word	0x7ff00000
 800e7dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7de:	1c59      	adds	r1, r3, #1
 800e7e0:	911d      	str	r1, [sp, #116]	; 0x74
 800e7e2:	785b      	ldrb	r3, [r3, #1]
 800e7e4:	2b30      	cmp	r3, #48	; 0x30
 800e7e6:	d0f9      	beq.n	800e7dc <_strtod_l+0x2ac>
 800e7e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e7ec:	2908      	cmp	r1, #8
 800e7ee:	f63f af79 	bhi.w	800e6e4 <_strtod_l+0x1b4>
 800e7f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e7f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7f8:	9308      	str	r3, [sp, #32]
 800e7fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7fc:	1c59      	adds	r1, r3, #1
 800e7fe:	911d      	str	r1, [sp, #116]	; 0x74
 800e800:	785b      	ldrb	r3, [r3, #1]
 800e802:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e806:	2e09      	cmp	r6, #9
 800e808:	d937      	bls.n	800e87a <_strtod_l+0x34a>
 800e80a:	9e08      	ldr	r6, [sp, #32]
 800e80c:	1b89      	subs	r1, r1, r6
 800e80e:	2908      	cmp	r1, #8
 800e810:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e814:	dc02      	bgt.n	800e81c <_strtod_l+0x2ec>
 800e816:	4576      	cmp	r6, lr
 800e818:	bfa8      	it	ge
 800e81a:	4676      	movge	r6, lr
 800e81c:	f1bc 0f00 	cmp.w	ip, #0
 800e820:	d000      	beq.n	800e824 <_strtod_l+0x2f4>
 800e822:	4276      	negs	r6, r6
 800e824:	2d00      	cmp	r5, #0
 800e826:	d14f      	bne.n	800e8c8 <_strtod_l+0x398>
 800e828:	9904      	ldr	r1, [sp, #16]
 800e82a:	4301      	orrs	r1, r0
 800e82c:	f47f aec2 	bne.w	800e5b4 <_strtod_l+0x84>
 800e830:	2a00      	cmp	r2, #0
 800e832:	f47f aedb 	bne.w	800e5ec <_strtod_l+0xbc>
 800e836:	2b69      	cmp	r3, #105	; 0x69
 800e838:	d027      	beq.n	800e88a <_strtod_l+0x35a>
 800e83a:	dc24      	bgt.n	800e886 <_strtod_l+0x356>
 800e83c:	2b49      	cmp	r3, #73	; 0x49
 800e83e:	d024      	beq.n	800e88a <_strtod_l+0x35a>
 800e840:	2b4e      	cmp	r3, #78	; 0x4e
 800e842:	f47f aed3 	bne.w	800e5ec <_strtod_l+0xbc>
 800e846:	499e      	ldr	r1, [pc, #632]	; (800eac0 <_strtod_l+0x590>)
 800e848:	a81d      	add	r0, sp, #116	; 0x74
 800e84a:	f001 f82d 	bl	800f8a8 <__match>
 800e84e:	2800      	cmp	r0, #0
 800e850:	f43f aecc 	beq.w	800e5ec <_strtod_l+0xbc>
 800e854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b28      	cmp	r3, #40	; 0x28
 800e85a:	d12d      	bne.n	800e8b8 <_strtod_l+0x388>
 800e85c:	4999      	ldr	r1, [pc, #612]	; (800eac4 <_strtod_l+0x594>)
 800e85e:	aa20      	add	r2, sp, #128	; 0x80
 800e860:	a81d      	add	r0, sp, #116	; 0x74
 800e862:	f001 f835 	bl	800f8d0 <__hexnan>
 800e866:	2805      	cmp	r0, #5
 800e868:	d126      	bne.n	800e8b8 <_strtod_l+0x388>
 800e86a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e86c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e870:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e874:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e878:	e69c      	b.n	800e5b4 <_strtod_l+0x84>
 800e87a:	210a      	movs	r1, #10
 800e87c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e880:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e884:	e7b9      	b.n	800e7fa <_strtod_l+0x2ca>
 800e886:	2b6e      	cmp	r3, #110	; 0x6e
 800e888:	e7db      	b.n	800e842 <_strtod_l+0x312>
 800e88a:	498f      	ldr	r1, [pc, #572]	; (800eac8 <_strtod_l+0x598>)
 800e88c:	a81d      	add	r0, sp, #116	; 0x74
 800e88e:	f001 f80b 	bl	800f8a8 <__match>
 800e892:	2800      	cmp	r0, #0
 800e894:	f43f aeaa 	beq.w	800e5ec <_strtod_l+0xbc>
 800e898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e89a:	498c      	ldr	r1, [pc, #560]	; (800eacc <_strtod_l+0x59c>)
 800e89c:	3b01      	subs	r3, #1
 800e89e:	a81d      	add	r0, sp, #116	; 0x74
 800e8a0:	931d      	str	r3, [sp, #116]	; 0x74
 800e8a2:	f001 f801 	bl	800f8a8 <__match>
 800e8a6:	b910      	cbnz	r0, 800e8ae <_strtod_l+0x37e>
 800e8a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	931d      	str	r3, [sp, #116]	; 0x74
 800e8ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800eadc <_strtod_l+0x5ac>
 800e8b2:	f04f 0a00 	mov.w	sl, #0
 800e8b6:	e67d      	b.n	800e5b4 <_strtod_l+0x84>
 800e8b8:	4885      	ldr	r0, [pc, #532]	; (800ead0 <_strtod_l+0x5a0>)
 800e8ba:	f002 fbb5 	bl	8011028 <nan>
 800e8be:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e8c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e8c6:	e675      	b.n	800e5b4 <_strtod_l+0x84>
 800e8c8:	9b07      	ldr	r3, [sp, #28]
 800e8ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8cc:	1af3      	subs	r3, r6, r3
 800e8ce:	2f00      	cmp	r7, #0
 800e8d0:	bf08      	it	eq
 800e8d2:	462f      	moveq	r7, r5
 800e8d4:	2d10      	cmp	r5, #16
 800e8d6:	9308      	str	r3, [sp, #32]
 800e8d8:	46a8      	mov	r8, r5
 800e8da:	bfa8      	it	ge
 800e8dc:	f04f 0810 	movge.w	r8, #16
 800e8e0:	f7f1 fe28 	bl	8000534 <__aeabi_ui2d>
 800e8e4:	2d09      	cmp	r5, #9
 800e8e6:	4682      	mov	sl, r0
 800e8e8:	468b      	mov	fp, r1
 800e8ea:	dd13      	ble.n	800e914 <_strtod_l+0x3e4>
 800e8ec:	4b79      	ldr	r3, [pc, #484]	; (800ead4 <_strtod_l+0x5a4>)
 800e8ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e8f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e8f6:	f7f1 fe97 	bl	8000628 <__aeabi_dmul>
 800e8fa:	4682      	mov	sl, r0
 800e8fc:	4648      	mov	r0, r9
 800e8fe:	468b      	mov	fp, r1
 800e900:	f7f1 fe18 	bl	8000534 <__aeabi_ui2d>
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	4650      	mov	r0, sl
 800e90a:	4659      	mov	r1, fp
 800e90c:	f7f1 fcd6 	bl	80002bc <__adddf3>
 800e910:	4682      	mov	sl, r0
 800e912:	468b      	mov	fp, r1
 800e914:	2d0f      	cmp	r5, #15
 800e916:	dc38      	bgt.n	800e98a <_strtod_l+0x45a>
 800e918:	9b08      	ldr	r3, [sp, #32]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f43f ae4a 	beq.w	800e5b4 <_strtod_l+0x84>
 800e920:	dd24      	ble.n	800e96c <_strtod_l+0x43c>
 800e922:	2b16      	cmp	r3, #22
 800e924:	dc0b      	bgt.n	800e93e <_strtod_l+0x40e>
 800e926:	4d6b      	ldr	r5, [pc, #428]	; (800ead4 <_strtod_l+0x5a4>)
 800e928:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e92c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e930:	4652      	mov	r2, sl
 800e932:	465b      	mov	r3, fp
 800e934:	f7f1 fe78 	bl	8000628 <__aeabi_dmul>
 800e938:	4682      	mov	sl, r0
 800e93a:	468b      	mov	fp, r1
 800e93c:	e63a      	b.n	800e5b4 <_strtod_l+0x84>
 800e93e:	9a08      	ldr	r2, [sp, #32]
 800e940:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e944:	4293      	cmp	r3, r2
 800e946:	db20      	blt.n	800e98a <_strtod_l+0x45a>
 800e948:	4c62      	ldr	r4, [pc, #392]	; (800ead4 <_strtod_l+0x5a4>)
 800e94a:	f1c5 050f 	rsb	r5, r5, #15
 800e94e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e952:	4652      	mov	r2, sl
 800e954:	465b      	mov	r3, fp
 800e956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e95a:	f7f1 fe65 	bl	8000628 <__aeabi_dmul>
 800e95e:	9b08      	ldr	r3, [sp, #32]
 800e960:	1b5d      	subs	r5, r3, r5
 800e962:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e966:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e96a:	e7e3      	b.n	800e934 <_strtod_l+0x404>
 800e96c:	9b08      	ldr	r3, [sp, #32]
 800e96e:	3316      	adds	r3, #22
 800e970:	db0b      	blt.n	800e98a <_strtod_l+0x45a>
 800e972:	9b07      	ldr	r3, [sp, #28]
 800e974:	4a57      	ldr	r2, [pc, #348]	; (800ead4 <_strtod_l+0x5a4>)
 800e976:	1b9e      	subs	r6, r3, r6
 800e978:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e97c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e980:	4650      	mov	r0, sl
 800e982:	4659      	mov	r1, fp
 800e984:	f7f1 ff7a 	bl	800087c <__aeabi_ddiv>
 800e988:	e7d6      	b.n	800e938 <_strtod_l+0x408>
 800e98a:	9b08      	ldr	r3, [sp, #32]
 800e98c:	eba5 0808 	sub.w	r8, r5, r8
 800e990:	4498      	add	r8, r3
 800e992:	f1b8 0f00 	cmp.w	r8, #0
 800e996:	dd71      	ble.n	800ea7c <_strtod_l+0x54c>
 800e998:	f018 030f 	ands.w	r3, r8, #15
 800e99c:	d00a      	beq.n	800e9b4 <_strtod_l+0x484>
 800e99e:	494d      	ldr	r1, [pc, #308]	; (800ead4 <_strtod_l+0x5a4>)
 800e9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e9a4:	4652      	mov	r2, sl
 800e9a6:	465b      	mov	r3, fp
 800e9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9ac:	f7f1 fe3c 	bl	8000628 <__aeabi_dmul>
 800e9b0:	4682      	mov	sl, r0
 800e9b2:	468b      	mov	fp, r1
 800e9b4:	f038 080f 	bics.w	r8, r8, #15
 800e9b8:	d04d      	beq.n	800ea56 <_strtod_l+0x526>
 800e9ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e9be:	dd22      	ble.n	800ea06 <_strtod_l+0x4d6>
 800e9c0:	2500      	movs	r5, #0
 800e9c2:	462e      	mov	r6, r5
 800e9c4:	9509      	str	r5, [sp, #36]	; 0x24
 800e9c6:	9507      	str	r5, [sp, #28]
 800e9c8:	2322      	movs	r3, #34	; 0x22
 800e9ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800eadc <_strtod_l+0x5ac>
 800e9ce:	6023      	str	r3, [r4, #0]
 800e9d0:	f04f 0a00 	mov.w	sl, #0
 800e9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f43f adec 	beq.w	800e5b4 <_strtod_l+0x84>
 800e9dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f001 f886 	bl	800faf0 <_Bfree>
 800e9e4:	9907      	ldr	r1, [sp, #28]
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f001 f882 	bl	800faf0 <_Bfree>
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f001 f87e 	bl	800faf0 <_Bfree>
 800e9f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f001 f87a 	bl	800faf0 <_Bfree>
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f001 f876 	bl	800faf0 <_Bfree>
 800ea04:	e5d6      	b.n	800e5b4 <_strtod_l+0x84>
 800ea06:	2300      	movs	r3, #0
 800ea08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ea0c:	4650      	mov	r0, sl
 800ea0e:	4659      	mov	r1, fp
 800ea10:	4699      	mov	r9, r3
 800ea12:	f1b8 0f01 	cmp.w	r8, #1
 800ea16:	dc21      	bgt.n	800ea5c <_strtod_l+0x52c>
 800ea18:	b10b      	cbz	r3, 800ea1e <_strtod_l+0x4ee>
 800ea1a:	4682      	mov	sl, r0
 800ea1c:	468b      	mov	fp, r1
 800ea1e:	4b2e      	ldr	r3, [pc, #184]	; (800ead8 <_strtod_l+0x5a8>)
 800ea20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ea24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ea28:	4652      	mov	r2, sl
 800ea2a:	465b      	mov	r3, fp
 800ea2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ea30:	f7f1 fdfa 	bl	8000628 <__aeabi_dmul>
 800ea34:	4b29      	ldr	r3, [pc, #164]	; (800eadc <_strtod_l+0x5ac>)
 800ea36:	460a      	mov	r2, r1
 800ea38:	400b      	ands	r3, r1
 800ea3a:	4929      	ldr	r1, [pc, #164]	; (800eae0 <_strtod_l+0x5b0>)
 800ea3c:	428b      	cmp	r3, r1
 800ea3e:	4682      	mov	sl, r0
 800ea40:	d8be      	bhi.n	800e9c0 <_strtod_l+0x490>
 800ea42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ea46:	428b      	cmp	r3, r1
 800ea48:	bf86      	itte	hi
 800ea4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eae4 <_strtod_l+0x5b4>
 800ea4e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ea52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ea56:	2300      	movs	r3, #0
 800ea58:	9304      	str	r3, [sp, #16]
 800ea5a:	e081      	b.n	800eb60 <_strtod_l+0x630>
 800ea5c:	f018 0f01 	tst.w	r8, #1
 800ea60:	d007      	beq.n	800ea72 <_strtod_l+0x542>
 800ea62:	4b1d      	ldr	r3, [pc, #116]	; (800ead8 <_strtod_l+0x5a8>)
 800ea64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	f7f1 fddc 	bl	8000628 <__aeabi_dmul>
 800ea70:	2301      	movs	r3, #1
 800ea72:	f109 0901 	add.w	r9, r9, #1
 800ea76:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ea7a:	e7ca      	b.n	800ea12 <_strtod_l+0x4e2>
 800ea7c:	d0eb      	beq.n	800ea56 <_strtod_l+0x526>
 800ea7e:	f1c8 0800 	rsb	r8, r8, #0
 800ea82:	f018 020f 	ands.w	r2, r8, #15
 800ea86:	d00a      	beq.n	800ea9e <_strtod_l+0x56e>
 800ea88:	4b12      	ldr	r3, [pc, #72]	; (800ead4 <_strtod_l+0x5a4>)
 800ea8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea8e:	4650      	mov	r0, sl
 800ea90:	4659      	mov	r1, fp
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	f7f1 fef1 	bl	800087c <__aeabi_ddiv>
 800ea9a:	4682      	mov	sl, r0
 800ea9c:	468b      	mov	fp, r1
 800ea9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eaa2:	d0d8      	beq.n	800ea56 <_strtod_l+0x526>
 800eaa4:	f1b8 0f1f 	cmp.w	r8, #31
 800eaa8:	dd1e      	ble.n	800eae8 <_strtod_l+0x5b8>
 800eaaa:	2500      	movs	r5, #0
 800eaac:	462e      	mov	r6, r5
 800eaae:	9509      	str	r5, [sp, #36]	; 0x24
 800eab0:	9507      	str	r5, [sp, #28]
 800eab2:	2322      	movs	r3, #34	; 0x22
 800eab4:	f04f 0a00 	mov.w	sl, #0
 800eab8:	f04f 0b00 	mov.w	fp, #0
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	e789      	b.n	800e9d4 <_strtod_l+0x4a4>
 800eac0:	08013b9e 	.word	0x08013b9e
 800eac4:	08013bb8 	.word	0x08013bb8
 800eac8:	08013b95 	.word	0x08013b95
 800eacc:	08013b98 	.word	0x08013b98
 800ead0:	08013e85 	.word	0x08013e85
 800ead4:	08013d28 	.word	0x08013d28
 800ead8:	08013d00 	.word	0x08013d00
 800eadc:	7ff00000 	.word	0x7ff00000
 800eae0:	7ca00000 	.word	0x7ca00000
 800eae4:	7fefffff 	.word	0x7fefffff
 800eae8:	f018 0310 	ands.w	r3, r8, #16
 800eaec:	bf18      	it	ne
 800eaee:	236a      	movne	r3, #106	; 0x6a
 800eaf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800eea8 <_strtod_l+0x978>
 800eaf4:	9304      	str	r3, [sp, #16]
 800eaf6:	4650      	mov	r0, sl
 800eaf8:	4659      	mov	r1, fp
 800eafa:	2300      	movs	r3, #0
 800eafc:	f018 0f01 	tst.w	r8, #1
 800eb00:	d004      	beq.n	800eb0c <_strtod_l+0x5dc>
 800eb02:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eb06:	f7f1 fd8f 	bl	8000628 <__aeabi_dmul>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800eb10:	f109 0908 	add.w	r9, r9, #8
 800eb14:	d1f2      	bne.n	800eafc <_strtod_l+0x5cc>
 800eb16:	b10b      	cbz	r3, 800eb1c <_strtod_l+0x5ec>
 800eb18:	4682      	mov	sl, r0
 800eb1a:	468b      	mov	fp, r1
 800eb1c:	9b04      	ldr	r3, [sp, #16]
 800eb1e:	b1bb      	cbz	r3, 800eb50 <_strtod_l+0x620>
 800eb20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800eb24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	4659      	mov	r1, fp
 800eb2c:	dd10      	ble.n	800eb50 <_strtod_l+0x620>
 800eb2e:	2b1f      	cmp	r3, #31
 800eb30:	f340 8128 	ble.w	800ed84 <_strtod_l+0x854>
 800eb34:	2b34      	cmp	r3, #52	; 0x34
 800eb36:	bfde      	ittt	le
 800eb38:	3b20      	suble	r3, #32
 800eb3a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800eb3e:	fa02 f303 	lslle.w	r3, r2, r3
 800eb42:	f04f 0a00 	mov.w	sl, #0
 800eb46:	bfcc      	ite	gt
 800eb48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eb4c:	ea03 0b01 	andle.w	fp, r3, r1
 800eb50:	2200      	movs	r2, #0
 800eb52:	2300      	movs	r3, #0
 800eb54:	4650      	mov	r0, sl
 800eb56:	4659      	mov	r1, fp
 800eb58:	f7f1 ffce 	bl	8000af8 <__aeabi_dcmpeq>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d1a4      	bne.n	800eaaa <_strtod_l+0x57a>
 800eb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb66:	462b      	mov	r3, r5
 800eb68:	463a      	mov	r2, r7
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f001 f82c 	bl	800fbc8 <__s2b>
 800eb70:	9009      	str	r0, [sp, #36]	; 0x24
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f43f af24 	beq.w	800e9c0 <_strtod_l+0x490>
 800eb78:	9b07      	ldr	r3, [sp, #28]
 800eb7a:	1b9e      	subs	r6, r3, r6
 800eb7c:	9b08      	ldr	r3, [sp, #32]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	bfb4      	ite	lt
 800eb82:	4633      	movlt	r3, r6
 800eb84:	2300      	movge	r3, #0
 800eb86:	9310      	str	r3, [sp, #64]	; 0x40
 800eb88:	9b08      	ldr	r3, [sp, #32]
 800eb8a:	2500      	movs	r5, #0
 800eb8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eb90:	9318      	str	r3, [sp, #96]	; 0x60
 800eb92:	462e      	mov	r6, r5
 800eb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb96:	4620      	mov	r0, r4
 800eb98:	6859      	ldr	r1, [r3, #4]
 800eb9a:	f000 ff69 	bl	800fa70 <_Balloc>
 800eb9e:	9007      	str	r0, [sp, #28]
 800eba0:	2800      	cmp	r0, #0
 800eba2:	f43f af11 	beq.w	800e9c8 <_strtod_l+0x498>
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	691a      	ldr	r2, [r3, #16]
 800ebaa:	3202      	adds	r2, #2
 800ebac:	f103 010c 	add.w	r1, r3, #12
 800ebb0:	0092      	lsls	r2, r2, #2
 800ebb2:	300c      	adds	r0, #12
 800ebb4:	f7ff f8b6 	bl	800dd24 <memcpy>
 800ebb8:	ec4b ab10 	vmov	d0, sl, fp
 800ebbc:	aa20      	add	r2, sp, #128	; 0x80
 800ebbe:	a91f      	add	r1, sp, #124	; 0x7c
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ebc6:	f001 fb3b 	bl	8010240 <__d2b>
 800ebca:	901e      	str	r0, [sp, #120]	; 0x78
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	f43f aefb 	beq.w	800e9c8 <_strtod_l+0x498>
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f001 f891 	bl	800fcfc <__i2b>
 800ebda:	4606      	mov	r6, r0
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f43f aef3 	beq.w	800e9c8 <_strtod_l+0x498>
 800ebe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ebe4:	9904      	ldr	r1, [sp, #16]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	bfab      	itete	ge
 800ebea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ebec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ebee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ebf0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ebf4:	bfac      	ite	ge
 800ebf6:	eb03 0902 	addge.w	r9, r3, r2
 800ebfa:	1ad7      	sublt	r7, r2, r3
 800ebfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebfe:	eba3 0801 	sub.w	r8, r3, r1
 800ec02:	4490      	add	r8, r2
 800ec04:	4ba3      	ldr	r3, [pc, #652]	; (800ee94 <_strtod_l+0x964>)
 800ec06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ec0a:	4598      	cmp	r8, r3
 800ec0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ec10:	f280 80cc 	bge.w	800edac <_strtod_l+0x87c>
 800ec14:	eba3 0308 	sub.w	r3, r3, r8
 800ec18:	2b1f      	cmp	r3, #31
 800ec1a:	eba2 0203 	sub.w	r2, r2, r3
 800ec1e:	f04f 0101 	mov.w	r1, #1
 800ec22:	f300 80b6 	bgt.w	800ed92 <_strtod_l+0x862>
 800ec26:	fa01 f303 	lsl.w	r3, r1, r3
 800ec2a:	9311      	str	r3, [sp, #68]	; 0x44
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ec30:	eb09 0802 	add.w	r8, r9, r2
 800ec34:	9b04      	ldr	r3, [sp, #16]
 800ec36:	45c1      	cmp	r9, r8
 800ec38:	4417      	add	r7, r2
 800ec3a:	441f      	add	r7, r3
 800ec3c:	464b      	mov	r3, r9
 800ec3e:	bfa8      	it	ge
 800ec40:	4643      	movge	r3, r8
 800ec42:	42bb      	cmp	r3, r7
 800ec44:	bfa8      	it	ge
 800ec46:	463b      	movge	r3, r7
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bfc2      	ittt	gt
 800ec4c:	eba8 0803 	subgt.w	r8, r8, r3
 800ec50:	1aff      	subgt	r7, r7, r3
 800ec52:	eba9 0903 	subgt.w	r9, r9, r3
 800ec56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	dd17      	ble.n	800ec8c <_strtod_l+0x75c>
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	461a      	mov	r2, r3
 800ec60:	4620      	mov	r0, r4
 800ec62:	f001 f907 	bl	800fe74 <__pow5mult>
 800ec66:	4606      	mov	r6, r0
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	f43f aead 	beq.w	800e9c8 <_strtod_l+0x498>
 800ec6e:	4601      	mov	r1, r0
 800ec70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ec72:	4620      	mov	r0, r4
 800ec74:	f001 f858 	bl	800fd28 <__multiply>
 800ec78:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	f43f aea4 	beq.w	800e9c8 <_strtod_l+0x498>
 800ec80:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 ff34 	bl	800faf0 <_Bfree>
 800ec88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec8a:	931e      	str	r3, [sp, #120]	; 0x78
 800ec8c:	f1b8 0f00 	cmp.w	r8, #0
 800ec90:	f300 8091 	bgt.w	800edb6 <_strtod_l+0x886>
 800ec94:	9b08      	ldr	r3, [sp, #32]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	dd08      	ble.n	800ecac <_strtod_l+0x77c>
 800ec9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec9c:	9907      	ldr	r1, [sp, #28]
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f001 f8e8 	bl	800fe74 <__pow5mult>
 800eca4:	9007      	str	r0, [sp, #28]
 800eca6:	2800      	cmp	r0, #0
 800eca8:	f43f ae8e 	beq.w	800e9c8 <_strtod_l+0x498>
 800ecac:	2f00      	cmp	r7, #0
 800ecae:	dd08      	ble.n	800ecc2 <_strtod_l+0x792>
 800ecb0:	9907      	ldr	r1, [sp, #28]
 800ecb2:	463a      	mov	r2, r7
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f001 f937 	bl	800ff28 <__lshift>
 800ecba:	9007      	str	r0, [sp, #28]
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	f43f ae83 	beq.w	800e9c8 <_strtod_l+0x498>
 800ecc2:	f1b9 0f00 	cmp.w	r9, #0
 800ecc6:	dd08      	ble.n	800ecda <_strtod_l+0x7aa>
 800ecc8:	4631      	mov	r1, r6
 800ecca:	464a      	mov	r2, r9
 800eccc:	4620      	mov	r0, r4
 800ecce:	f001 f92b 	bl	800ff28 <__lshift>
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	f43f ae77 	beq.w	800e9c8 <_strtod_l+0x498>
 800ecda:	9a07      	ldr	r2, [sp, #28]
 800ecdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ecde:	4620      	mov	r0, r4
 800ece0:	f001 f9aa 	bl	8010038 <__mdiff>
 800ece4:	4605      	mov	r5, r0
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f43f ae6e 	beq.w	800e9c8 <_strtod_l+0x498>
 800ecec:	68c3      	ldr	r3, [r0, #12]
 800ecee:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	60c3      	str	r3, [r0, #12]
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	f001 f983 	bl	8010000 <__mcmp>
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	da65      	bge.n	800edca <_strtod_l+0x89a>
 800ecfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed00:	ea53 030a 	orrs.w	r3, r3, sl
 800ed04:	f040 8087 	bne.w	800ee16 <_strtod_l+0x8e6>
 800ed08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f040 8082 	bne.w	800ee16 <_strtod_l+0x8e6>
 800ed12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed16:	0d1b      	lsrs	r3, r3, #20
 800ed18:	051b      	lsls	r3, r3, #20
 800ed1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ed1e:	d97a      	bls.n	800ee16 <_strtod_l+0x8e6>
 800ed20:	696b      	ldr	r3, [r5, #20]
 800ed22:	b913      	cbnz	r3, 800ed2a <_strtod_l+0x7fa>
 800ed24:	692b      	ldr	r3, [r5, #16]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	dd75      	ble.n	800ee16 <_strtod_l+0x8e6>
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f001 f8fa 	bl	800ff28 <__lshift>
 800ed34:	4631      	mov	r1, r6
 800ed36:	4605      	mov	r5, r0
 800ed38:	f001 f962 	bl	8010000 <__mcmp>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	dd6a      	ble.n	800ee16 <_strtod_l+0x8e6>
 800ed40:	9904      	ldr	r1, [sp, #16]
 800ed42:	4a55      	ldr	r2, [pc, #340]	; (800ee98 <_strtod_l+0x968>)
 800ed44:	465b      	mov	r3, fp
 800ed46:	2900      	cmp	r1, #0
 800ed48:	f000 8085 	beq.w	800ee56 <_strtod_l+0x926>
 800ed4c:	ea02 010b 	and.w	r1, r2, fp
 800ed50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ed54:	dc7f      	bgt.n	800ee56 <_strtod_l+0x926>
 800ed56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ed5a:	f77f aeaa 	ble.w	800eab2 <_strtod_l+0x582>
 800ed5e:	4a4f      	ldr	r2, [pc, #316]	; (800ee9c <_strtod_l+0x96c>)
 800ed60:	2300      	movs	r3, #0
 800ed62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ed66:	4650      	mov	r0, sl
 800ed68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ed6c:	4659      	mov	r1, fp
 800ed6e:	f7f1 fc5b 	bl	8000628 <__aeabi_dmul>
 800ed72:	460b      	mov	r3, r1
 800ed74:	4303      	orrs	r3, r0
 800ed76:	bf08      	it	eq
 800ed78:	2322      	moveq	r3, #34	; 0x22
 800ed7a:	4682      	mov	sl, r0
 800ed7c:	468b      	mov	fp, r1
 800ed7e:	bf08      	it	eq
 800ed80:	6023      	streq	r3, [r4, #0]
 800ed82:	e62b      	b.n	800e9dc <_strtod_l+0x4ac>
 800ed84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed88:	fa02 f303 	lsl.w	r3, r2, r3
 800ed8c:	ea03 0a0a 	and.w	sl, r3, sl
 800ed90:	e6de      	b.n	800eb50 <_strtod_l+0x620>
 800ed92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ed96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ed9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ed9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eda2:	fa01 f308 	lsl.w	r3, r1, r8
 800eda6:	930c      	str	r3, [sp, #48]	; 0x30
 800eda8:	9111      	str	r1, [sp, #68]	; 0x44
 800edaa:	e741      	b.n	800ec30 <_strtod_l+0x700>
 800edac:	2300      	movs	r3, #0
 800edae:	930c      	str	r3, [sp, #48]	; 0x30
 800edb0:	2301      	movs	r3, #1
 800edb2:	9311      	str	r3, [sp, #68]	; 0x44
 800edb4:	e73c      	b.n	800ec30 <_strtod_l+0x700>
 800edb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800edb8:	4642      	mov	r2, r8
 800edba:	4620      	mov	r0, r4
 800edbc:	f001 f8b4 	bl	800ff28 <__lshift>
 800edc0:	901e      	str	r0, [sp, #120]	; 0x78
 800edc2:	2800      	cmp	r0, #0
 800edc4:	f47f af66 	bne.w	800ec94 <_strtod_l+0x764>
 800edc8:	e5fe      	b.n	800e9c8 <_strtod_l+0x498>
 800edca:	465f      	mov	r7, fp
 800edcc:	d16e      	bne.n	800eeac <_strtod_l+0x97c>
 800edce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edd4:	b342      	cbz	r2, 800ee28 <_strtod_l+0x8f8>
 800edd6:	4a32      	ldr	r2, [pc, #200]	; (800eea0 <_strtod_l+0x970>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d128      	bne.n	800ee2e <_strtod_l+0x8fe>
 800eddc:	9b04      	ldr	r3, [sp, #16]
 800edde:	4650      	mov	r0, sl
 800ede0:	b1eb      	cbz	r3, 800ee1e <_strtod_l+0x8ee>
 800ede2:	4a2d      	ldr	r2, [pc, #180]	; (800ee98 <_strtod_l+0x968>)
 800ede4:	403a      	ands	r2, r7
 800ede6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800edea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800edee:	d819      	bhi.n	800ee24 <_strtod_l+0x8f4>
 800edf0:	0d12      	lsrs	r2, r2, #20
 800edf2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800edf6:	fa01 f303 	lsl.w	r3, r1, r3
 800edfa:	4298      	cmp	r0, r3
 800edfc:	d117      	bne.n	800ee2e <_strtod_l+0x8fe>
 800edfe:	4b29      	ldr	r3, [pc, #164]	; (800eea4 <_strtod_l+0x974>)
 800ee00:	429f      	cmp	r7, r3
 800ee02:	d102      	bne.n	800ee0a <_strtod_l+0x8da>
 800ee04:	3001      	adds	r0, #1
 800ee06:	f43f addf 	beq.w	800e9c8 <_strtod_l+0x498>
 800ee0a:	4b23      	ldr	r3, [pc, #140]	; (800ee98 <_strtod_l+0x968>)
 800ee0c:	403b      	ands	r3, r7
 800ee0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ee12:	f04f 0a00 	mov.w	sl, #0
 800ee16:	9b04      	ldr	r3, [sp, #16]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1a0      	bne.n	800ed5e <_strtod_l+0x82e>
 800ee1c:	e5de      	b.n	800e9dc <_strtod_l+0x4ac>
 800ee1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee22:	e7ea      	b.n	800edfa <_strtod_l+0x8ca>
 800ee24:	460b      	mov	r3, r1
 800ee26:	e7e8      	b.n	800edfa <_strtod_l+0x8ca>
 800ee28:	ea53 030a 	orrs.w	r3, r3, sl
 800ee2c:	d088      	beq.n	800ed40 <_strtod_l+0x810>
 800ee2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee30:	b1db      	cbz	r3, 800ee6a <_strtod_l+0x93a>
 800ee32:	423b      	tst	r3, r7
 800ee34:	d0ef      	beq.n	800ee16 <_strtod_l+0x8e6>
 800ee36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee38:	9a04      	ldr	r2, [sp, #16]
 800ee3a:	4650      	mov	r0, sl
 800ee3c:	4659      	mov	r1, fp
 800ee3e:	b1c3      	cbz	r3, 800ee72 <_strtod_l+0x942>
 800ee40:	f7ff fb57 	bl	800e4f2 <sulp>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee4c:	f7f1 fa36 	bl	80002bc <__adddf3>
 800ee50:	4682      	mov	sl, r0
 800ee52:	468b      	mov	fp, r1
 800ee54:	e7df      	b.n	800ee16 <_strtod_l+0x8e6>
 800ee56:	4013      	ands	r3, r2
 800ee58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ee5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ee68:	e7d5      	b.n	800ee16 <_strtod_l+0x8e6>
 800ee6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee6c:	ea13 0f0a 	tst.w	r3, sl
 800ee70:	e7e0      	b.n	800ee34 <_strtod_l+0x904>
 800ee72:	f7ff fb3e 	bl	800e4f2 <sulp>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee7e:	f7f1 fa1b 	bl	80002b8 <__aeabi_dsub>
 800ee82:	2200      	movs	r2, #0
 800ee84:	2300      	movs	r3, #0
 800ee86:	4682      	mov	sl, r0
 800ee88:	468b      	mov	fp, r1
 800ee8a:	f7f1 fe35 	bl	8000af8 <__aeabi_dcmpeq>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d0c1      	beq.n	800ee16 <_strtod_l+0x8e6>
 800ee92:	e60e      	b.n	800eab2 <_strtod_l+0x582>
 800ee94:	fffffc02 	.word	0xfffffc02
 800ee98:	7ff00000 	.word	0x7ff00000
 800ee9c:	39500000 	.word	0x39500000
 800eea0:	000fffff 	.word	0x000fffff
 800eea4:	7fefffff 	.word	0x7fefffff
 800eea8:	08013bd0 	.word	0x08013bd0
 800eeac:	4631      	mov	r1, r6
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f001 fa22 	bl	80102f8 <__ratio>
 800eeb4:	ec59 8b10 	vmov	r8, r9, d0
 800eeb8:	ee10 0a10 	vmov	r0, s0
 800eebc:	2200      	movs	r2, #0
 800eebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eec2:	4649      	mov	r1, r9
 800eec4:	f7f1 fe2c 	bl	8000b20 <__aeabi_dcmple>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d07c      	beq.n	800efc6 <_strtod_l+0xa96>
 800eecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d04c      	beq.n	800ef6c <_strtod_l+0xa3c>
 800eed2:	4b95      	ldr	r3, [pc, #596]	; (800f128 <_strtod_l+0xbf8>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eeda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f128 <_strtod_l+0xbf8>
 800eede:	f04f 0800 	mov.w	r8, #0
 800eee2:	4b92      	ldr	r3, [pc, #584]	; (800f12c <_strtod_l+0xbfc>)
 800eee4:	403b      	ands	r3, r7
 800eee6:	9311      	str	r3, [sp, #68]	; 0x44
 800eee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eeea:	4b91      	ldr	r3, [pc, #580]	; (800f130 <_strtod_l+0xc00>)
 800eeec:	429a      	cmp	r2, r3
 800eeee:	f040 80b2 	bne.w	800f056 <_strtod_l+0xb26>
 800eef2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eefa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eefe:	ec4b ab10 	vmov	d0, sl, fp
 800ef02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ef06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ef0a:	f001 f91d 	bl	8010148 <__ulp>
 800ef0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ef12:	ec53 2b10 	vmov	r2, r3, d0
 800ef16:	f7f1 fb87 	bl	8000628 <__aeabi_dmul>
 800ef1a:	4652      	mov	r2, sl
 800ef1c:	465b      	mov	r3, fp
 800ef1e:	f7f1 f9cd 	bl	80002bc <__adddf3>
 800ef22:	460b      	mov	r3, r1
 800ef24:	4981      	ldr	r1, [pc, #516]	; (800f12c <_strtod_l+0xbfc>)
 800ef26:	4a83      	ldr	r2, [pc, #524]	; (800f134 <_strtod_l+0xc04>)
 800ef28:	4019      	ands	r1, r3
 800ef2a:	4291      	cmp	r1, r2
 800ef2c:	4682      	mov	sl, r0
 800ef2e:	d95e      	bls.n	800efee <_strtod_l+0xabe>
 800ef30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d103      	bne.n	800ef42 <_strtod_l+0xa12>
 800ef3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	f43f ad43 	beq.w	800e9c8 <_strtod_l+0x498>
 800ef42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f140 <_strtod_l+0xc10>
 800ef46:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ef4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f000 fdcf 	bl	800faf0 <_Bfree>
 800ef52:	9907      	ldr	r1, [sp, #28]
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 fdcb 	bl	800faf0 <_Bfree>
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f000 fdc7 	bl	800faf0 <_Bfree>
 800ef62:	4629      	mov	r1, r5
 800ef64:	4620      	mov	r0, r4
 800ef66:	f000 fdc3 	bl	800faf0 <_Bfree>
 800ef6a:	e613      	b.n	800eb94 <_strtod_l+0x664>
 800ef6c:	f1ba 0f00 	cmp.w	sl, #0
 800ef70:	d11b      	bne.n	800efaa <_strtod_l+0xa7a>
 800ef72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef76:	b9f3      	cbnz	r3, 800efb6 <_strtod_l+0xa86>
 800ef78:	4b6b      	ldr	r3, [pc, #428]	; (800f128 <_strtod_l+0xbf8>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4640      	mov	r0, r8
 800ef7e:	4649      	mov	r1, r9
 800ef80:	f7f1 fdc4 	bl	8000b0c <__aeabi_dcmplt>
 800ef84:	b9d0      	cbnz	r0, 800efbc <_strtod_l+0xa8c>
 800ef86:	4640      	mov	r0, r8
 800ef88:	4649      	mov	r1, r9
 800ef8a:	4b6b      	ldr	r3, [pc, #428]	; (800f138 <_strtod_l+0xc08>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f7f1 fb4b 	bl	8000628 <__aeabi_dmul>
 800ef92:	4680      	mov	r8, r0
 800ef94:	4689      	mov	r9, r1
 800ef96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ef9e:	931b      	str	r3, [sp, #108]	; 0x6c
 800efa0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800efa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800efa8:	e79b      	b.n	800eee2 <_strtod_l+0x9b2>
 800efaa:	f1ba 0f01 	cmp.w	sl, #1
 800efae:	d102      	bne.n	800efb6 <_strtod_l+0xa86>
 800efb0:	2f00      	cmp	r7, #0
 800efb2:	f43f ad7e 	beq.w	800eab2 <_strtod_l+0x582>
 800efb6:	4b61      	ldr	r3, [pc, #388]	; (800f13c <_strtod_l+0xc0c>)
 800efb8:	2200      	movs	r2, #0
 800efba:	e78c      	b.n	800eed6 <_strtod_l+0x9a6>
 800efbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f138 <_strtod_l+0xc08>
 800efc0:	f04f 0800 	mov.w	r8, #0
 800efc4:	e7e7      	b.n	800ef96 <_strtod_l+0xa66>
 800efc6:	4b5c      	ldr	r3, [pc, #368]	; (800f138 <_strtod_l+0xc08>)
 800efc8:	4640      	mov	r0, r8
 800efca:	4649      	mov	r1, r9
 800efcc:	2200      	movs	r2, #0
 800efce:	f7f1 fb2b 	bl	8000628 <__aeabi_dmul>
 800efd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efd4:	4680      	mov	r8, r0
 800efd6:	4689      	mov	r9, r1
 800efd8:	b933      	cbnz	r3, 800efe8 <_strtod_l+0xab8>
 800efda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efde:	9012      	str	r0, [sp, #72]	; 0x48
 800efe0:	9313      	str	r3, [sp, #76]	; 0x4c
 800efe2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800efe6:	e7dd      	b.n	800efa4 <_strtod_l+0xa74>
 800efe8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800efec:	e7f9      	b.n	800efe2 <_strtod_l+0xab2>
 800efee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800eff2:	9b04      	ldr	r3, [sp, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1a8      	bne.n	800ef4a <_strtod_l+0xa1a>
 800eff8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800effc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800effe:	0d1b      	lsrs	r3, r3, #20
 800f000:	051b      	lsls	r3, r3, #20
 800f002:	429a      	cmp	r2, r3
 800f004:	d1a1      	bne.n	800ef4a <_strtod_l+0xa1a>
 800f006:	4640      	mov	r0, r8
 800f008:	4649      	mov	r1, r9
 800f00a:	f7f1 fe95 	bl	8000d38 <__aeabi_d2lz>
 800f00e:	f7f1 fadd 	bl	80005cc <__aeabi_l2d>
 800f012:	4602      	mov	r2, r0
 800f014:	460b      	mov	r3, r1
 800f016:	4640      	mov	r0, r8
 800f018:	4649      	mov	r1, r9
 800f01a:	f7f1 f94d 	bl	80002b8 <__aeabi_dsub>
 800f01e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f024:	ea43 030a 	orr.w	r3, r3, sl
 800f028:	4313      	orrs	r3, r2
 800f02a:	4680      	mov	r8, r0
 800f02c:	4689      	mov	r9, r1
 800f02e:	d053      	beq.n	800f0d8 <_strtod_l+0xba8>
 800f030:	a335      	add	r3, pc, #212	; (adr r3, 800f108 <_strtod_l+0xbd8>)
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	f7f1 fd69 	bl	8000b0c <__aeabi_dcmplt>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	f47f acce 	bne.w	800e9dc <_strtod_l+0x4ac>
 800f040:	a333      	add	r3, pc, #204	; (adr r3, 800f110 <_strtod_l+0xbe0>)
 800f042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	f7f1 fd7d 	bl	8000b48 <__aeabi_dcmpgt>
 800f04e:	2800      	cmp	r0, #0
 800f050:	f43f af7b 	beq.w	800ef4a <_strtod_l+0xa1a>
 800f054:	e4c2      	b.n	800e9dc <_strtod_l+0x4ac>
 800f056:	9b04      	ldr	r3, [sp, #16]
 800f058:	b333      	cbz	r3, 800f0a8 <_strtod_l+0xb78>
 800f05a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f05c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f060:	d822      	bhi.n	800f0a8 <_strtod_l+0xb78>
 800f062:	a32d      	add	r3, pc, #180	; (adr r3, 800f118 <_strtod_l+0xbe8>)
 800f064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f068:	4640      	mov	r0, r8
 800f06a:	4649      	mov	r1, r9
 800f06c:	f7f1 fd58 	bl	8000b20 <__aeabi_dcmple>
 800f070:	b1a0      	cbz	r0, 800f09c <_strtod_l+0xb6c>
 800f072:	4649      	mov	r1, r9
 800f074:	4640      	mov	r0, r8
 800f076:	f7f1 fd87 	bl	8000b88 <__aeabi_d2uiz>
 800f07a:	2801      	cmp	r0, #1
 800f07c:	bf38      	it	cc
 800f07e:	2001      	movcc	r0, #1
 800f080:	f7f1 fa58 	bl	8000534 <__aeabi_ui2d>
 800f084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f086:	4680      	mov	r8, r0
 800f088:	4689      	mov	r9, r1
 800f08a:	bb13      	cbnz	r3, 800f0d2 <_strtod_l+0xba2>
 800f08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f090:	9014      	str	r0, [sp, #80]	; 0x50
 800f092:	9315      	str	r3, [sp, #84]	; 0x54
 800f094:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f098:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f09e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f0a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f0a4:	1a9b      	subs	r3, r3, r2
 800f0a6:	930d      	str	r3, [sp, #52]	; 0x34
 800f0a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f0ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f0b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f0b4:	f001 f848 	bl	8010148 <__ulp>
 800f0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f0bc:	ec53 2b10 	vmov	r2, r3, d0
 800f0c0:	f7f1 fab2 	bl	8000628 <__aeabi_dmul>
 800f0c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f0c8:	f7f1 f8f8 	bl	80002bc <__adddf3>
 800f0cc:	4682      	mov	sl, r0
 800f0ce:	468b      	mov	fp, r1
 800f0d0:	e78f      	b.n	800eff2 <_strtod_l+0xac2>
 800f0d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f0d6:	e7dd      	b.n	800f094 <_strtod_l+0xb64>
 800f0d8:	a311      	add	r3, pc, #68	; (adr r3, 800f120 <_strtod_l+0xbf0>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 fd15 	bl	8000b0c <__aeabi_dcmplt>
 800f0e2:	e7b4      	b.n	800f04e <_strtod_l+0xb1e>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	930e      	str	r3, [sp, #56]	; 0x38
 800f0e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f0ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0ec:	6013      	str	r3, [r2, #0]
 800f0ee:	f7ff ba65 	b.w	800e5bc <_strtod_l+0x8c>
 800f0f2:	2b65      	cmp	r3, #101	; 0x65
 800f0f4:	f43f ab5d 	beq.w	800e7b2 <_strtod_l+0x282>
 800f0f8:	2b45      	cmp	r3, #69	; 0x45
 800f0fa:	f43f ab5a 	beq.w	800e7b2 <_strtod_l+0x282>
 800f0fe:	2201      	movs	r2, #1
 800f100:	f7ff bb92 	b.w	800e828 <_strtod_l+0x2f8>
 800f104:	f3af 8000 	nop.w
 800f108:	94a03595 	.word	0x94a03595
 800f10c:	3fdfffff 	.word	0x3fdfffff
 800f110:	35afe535 	.word	0x35afe535
 800f114:	3fe00000 	.word	0x3fe00000
 800f118:	ffc00000 	.word	0xffc00000
 800f11c:	41dfffff 	.word	0x41dfffff
 800f120:	94a03595 	.word	0x94a03595
 800f124:	3fcfffff 	.word	0x3fcfffff
 800f128:	3ff00000 	.word	0x3ff00000
 800f12c:	7ff00000 	.word	0x7ff00000
 800f130:	7fe00000 	.word	0x7fe00000
 800f134:	7c9fffff 	.word	0x7c9fffff
 800f138:	3fe00000 	.word	0x3fe00000
 800f13c:	bff00000 	.word	0xbff00000
 800f140:	7fefffff 	.word	0x7fefffff

0800f144 <_strtod_r>:
 800f144:	4b01      	ldr	r3, [pc, #4]	; (800f14c <_strtod_r+0x8>)
 800f146:	f7ff b9f3 	b.w	800e530 <_strtod_l>
 800f14a:	bf00      	nop
 800f14c:	20000244 	.word	0x20000244

0800f150 <_strtol_l.isra.0>:
 800f150:	2b01      	cmp	r3, #1
 800f152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f156:	d001      	beq.n	800f15c <_strtol_l.isra.0+0xc>
 800f158:	2b24      	cmp	r3, #36	; 0x24
 800f15a:	d906      	bls.n	800f16a <_strtol_l.isra.0+0x1a>
 800f15c:	f7fe fcf8 	bl	800db50 <__errno>
 800f160:	2316      	movs	r3, #22
 800f162:	6003      	str	r3, [r0, #0]
 800f164:	2000      	movs	r0, #0
 800f166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16a:	4f3a      	ldr	r7, [pc, #232]	; (800f254 <_strtol_l.isra.0+0x104>)
 800f16c:	468e      	mov	lr, r1
 800f16e:	4676      	mov	r6, lr
 800f170:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f174:	5de5      	ldrb	r5, [r4, r7]
 800f176:	f015 0508 	ands.w	r5, r5, #8
 800f17a:	d1f8      	bne.n	800f16e <_strtol_l.isra.0+0x1e>
 800f17c:	2c2d      	cmp	r4, #45	; 0x2d
 800f17e:	d134      	bne.n	800f1ea <_strtol_l.isra.0+0x9a>
 800f180:	f89e 4000 	ldrb.w	r4, [lr]
 800f184:	f04f 0801 	mov.w	r8, #1
 800f188:	f106 0e02 	add.w	lr, r6, #2
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d05c      	beq.n	800f24a <_strtol_l.isra.0+0xfa>
 800f190:	2b10      	cmp	r3, #16
 800f192:	d10c      	bne.n	800f1ae <_strtol_l.isra.0+0x5e>
 800f194:	2c30      	cmp	r4, #48	; 0x30
 800f196:	d10a      	bne.n	800f1ae <_strtol_l.isra.0+0x5e>
 800f198:	f89e 4000 	ldrb.w	r4, [lr]
 800f19c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f1a0:	2c58      	cmp	r4, #88	; 0x58
 800f1a2:	d14d      	bne.n	800f240 <_strtol_l.isra.0+0xf0>
 800f1a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f1a8:	2310      	movs	r3, #16
 800f1aa:	f10e 0e02 	add.w	lr, lr, #2
 800f1ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f1b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f1b6:	2600      	movs	r6, #0
 800f1b8:	fbbc f9f3 	udiv	r9, ip, r3
 800f1bc:	4635      	mov	r5, r6
 800f1be:	fb03 ca19 	mls	sl, r3, r9, ip
 800f1c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f1c6:	2f09      	cmp	r7, #9
 800f1c8:	d818      	bhi.n	800f1fc <_strtol_l.isra.0+0xac>
 800f1ca:	463c      	mov	r4, r7
 800f1cc:	42a3      	cmp	r3, r4
 800f1ce:	dd24      	ble.n	800f21a <_strtol_l.isra.0+0xca>
 800f1d0:	2e00      	cmp	r6, #0
 800f1d2:	db1f      	blt.n	800f214 <_strtol_l.isra.0+0xc4>
 800f1d4:	45a9      	cmp	r9, r5
 800f1d6:	d31d      	bcc.n	800f214 <_strtol_l.isra.0+0xc4>
 800f1d8:	d101      	bne.n	800f1de <_strtol_l.isra.0+0x8e>
 800f1da:	45a2      	cmp	sl, r4
 800f1dc:	db1a      	blt.n	800f214 <_strtol_l.isra.0+0xc4>
 800f1de:	fb05 4503 	mla	r5, r5, r3, r4
 800f1e2:	2601      	movs	r6, #1
 800f1e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f1e8:	e7eb      	b.n	800f1c2 <_strtol_l.isra.0+0x72>
 800f1ea:	2c2b      	cmp	r4, #43	; 0x2b
 800f1ec:	bf08      	it	eq
 800f1ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f1f2:	46a8      	mov	r8, r5
 800f1f4:	bf08      	it	eq
 800f1f6:	f106 0e02 	addeq.w	lr, r6, #2
 800f1fa:	e7c7      	b.n	800f18c <_strtol_l.isra.0+0x3c>
 800f1fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f200:	2f19      	cmp	r7, #25
 800f202:	d801      	bhi.n	800f208 <_strtol_l.isra.0+0xb8>
 800f204:	3c37      	subs	r4, #55	; 0x37
 800f206:	e7e1      	b.n	800f1cc <_strtol_l.isra.0+0x7c>
 800f208:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f20c:	2f19      	cmp	r7, #25
 800f20e:	d804      	bhi.n	800f21a <_strtol_l.isra.0+0xca>
 800f210:	3c57      	subs	r4, #87	; 0x57
 800f212:	e7db      	b.n	800f1cc <_strtol_l.isra.0+0x7c>
 800f214:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f218:	e7e4      	b.n	800f1e4 <_strtol_l.isra.0+0x94>
 800f21a:	2e00      	cmp	r6, #0
 800f21c:	da05      	bge.n	800f22a <_strtol_l.isra.0+0xda>
 800f21e:	2322      	movs	r3, #34	; 0x22
 800f220:	6003      	str	r3, [r0, #0]
 800f222:	4665      	mov	r5, ip
 800f224:	b942      	cbnz	r2, 800f238 <_strtol_l.isra.0+0xe8>
 800f226:	4628      	mov	r0, r5
 800f228:	e79d      	b.n	800f166 <_strtol_l.isra.0+0x16>
 800f22a:	f1b8 0f00 	cmp.w	r8, #0
 800f22e:	d000      	beq.n	800f232 <_strtol_l.isra.0+0xe2>
 800f230:	426d      	negs	r5, r5
 800f232:	2a00      	cmp	r2, #0
 800f234:	d0f7      	beq.n	800f226 <_strtol_l.isra.0+0xd6>
 800f236:	b10e      	cbz	r6, 800f23c <_strtol_l.isra.0+0xec>
 800f238:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800f23c:	6011      	str	r1, [r2, #0]
 800f23e:	e7f2      	b.n	800f226 <_strtol_l.isra.0+0xd6>
 800f240:	2430      	movs	r4, #48	; 0x30
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1b3      	bne.n	800f1ae <_strtol_l.isra.0+0x5e>
 800f246:	2308      	movs	r3, #8
 800f248:	e7b1      	b.n	800f1ae <_strtol_l.isra.0+0x5e>
 800f24a:	2c30      	cmp	r4, #48	; 0x30
 800f24c:	d0a4      	beq.n	800f198 <_strtol_l.isra.0+0x48>
 800f24e:	230a      	movs	r3, #10
 800f250:	e7ad      	b.n	800f1ae <_strtol_l.isra.0+0x5e>
 800f252:	bf00      	nop
 800f254:	08013a89 	.word	0x08013a89

0800f258 <_strtol_r>:
 800f258:	f7ff bf7a 	b.w	800f150 <_strtol_l.isra.0>

0800f25c <strtol>:
 800f25c:	4613      	mov	r3, r2
 800f25e:	460a      	mov	r2, r1
 800f260:	4601      	mov	r1, r0
 800f262:	4802      	ldr	r0, [pc, #8]	; (800f26c <strtol+0x10>)
 800f264:	6800      	ldr	r0, [r0, #0]
 800f266:	f7ff bf73 	b.w	800f150 <_strtol_l.isra.0>
 800f26a:	bf00      	nop
 800f26c:	200001dc 	.word	0x200001dc

0800f270 <_vsniprintf_r>:
 800f270:	b530      	push	{r4, r5, lr}
 800f272:	1e14      	subs	r4, r2, #0
 800f274:	4605      	mov	r5, r0
 800f276:	b09b      	sub	sp, #108	; 0x6c
 800f278:	4618      	mov	r0, r3
 800f27a:	da05      	bge.n	800f288 <_vsniprintf_r+0x18>
 800f27c:	238b      	movs	r3, #139	; 0x8b
 800f27e:	602b      	str	r3, [r5, #0]
 800f280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f284:	b01b      	add	sp, #108	; 0x6c
 800f286:	bd30      	pop	{r4, r5, pc}
 800f288:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f28c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f290:	bf14      	ite	ne
 800f292:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f296:	4623      	moveq	r3, r4
 800f298:	9302      	str	r3, [sp, #8]
 800f29a:	9305      	str	r3, [sp, #20]
 800f29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2a0:	9100      	str	r1, [sp, #0]
 800f2a2:	9104      	str	r1, [sp, #16]
 800f2a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f2ac:	4669      	mov	r1, sp
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f001 f8f4 	bl	801049c <_svfiprintf_r>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	bfbc      	itt	lt
 800f2b8:	238b      	movlt	r3, #139	; 0x8b
 800f2ba:	602b      	strlt	r3, [r5, #0]
 800f2bc:	2c00      	cmp	r4, #0
 800f2be:	d0e1      	beq.n	800f284 <_vsniprintf_r+0x14>
 800f2c0:	9b00      	ldr	r3, [sp, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	e7dd      	b.n	800f284 <_vsniprintf_r+0x14>

0800f2c8 <vsniprintf>:
 800f2c8:	b507      	push	{r0, r1, r2, lr}
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	460a      	mov	r2, r1
 800f2d0:	4601      	mov	r1, r0
 800f2d2:	4803      	ldr	r0, [pc, #12]	; (800f2e0 <vsniprintf+0x18>)
 800f2d4:	6800      	ldr	r0, [r0, #0]
 800f2d6:	f7ff ffcb 	bl	800f270 <_vsniprintf_r>
 800f2da:	b003      	add	sp, #12
 800f2dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2e0:	200001dc 	.word	0x200001dc

0800f2e4 <_write_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d07      	ldr	r5, [pc, #28]	; (800f304 <_write_r+0x20>)
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	4608      	mov	r0, r1
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	602a      	str	r2, [r5, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f002 eccc 	blx	8011c90 <___write_veneer>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d102      	bne.n	800f302 <_write_r+0x1e>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b103      	cbz	r3, 800f302 <_write_r+0x1e>
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	2000a0a4 	.word	0x2000a0a4

0800f308 <_close_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4d06      	ldr	r5, [pc, #24]	; (800f324 <_close_r+0x1c>)
 800f30c:	2300      	movs	r3, #0
 800f30e:	4604      	mov	r4, r0
 800f310:	4608      	mov	r0, r1
 800f312:	602b      	str	r3, [r5, #0]
 800f314:	f7f7 fafc 	bl	8006910 <_close>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	d102      	bne.n	800f322 <_close_r+0x1a>
 800f31c:	682b      	ldr	r3, [r5, #0]
 800f31e:	b103      	cbz	r3, 800f322 <_close_r+0x1a>
 800f320:	6023      	str	r3, [r4, #0]
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	2000a0a4 	.word	0x2000a0a4

0800f328 <rshift>:
 800f328:	6903      	ldr	r3, [r0, #16]
 800f32a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f32e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f332:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f336:	f100 0414 	add.w	r4, r0, #20
 800f33a:	dd45      	ble.n	800f3c8 <rshift+0xa0>
 800f33c:	f011 011f 	ands.w	r1, r1, #31
 800f340:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f344:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f348:	d10c      	bne.n	800f364 <rshift+0x3c>
 800f34a:	f100 0710 	add.w	r7, r0, #16
 800f34e:	4629      	mov	r1, r5
 800f350:	42b1      	cmp	r1, r6
 800f352:	d334      	bcc.n	800f3be <rshift+0x96>
 800f354:	1a9b      	subs	r3, r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	1eea      	subs	r2, r5, #3
 800f35a:	4296      	cmp	r6, r2
 800f35c:	bf38      	it	cc
 800f35e:	2300      	movcc	r3, #0
 800f360:	4423      	add	r3, r4
 800f362:	e015      	b.n	800f390 <rshift+0x68>
 800f364:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f368:	f1c1 0820 	rsb	r8, r1, #32
 800f36c:	40cf      	lsrs	r7, r1
 800f36e:	f105 0e04 	add.w	lr, r5, #4
 800f372:	46a1      	mov	r9, r4
 800f374:	4576      	cmp	r6, lr
 800f376:	46f4      	mov	ip, lr
 800f378:	d815      	bhi.n	800f3a6 <rshift+0x7e>
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	009a      	lsls	r2, r3, #2
 800f37e:	3a04      	subs	r2, #4
 800f380:	3501      	adds	r5, #1
 800f382:	42ae      	cmp	r6, r5
 800f384:	bf38      	it	cc
 800f386:	2200      	movcc	r2, #0
 800f388:	18a3      	adds	r3, r4, r2
 800f38a:	50a7      	str	r7, [r4, r2]
 800f38c:	b107      	cbz	r7, 800f390 <rshift+0x68>
 800f38e:	3304      	adds	r3, #4
 800f390:	1b1a      	subs	r2, r3, r4
 800f392:	42a3      	cmp	r3, r4
 800f394:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f398:	bf08      	it	eq
 800f39a:	2300      	moveq	r3, #0
 800f39c:	6102      	str	r2, [r0, #16]
 800f39e:	bf08      	it	eq
 800f3a0:	6143      	streq	r3, [r0, #20]
 800f3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3a6:	f8dc c000 	ldr.w	ip, [ip]
 800f3aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800f3ae:	ea4c 0707 	orr.w	r7, ip, r7
 800f3b2:	f849 7b04 	str.w	r7, [r9], #4
 800f3b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f3ba:	40cf      	lsrs	r7, r1
 800f3bc:	e7da      	b.n	800f374 <rshift+0x4c>
 800f3be:	f851 cb04 	ldr.w	ip, [r1], #4
 800f3c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800f3c6:	e7c3      	b.n	800f350 <rshift+0x28>
 800f3c8:	4623      	mov	r3, r4
 800f3ca:	e7e1      	b.n	800f390 <rshift+0x68>

0800f3cc <__hexdig_fun>:
 800f3cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f3d0:	2b09      	cmp	r3, #9
 800f3d2:	d802      	bhi.n	800f3da <__hexdig_fun+0xe>
 800f3d4:	3820      	subs	r0, #32
 800f3d6:	b2c0      	uxtb	r0, r0
 800f3d8:	4770      	bx	lr
 800f3da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f3de:	2b05      	cmp	r3, #5
 800f3e0:	d801      	bhi.n	800f3e6 <__hexdig_fun+0x1a>
 800f3e2:	3847      	subs	r0, #71	; 0x47
 800f3e4:	e7f7      	b.n	800f3d6 <__hexdig_fun+0xa>
 800f3e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f3ea:	2b05      	cmp	r3, #5
 800f3ec:	d801      	bhi.n	800f3f2 <__hexdig_fun+0x26>
 800f3ee:	3827      	subs	r0, #39	; 0x27
 800f3f0:	e7f1      	b.n	800f3d6 <__hexdig_fun+0xa>
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	4770      	bx	lr
	...

0800f3f8 <__gethex>:
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	ed2d 8b02 	vpush	{d8}
 800f400:	b089      	sub	sp, #36	; 0x24
 800f402:	ee08 0a10 	vmov	s16, r0
 800f406:	9304      	str	r3, [sp, #16]
 800f408:	4bbc      	ldr	r3, [pc, #752]	; (800f6fc <__gethex+0x304>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	4618      	mov	r0, r3
 800f410:	468b      	mov	fp, r1
 800f412:	4690      	mov	r8, r2
 800f414:	f7f0 feee 	bl	80001f4 <strlen>
 800f418:	9b01      	ldr	r3, [sp, #4]
 800f41a:	f8db 2000 	ldr.w	r2, [fp]
 800f41e:	4403      	add	r3, r0
 800f420:	4682      	mov	sl, r0
 800f422:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f426:	9305      	str	r3, [sp, #20]
 800f428:	1c93      	adds	r3, r2, #2
 800f42a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f42e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f432:	32fe      	adds	r2, #254	; 0xfe
 800f434:	18d1      	adds	r1, r2, r3
 800f436:	461f      	mov	r7, r3
 800f438:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f43c:	9100      	str	r1, [sp, #0]
 800f43e:	2830      	cmp	r0, #48	; 0x30
 800f440:	d0f8      	beq.n	800f434 <__gethex+0x3c>
 800f442:	f7ff ffc3 	bl	800f3cc <__hexdig_fun>
 800f446:	4604      	mov	r4, r0
 800f448:	2800      	cmp	r0, #0
 800f44a:	d13a      	bne.n	800f4c2 <__gethex+0xca>
 800f44c:	9901      	ldr	r1, [sp, #4]
 800f44e:	4652      	mov	r2, sl
 800f450:	4638      	mov	r0, r7
 800f452:	f7ff f812 	bl	800e47a <strncmp>
 800f456:	4605      	mov	r5, r0
 800f458:	2800      	cmp	r0, #0
 800f45a:	d168      	bne.n	800f52e <__gethex+0x136>
 800f45c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f460:	eb07 060a 	add.w	r6, r7, sl
 800f464:	f7ff ffb2 	bl	800f3cc <__hexdig_fun>
 800f468:	2800      	cmp	r0, #0
 800f46a:	d062      	beq.n	800f532 <__gethex+0x13a>
 800f46c:	4633      	mov	r3, r6
 800f46e:	7818      	ldrb	r0, [r3, #0]
 800f470:	2830      	cmp	r0, #48	; 0x30
 800f472:	461f      	mov	r7, r3
 800f474:	f103 0301 	add.w	r3, r3, #1
 800f478:	d0f9      	beq.n	800f46e <__gethex+0x76>
 800f47a:	f7ff ffa7 	bl	800f3cc <__hexdig_fun>
 800f47e:	2301      	movs	r3, #1
 800f480:	fab0 f480 	clz	r4, r0
 800f484:	0964      	lsrs	r4, r4, #5
 800f486:	4635      	mov	r5, r6
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	463a      	mov	r2, r7
 800f48c:	4616      	mov	r6, r2
 800f48e:	3201      	adds	r2, #1
 800f490:	7830      	ldrb	r0, [r6, #0]
 800f492:	f7ff ff9b 	bl	800f3cc <__hexdig_fun>
 800f496:	2800      	cmp	r0, #0
 800f498:	d1f8      	bne.n	800f48c <__gethex+0x94>
 800f49a:	9901      	ldr	r1, [sp, #4]
 800f49c:	4652      	mov	r2, sl
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f7fe ffeb 	bl	800e47a <strncmp>
 800f4a4:	b980      	cbnz	r0, 800f4c8 <__gethex+0xd0>
 800f4a6:	b94d      	cbnz	r5, 800f4bc <__gethex+0xc4>
 800f4a8:	eb06 050a 	add.w	r5, r6, sl
 800f4ac:	462a      	mov	r2, r5
 800f4ae:	4616      	mov	r6, r2
 800f4b0:	3201      	adds	r2, #1
 800f4b2:	7830      	ldrb	r0, [r6, #0]
 800f4b4:	f7ff ff8a 	bl	800f3cc <__hexdig_fun>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d1f8      	bne.n	800f4ae <__gethex+0xb6>
 800f4bc:	1bad      	subs	r5, r5, r6
 800f4be:	00ad      	lsls	r5, r5, #2
 800f4c0:	e004      	b.n	800f4cc <__gethex+0xd4>
 800f4c2:	2400      	movs	r4, #0
 800f4c4:	4625      	mov	r5, r4
 800f4c6:	e7e0      	b.n	800f48a <__gethex+0x92>
 800f4c8:	2d00      	cmp	r5, #0
 800f4ca:	d1f7      	bne.n	800f4bc <__gethex+0xc4>
 800f4cc:	7833      	ldrb	r3, [r6, #0]
 800f4ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f4d2:	2b50      	cmp	r3, #80	; 0x50
 800f4d4:	d13b      	bne.n	800f54e <__gethex+0x156>
 800f4d6:	7873      	ldrb	r3, [r6, #1]
 800f4d8:	2b2b      	cmp	r3, #43	; 0x2b
 800f4da:	d02c      	beq.n	800f536 <__gethex+0x13e>
 800f4dc:	2b2d      	cmp	r3, #45	; 0x2d
 800f4de:	d02e      	beq.n	800f53e <__gethex+0x146>
 800f4e0:	1c71      	adds	r1, r6, #1
 800f4e2:	f04f 0900 	mov.w	r9, #0
 800f4e6:	7808      	ldrb	r0, [r1, #0]
 800f4e8:	f7ff ff70 	bl	800f3cc <__hexdig_fun>
 800f4ec:	1e43      	subs	r3, r0, #1
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	2b18      	cmp	r3, #24
 800f4f2:	d82c      	bhi.n	800f54e <__gethex+0x156>
 800f4f4:	f1a0 0210 	sub.w	r2, r0, #16
 800f4f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4fc:	f7ff ff66 	bl	800f3cc <__hexdig_fun>
 800f500:	1e43      	subs	r3, r0, #1
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b18      	cmp	r3, #24
 800f506:	d91d      	bls.n	800f544 <__gethex+0x14c>
 800f508:	f1b9 0f00 	cmp.w	r9, #0
 800f50c:	d000      	beq.n	800f510 <__gethex+0x118>
 800f50e:	4252      	negs	r2, r2
 800f510:	4415      	add	r5, r2
 800f512:	f8cb 1000 	str.w	r1, [fp]
 800f516:	b1e4      	cbz	r4, 800f552 <__gethex+0x15a>
 800f518:	9b00      	ldr	r3, [sp, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bf14      	ite	ne
 800f51e:	2700      	movne	r7, #0
 800f520:	2706      	moveq	r7, #6
 800f522:	4638      	mov	r0, r7
 800f524:	b009      	add	sp, #36	; 0x24
 800f526:	ecbd 8b02 	vpop	{d8}
 800f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52e:	463e      	mov	r6, r7
 800f530:	4625      	mov	r5, r4
 800f532:	2401      	movs	r4, #1
 800f534:	e7ca      	b.n	800f4cc <__gethex+0xd4>
 800f536:	f04f 0900 	mov.w	r9, #0
 800f53a:	1cb1      	adds	r1, r6, #2
 800f53c:	e7d3      	b.n	800f4e6 <__gethex+0xee>
 800f53e:	f04f 0901 	mov.w	r9, #1
 800f542:	e7fa      	b.n	800f53a <__gethex+0x142>
 800f544:	230a      	movs	r3, #10
 800f546:	fb03 0202 	mla	r2, r3, r2, r0
 800f54a:	3a10      	subs	r2, #16
 800f54c:	e7d4      	b.n	800f4f8 <__gethex+0x100>
 800f54e:	4631      	mov	r1, r6
 800f550:	e7df      	b.n	800f512 <__gethex+0x11a>
 800f552:	1bf3      	subs	r3, r6, r7
 800f554:	3b01      	subs	r3, #1
 800f556:	4621      	mov	r1, r4
 800f558:	2b07      	cmp	r3, #7
 800f55a:	dc0b      	bgt.n	800f574 <__gethex+0x17c>
 800f55c:	ee18 0a10 	vmov	r0, s16
 800f560:	f000 fa86 	bl	800fa70 <_Balloc>
 800f564:	4604      	mov	r4, r0
 800f566:	b940      	cbnz	r0, 800f57a <__gethex+0x182>
 800f568:	4b65      	ldr	r3, [pc, #404]	; (800f700 <__gethex+0x308>)
 800f56a:	4602      	mov	r2, r0
 800f56c:	21de      	movs	r1, #222	; 0xde
 800f56e:	4865      	ldr	r0, [pc, #404]	; (800f704 <__gethex+0x30c>)
 800f570:	f001 fe62 	bl	8011238 <__assert_func>
 800f574:	3101      	adds	r1, #1
 800f576:	105b      	asrs	r3, r3, #1
 800f578:	e7ee      	b.n	800f558 <__gethex+0x160>
 800f57a:	f100 0914 	add.w	r9, r0, #20
 800f57e:	f04f 0b00 	mov.w	fp, #0
 800f582:	f1ca 0301 	rsb	r3, sl, #1
 800f586:	f8cd 9008 	str.w	r9, [sp, #8]
 800f58a:	f8cd b000 	str.w	fp, [sp]
 800f58e:	9306      	str	r3, [sp, #24]
 800f590:	42b7      	cmp	r7, r6
 800f592:	d340      	bcc.n	800f616 <__gethex+0x21e>
 800f594:	9802      	ldr	r0, [sp, #8]
 800f596:	9b00      	ldr	r3, [sp, #0]
 800f598:	f840 3b04 	str.w	r3, [r0], #4
 800f59c:	eba0 0009 	sub.w	r0, r0, r9
 800f5a0:	1080      	asrs	r0, r0, #2
 800f5a2:	0146      	lsls	r6, r0, #5
 800f5a4:	6120      	str	r0, [r4, #16]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f000 fb58 	bl	800fc5c <__hi0bits>
 800f5ac:	1a30      	subs	r0, r6, r0
 800f5ae:	f8d8 6000 	ldr.w	r6, [r8]
 800f5b2:	42b0      	cmp	r0, r6
 800f5b4:	dd63      	ble.n	800f67e <__gethex+0x286>
 800f5b6:	1b87      	subs	r7, r0, r6
 800f5b8:	4639      	mov	r1, r7
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f000 fef2 	bl	80103a4 <__any_on>
 800f5c0:	4682      	mov	sl, r0
 800f5c2:	b1a8      	cbz	r0, 800f5f0 <__gethex+0x1f8>
 800f5c4:	1e7b      	subs	r3, r7, #1
 800f5c6:	1159      	asrs	r1, r3, #5
 800f5c8:	f003 021f 	and.w	r2, r3, #31
 800f5cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f5d0:	f04f 0a01 	mov.w	sl, #1
 800f5d4:	fa0a f202 	lsl.w	r2, sl, r2
 800f5d8:	420a      	tst	r2, r1
 800f5da:	d009      	beq.n	800f5f0 <__gethex+0x1f8>
 800f5dc:	4553      	cmp	r3, sl
 800f5de:	dd05      	ble.n	800f5ec <__gethex+0x1f4>
 800f5e0:	1eb9      	subs	r1, r7, #2
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f000 fede 	bl	80103a4 <__any_on>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d145      	bne.n	800f678 <__gethex+0x280>
 800f5ec:	f04f 0a02 	mov.w	sl, #2
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f7ff fe98 	bl	800f328 <rshift>
 800f5f8:	443d      	add	r5, r7
 800f5fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5fe:	42ab      	cmp	r3, r5
 800f600:	da4c      	bge.n	800f69c <__gethex+0x2a4>
 800f602:	ee18 0a10 	vmov	r0, s16
 800f606:	4621      	mov	r1, r4
 800f608:	f000 fa72 	bl	800faf0 <_Bfree>
 800f60c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f60e:	2300      	movs	r3, #0
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	27a3      	movs	r7, #163	; 0xa3
 800f614:	e785      	b.n	800f522 <__gethex+0x12a>
 800f616:	1e73      	subs	r3, r6, #1
 800f618:	9a05      	ldr	r2, [sp, #20]
 800f61a:	9303      	str	r3, [sp, #12]
 800f61c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f620:	4293      	cmp	r3, r2
 800f622:	d019      	beq.n	800f658 <__gethex+0x260>
 800f624:	f1bb 0f20 	cmp.w	fp, #32
 800f628:	d107      	bne.n	800f63a <__gethex+0x242>
 800f62a:	9b02      	ldr	r3, [sp, #8]
 800f62c:	9a00      	ldr	r2, [sp, #0]
 800f62e:	f843 2b04 	str.w	r2, [r3], #4
 800f632:	9302      	str	r3, [sp, #8]
 800f634:	2300      	movs	r3, #0
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	469b      	mov	fp, r3
 800f63a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f63e:	f7ff fec5 	bl	800f3cc <__hexdig_fun>
 800f642:	9b00      	ldr	r3, [sp, #0]
 800f644:	f000 000f 	and.w	r0, r0, #15
 800f648:	fa00 f00b 	lsl.w	r0, r0, fp
 800f64c:	4303      	orrs	r3, r0
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	f10b 0b04 	add.w	fp, fp, #4
 800f654:	9b03      	ldr	r3, [sp, #12]
 800f656:	e00d      	b.n	800f674 <__gethex+0x27c>
 800f658:	9b03      	ldr	r3, [sp, #12]
 800f65a:	9a06      	ldr	r2, [sp, #24]
 800f65c:	4413      	add	r3, r2
 800f65e:	42bb      	cmp	r3, r7
 800f660:	d3e0      	bcc.n	800f624 <__gethex+0x22c>
 800f662:	4618      	mov	r0, r3
 800f664:	9901      	ldr	r1, [sp, #4]
 800f666:	9307      	str	r3, [sp, #28]
 800f668:	4652      	mov	r2, sl
 800f66a:	f7fe ff06 	bl	800e47a <strncmp>
 800f66e:	9b07      	ldr	r3, [sp, #28]
 800f670:	2800      	cmp	r0, #0
 800f672:	d1d7      	bne.n	800f624 <__gethex+0x22c>
 800f674:	461e      	mov	r6, r3
 800f676:	e78b      	b.n	800f590 <__gethex+0x198>
 800f678:	f04f 0a03 	mov.w	sl, #3
 800f67c:	e7b8      	b.n	800f5f0 <__gethex+0x1f8>
 800f67e:	da0a      	bge.n	800f696 <__gethex+0x29e>
 800f680:	1a37      	subs	r7, r6, r0
 800f682:	4621      	mov	r1, r4
 800f684:	ee18 0a10 	vmov	r0, s16
 800f688:	463a      	mov	r2, r7
 800f68a:	f000 fc4d 	bl	800ff28 <__lshift>
 800f68e:	1bed      	subs	r5, r5, r7
 800f690:	4604      	mov	r4, r0
 800f692:	f100 0914 	add.w	r9, r0, #20
 800f696:	f04f 0a00 	mov.w	sl, #0
 800f69a:	e7ae      	b.n	800f5fa <__gethex+0x202>
 800f69c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f6a0:	42a8      	cmp	r0, r5
 800f6a2:	dd72      	ble.n	800f78a <__gethex+0x392>
 800f6a4:	1b45      	subs	r5, r0, r5
 800f6a6:	42ae      	cmp	r6, r5
 800f6a8:	dc36      	bgt.n	800f718 <__gethex+0x320>
 800f6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d02a      	beq.n	800f708 <__gethex+0x310>
 800f6b2:	2b03      	cmp	r3, #3
 800f6b4:	d02c      	beq.n	800f710 <__gethex+0x318>
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d115      	bne.n	800f6e6 <__gethex+0x2ee>
 800f6ba:	42ae      	cmp	r6, r5
 800f6bc:	d113      	bne.n	800f6e6 <__gethex+0x2ee>
 800f6be:	2e01      	cmp	r6, #1
 800f6c0:	d10b      	bne.n	800f6da <__gethex+0x2e2>
 800f6c2:	9a04      	ldr	r2, [sp, #16]
 800f6c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6c8:	6013      	str	r3, [r2, #0]
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	6123      	str	r3, [r4, #16]
 800f6ce:	f8c9 3000 	str.w	r3, [r9]
 800f6d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6d4:	2762      	movs	r7, #98	; 0x62
 800f6d6:	601c      	str	r4, [r3, #0]
 800f6d8:	e723      	b.n	800f522 <__gethex+0x12a>
 800f6da:	1e71      	subs	r1, r6, #1
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 fe61 	bl	80103a4 <__any_on>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d1ed      	bne.n	800f6c2 <__gethex+0x2ca>
 800f6e6:	ee18 0a10 	vmov	r0, s16
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	f000 fa00 	bl	800faf0 <_Bfree>
 800f6f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	6013      	str	r3, [r2, #0]
 800f6f6:	2750      	movs	r7, #80	; 0x50
 800f6f8:	e713      	b.n	800f522 <__gethex+0x12a>
 800f6fa:	bf00      	nop
 800f6fc:	08013c74 	.word	0x08013c74
 800f700:	08013bf8 	.word	0x08013bf8
 800f704:	08013c09 	.word	0x08013c09
 800f708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d1eb      	bne.n	800f6e6 <__gethex+0x2ee>
 800f70e:	e7d8      	b.n	800f6c2 <__gethex+0x2ca>
 800f710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1d5      	bne.n	800f6c2 <__gethex+0x2ca>
 800f716:	e7e6      	b.n	800f6e6 <__gethex+0x2ee>
 800f718:	1e6f      	subs	r7, r5, #1
 800f71a:	f1ba 0f00 	cmp.w	sl, #0
 800f71e:	d131      	bne.n	800f784 <__gethex+0x38c>
 800f720:	b127      	cbz	r7, 800f72c <__gethex+0x334>
 800f722:	4639      	mov	r1, r7
 800f724:	4620      	mov	r0, r4
 800f726:	f000 fe3d 	bl	80103a4 <__any_on>
 800f72a:	4682      	mov	sl, r0
 800f72c:	117b      	asrs	r3, r7, #5
 800f72e:	2101      	movs	r1, #1
 800f730:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f734:	f007 071f 	and.w	r7, r7, #31
 800f738:	fa01 f707 	lsl.w	r7, r1, r7
 800f73c:	421f      	tst	r7, r3
 800f73e:	4629      	mov	r1, r5
 800f740:	4620      	mov	r0, r4
 800f742:	bf18      	it	ne
 800f744:	f04a 0a02 	orrne.w	sl, sl, #2
 800f748:	1b76      	subs	r6, r6, r5
 800f74a:	f7ff fded 	bl	800f328 <rshift>
 800f74e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f752:	2702      	movs	r7, #2
 800f754:	f1ba 0f00 	cmp.w	sl, #0
 800f758:	d048      	beq.n	800f7ec <__gethex+0x3f4>
 800f75a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d015      	beq.n	800f78e <__gethex+0x396>
 800f762:	2b03      	cmp	r3, #3
 800f764:	d017      	beq.n	800f796 <__gethex+0x39e>
 800f766:	2b01      	cmp	r3, #1
 800f768:	d109      	bne.n	800f77e <__gethex+0x386>
 800f76a:	f01a 0f02 	tst.w	sl, #2
 800f76e:	d006      	beq.n	800f77e <__gethex+0x386>
 800f770:	f8d9 0000 	ldr.w	r0, [r9]
 800f774:	ea4a 0a00 	orr.w	sl, sl, r0
 800f778:	f01a 0f01 	tst.w	sl, #1
 800f77c:	d10e      	bne.n	800f79c <__gethex+0x3a4>
 800f77e:	f047 0710 	orr.w	r7, r7, #16
 800f782:	e033      	b.n	800f7ec <__gethex+0x3f4>
 800f784:	f04f 0a01 	mov.w	sl, #1
 800f788:	e7d0      	b.n	800f72c <__gethex+0x334>
 800f78a:	2701      	movs	r7, #1
 800f78c:	e7e2      	b.n	800f754 <__gethex+0x35c>
 800f78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f790:	f1c3 0301 	rsb	r3, r3, #1
 800f794:	9315      	str	r3, [sp, #84]	; 0x54
 800f796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d0f0      	beq.n	800f77e <__gethex+0x386>
 800f79c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f7a0:	f104 0314 	add.w	r3, r4, #20
 800f7a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f7a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f7ac:	f04f 0c00 	mov.w	ip, #0
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f7ba:	d01c      	beq.n	800f7f6 <__gethex+0x3fe>
 800f7bc:	3201      	adds	r2, #1
 800f7be:	6002      	str	r2, [r0, #0]
 800f7c0:	2f02      	cmp	r7, #2
 800f7c2:	f104 0314 	add.w	r3, r4, #20
 800f7c6:	d13f      	bne.n	800f848 <__gethex+0x450>
 800f7c8:	f8d8 2000 	ldr.w	r2, [r8]
 800f7cc:	3a01      	subs	r2, #1
 800f7ce:	42b2      	cmp	r2, r6
 800f7d0:	d10a      	bne.n	800f7e8 <__gethex+0x3f0>
 800f7d2:	1171      	asrs	r1, r6, #5
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7da:	f006 061f 	and.w	r6, r6, #31
 800f7de:	fa02 f606 	lsl.w	r6, r2, r6
 800f7e2:	421e      	tst	r6, r3
 800f7e4:	bf18      	it	ne
 800f7e6:	4617      	movne	r7, r2
 800f7e8:	f047 0720 	orr.w	r7, r7, #32
 800f7ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7ee:	601c      	str	r4, [r3, #0]
 800f7f0:	9b04      	ldr	r3, [sp, #16]
 800f7f2:	601d      	str	r5, [r3, #0]
 800f7f4:	e695      	b.n	800f522 <__gethex+0x12a>
 800f7f6:	4299      	cmp	r1, r3
 800f7f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800f7fc:	d8d8      	bhi.n	800f7b0 <__gethex+0x3b8>
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	459b      	cmp	fp, r3
 800f802:	db19      	blt.n	800f838 <__gethex+0x440>
 800f804:	6861      	ldr	r1, [r4, #4]
 800f806:	ee18 0a10 	vmov	r0, s16
 800f80a:	3101      	adds	r1, #1
 800f80c:	f000 f930 	bl	800fa70 <_Balloc>
 800f810:	4681      	mov	r9, r0
 800f812:	b918      	cbnz	r0, 800f81c <__gethex+0x424>
 800f814:	4b1a      	ldr	r3, [pc, #104]	; (800f880 <__gethex+0x488>)
 800f816:	4602      	mov	r2, r0
 800f818:	2184      	movs	r1, #132	; 0x84
 800f81a:	e6a8      	b.n	800f56e <__gethex+0x176>
 800f81c:	6922      	ldr	r2, [r4, #16]
 800f81e:	3202      	adds	r2, #2
 800f820:	f104 010c 	add.w	r1, r4, #12
 800f824:	0092      	lsls	r2, r2, #2
 800f826:	300c      	adds	r0, #12
 800f828:	f7fe fa7c 	bl	800dd24 <memcpy>
 800f82c:	4621      	mov	r1, r4
 800f82e:	ee18 0a10 	vmov	r0, s16
 800f832:	f000 f95d 	bl	800faf0 <_Bfree>
 800f836:	464c      	mov	r4, r9
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f840:	6122      	str	r2, [r4, #16]
 800f842:	2201      	movs	r2, #1
 800f844:	615a      	str	r2, [r3, #20]
 800f846:	e7bb      	b.n	800f7c0 <__gethex+0x3c8>
 800f848:	6922      	ldr	r2, [r4, #16]
 800f84a:	455a      	cmp	r2, fp
 800f84c:	dd0b      	ble.n	800f866 <__gethex+0x46e>
 800f84e:	2101      	movs	r1, #1
 800f850:	4620      	mov	r0, r4
 800f852:	f7ff fd69 	bl	800f328 <rshift>
 800f856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f85a:	3501      	adds	r5, #1
 800f85c:	42ab      	cmp	r3, r5
 800f85e:	f6ff aed0 	blt.w	800f602 <__gethex+0x20a>
 800f862:	2701      	movs	r7, #1
 800f864:	e7c0      	b.n	800f7e8 <__gethex+0x3f0>
 800f866:	f016 061f 	ands.w	r6, r6, #31
 800f86a:	d0fa      	beq.n	800f862 <__gethex+0x46a>
 800f86c:	449a      	add	sl, r3
 800f86e:	f1c6 0620 	rsb	r6, r6, #32
 800f872:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f876:	f000 f9f1 	bl	800fc5c <__hi0bits>
 800f87a:	42b0      	cmp	r0, r6
 800f87c:	dbe7      	blt.n	800f84e <__gethex+0x456>
 800f87e:	e7f0      	b.n	800f862 <__gethex+0x46a>
 800f880:	08013bf8 	.word	0x08013bf8

0800f884 <L_shift>:
 800f884:	f1c2 0208 	rsb	r2, r2, #8
 800f888:	0092      	lsls	r2, r2, #2
 800f88a:	b570      	push	{r4, r5, r6, lr}
 800f88c:	f1c2 0620 	rsb	r6, r2, #32
 800f890:	6843      	ldr	r3, [r0, #4]
 800f892:	6804      	ldr	r4, [r0, #0]
 800f894:	fa03 f506 	lsl.w	r5, r3, r6
 800f898:	432c      	orrs	r4, r5
 800f89a:	40d3      	lsrs	r3, r2
 800f89c:	6004      	str	r4, [r0, #0]
 800f89e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f8a2:	4288      	cmp	r0, r1
 800f8a4:	d3f4      	bcc.n	800f890 <L_shift+0xc>
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}

0800f8a8 <__match>:
 800f8a8:	b530      	push	{r4, r5, lr}
 800f8aa:	6803      	ldr	r3, [r0, #0]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8b2:	b914      	cbnz	r4, 800f8ba <__match+0x12>
 800f8b4:	6003      	str	r3, [r0, #0]
 800f8b6:	2001      	movs	r0, #1
 800f8b8:	bd30      	pop	{r4, r5, pc}
 800f8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f8c2:	2d19      	cmp	r5, #25
 800f8c4:	bf98      	it	ls
 800f8c6:	3220      	addls	r2, #32
 800f8c8:	42a2      	cmp	r2, r4
 800f8ca:	d0f0      	beq.n	800f8ae <__match+0x6>
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	e7f3      	b.n	800f8b8 <__match+0x10>

0800f8d0 <__hexnan>:
 800f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	680b      	ldr	r3, [r1, #0]
 800f8d6:	6801      	ldr	r1, [r0, #0]
 800f8d8:	115e      	asrs	r6, r3, #5
 800f8da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8de:	f013 031f 	ands.w	r3, r3, #31
 800f8e2:	b087      	sub	sp, #28
 800f8e4:	bf18      	it	ne
 800f8e6:	3604      	addne	r6, #4
 800f8e8:	2500      	movs	r5, #0
 800f8ea:	1f37      	subs	r7, r6, #4
 800f8ec:	4682      	mov	sl, r0
 800f8ee:	4690      	mov	r8, r2
 800f8f0:	9301      	str	r3, [sp, #4]
 800f8f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f8f6:	46b9      	mov	r9, r7
 800f8f8:	463c      	mov	r4, r7
 800f8fa:	9502      	str	r5, [sp, #8]
 800f8fc:	46ab      	mov	fp, r5
 800f8fe:	784a      	ldrb	r2, [r1, #1]
 800f900:	1c4b      	adds	r3, r1, #1
 800f902:	9303      	str	r3, [sp, #12]
 800f904:	b342      	cbz	r2, 800f958 <__hexnan+0x88>
 800f906:	4610      	mov	r0, r2
 800f908:	9105      	str	r1, [sp, #20]
 800f90a:	9204      	str	r2, [sp, #16]
 800f90c:	f7ff fd5e 	bl	800f3cc <__hexdig_fun>
 800f910:	2800      	cmp	r0, #0
 800f912:	d14f      	bne.n	800f9b4 <__hexnan+0xe4>
 800f914:	9a04      	ldr	r2, [sp, #16]
 800f916:	9905      	ldr	r1, [sp, #20]
 800f918:	2a20      	cmp	r2, #32
 800f91a:	d818      	bhi.n	800f94e <__hexnan+0x7e>
 800f91c:	9b02      	ldr	r3, [sp, #8]
 800f91e:	459b      	cmp	fp, r3
 800f920:	dd13      	ble.n	800f94a <__hexnan+0x7a>
 800f922:	454c      	cmp	r4, r9
 800f924:	d206      	bcs.n	800f934 <__hexnan+0x64>
 800f926:	2d07      	cmp	r5, #7
 800f928:	dc04      	bgt.n	800f934 <__hexnan+0x64>
 800f92a:	462a      	mov	r2, r5
 800f92c:	4649      	mov	r1, r9
 800f92e:	4620      	mov	r0, r4
 800f930:	f7ff ffa8 	bl	800f884 <L_shift>
 800f934:	4544      	cmp	r4, r8
 800f936:	d950      	bls.n	800f9da <__hexnan+0x10a>
 800f938:	2300      	movs	r3, #0
 800f93a:	f1a4 0904 	sub.w	r9, r4, #4
 800f93e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f942:	f8cd b008 	str.w	fp, [sp, #8]
 800f946:	464c      	mov	r4, r9
 800f948:	461d      	mov	r5, r3
 800f94a:	9903      	ldr	r1, [sp, #12]
 800f94c:	e7d7      	b.n	800f8fe <__hexnan+0x2e>
 800f94e:	2a29      	cmp	r2, #41	; 0x29
 800f950:	d156      	bne.n	800fa00 <__hexnan+0x130>
 800f952:	3102      	adds	r1, #2
 800f954:	f8ca 1000 	str.w	r1, [sl]
 800f958:	f1bb 0f00 	cmp.w	fp, #0
 800f95c:	d050      	beq.n	800fa00 <__hexnan+0x130>
 800f95e:	454c      	cmp	r4, r9
 800f960:	d206      	bcs.n	800f970 <__hexnan+0xa0>
 800f962:	2d07      	cmp	r5, #7
 800f964:	dc04      	bgt.n	800f970 <__hexnan+0xa0>
 800f966:	462a      	mov	r2, r5
 800f968:	4649      	mov	r1, r9
 800f96a:	4620      	mov	r0, r4
 800f96c:	f7ff ff8a 	bl	800f884 <L_shift>
 800f970:	4544      	cmp	r4, r8
 800f972:	d934      	bls.n	800f9de <__hexnan+0x10e>
 800f974:	f1a8 0204 	sub.w	r2, r8, #4
 800f978:	4623      	mov	r3, r4
 800f97a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f97e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f982:	429f      	cmp	r7, r3
 800f984:	d2f9      	bcs.n	800f97a <__hexnan+0xaa>
 800f986:	1b3b      	subs	r3, r7, r4
 800f988:	f023 0303 	bic.w	r3, r3, #3
 800f98c:	3304      	adds	r3, #4
 800f98e:	3401      	adds	r4, #1
 800f990:	3e03      	subs	r6, #3
 800f992:	42b4      	cmp	r4, r6
 800f994:	bf88      	it	hi
 800f996:	2304      	movhi	r3, #4
 800f998:	4443      	add	r3, r8
 800f99a:	2200      	movs	r2, #0
 800f99c:	f843 2b04 	str.w	r2, [r3], #4
 800f9a0:	429f      	cmp	r7, r3
 800f9a2:	d2fb      	bcs.n	800f99c <__hexnan+0xcc>
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	b91b      	cbnz	r3, 800f9b0 <__hexnan+0xe0>
 800f9a8:	4547      	cmp	r7, r8
 800f9aa:	d127      	bne.n	800f9fc <__hexnan+0x12c>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	603b      	str	r3, [r7, #0]
 800f9b0:	2005      	movs	r0, #5
 800f9b2:	e026      	b.n	800fa02 <__hexnan+0x132>
 800f9b4:	3501      	adds	r5, #1
 800f9b6:	2d08      	cmp	r5, #8
 800f9b8:	f10b 0b01 	add.w	fp, fp, #1
 800f9bc:	dd06      	ble.n	800f9cc <__hexnan+0xfc>
 800f9be:	4544      	cmp	r4, r8
 800f9c0:	d9c3      	bls.n	800f94a <__hexnan+0x7a>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9c8:	2501      	movs	r5, #1
 800f9ca:	3c04      	subs	r4, #4
 800f9cc:	6822      	ldr	r2, [r4, #0]
 800f9ce:	f000 000f 	and.w	r0, r0, #15
 800f9d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f9d6:	6022      	str	r2, [r4, #0]
 800f9d8:	e7b7      	b.n	800f94a <__hexnan+0x7a>
 800f9da:	2508      	movs	r5, #8
 800f9dc:	e7b5      	b.n	800f94a <__hexnan+0x7a>
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d0df      	beq.n	800f9a4 <__hexnan+0xd4>
 800f9e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9e8:	f1c3 0320 	rsb	r3, r3, #32
 800f9ec:	fa22 f303 	lsr.w	r3, r2, r3
 800f9f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9f4:	401a      	ands	r2, r3
 800f9f6:	f846 2c04 	str.w	r2, [r6, #-4]
 800f9fa:	e7d3      	b.n	800f9a4 <__hexnan+0xd4>
 800f9fc:	3f04      	subs	r7, #4
 800f9fe:	e7d1      	b.n	800f9a4 <__hexnan+0xd4>
 800fa00:	2004      	movs	r0, #4
 800fa02:	b007      	add	sp, #28
 800fa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa08 <__retarget_lock_init_recursive>:
 800fa08:	4770      	bx	lr

0800fa0a <__retarget_lock_acquire_recursive>:
 800fa0a:	4770      	bx	lr

0800fa0c <__retarget_lock_release_recursive>:
 800fa0c:	4770      	bx	lr
	...

0800fa10 <_lseek_r>:
 800fa10:	b538      	push	{r3, r4, r5, lr}
 800fa12:	4d07      	ldr	r5, [pc, #28]	; (800fa30 <_lseek_r+0x20>)
 800fa14:	4604      	mov	r4, r0
 800fa16:	4608      	mov	r0, r1
 800fa18:	4611      	mov	r1, r2
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	602a      	str	r2, [r5, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	f7f6 ff80 	bl	8006924 <_lseek>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_lseek_r+0x1e>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_lseek_r+0x1e>
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	2000a0a4 	.word	0x2000a0a4

0800fa34 <__ascii_mbtowc>:
 800fa34:	b082      	sub	sp, #8
 800fa36:	b901      	cbnz	r1, 800fa3a <__ascii_mbtowc+0x6>
 800fa38:	a901      	add	r1, sp, #4
 800fa3a:	b142      	cbz	r2, 800fa4e <__ascii_mbtowc+0x1a>
 800fa3c:	b14b      	cbz	r3, 800fa52 <__ascii_mbtowc+0x1e>
 800fa3e:	7813      	ldrb	r3, [r2, #0]
 800fa40:	600b      	str	r3, [r1, #0]
 800fa42:	7812      	ldrb	r2, [r2, #0]
 800fa44:	1e10      	subs	r0, r2, #0
 800fa46:	bf18      	it	ne
 800fa48:	2001      	movne	r0, #1
 800fa4a:	b002      	add	sp, #8
 800fa4c:	4770      	bx	lr
 800fa4e:	4610      	mov	r0, r2
 800fa50:	e7fb      	b.n	800fa4a <__ascii_mbtowc+0x16>
 800fa52:	f06f 0001 	mvn.w	r0, #1
 800fa56:	e7f8      	b.n	800fa4a <__ascii_mbtowc+0x16>

0800fa58 <__malloc_lock>:
 800fa58:	4801      	ldr	r0, [pc, #4]	; (800fa60 <__malloc_lock+0x8>)
 800fa5a:	f7ff bfd6 	b.w	800fa0a <__retarget_lock_acquire_recursive>
 800fa5e:	bf00      	nop
 800fa60:	2000a09c 	.word	0x2000a09c

0800fa64 <__malloc_unlock>:
 800fa64:	4801      	ldr	r0, [pc, #4]	; (800fa6c <__malloc_unlock+0x8>)
 800fa66:	f7ff bfd1 	b.w	800fa0c <__retarget_lock_release_recursive>
 800fa6a:	bf00      	nop
 800fa6c:	2000a09c 	.word	0x2000a09c

0800fa70 <_Balloc>:
 800fa70:	b570      	push	{r4, r5, r6, lr}
 800fa72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa74:	4604      	mov	r4, r0
 800fa76:	460d      	mov	r5, r1
 800fa78:	b976      	cbnz	r6, 800fa98 <_Balloc+0x28>
 800fa7a:	2010      	movs	r0, #16
 800fa7c:	f7fe f942 	bl	800dd04 <malloc>
 800fa80:	4602      	mov	r2, r0
 800fa82:	6260      	str	r0, [r4, #36]	; 0x24
 800fa84:	b920      	cbnz	r0, 800fa90 <_Balloc+0x20>
 800fa86:	4b18      	ldr	r3, [pc, #96]	; (800fae8 <_Balloc+0x78>)
 800fa88:	4818      	ldr	r0, [pc, #96]	; (800faec <_Balloc+0x7c>)
 800fa8a:	2166      	movs	r1, #102	; 0x66
 800fa8c:	f001 fbd4 	bl	8011238 <__assert_func>
 800fa90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa94:	6006      	str	r6, [r0, #0]
 800fa96:	60c6      	str	r6, [r0, #12]
 800fa98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fa9a:	68f3      	ldr	r3, [r6, #12]
 800fa9c:	b183      	cbz	r3, 800fac0 <_Balloc+0x50>
 800fa9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800faa6:	b9b8      	cbnz	r0, 800fad8 <_Balloc+0x68>
 800faa8:	2101      	movs	r1, #1
 800faaa:	fa01 f605 	lsl.w	r6, r1, r5
 800faae:	1d72      	adds	r2, r6, #5
 800fab0:	0092      	lsls	r2, r2, #2
 800fab2:	4620      	mov	r0, r4
 800fab4:	f7fe f94c 	bl	800dd50 <_calloc_r>
 800fab8:	b160      	cbz	r0, 800fad4 <_Balloc+0x64>
 800faba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fabe:	e00e      	b.n	800fade <_Balloc+0x6e>
 800fac0:	2221      	movs	r2, #33	; 0x21
 800fac2:	2104      	movs	r1, #4
 800fac4:	4620      	mov	r0, r4
 800fac6:	f7fe f943 	bl	800dd50 <_calloc_r>
 800faca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800facc:	60f0      	str	r0, [r6, #12]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d1e4      	bne.n	800fa9e <_Balloc+0x2e>
 800fad4:	2000      	movs	r0, #0
 800fad6:	bd70      	pop	{r4, r5, r6, pc}
 800fad8:	6802      	ldr	r2, [r0, #0]
 800fada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fade:	2300      	movs	r3, #0
 800fae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fae4:	e7f7      	b.n	800fad6 <_Balloc+0x66>
 800fae6:	bf00      	nop
 800fae8:	08013c88 	.word	0x08013c88
 800faec:	08013c9f 	.word	0x08013c9f

0800faf0 <_Bfree>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800faf4:	4605      	mov	r5, r0
 800faf6:	460c      	mov	r4, r1
 800faf8:	b976      	cbnz	r6, 800fb18 <_Bfree+0x28>
 800fafa:	2010      	movs	r0, #16
 800fafc:	f7fe f902 	bl	800dd04 <malloc>
 800fb00:	4602      	mov	r2, r0
 800fb02:	6268      	str	r0, [r5, #36]	; 0x24
 800fb04:	b920      	cbnz	r0, 800fb10 <_Bfree+0x20>
 800fb06:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <_Bfree+0x3c>)
 800fb08:	4809      	ldr	r0, [pc, #36]	; (800fb30 <_Bfree+0x40>)
 800fb0a:	218a      	movs	r1, #138	; 0x8a
 800fb0c:	f001 fb94 	bl	8011238 <__assert_func>
 800fb10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb14:	6006      	str	r6, [r0, #0]
 800fb16:	60c6      	str	r6, [r0, #12]
 800fb18:	b13c      	cbz	r4, 800fb2a <_Bfree+0x3a>
 800fb1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb1c:	6862      	ldr	r2, [r4, #4]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb24:	6021      	str	r1, [r4, #0]
 800fb26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	08013c88 	.word	0x08013c88
 800fb30:	08013c9f 	.word	0x08013c9f

0800fb34 <__multadd>:
 800fb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb38:	690e      	ldr	r6, [r1, #16]
 800fb3a:	4607      	mov	r7, r0
 800fb3c:	4698      	mov	r8, r3
 800fb3e:	460c      	mov	r4, r1
 800fb40:	f101 0014 	add.w	r0, r1, #20
 800fb44:	2300      	movs	r3, #0
 800fb46:	6805      	ldr	r5, [r0, #0]
 800fb48:	b2a9      	uxth	r1, r5
 800fb4a:	fb02 8101 	mla	r1, r2, r1, r8
 800fb4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fb52:	0c2d      	lsrs	r5, r5, #16
 800fb54:	fb02 c505 	mla	r5, r2, r5, ip
 800fb58:	b289      	uxth	r1, r1
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fb60:	429e      	cmp	r6, r3
 800fb62:	f840 1b04 	str.w	r1, [r0], #4
 800fb66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fb6a:	dcec      	bgt.n	800fb46 <__multadd+0x12>
 800fb6c:	f1b8 0f00 	cmp.w	r8, #0
 800fb70:	d022      	beq.n	800fbb8 <__multadd+0x84>
 800fb72:	68a3      	ldr	r3, [r4, #8]
 800fb74:	42b3      	cmp	r3, r6
 800fb76:	dc19      	bgt.n	800fbac <__multadd+0x78>
 800fb78:	6861      	ldr	r1, [r4, #4]
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	3101      	adds	r1, #1
 800fb7e:	f7ff ff77 	bl	800fa70 <_Balloc>
 800fb82:	4605      	mov	r5, r0
 800fb84:	b928      	cbnz	r0, 800fb92 <__multadd+0x5e>
 800fb86:	4602      	mov	r2, r0
 800fb88:	4b0d      	ldr	r3, [pc, #52]	; (800fbc0 <__multadd+0x8c>)
 800fb8a:	480e      	ldr	r0, [pc, #56]	; (800fbc4 <__multadd+0x90>)
 800fb8c:	21b5      	movs	r1, #181	; 0xb5
 800fb8e:	f001 fb53 	bl	8011238 <__assert_func>
 800fb92:	6922      	ldr	r2, [r4, #16]
 800fb94:	3202      	adds	r2, #2
 800fb96:	f104 010c 	add.w	r1, r4, #12
 800fb9a:	0092      	lsls	r2, r2, #2
 800fb9c:	300c      	adds	r0, #12
 800fb9e:	f7fe f8c1 	bl	800dd24 <memcpy>
 800fba2:	4621      	mov	r1, r4
 800fba4:	4638      	mov	r0, r7
 800fba6:	f7ff ffa3 	bl	800faf0 <_Bfree>
 800fbaa:	462c      	mov	r4, r5
 800fbac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fbb0:	3601      	adds	r6, #1
 800fbb2:	f8c3 8014 	str.w	r8, [r3, #20]
 800fbb6:	6126      	str	r6, [r4, #16]
 800fbb8:	4620      	mov	r0, r4
 800fbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbbe:	bf00      	nop
 800fbc0:	08013bf8 	.word	0x08013bf8
 800fbc4:	08013c9f 	.word	0x08013c9f

0800fbc8 <__s2b>:
 800fbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbcc:	460c      	mov	r4, r1
 800fbce:	4615      	mov	r5, r2
 800fbd0:	461f      	mov	r7, r3
 800fbd2:	2209      	movs	r2, #9
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	4606      	mov	r6, r0
 800fbd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbdc:	2100      	movs	r1, #0
 800fbde:	2201      	movs	r2, #1
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	db09      	blt.n	800fbf8 <__s2b+0x30>
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	f7ff ff43 	bl	800fa70 <_Balloc>
 800fbea:	b940      	cbnz	r0, 800fbfe <__s2b+0x36>
 800fbec:	4602      	mov	r2, r0
 800fbee:	4b19      	ldr	r3, [pc, #100]	; (800fc54 <__s2b+0x8c>)
 800fbf0:	4819      	ldr	r0, [pc, #100]	; (800fc58 <__s2b+0x90>)
 800fbf2:	21ce      	movs	r1, #206	; 0xce
 800fbf4:	f001 fb20 	bl	8011238 <__assert_func>
 800fbf8:	0052      	lsls	r2, r2, #1
 800fbfa:	3101      	adds	r1, #1
 800fbfc:	e7f0      	b.n	800fbe0 <__s2b+0x18>
 800fbfe:	9b08      	ldr	r3, [sp, #32]
 800fc00:	6143      	str	r3, [r0, #20]
 800fc02:	2d09      	cmp	r5, #9
 800fc04:	f04f 0301 	mov.w	r3, #1
 800fc08:	6103      	str	r3, [r0, #16]
 800fc0a:	dd16      	ble.n	800fc3a <__s2b+0x72>
 800fc0c:	f104 0909 	add.w	r9, r4, #9
 800fc10:	46c8      	mov	r8, r9
 800fc12:	442c      	add	r4, r5
 800fc14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc18:	4601      	mov	r1, r0
 800fc1a:	3b30      	subs	r3, #48	; 0x30
 800fc1c:	220a      	movs	r2, #10
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7ff ff88 	bl	800fb34 <__multadd>
 800fc24:	45a0      	cmp	r8, r4
 800fc26:	d1f5      	bne.n	800fc14 <__s2b+0x4c>
 800fc28:	f1a5 0408 	sub.w	r4, r5, #8
 800fc2c:	444c      	add	r4, r9
 800fc2e:	1b2d      	subs	r5, r5, r4
 800fc30:	1963      	adds	r3, r4, r5
 800fc32:	42bb      	cmp	r3, r7
 800fc34:	db04      	blt.n	800fc40 <__s2b+0x78>
 800fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	340a      	adds	r4, #10
 800fc3c:	2509      	movs	r5, #9
 800fc3e:	e7f6      	b.n	800fc2e <__s2b+0x66>
 800fc40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc44:	4601      	mov	r1, r0
 800fc46:	3b30      	subs	r3, #48	; 0x30
 800fc48:	220a      	movs	r2, #10
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7ff ff72 	bl	800fb34 <__multadd>
 800fc50:	e7ee      	b.n	800fc30 <__s2b+0x68>
 800fc52:	bf00      	nop
 800fc54:	08013bf8 	.word	0x08013bf8
 800fc58:	08013c9f 	.word	0x08013c9f

0800fc5c <__hi0bits>:
 800fc5c:	0c03      	lsrs	r3, r0, #16
 800fc5e:	041b      	lsls	r3, r3, #16
 800fc60:	b9d3      	cbnz	r3, 800fc98 <__hi0bits+0x3c>
 800fc62:	0400      	lsls	r0, r0, #16
 800fc64:	2310      	movs	r3, #16
 800fc66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc6a:	bf04      	itt	eq
 800fc6c:	0200      	lsleq	r0, r0, #8
 800fc6e:	3308      	addeq	r3, #8
 800fc70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc74:	bf04      	itt	eq
 800fc76:	0100      	lsleq	r0, r0, #4
 800fc78:	3304      	addeq	r3, #4
 800fc7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fc7e:	bf04      	itt	eq
 800fc80:	0080      	lsleq	r0, r0, #2
 800fc82:	3302      	addeq	r3, #2
 800fc84:	2800      	cmp	r0, #0
 800fc86:	db05      	blt.n	800fc94 <__hi0bits+0x38>
 800fc88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fc8c:	f103 0301 	add.w	r3, r3, #1
 800fc90:	bf08      	it	eq
 800fc92:	2320      	moveq	r3, #32
 800fc94:	4618      	mov	r0, r3
 800fc96:	4770      	bx	lr
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e7e4      	b.n	800fc66 <__hi0bits+0xa>

0800fc9c <__lo0bits>:
 800fc9c:	6803      	ldr	r3, [r0, #0]
 800fc9e:	f013 0207 	ands.w	r2, r3, #7
 800fca2:	4601      	mov	r1, r0
 800fca4:	d00b      	beq.n	800fcbe <__lo0bits+0x22>
 800fca6:	07da      	lsls	r2, r3, #31
 800fca8:	d424      	bmi.n	800fcf4 <__lo0bits+0x58>
 800fcaa:	0798      	lsls	r0, r3, #30
 800fcac:	bf49      	itett	mi
 800fcae:	085b      	lsrmi	r3, r3, #1
 800fcb0:	089b      	lsrpl	r3, r3, #2
 800fcb2:	2001      	movmi	r0, #1
 800fcb4:	600b      	strmi	r3, [r1, #0]
 800fcb6:	bf5c      	itt	pl
 800fcb8:	600b      	strpl	r3, [r1, #0]
 800fcba:	2002      	movpl	r0, #2
 800fcbc:	4770      	bx	lr
 800fcbe:	b298      	uxth	r0, r3
 800fcc0:	b9b0      	cbnz	r0, 800fcf0 <__lo0bits+0x54>
 800fcc2:	0c1b      	lsrs	r3, r3, #16
 800fcc4:	2010      	movs	r0, #16
 800fcc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fcca:	bf04      	itt	eq
 800fccc:	0a1b      	lsreq	r3, r3, #8
 800fcce:	3008      	addeq	r0, #8
 800fcd0:	071a      	lsls	r2, r3, #28
 800fcd2:	bf04      	itt	eq
 800fcd4:	091b      	lsreq	r3, r3, #4
 800fcd6:	3004      	addeq	r0, #4
 800fcd8:	079a      	lsls	r2, r3, #30
 800fcda:	bf04      	itt	eq
 800fcdc:	089b      	lsreq	r3, r3, #2
 800fcde:	3002      	addeq	r0, #2
 800fce0:	07da      	lsls	r2, r3, #31
 800fce2:	d403      	bmi.n	800fcec <__lo0bits+0x50>
 800fce4:	085b      	lsrs	r3, r3, #1
 800fce6:	f100 0001 	add.w	r0, r0, #1
 800fcea:	d005      	beq.n	800fcf8 <__lo0bits+0x5c>
 800fcec:	600b      	str	r3, [r1, #0]
 800fcee:	4770      	bx	lr
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	e7e8      	b.n	800fcc6 <__lo0bits+0x2a>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	4770      	bx	lr
 800fcf8:	2020      	movs	r0, #32
 800fcfa:	4770      	bx	lr

0800fcfc <__i2b>:
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	460c      	mov	r4, r1
 800fd00:	2101      	movs	r1, #1
 800fd02:	f7ff feb5 	bl	800fa70 <_Balloc>
 800fd06:	4602      	mov	r2, r0
 800fd08:	b928      	cbnz	r0, 800fd16 <__i2b+0x1a>
 800fd0a:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <__i2b+0x24>)
 800fd0c:	4805      	ldr	r0, [pc, #20]	; (800fd24 <__i2b+0x28>)
 800fd0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd12:	f001 fa91 	bl	8011238 <__assert_func>
 800fd16:	2301      	movs	r3, #1
 800fd18:	6144      	str	r4, [r0, #20]
 800fd1a:	6103      	str	r3, [r0, #16]
 800fd1c:	bd10      	pop	{r4, pc}
 800fd1e:	bf00      	nop
 800fd20:	08013bf8 	.word	0x08013bf8
 800fd24:	08013c9f 	.word	0x08013c9f

0800fd28 <__multiply>:
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	4614      	mov	r4, r2
 800fd2e:	690a      	ldr	r2, [r1, #16]
 800fd30:	6923      	ldr	r3, [r4, #16]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	bfb8      	it	lt
 800fd36:	460b      	movlt	r3, r1
 800fd38:	460d      	mov	r5, r1
 800fd3a:	bfbc      	itt	lt
 800fd3c:	4625      	movlt	r5, r4
 800fd3e:	461c      	movlt	r4, r3
 800fd40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fd44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fd48:	68ab      	ldr	r3, [r5, #8]
 800fd4a:	6869      	ldr	r1, [r5, #4]
 800fd4c:	eb0a 0709 	add.w	r7, sl, r9
 800fd50:	42bb      	cmp	r3, r7
 800fd52:	b085      	sub	sp, #20
 800fd54:	bfb8      	it	lt
 800fd56:	3101      	addlt	r1, #1
 800fd58:	f7ff fe8a 	bl	800fa70 <_Balloc>
 800fd5c:	b930      	cbnz	r0, 800fd6c <__multiply+0x44>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	4b42      	ldr	r3, [pc, #264]	; (800fe6c <__multiply+0x144>)
 800fd62:	4843      	ldr	r0, [pc, #268]	; (800fe70 <__multiply+0x148>)
 800fd64:	f240 115d 	movw	r1, #349	; 0x15d
 800fd68:	f001 fa66 	bl	8011238 <__assert_func>
 800fd6c:	f100 0614 	add.w	r6, r0, #20
 800fd70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fd74:	4633      	mov	r3, r6
 800fd76:	2200      	movs	r2, #0
 800fd78:	4543      	cmp	r3, r8
 800fd7a:	d31e      	bcc.n	800fdba <__multiply+0x92>
 800fd7c:	f105 0c14 	add.w	ip, r5, #20
 800fd80:	f104 0314 	add.w	r3, r4, #20
 800fd84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fd88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fd8c:	9202      	str	r2, [sp, #8]
 800fd8e:	ebac 0205 	sub.w	r2, ip, r5
 800fd92:	3a15      	subs	r2, #21
 800fd94:	f022 0203 	bic.w	r2, r2, #3
 800fd98:	3204      	adds	r2, #4
 800fd9a:	f105 0115 	add.w	r1, r5, #21
 800fd9e:	458c      	cmp	ip, r1
 800fda0:	bf38      	it	cc
 800fda2:	2204      	movcc	r2, #4
 800fda4:	9201      	str	r2, [sp, #4]
 800fda6:	9a02      	ldr	r2, [sp, #8]
 800fda8:	9303      	str	r3, [sp, #12]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d808      	bhi.n	800fdc0 <__multiply+0x98>
 800fdae:	2f00      	cmp	r7, #0
 800fdb0:	dc55      	bgt.n	800fe5e <__multiply+0x136>
 800fdb2:	6107      	str	r7, [r0, #16]
 800fdb4:	b005      	add	sp, #20
 800fdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdba:	f843 2b04 	str.w	r2, [r3], #4
 800fdbe:	e7db      	b.n	800fd78 <__multiply+0x50>
 800fdc0:	f8b3 a000 	ldrh.w	sl, [r3]
 800fdc4:	f1ba 0f00 	cmp.w	sl, #0
 800fdc8:	d020      	beq.n	800fe0c <__multiply+0xe4>
 800fdca:	f105 0e14 	add.w	lr, r5, #20
 800fdce:	46b1      	mov	r9, r6
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fdd6:	f8d9 b000 	ldr.w	fp, [r9]
 800fdda:	b2a1      	uxth	r1, r4
 800fddc:	fa1f fb8b 	uxth.w	fp, fp
 800fde0:	fb0a b101 	mla	r1, sl, r1, fp
 800fde4:	4411      	add	r1, r2
 800fde6:	f8d9 2000 	ldr.w	r2, [r9]
 800fdea:	0c24      	lsrs	r4, r4, #16
 800fdec:	0c12      	lsrs	r2, r2, #16
 800fdee:	fb0a 2404 	mla	r4, sl, r4, r2
 800fdf2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fdf6:	b289      	uxth	r1, r1
 800fdf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fdfc:	45f4      	cmp	ip, lr
 800fdfe:	f849 1b04 	str.w	r1, [r9], #4
 800fe02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fe06:	d8e4      	bhi.n	800fdd2 <__multiply+0xaa>
 800fe08:	9901      	ldr	r1, [sp, #4]
 800fe0a:	5072      	str	r2, [r6, r1]
 800fe0c:	9a03      	ldr	r2, [sp, #12]
 800fe0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe12:	3304      	adds	r3, #4
 800fe14:	f1b9 0f00 	cmp.w	r9, #0
 800fe18:	d01f      	beq.n	800fe5a <__multiply+0x132>
 800fe1a:	6834      	ldr	r4, [r6, #0]
 800fe1c:	f105 0114 	add.w	r1, r5, #20
 800fe20:	46b6      	mov	lr, r6
 800fe22:	f04f 0a00 	mov.w	sl, #0
 800fe26:	880a      	ldrh	r2, [r1, #0]
 800fe28:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fe2c:	fb09 b202 	mla	r2, r9, r2, fp
 800fe30:	4492      	add	sl, r2
 800fe32:	b2a4      	uxth	r4, r4
 800fe34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fe38:	f84e 4b04 	str.w	r4, [lr], #4
 800fe3c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fe40:	f8be 2000 	ldrh.w	r2, [lr]
 800fe44:	0c24      	lsrs	r4, r4, #16
 800fe46:	fb09 2404 	mla	r4, r9, r4, r2
 800fe4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fe4e:	458c      	cmp	ip, r1
 800fe50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe54:	d8e7      	bhi.n	800fe26 <__multiply+0xfe>
 800fe56:	9a01      	ldr	r2, [sp, #4]
 800fe58:	50b4      	str	r4, [r6, r2]
 800fe5a:	3604      	adds	r6, #4
 800fe5c:	e7a3      	b.n	800fda6 <__multiply+0x7e>
 800fe5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1a5      	bne.n	800fdb2 <__multiply+0x8a>
 800fe66:	3f01      	subs	r7, #1
 800fe68:	e7a1      	b.n	800fdae <__multiply+0x86>
 800fe6a:	bf00      	nop
 800fe6c:	08013bf8 	.word	0x08013bf8
 800fe70:	08013c9f 	.word	0x08013c9f

0800fe74 <__pow5mult>:
 800fe74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe78:	4615      	mov	r5, r2
 800fe7a:	f012 0203 	ands.w	r2, r2, #3
 800fe7e:	4606      	mov	r6, r0
 800fe80:	460f      	mov	r7, r1
 800fe82:	d007      	beq.n	800fe94 <__pow5mult+0x20>
 800fe84:	4c25      	ldr	r4, [pc, #148]	; (800ff1c <__pow5mult+0xa8>)
 800fe86:	3a01      	subs	r2, #1
 800fe88:	2300      	movs	r3, #0
 800fe8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe8e:	f7ff fe51 	bl	800fb34 <__multadd>
 800fe92:	4607      	mov	r7, r0
 800fe94:	10ad      	asrs	r5, r5, #2
 800fe96:	d03d      	beq.n	800ff14 <__pow5mult+0xa0>
 800fe98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fe9a:	b97c      	cbnz	r4, 800febc <__pow5mult+0x48>
 800fe9c:	2010      	movs	r0, #16
 800fe9e:	f7fd ff31 	bl	800dd04 <malloc>
 800fea2:	4602      	mov	r2, r0
 800fea4:	6270      	str	r0, [r6, #36]	; 0x24
 800fea6:	b928      	cbnz	r0, 800feb4 <__pow5mult+0x40>
 800fea8:	4b1d      	ldr	r3, [pc, #116]	; (800ff20 <__pow5mult+0xac>)
 800feaa:	481e      	ldr	r0, [pc, #120]	; (800ff24 <__pow5mult+0xb0>)
 800feac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800feb0:	f001 f9c2 	bl	8011238 <__assert_func>
 800feb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800feb8:	6004      	str	r4, [r0, #0]
 800feba:	60c4      	str	r4, [r0, #12]
 800febc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fec4:	b94c      	cbnz	r4, 800feda <__pow5mult+0x66>
 800fec6:	f240 2171 	movw	r1, #625	; 0x271
 800feca:	4630      	mov	r0, r6
 800fecc:	f7ff ff16 	bl	800fcfc <__i2b>
 800fed0:	2300      	movs	r3, #0
 800fed2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fed6:	4604      	mov	r4, r0
 800fed8:	6003      	str	r3, [r0, #0]
 800feda:	f04f 0900 	mov.w	r9, #0
 800fede:	07eb      	lsls	r3, r5, #31
 800fee0:	d50a      	bpl.n	800fef8 <__pow5mult+0x84>
 800fee2:	4639      	mov	r1, r7
 800fee4:	4622      	mov	r2, r4
 800fee6:	4630      	mov	r0, r6
 800fee8:	f7ff ff1e 	bl	800fd28 <__multiply>
 800feec:	4639      	mov	r1, r7
 800feee:	4680      	mov	r8, r0
 800fef0:	4630      	mov	r0, r6
 800fef2:	f7ff fdfd 	bl	800faf0 <_Bfree>
 800fef6:	4647      	mov	r7, r8
 800fef8:	106d      	asrs	r5, r5, #1
 800fefa:	d00b      	beq.n	800ff14 <__pow5mult+0xa0>
 800fefc:	6820      	ldr	r0, [r4, #0]
 800fefe:	b938      	cbnz	r0, 800ff10 <__pow5mult+0x9c>
 800ff00:	4622      	mov	r2, r4
 800ff02:	4621      	mov	r1, r4
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7ff ff0f 	bl	800fd28 <__multiply>
 800ff0a:	6020      	str	r0, [r4, #0]
 800ff0c:	f8c0 9000 	str.w	r9, [r0]
 800ff10:	4604      	mov	r4, r0
 800ff12:	e7e4      	b.n	800fede <__pow5mult+0x6a>
 800ff14:	4638      	mov	r0, r7
 800ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	bf00      	nop
 800ff1c:	08013df0 	.word	0x08013df0
 800ff20:	08013c88 	.word	0x08013c88
 800ff24:	08013c9f 	.word	0x08013c9f

0800ff28 <__lshift>:
 800ff28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	6849      	ldr	r1, [r1, #4]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff36:	68a3      	ldr	r3, [r4, #8]
 800ff38:	4607      	mov	r7, r0
 800ff3a:	4691      	mov	r9, r2
 800ff3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff40:	f108 0601 	add.w	r6, r8, #1
 800ff44:	42b3      	cmp	r3, r6
 800ff46:	db0b      	blt.n	800ff60 <__lshift+0x38>
 800ff48:	4638      	mov	r0, r7
 800ff4a:	f7ff fd91 	bl	800fa70 <_Balloc>
 800ff4e:	4605      	mov	r5, r0
 800ff50:	b948      	cbnz	r0, 800ff66 <__lshift+0x3e>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4b28      	ldr	r3, [pc, #160]	; (800fff8 <__lshift+0xd0>)
 800ff56:	4829      	ldr	r0, [pc, #164]	; (800fffc <__lshift+0xd4>)
 800ff58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff5c:	f001 f96c 	bl	8011238 <__assert_func>
 800ff60:	3101      	adds	r1, #1
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	e7ee      	b.n	800ff44 <__lshift+0x1c>
 800ff66:	2300      	movs	r3, #0
 800ff68:	f100 0114 	add.w	r1, r0, #20
 800ff6c:	f100 0210 	add.w	r2, r0, #16
 800ff70:	4618      	mov	r0, r3
 800ff72:	4553      	cmp	r3, sl
 800ff74:	db33      	blt.n	800ffde <__lshift+0xb6>
 800ff76:	6920      	ldr	r0, [r4, #16]
 800ff78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff7c:	f104 0314 	add.w	r3, r4, #20
 800ff80:	f019 091f 	ands.w	r9, r9, #31
 800ff84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff8c:	d02b      	beq.n	800ffe6 <__lshift+0xbe>
 800ff8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ff92:	468a      	mov	sl, r1
 800ff94:	2200      	movs	r2, #0
 800ff96:	6818      	ldr	r0, [r3, #0]
 800ff98:	fa00 f009 	lsl.w	r0, r0, r9
 800ff9c:	4302      	orrs	r2, r0
 800ff9e:	f84a 2b04 	str.w	r2, [sl], #4
 800ffa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffa6:	459c      	cmp	ip, r3
 800ffa8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffac:	d8f3      	bhi.n	800ff96 <__lshift+0x6e>
 800ffae:	ebac 0304 	sub.w	r3, ip, r4
 800ffb2:	3b15      	subs	r3, #21
 800ffb4:	f023 0303 	bic.w	r3, r3, #3
 800ffb8:	3304      	adds	r3, #4
 800ffba:	f104 0015 	add.w	r0, r4, #21
 800ffbe:	4584      	cmp	ip, r0
 800ffc0:	bf38      	it	cc
 800ffc2:	2304      	movcc	r3, #4
 800ffc4:	50ca      	str	r2, [r1, r3]
 800ffc6:	b10a      	cbz	r2, 800ffcc <__lshift+0xa4>
 800ffc8:	f108 0602 	add.w	r6, r8, #2
 800ffcc:	3e01      	subs	r6, #1
 800ffce:	4638      	mov	r0, r7
 800ffd0:	612e      	str	r6, [r5, #16]
 800ffd2:	4621      	mov	r1, r4
 800ffd4:	f7ff fd8c 	bl	800faf0 <_Bfree>
 800ffd8:	4628      	mov	r0, r5
 800ffda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	e7c5      	b.n	800ff72 <__lshift+0x4a>
 800ffe6:	3904      	subs	r1, #4
 800ffe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffec:	f841 2f04 	str.w	r2, [r1, #4]!
 800fff0:	459c      	cmp	ip, r3
 800fff2:	d8f9      	bhi.n	800ffe8 <__lshift+0xc0>
 800fff4:	e7ea      	b.n	800ffcc <__lshift+0xa4>
 800fff6:	bf00      	nop
 800fff8:	08013bf8 	.word	0x08013bf8
 800fffc:	08013c9f 	.word	0x08013c9f

08010000 <__mcmp>:
 8010000:	b530      	push	{r4, r5, lr}
 8010002:	6902      	ldr	r2, [r0, #16]
 8010004:	690c      	ldr	r4, [r1, #16]
 8010006:	1b12      	subs	r2, r2, r4
 8010008:	d10e      	bne.n	8010028 <__mcmp+0x28>
 801000a:	f100 0314 	add.w	r3, r0, #20
 801000e:	3114      	adds	r1, #20
 8010010:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010014:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010018:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801001c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010020:	42a5      	cmp	r5, r4
 8010022:	d003      	beq.n	801002c <__mcmp+0x2c>
 8010024:	d305      	bcc.n	8010032 <__mcmp+0x32>
 8010026:	2201      	movs	r2, #1
 8010028:	4610      	mov	r0, r2
 801002a:	bd30      	pop	{r4, r5, pc}
 801002c:	4283      	cmp	r3, r0
 801002e:	d3f3      	bcc.n	8010018 <__mcmp+0x18>
 8010030:	e7fa      	b.n	8010028 <__mcmp+0x28>
 8010032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010036:	e7f7      	b.n	8010028 <__mcmp+0x28>

08010038 <__mdiff>:
 8010038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	460c      	mov	r4, r1
 801003e:	4606      	mov	r6, r0
 8010040:	4611      	mov	r1, r2
 8010042:	4620      	mov	r0, r4
 8010044:	4617      	mov	r7, r2
 8010046:	f7ff ffdb 	bl	8010000 <__mcmp>
 801004a:	1e05      	subs	r5, r0, #0
 801004c:	d110      	bne.n	8010070 <__mdiff+0x38>
 801004e:	4629      	mov	r1, r5
 8010050:	4630      	mov	r0, r6
 8010052:	f7ff fd0d 	bl	800fa70 <_Balloc>
 8010056:	b930      	cbnz	r0, 8010066 <__mdiff+0x2e>
 8010058:	4b39      	ldr	r3, [pc, #228]	; (8010140 <__mdiff+0x108>)
 801005a:	4602      	mov	r2, r0
 801005c:	f240 2132 	movw	r1, #562	; 0x232
 8010060:	4838      	ldr	r0, [pc, #224]	; (8010144 <__mdiff+0x10c>)
 8010062:	f001 f8e9 	bl	8011238 <__assert_func>
 8010066:	2301      	movs	r3, #1
 8010068:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801006c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010070:	bfa4      	itt	ge
 8010072:	463b      	movge	r3, r7
 8010074:	4627      	movge	r7, r4
 8010076:	4630      	mov	r0, r6
 8010078:	6879      	ldr	r1, [r7, #4]
 801007a:	bfa6      	itte	ge
 801007c:	461c      	movge	r4, r3
 801007e:	2500      	movge	r5, #0
 8010080:	2501      	movlt	r5, #1
 8010082:	f7ff fcf5 	bl	800fa70 <_Balloc>
 8010086:	b920      	cbnz	r0, 8010092 <__mdiff+0x5a>
 8010088:	4b2d      	ldr	r3, [pc, #180]	; (8010140 <__mdiff+0x108>)
 801008a:	4602      	mov	r2, r0
 801008c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010090:	e7e6      	b.n	8010060 <__mdiff+0x28>
 8010092:	693e      	ldr	r6, [r7, #16]
 8010094:	60c5      	str	r5, [r0, #12]
 8010096:	6925      	ldr	r5, [r4, #16]
 8010098:	f107 0114 	add.w	r1, r7, #20
 801009c:	f104 0914 	add.w	r9, r4, #20
 80100a0:	f100 0e14 	add.w	lr, r0, #20
 80100a4:	f107 0210 	add.w	r2, r7, #16
 80100a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80100ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80100b0:	46f2      	mov	sl, lr
 80100b2:	2700      	movs	r7, #0
 80100b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80100b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80100bc:	fa1f f883 	uxth.w	r8, r3
 80100c0:	fa17 f78b 	uxtah	r7, r7, fp
 80100c4:	0c1b      	lsrs	r3, r3, #16
 80100c6:	eba7 0808 	sub.w	r8, r7, r8
 80100ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80100ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80100d2:	fa1f f888 	uxth.w	r8, r8
 80100d6:	141f      	asrs	r7, r3, #16
 80100d8:	454d      	cmp	r5, r9
 80100da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80100de:	f84a 3b04 	str.w	r3, [sl], #4
 80100e2:	d8e7      	bhi.n	80100b4 <__mdiff+0x7c>
 80100e4:	1b2b      	subs	r3, r5, r4
 80100e6:	3b15      	subs	r3, #21
 80100e8:	f023 0303 	bic.w	r3, r3, #3
 80100ec:	3304      	adds	r3, #4
 80100ee:	3415      	adds	r4, #21
 80100f0:	42a5      	cmp	r5, r4
 80100f2:	bf38      	it	cc
 80100f4:	2304      	movcc	r3, #4
 80100f6:	4419      	add	r1, r3
 80100f8:	4473      	add	r3, lr
 80100fa:	469e      	mov	lr, r3
 80100fc:	460d      	mov	r5, r1
 80100fe:	4565      	cmp	r5, ip
 8010100:	d30e      	bcc.n	8010120 <__mdiff+0xe8>
 8010102:	f10c 0203 	add.w	r2, ip, #3
 8010106:	1a52      	subs	r2, r2, r1
 8010108:	f022 0203 	bic.w	r2, r2, #3
 801010c:	3903      	subs	r1, #3
 801010e:	458c      	cmp	ip, r1
 8010110:	bf38      	it	cc
 8010112:	2200      	movcc	r2, #0
 8010114:	441a      	add	r2, r3
 8010116:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801011a:	b17b      	cbz	r3, 801013c <__mdiff+0x104>
 801011c:	6106      	str	r6, [r0, #16]
 801011e:	e7a5      	b.n	801006c <__mdiff+0x34>
 8010120:	f855 8b04 	ldr.w	r8, [r5], #4
 8010124:	fa17 f488 	uxtah	r4, r7, r8
 8010128:	1422      	asrs	r2, r4, #16
 801012a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801012e:	b2a4      	uxth	r4, r4
 8010130:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010134:	f84e 4b04 	str.w	r4, [lr], #4
 8010138:	1417      	asrs	r7, r2, #16
 801013a:	e7e0      	b.n	80100fe <__mdiff+0xc6>
 801013c:	3e01      	subs	r6, #1
 801013e:	e7ea      	b.n	8010116 <__mdiff+0xde>
 8010140:	08013bf8 	.word	0x08013bf8
 8010144:	08013c9f 	.word	0x08013c9f

08010148 <__ulp>:
 8010148:	b082      	sub	sp, #8
 801014a:	ed8d 0b00 	vstr	d0, [sp]
 801014e:	9b01      	ldr	r3, [sp, #4]
 8010150:	4912      	ldr	r1, [pc, #72]	; (801019c <__ulp+0x54>)
 8010152:	4019      	ands	r1, r3
 8010154:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010158:	2900      	cmp	r1, #0
 801015a:	dd05      	ble.n	8010168 <__ulp+0x20>
 801015c:	2200      	movs	r2, #0
 801015e:	460b      	mov	r3, r1
 8010160:	ec43 2b10 	vmov	d0, r2, r3
 8010164:	b002      	add	sp, #8
 8010166:	4770      	bx	lr
 8010168:	4249      	negs	r1, r1
 801016a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801016e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010172:	f04f 0200 	mov.w	r2, #0
 8010176:	f04f 0300 	mov.w	r3, #0
 801017a:	da04      	bge.n	8010186 <__ulp+0x3e>
 801017c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010180:	fa41 f300 	asr.w	r3, r1, r0
 8010184:	e7ec      	b.n	8010160 <__ulp+0x18>
 8010186:	f1a0 0114 	sub.w	r1, r0, #20
 801018a:	291e      	cmp	r1, #30
 801018c:	bfda      	itte	le
 801018e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010192:	fa20 f101 	lsrle.w	r1, r0, r1
 8010196:	2101      	movgt	r1, #1
 8010198:	460a      	mov	r2, r1
 801019a:	e7e1      	b.n	8010160 <__ulp+0x18>
 801019c:	7ff00000 	.word	0x7ff00000

080101a0 <__b2d>:
 80101a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a2:	6905      	ldr	r5, [r0, #16]
 80101a4:	f100 0714 	add.w	r7, r0, #20
 80101a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80101ac:	1f2e      	subs	r6, r5, #4
 80101ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80101b2:	4620      	mov	r0, r4
 80101b4:	f7ff fd52 	bl	800fc5c <__hi0bits>
 80101b8:	f1c0 0320 	rsb	r3, r0, #32
 80101bc:	280a      	cmp	r0, #10
 80101be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801023c <__b2d+0x9c>
 80101c2:	600b      	str	r3, [r1, #0]
 80101c4:	dc14      	bgt.n	80101f0 <__b2d+0x50>
 80101c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80101ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80101ce:	42b7      	cmp	r7, r6
 80101d0:	ea41 030c 	orr.w	r3, r1, ip
 80101d4:	bf34      	ite	cc
 80101d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80101da:	2100      	movcs	r1, #0
 80101dc:	3015      	adds	r0, #21
 80101de:	fa04 f000 	lsl.w	r0, r4, r0
 80101e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80101e6:	ea40 0201 	orr.w	r2, r0, r1
 80101ea:	ec43 2b10 	vmov	d0, r2, r3
 80101ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101f0:	42b7      	cmp	r7, r6
 80101f2:	bf3a      	itte	cc
 80101f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80101f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80101fc:	2100      	movcs	r1, #0
 80101fe:	380b      	subs	r0, #11
 8010200:	d017      	beq.n	8010232 <__b2d+0x92>
 8010202:	f1c0 0c20 	rsb	ip, r0, #32
 8010206:	fa04 f500 	lsl.w	r5, r4, r0
 801020a:	42be      	cmp	r6, r7
 801020c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010210:	ea45 0504 	orr.w	r5, r5, r4
 8010214:	bf8c      	ite	hi
 8010216:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801021a:	2400      	movls	r4, #0
 801021c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010220:	fa01 f000 	lsl.w	r0, r1, r0
 8010224:	fa24 f40c 	lsr.w	r4, r4, ip
 8010228:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801022c:	ea40 0204 	orr.w	r2, r0, r4
 8010230:	e7db      	b.n	80101ea <__b2d+0x4a>
 8010232:	ea44 030c 	orr.w	r3, r4, ip
 8010236:	460a      	mov	r2, r1
 8010238:	e7d7      	b.n	80101ea <__b2d+0x4a>
 801023a:	bf00      	nop
 801023c:	3ff00000 	.word	0x3ff00000

08010240 <__d2b>:
 8010240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010244:	4689      	mov	r9, r1
 8010246:	2101      	movs	r1, #1
 8010248:	ec57 6b10 	vmov	r6, r7, d0
 801024c:	4690      	mov	r8, r2
 801024e:	f7ff fc0f 	bl	800fa70 <_Balloc>
 8010252:	4604      	mov	r4, r0
 8010254:	b930      	cbnz	r0, 8010264 <__d2b+0x24>
 8010256:	4602      	mov	r2, r0
 8010258:	4b25      	ldr	r3, [pc, #148]	; (80102f0 <__d2b+0xb0>)
 801025a:	4826      	ldr	r0, [pc, #152]	; (80102f4 <__d2b+0xb4>)
 801025c:	f240 310a 	movw	r1, #778	; 0x30a
 8010260:	f000 ffea 	bl	8011238 <__assert_func>
 8010264:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801026c:	bb35      	cbnz	r5, 80102bc <__d2b+0x7c>
 801026e:	2e00      	cmp	r6, #0
 8010270:	9301      	str	r3, [sp, #4]
 8010272:	d028      	beq.n	80102c6 <__d2b+0x86>
 8010274:	4668      	mov	r0, sp
 8010276:	9600      	str	r6, [sp, #0]
 8010278:	f7ff fd10 	bl	800fc9c <__lo0bits>
 801027c:	9900      	ldr	r1, [sp, #0]
 801027e:	b300      	cbz	r0, 80102c2 <__d2b+0x82>
 8010280:	9a01      	ldr	r2, [sp, #4]
 8010282:	f1c0 0320 	rsb	r3, r0, #32
 8010286:	fa02 f303 	lsl.w	r3, r2, r3
 801028a:	430b      	orrs	r3, r1
 801028c:	40c2      	lsrs	r2, r0
 801028e:	6163      	str	r3, [r4, #20]
 8010290:	9201      	str	r2, [sp, #4]
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	61a3      	str	r3, [r4, #24]
 8010296:	2b00      	cmp	r3, #0
 8010298:	bf14      	ite	ne
 801029a:	2202      	movne	r2, #2
 801029c:	2201      	moveq	r2, #1
 801029e:	6122      	str	r2, [r4, #16]
 80102a0:	b1d5      	cbz	r5, 80102d8 <__d2b+0x98>
 80102a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102a6:	4405      	add	r5, r0
 80102a8:	f8c9 5000 	str.w	r5, [r9]
 80102ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102b0:	f8c8 0000 	str.w	r0, [r8]
 80102b4:	4620      	mov	r0, r4
 80102b6:	b003      	add	sp, #12
 80102b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102c0:	e7d5      	b.n	801026e <__d2b+0x2e>
 80102c2:	6161      	str	r1, [r4, #20]
 80102c4:	e7e5      	b.n	8010292 <__d2b+0x52>
 80102c6:	a801      	add	r0, sp, #4
 80102c8:	f7ff fce8 	bl	800fc9c <__lo0bits>
 80102cc:	9b01      	ldr	r3, [sp, #4]
 80102ce:	6163      	str	r3, [r4, #20]
 80102d0:	2201      	movs	r2, #1
 80102d2:	6122      	str	r2, [r4, #16]
 80102d4:	3020      	adds	r0, #32
 80102d6:	e7e3      	b.n	80102a0 <__d2b+0x60>
 80102d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102e0:	f8c9 0000 	str.w	r0, [r9]
 80102e4:	6918      	ldr	r0, [r3, #16]
 80102e6:	f7ff fcb9 	bl	800fc5c <__hi0bits>
 80102ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102ee:	e7df      	b.n	80102b0 <__d2b+0x70>
 80102f0:	08013bf8 	.word	0x08013bf8
 80102f4:	08013c9f 	.word	0x08013c9f

080102f8 <__ratio>:
 80102f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	4688      	mov	r8, r1
 80102fe:	4669      	mov	r1, sp
 8010300:	4681      	mov	r9, r0
 8010302:	f7ff ff4d 	bl	80101a0 <__b2d>
 8010306:	a901      	add	r1, sp, #4
 8010308:	4640      	mov	r0, r8
 801030a:	ec55 4b10 	vmov	r4, r5, d0
 801030e:	f7ff ff47 	bl	80101a0 <__b2d>
 8010312:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010316:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801031a:	eba3 0c02 	sub.w	ip, r3, r2
 801031e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010322:	1a9b      	subs	r3, r3, r2
 8010324:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010328:	ec51 0b10 	vmov	r0, r1, d0
 801032c:	2b00      	cmp	r3, #0
 801032e:	bfd6      	itet	le
 8010330:	460a      	movle	r2, r1
 8010332:	462a      	movgt	r2, r5
 8010334:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010338:	468b      	mov	fp, r1
 801033a:	462f      	mov	r7, r5
 801033c:	bfd4      	ite	le
 801033e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010342:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010346:	4620      	mov	r0, r4
 8010348:	ee10 2a10 	vmov	r2, s0
 801034c:	465b      	mov	r3, fp
 801034e:	4639      	mov	r1, r7
 8010350:	f7f0 fa94 	bl	800087c <__aeabi_ddiv>
 8010354:	ec41 0b10 	vmov	d0, r0, r1
 8010358:	b003      	add	sp, #12
 801035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801035e <__copybits>:
 801035e:	3901      	subs	r1, #1
 8010360:	b570      	push	{r4, r5, r6, lr}
 8010362:	1149      	asrs	r1, r1, #5
 8010364:	6914      	ldr	r4, [r2, #16]
 8010366:	3101      	adds	r1, #1
 8010368:	f102 0314 	add.w	r3, r2, #20
 801036c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010370:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010374:	1f05      	subs	r5, r0, #4
 8010376:	42a3      	cmp	r3, r4
 8010378:	d30c      	bcc.n	8010394 <__copybits+0x36>
 801037a:	1aa3      	subs	r3, r4, r2
 801037c:	3b11      	subs	r3, #17
 801037e:	f023 0303 	bic.w	r3, r3, #3
 8010382:	3211      	adds	r2, #17
 8010384:	42a2      	cmp	r2, r4
 8010386:	bf88      	it	hi
 8010388:	2300      	movhi	r3, #0
 801038a:	4418      	add	r0, r3
 801038c:	2300      	movs	r3, #0
 801038e:	4288      	cmp	r0, r1
 8010390:	d305      	bcc.n	801039e <__copybits+0x40>
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	f853 6b04 	ldr.w	r6, [r3], #4
 8010398:	f845 6f04 	str.w	r6, [r5, #4]!
 801039c:	e7eb      	b.n	8010376 <__copybits+0x18>
 801039e:	f840 3b04 	str.w	r3, [r0], #4
 80103a2:	e7f4      	b.n	801038e <__copybits+0x30>

080103a4 <__any_on>:
 80103a4:	f100 0214 	add.w	r2, r0, #20
 80103a8:	6900      	ldr	r0, [r0, #16]
 80103aa:	114b      	asrs	r3, r1, #5
 80103ac:	4298      	cmp	r0, r3
 80103ae:	b510      	push	{r4, lr}
 80103b0:	db11      	blt.n	80103d6 <__any_on+0x32>
 80103b2:	dd0a      	ble.n	80103ca <__any_on+0x26>
 80103b4:	f011 011f 	ands.w	r1, r1, #31
 80103b8:	d007      	beq.n	80103ca <__any_on+0x26>
 80103ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103be:	fa24 f001 	lsr.w	r0, r4, r1
 80103c2:	fa00 f101 	lsl.w	r1, r0, r1
 80103c6:	428c      	cmp	r4, r1
 80103c8:	d10b      	bne.n	80103e2 <__any_on+0x3e>
 80103ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d803      	bhi.n	80103da <__any_on+0x36>
 80103d2:	2000      	movs	r0, #0
 80103d4:	bd10      	pop	{r4, pc}
 80103d6:	4603      	mov	r3, r0
 80103d8:	e7f7      	b.n	80103ca <__any_on+0x26>
 80103da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103de:	2900      	cmp	r1, #0
 80103e0:	d0f5      	beq.n	80103ce <__any_on+0x2a>
 80103e2:	2001      	movs	r0, #1
 80103e4:	e7f6      	b.n	80103d4 <__any_on+0x30>

080103e6 <__ssputs_r>:
 80103e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103ea:	688e      	ldr	r6, [r1, #8]
 80103ec:	429e      	cmp	r6, r3
 80103ee:	4682      	mov	sl, r0
 80103f0:	460c      	mov	r4, r1
 80103f2:	4690      	mov	r8, r2
 80103f4:	461f      	mov	r7, r3
 80103f6:	d838      	bhi.n	801046a <__ssputs_r+0x84>
 80103f8:	898a      	ldrh	r2, [r1, #12]
 80103fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103fe:	d032      	beq.n	8010466 <__ssputs_r+0x80>
 8010400:	6825      	ldr	r5, [r4, #0]
 8010402:	6909      	ldr	r1, [r1, #16]
 8010404:	eba5 0901 	sub.w	r9, r5, r1
 8010408:	6965      	ldr	r5, [r4, #20]
 801040a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801040e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010412:	3301      	adds	r3, #1
 8010414:	444b      	add	r3, r9
 8010416:	106d      	asrs	r5, r5, #1
 8010418:	429d      	cmp	r5, r3
 801041a:	bf38      	it	cc
 801041c:	461d      	movcc	r5, r3
 801041e:	0553      	lsls	r3, r2, #21
 8010420:	d531      	bpl.n	8010486 <__ssputs_r+0xa0>
 8010422:	4629      	mov	r1, r5
 8010424:	f7fd fcf4 	bl	800de10 <_malloc_r>
 8010428:	4606      	mov	r6, r0
 801042a:	b950      	cbnz	r0, 8010442 <__ssputs_r+0x5c>
 801042c:	230c      	movs	r3, #12
 801042e:	f8ca 3000 	str.w	r3, [sl]
 8010432:	89a3      	ldrh	r3, [r4, #12]
 8010434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010438:	81a3      	strh	r3, [r4, #12]
 801043a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010442:	6921      	ldr	r1, [r4, #16]
 8010444:	464a      	mov	r2, r9
 8010446:	f7fd fc6d 	bl	800dd24 <memcpy>
 801044a:	89a3      	ldrh	r3, [r4, #12]
 801044c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010454:	81a3      	strh	r3, [r4, #12]
 8010456:	6126      	str	r6, [r4, #16]
 8010458:	6165      	str	r5, [r4, #20]
 801045a:	444e      	add	r6, r9
 801045c:	eba5 0509 	sub.w	r5, r5, r9
 8010460:	6026      	str	r6, [r4, #0]
 8010462:	60a5      	str	r5, [r4, #8]
 8010464:	463e      	mov	r6, r7
 8010466:	42be      	cmp	r6, r7
 8010468:	d900      	bls.n	801046c <__ssputs_r+0x86>
 801046a:	463e      	mov	r6, r7
 801046c:	4632      	mov	r2, r6
 801046e:	6820      	ldr	r0, [r4, #0]
 8010470:	4641      	mov	r1, r8
 8010472:	f001 f8c8 	bl	8011606 <memmove>
 8010476:	68a3      	ldr	r3, [r4, #8]
 8010478:	6822      	ldr	r2, [r4, #0]
 801047a:	1b9b      	subs	r3, r3, r6
 801047c:	4432      	add	r2, r6
 801047e:	60a3      	str	r3, [r4, #8]
 8010480:	6022      	str	r2, [r4, #0]
 8010482:	2000      	movs	r0, #0
 8010484:	e7db      	b.n	801043e <__ssputs_r+0x58>
 8010486:	462a      	mov	r2, r5
 8010488:	f001 f8d7 	bl	801163a <_realloc_r>
 801048c:	4606      	mov	r6, r0
 801048e:	2800      	cmp	r0, #0
 8010490:	d1e1      	bne.n	8010456 <__ssputs_r+0x70>
 8010492:	6921      	ldr	r1, [r4, #16]
 8010494:	4650      	mov	r0, sl
 8010496:	f7fd fc6b 	bl	800dd70 <_free_r>
 801049a:	e7c7      	b.n	801042c <__ssputs_r+0x46>

0801049c <_svfiprintf_r>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	4698      	mov	r8, r3
 80104a2:	898b      	ldrh	r3, [r1, #12]
 80104a4:	061b      	lsls	r3, r3, #24
 80104a6:	b09d      	sub	sp, #116	; 0x74
 80104a8:	4607      	mov	r7, r0
 80104aa:	460d      	mov	r5, r1
 80104ac:	4614      	mov	r4, r2
 80104ae:	d50e      	bpl.n	80104ce <_svfiprintf_r+0x32>
 80104b0:	690b      	ldr	r3, [r1, #16]
 80104b2:	b963      	cbnz	r3, 80104ce <_svfiprintf_r+0x32>
 80104b4:	2140      	movs	r1, #64	; 0x40
 80104b6:	f7fd fcab 	bl	800de10 <_malloc_r>
 80104ba:	6028      	str	r0, [r5, #0]
 80104bc:	6128      	str	r0, [r5, #16]
 80104be:	b920      	cbnz	r0, 80104ca <_svfiprintf_r+0x2e>
 80104c0:	230c      	movs	r3, #12
 80104c2:	603b      	str	r3, [r7, #0]
 80104c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104c8:	e0d1      	b.n	801066e <_svfiprintf_r+0x1d2>
 80104ca:	2340      	movs	r3, #64	; 0x40
 80104cc:	616b      	str	r3, [r5, #20]
 80104ce:	2300      	movs	r3, #0
 80104d0:	9309      	str	r3, [sp, #36]	; 0x24
 80104d2:	2320      	movs	r3, #32
 80104d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80104dc:	2330      	movs	r3, #48	; 0x30
 80104de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010688 <_svfiprintf_r+0x1ec>
 80104e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104e6:	f04f 0901 	mov.w	r9, #1
 80104ea:	4623      	mov	r3, r4
 80104ec:	469a      	mov	sl, r3
 80104ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f2:	b10a      	cbz	r2, 80104f8 <_svfiprintf_r+0x5c>
 80104f4:	2a25      	cmp	r2, #37	; 0x25
 80104f6:	d1f9      	bne.n	80104ec <_svfiprintf_r+0x50>
 80104f8:	ebba 0b04 	subs.w	fp, sl, r4
 80104fc:	d00b      	beq.n	8010516 <_svfiprintf_r+0x7a>
 80104fe:	465b      	mov	r3, fp
 8010500:	4622      	mov	r2, r4
 8010502:	4629      	mov	r1, r5
 8010504:	4638      	mov	r0, r7
 8010506:	f7ff ff6e 	bl	80103e6 <__ssputs_r>
 801050a:	3001      	adds	r0, #1
 801050c:	f000 80aa 	beq.w	8010664 <_svfiprintf_r+0x1c8>
 8010510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010512:	445a      	add	r2, fp
 8010514:	9209      	str	r2, [sp, #36]	; 0x24
 8010516:	f89a 3000 	ldrb.w	r3, [sl]
 801051a:	2b00      	cmp	r3, #0
 801051c:	f000 80a2 	beq.w	8010664 <_svfiprintf_r+0x1c8>
 8010520:	2300      	movs	r3, #0
 8010522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801052a:	f10a 0a01 	add.w	sl, sl, #1
 801052e:	9304      	str	r3, [sp, #16]
 8010530:	9307      	str	r3, [sp, #28]
 8010532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010536:	931a      	str	r3, [sp, #104]	; 0x68
 8010538:	4654      	mov	r4, sl
 801053a:	2205      	movs	r2, #5
 801053c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010540:	4851      	ldr	r0, [pc, #324]	; (8010688 <_svfiprintf_r+0x1ec>)
 8010542:	f7ef fe65 	bl	8000210 <memchr>
 8010546:	9a04      	ldr	r2, [sp, #16]
 8010548:	b9d8      	cbnz	r0, 8010582 <_svfiprintf_r+0xe6>
 801054a:	06d0      	lsls	r0, r2, #27
 801054c:	bf44      	itt	mi
 801054e:	2320      	movmi	r3, #32
 8010550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010554:	0711      	lsls	r1, r2, #28
 8010556:	bf44      	itt	mi
 8010558:	232b      	movmi	r3, #43	; 0x2b
 801055a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801055e:	f89a 3000 	ldrb.w	r3, [sl]
 8010562:	2b2a      	cmp	r3, #42	; 0x2a
 8010564:	d015      	beq.n	8010592 <_svfiprintf_r+0xf6>
 8010566:	9a07      	ldr	r2, [sp, #28]
 8010568:	4654      	mov	r4, sl
 801056a:	2000      	movs	r0, #0
 801056c:	f04f 0c0a 	mov.w	ip, #10
 8010570:	4621      	mov	r1, r4
 8010572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010576:	3b30      	subs	r3, #48	; 0x30
 8010578:	2b09      	cmp	r3, #9
 801057a:	d94e      	bls.n	801061a <_svfiprintf_r+0x17e>
 801057c:	b1b0      	cbz	r0, 80105ac <_svfiprintf_r+0x110>
 801057e:	9207      	str	r2, [sp, #28]
 8010580:	e014      	b.n	80105ac <_svfiprintf_r+0x110>
 8010582:	eba0 0308 	sub.w	r3, r0, r8
 8010586:	fa09 f303 	lsl.w	r3, r9, r3
 801058a:	4313      	orrs	r3, r2
 801058c:	9304      	str	r3, [sp, #16]
 801058e:	46a2      	mov	sl, r4
 8010590:	e7d2      	b.n	8010538 <_svfiprintf_r+0x9c>
 8010592:	9b03      	ldr	r3, [sp, #12]
 8010594:	1d19      	adds	r1, r3, #4
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	9103      	str	r1, [sp, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	bfbb      	ittet	lt
 801059e:	425b      	neglt	r3, r3
 80105a0:	f042 0202 	orrlt.w	r2, r2, #2
 80105a4:	9307      	strge	r3, [sp, #28]
 80105a6:	9307      	strlt	r3, [sp, #28]
 80105a8:	bfb8      	it	lt
 80105aa:	9204      	strlt	r2, [sp, #16]
 80105ac:	7823      	ldrb	r3, [r4, #0]
 80105ae:	2b2e      	cmp	r3, #46	; 0x2e
 80105b0:	d10c      	bne.n	80105cc <_svfiprintf_r+0x130>
 80105b2:	7863      	ldrb	r3, [r4, #1]
 80105b4:	2b2a      	cmp	r3, #42	; 0x2a
 80105b6:	d135      	bne.n	8010624 <_svfiprintf_r+0x188>
 80105b8:	9b03      	ldr	r3, [sp, #12]
 80105ba:	1d1a      	adds	r2, r3, #4
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	9203      	str	r2, [sp, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	bfb8      	it	lt
 80105c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80105c8:	3402      	adds	r4, #2
 80105ca:	9305      	str	r3, [sp, #20]
 80105cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010698 <_svfiprintf_r+0x1fc>
 80105d0:	7821      	ldrb	r1, [r4, #0]
 80105d2:	2203      	movs	r2, #3
 80105d4:	4650      	mov	r0, sl
 80105d6:	f7ef fe1b 	bl	8000210 <memchr>
 80105da:	b140      	cbz	r0, 80105ee <_svfiprintf_r+0x152>
 80105dc:	2340      	movs	r3, #64	; 0x40
 80105de:	eba0 000a 	sub.w	r0, r0, sl
 80105e2:	fa03 f000 	lsl.w	r0, r3, r0
 80105e6:	9b04      	ldr	r3, [sp, #16]
 80105e8:	4303      	orrs	r3, r0
 80105ea:	3401      	adds	r4, #1
 80105ec:	9304      	str	r3, [sp, #16]
 80105ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f2:	4826      	ldr	r0, [pc, #152]	; (801068c <_svfiprintf_r+0x1f0>)
 80105f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105f8:	2206      	movs	r2, #6
 80105fa:	f7ef fe09 	bl	8000210 <memchr>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d038      	beq.n	8010674 <_svfiprintf_r+0x1d8>
 8010602:	4b23      	ldr	r3, [pc, #140]	; (8010690 <_svfiprintf_r+0x1f4>)
 8010604:	bb1b      	cbnz	r3, 801064e <_svfiprintf_r+0x1b2>
 8010606:	9b03      	ldr	r3, [sp, #12]
 8010608:	3307      	adds	r3, #7
 801060a:	f023 0307 	bic.w	r3, r3, #7
 801060e:	3308      	adds	r3, #8
 8010610:	9303      	str	r3, [sp, #12]
 8010612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010614:	4433      	add	r3, r6
 8010616:	9309      	str	r3, [sp, #36]	; 0x24
 8010618:	e767      	b.n	80104ea <_svfiprintf_r+0x4e>
 801061a:	fb0c 3202 	mla	r2, ip, r2, r3
 801061e:	460c      	mov	r4, r1
 8010620:	2001      	movs	r0, #1
 8010622:	e7a5      	b.n	8010570 <_svfiprintf_r+0xd4>
 8010624:	2300      	movs	r3, #0
 8010626:	3401      	adds	r4, #1
 8010628:	9305      	str	r3, [sp, #20]
 801062a:	4619      	mov	r1, r3
 801062c:	f04f 0c0a 	mov.w	ip, #10
 8010630:	4620      	mov	r0, r4
 8010632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010636:	3a30      	subs	r2, #48	; 0x30
 8010638:	2a09      	cmp	r2, #9
 801063a:	d903      	bls.n	8010644 <_svfiprintf_r+0x1a8>
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0c5      	beq.n	80105cc <_svfiprintf_r+0x130>
 8010640:	9105      	str	r1, [sp, #20]
 8010642:	e7c3      	b.n	80105cc <_svfiprintf_r+0x130>
 8010644:	fb0c 2101 	mla	r1, ip, r1, r2
 8010648:	4604      	mov	r4, r0
 801064a:	2301      	movs	r3, #1
 801064c:	e7f0      	b.n	8010630 <_svfiprintf_r+0x194>
 801064e:	ab03      	add	r3, sp, #12
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	462a      	mov	r2, r5
 8010654:	4b0f      	ldr	r3, [pc, #60]	; (8010694 <_svfiprintf_r+0x1f8>)
 8010656:	a904      	add	r1, sp, #16
 8010658:	4638      	mov	r0, r7
 801065a:	f3af 8000 	nop.w
 801065e:	1c42      	adds	r2, r0, #1
 8010660:	4606      	mov	r6, r0
 8010662:	d1d6      	bne.n	8010612 <_svfiprintf_r+0x176>
 8010664:	89ab      	ldrh	r3, [r5, #12]
 8010666:	065b      	lsls	r3, r3, #25
 8010668:	f53f af2c 	bmi.w	80104c4 <_svfiprintf_r+0x28>
 801066c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801066e:	b01d      	add	sp, #116	; 0x74
 8010670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010674:	ab03      	add	r3, sp, #12
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	462a      	mov	r2, r5
 801067a:	4b06      	ldr	r3, [pc, #24]	; (8010694 <_svfiprintf_r+0x1f8>)
 801067c:	a904      	add	r1, sp, #16
 801067e:	4638      	mov	r0, r7
 8010680:	f000 fa4c 	bl	8010b1c <_printf_i>
 8010684:	e7eb      	b.n	801065e <_svfiprintf_r+0x1c2>
 8010686:	bf00      	nop
 8010688:	08013dfc 	.word	0x08013dfc
 801068c:	08013e06 	.word	0x08013e06
 8010690:	00000000 	.word	0x00000000
 8010694:	080103e7 	.word	0x080103e7
 8010698:	08013e02 	.word	0x08013e02

0801069c <_sungetc_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	1c4b      	adds	r3, r1, #1
 80106a0:	4614      	mov	r4, r2
 80106a2:	d103      	bne.n	80106ac <_sungetc_r+0x10>
 80106a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80106a8:	4628      	mov	r0, r5
 80106aa:	bd38      	pop	{r3, r4, r5, pc}
 80106ac:	8993      	ldrh	r3, [r2, #12]
 80106ae:	f023 0320 	bic.w	r3, r3, #32
 80106b2:	8193      	strh	r3, [r2, #12]
 80106b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106b6:	6852      	ldr	r2, [r2, #4]
 80106b8:	b2cd      	uxtb	r5, r1
 80106ba:	b18b      	cbz	r3, 80106e0 <_sungetc_r+0x44>
 80106bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106be:	4293      	cmp	r3, r2
 80106c0:	dd08      	ble.n	80106d4 <_sungetc_r+0x38>
 80106c2:	6823      	ldr	r3, [r4, #0]
 80106c4:	1e5a      	subs	r2, r3, #1
 80106c6:	6022      	str	r2, [r4, #0]
 80106c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80106cc:	6863      	ldr	r3, [r4, #4]
 80106ce:	3301      	adds	r3, #1
 80106d0:	6063      	str	r3, [r4, #4]
 80106d2:	e7e9      	b.n	80106a8 <_sungetc_r+0xc>
 80106d4:	4621      	mov	r1, r4
 80106d6:	f000 fd67 	bl	80111a8 <__submore>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d0f1      	beq.n	80106c2 <_sungetc_r+0x26>
 80106de:	e7e1      	b.n	80106a4 <_sungetc_r+0x8>
 80106e0:	6921      	ldr	r1, [r4, #16]
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	b151      	cbz	r1, 80106fc <_sungetc_r+0x60>
 80106e6:	4299      	cmp	r1, r3
 80106e8:	d208      	bcs.n	80106fc <_sungetc_r+0x60>
 80106ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80106ee:	42a9      	cmp	r1, r5
 80106f0:	d104      	bne.n	80106fc <_sungetc_r+0x60>
 80106f2:	3b01      	subs	r3, #1
 80106f4:	3201      	adds	r2, #1
 80106f6:	6023      	str	r3, [r4, #0]
 80106f8:	6062      	str	r2, [r4, #4]
 80106fa:	e7d5      	b.n	80106a8 <_sungetc_r+0xc>
 80106fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010704:	6363      	str	r3, [r4, #52]	; 0x34
 8010706:	2303      	movs	r3, #3
 8010708:	63a3      	str	r3, [r4, #56]	; 0x38
 801070a:	4623      	mov	r3, r4
 801070c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010710:	6023      	str	r3, [r4, #0]
 8010712:	2301      	movs	r3, #1
 8010714:	e7dc      	b.n	80106d0 <_sungetc_r+0x34>

08010716 <__ssrefill_r>:
 8010716:	b510      	push	{r4, lr}
 8010718:	460c      	mov	r4, r1
 801071a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801071c:	b169      	cbz	r1, 801073a <__ssrefill_r+0x24>
 801071e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010722:	4299      	cmp	r1, r3
 8010724:	d001      	beq.n	801072a <__ssrefill_r+0x14>
 8010726:	f7fd fb23 	bl	800dd70 <_free_r>
 801072a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801072c:	6063      	str	r3, [r4, #4]
 801072e:	2000      	movs	r0, #0
 8010730:	6360      	str	r0, [r4, #52]	; 0x34
 8010732:	b113      	cbz	r3, 801073a <__ssrefill_r+0x24>
 8010734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010736:	6023      	str	r3, [r4, #0]
 8010738:	bd10      	pop	{r4, pc}
 801073a:	6923      	ldr	r3, [r4, #16]
 801073c:	6023      	str	r3, [r4, #0]
 801073e:	2300      	movs	r3, #0
 8010740:	6063      	str	r3, [r4, #4]
 8010742:	89a3      	ldrh	r3, [r4, #12]
 8010744:	f043 0320 	orr.w	r3, r3, #32
 8010748:	81a3      	strh	r3, [r4, #12]
 801074a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801074e:	e7f3      	b.n	8010738 <__ssrefill_r+0x22>

08010750 <__ssvfiscanf_r>:
 8010750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010754:	460c      	mov	r4, r1
 8010756:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801075a:	2100      	movs	r1, #0
 801075c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010760:	49b2      	ldr	r1, [pc, #712]	; (8010a2c <__ssvfiscanf_r+0x2dc>)
 8010762:	91a0      	str	r1, [sp, #640]	; 0x280
 8010764:	f10d 0804 	add.w	r8, sp, #4
 8010768:	49b1      	ldr	r1, [pc, #708]	; (8010a30 <__ssvfiscanf_r+0x2e0>)
 801076a:	4fb2      	ldr	r7, [pc, #712]	; (8010a34 <__ssvfiscanf_r+0x2e4>)
 801076c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8010a38 <__ssvfiscanf_r+0x2e8>
 8010770:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010774:	4606      	mov	r6, r0
 8010776:	91a1      	str	r1, [sp, #644]	; 0x284
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	f892 a000 	ldrb.w	sl, [r2]
 801077e:	f1ba 0f00 	cmp.w	sl, #0
 8010782:	f000 8151 	beq.w	8010a28 <__ssvfiscanf_r+0x2d8>
 8010786:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801078a:	f013 0308 	ands.w	r3, r3, #8
 801078e:	f102 0501 	add.w	r5, r2, #1
 8010792:	d019      	beq.n	80107c8 <__ssvfiscanf_r+0x78>
 8010794:	6863      	ldr	r3, [r4, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	dd0f      	ble.n	80107ba <__ssvfiscanf_r+0x6a>
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	781a      	ldrb	r2, [r3, #0]
 801079e:	5cba      	ldrb	r2, [r7, r2]
 80107a0:	0712      	lsls	r2, r2, #28
 80107a2:	d401      	bmi.n	80107a8 <__ssvfiscanf_r+0x58>
 80107a4:	462a      	mov	r2, r5
 80107a6:	e7e8      	b.n	801077a <__ssvfiscanf_r+0x2a>
 80107a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80107aa:	3201      	adds	r2, #1
 80107ac:	9245      	str	r2, [sp, #276]	; 0x114
 80107ae:	6862      	ldr	r2, [r4, #4]
 80107b0:	3301      	adds	r3, #1
 80107b2:	3a01      	subs	r2, #1
 80107b4:	6062      	str	r2, [r4, #4]
 80107b6:	6023      	str	r3, [r4, #0]
 80107b8:	e7ec      	b.n	8010794 <__ssvfiscanf_r+0x44>
 80107ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107bc:	4621      	mov	r1, r4
 80107be:	4630      	mov	r0, r6
 80107c0:	4798      	blx	r3
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d0e9      	beq.n	801079a <__ssvfiscanf_r+0x4a>
 80107c6:	e7ed      	b.n	80107a4 <__ssvfiscanf_r+0x54>
 80107c8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80107cc:	f040 8083 	bne.w	80108d6 <__ssvfiscanf_r+0x186>
 80107d0:	9341      	str	r3, [sp, #260]	; 0x104
 80107d2:	9343      	str	r3, [sp, #268]	; 0x10c
 80107d4:	7853      	ldrb	r3, [r2, #1]
 80107d6:	2b2a      	cmp	r3, #42	; 0x2a
 80107d8:	bf02      	ittt	eq
 80107da:	2310      	moveq	r3, #16
 80107dc:	1c95      	addeq	r5, r2, #2
 80107de:	9341      	streq	r3, [sp, #260]	; 0x104
 80107e0:	220a      	movs	r2, #10
 80107e2:	46ab      	mov	fp, r5
 80107e4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80107e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80107ec:	2b09      	cmp	r3, #9
 80107ee:	d91d      	bls.n	801082c <__ssvfiscanf_r+0xdc>
 80107f0:	4891      	ldr	r0, [pc, #580]	; (8010a38 <__ssvfiscanf_r+0x2e8>)
 80107f2:	2203      	movs	r2, #3
 80107f4:	f7ef fd0c 	bl	8000210 <memchr>
 80107f8:	b140      	cbz	r0, 801080c <__ssvfiscanf_r+0xbc>
 80107fa:	2301      	movs	r3, #1
 80107fc:	eba0 0009 	sub.w	r0, r0, r9
 8010800:	fa03 f000 	lsl.w	r0, r3, r0
 8010804:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010806:	4318      	orrs	r0, r3
 8010808:	9041      	str	r0, [sp, #260]	; 0x104
 801080a:	465d      	mov	r5, fp
 801080c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010810:	2b78      	cmp	r3, #120	; 0x78
 8010812:	d806      	bhi.n	8010822 <__ssvfiscanf_r+0xd2>
 8010814:	2b57      	cmp	r3, #87	; 0x57
 8010816:	d810      	bhi.n	801083a <__ssvfiscanf_r+0xea>
 8010818:	2b25      	cmp	r3, #37	; 0x25
 801081a:	d05c      	beq.n	80108d6 <__ssvfiscanf_r+0x186>
 801081c:	d856      	bhi.n	80108cc <__ssvfiscanf_r+0x17c>
 801081e:	2b00      	cmp	r3, #0
 8010820:	d074      	beq.n	801090c <__ssvfiscanf_r+0x1bc>
 8010822:	2303      	movs	r3, #3
 8010824:	9347      	str	r3, [sp, #284]	; 0x11c
 8010826:	230a      	movs	r3, #10
 8010828:	9342      	str	r3, [sp, #264]	; 0x108
 801082a:	e081      	b.n	8010930 <__ssvfiscanf_r+0x1e0>
 801082c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801082e:	fb02 1303 	mla	r3, r2, r3, r1
 8010832:	3b30      	subs	r3, #48	; 0x30
 8010834:	9343      	str	r3, [sp, #268]	; 0x10c
 8010836:	465d      	mov	r5, fp
 8010838:	e7d3      	b.n	80107e2 <__ssvfiscanf_r+0x92>
 801083a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801083e:	2a20      	cmp	r2, #32
 8010840:	d8ef      	bhi.n	8010822 <__ssvfiscanf_r+0xd2>
 8010842:	a101      	add	r1, pc, #4	; (adr r1, 8010848 <__ssvfiscanf_r+0xf8>)
 8010844:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010848:	0801091b 	.word	0x0801091b
 801084c:	08010823 	.word	0x08010823
 8010850:	08010823 	.word	0x08010823
 8010854:	08010979 	.word	0x08010979
 8010858:	08010823 	.word	0x08010823
 801085c:	08010823 	.word	0x08010823
 8010860:	08010823 	.word	0x08010823
 8010864:	08010823 	.word	0x08010823
 8010868:	08010823 	.word	0x08010823
 801086c:	08010823 	.word	0x08010823
 8010870:	08010823 	.word	0x08010823
 8010874:	0801098f 	.word	0x0801098f
 8010878:	08010965 	.word	0x08010965
 801087c:	080108d3 	.word	0x080108d3
 8010880:	080108d3 	.word	0x080108d3
 8010884:	080108d3 	.word	0x080108d3
 8010888:	08010823 	.word	0x08010823
 801088c:	08010969 	.word	0x08010969
 8010890:	08010823 	.word	0x08010823
 8010894:	08010823 	.word	0x08010823
 8010898:	08010823 	.word	0x08010823
 801089c:	08010823 	.word	0x08010823
 80108a0:	0801099f 	.word	0x0801099f
 80108a4:	08010971 	.word	0x08010971
 80108a8:	08010913 	.word	0x08010913
 80108ac:	08010823 	.word	0x08010823
 80108b0:	08010823 	.word	0x08010823
 80108b4:	0801099b 	.word	0x0801099b
 80108b8:	08010823 	.word	0x08010823
 80108bc:	08010965 	.word	0x08010965
 80108c0:	08010823 	.word	0x08010823
 80108c4:	08010823 	.word	0x08010823
 80108c8:	0801091b 	.word	0x0801091b
 80108cc:	3b45      	subs	r3, #69	; 0x45
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d8a7      	bhi.n	8010822 <__ssvfiscanf_r+0xd2>
 80108d2:	2305      	movs	r3, #5
 80108d4:	e02b      	b.n	801092e <__ssvfiscanf_r+0x1de>
 80108d6:	6863      	ldr	r3, [r4, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dd0d      	ble.n	80108f8 <__ssvfiscanf_r+0x1a8>
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	781a      	ldrb	r2, [r3, #0]
 80108e0:	4552      	cmp	r2, sl
 80108e2:	f040 80a1 	bne.w	8010a28 <__ssvfiscanf_r+0x2d8>
 80108e6:	3301      	adds	r3, #1
 80108e8:	6862      	ldr	r2, [r4, #4]
 80108ea:	6023      	str	r3, [r4, #0]
 80108ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80108ee:	3a01      	subs	r2, #1
 80108f0:	3301      	adds	r3, #1
 80108f2:	6062      	str	r2, [r4, #4]
 80108f4:	9345      	str	r3, [sp, #276]	; 0x114
 80108f6:	e755      	b.n	80107a4 <__ssvfiscanf_r+0x54>
 80108f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80108fa:	4621      	mov	r1, r4
 80108fc:	4630      	mov	r0, r6
 80108fe:	4798      	blx	r3
 8010900:	2800      	cmp	r0, #0
 8010902:	d0eb      	beq.n	80108dc <__ssvfiscanf_r+0x18c>
 8010904:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010906:	2800      	cmp	r0, #0
 8010908:	f040 8084 	bne.w	8010a14 <__ssvfiscanf_r+0x2c4>
 801090c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010910:	e086      	b.n	8010a20 <__ssvfiscanf_r+0x2d0>
 8010912:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010914:	f042 0220 	orr.w	r2, r2, #32
 8010918:	9241      	str	r2, [sp, #260]	; 0x104
 801091a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801091c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010920:	9241      	str	r2, [sp, #260]	; 0x104
 8010922:	2210      	movs	r2, #16
 8010924:	2b6f      	cmp	r3, #111	; 0x6f
 8010926:	9242      	str	r2, [sp, #264]	; 0x108
 8010928:	bf34      	ite	cc
 801092a:	2303      	movcc	r3, #3
 801092c:	2304      	movcs	r3, #4
 801092e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010930:	6863      	ldr	r3, [r4, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	dd41      	ble.n	80109ba <__ssvfiscanf_r+0x26a>
 8010936:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010938:	0659      	lsls	r1, r3, #25
 801093a:	d404      	bmi.n	8010946 <__ssvfiscanf_r+0x1f6>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	781a      	ldrb	r2, [r3, #0]
 8010940:	5cba      	ldrb	r2, [r7, r2]
 8010942:	0712      	lsls	r2, r2, #28
 8010944:	d440      	bmi.n	80109c8 <__ssvfiscanf_r+0x278>
 8010946:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010948:	2b02      	cmp	r3, #2
 801094a:	dc4f      	bgt.n	80109ec <__ssvfiscanf_r+0x29c>
 801094c:	466b      	mov	r3, sp
 801094e:	4622      	mov	r2, r4
 8010950:	a941      	add	r1, sp, #260	; 0x104
 8010952:	4630      	mov	r0, r6
 8010954:	f000 fa08 	bl	8010d68 <_scanf_chars>
 8010958:	2801      	cmp	r0, #1
 801095a:	d065      	beq.n	8010a28 <__ssvfiscanf_r+0x2d8>
 801095c:	2802      	cmp	r0, #2
 801095e:	f47f af21 	bne.w	80107a4 <__ssvfiscanf_r+0x54>
 8010962:	e7cf      	b.n	8010904 <__ssvfiscanf_r+0x1b4>
 8010964:	220a      	movs	r2, #10
 8010966:	e7dd      	b.n	8010924 <__ssvfiscanf_r+0x1d4>
 8010968:	2300      	movs	r3, #0
 801096a:	9342      	str	r3, [sp, #264]	; 0x108
 801096c:	2303      	movs	r3, #3
 801096e:	e7de      	b.n	801092e <__ssvfiscanf_r+0x1de>
 8010970:	2308      	movs	r3, #8
 8010972:	9342      	str	r3, [sp, #264]	; 0x108
 8010974:	2304      	movs	r3, #4
 8010976:	e7da      	b.n	801092e <__ssvfiscanf_r+0x1de>
 8010978:	4629      	mov	r1, r5
 801097a:	4640      	mov	r0, r8
 801097c:	f000 fb5c 	bl	8011038 <__sccl>
 8010980:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010986:	9341      	str	r3, [sp, #260]	; 0x104
 8010988:	4605      	mov	r5, r0
 801098a:	2301      	movs	r3, #1
 801098c:	e7cf      	b.n	801092e <__ssvfiscanf_r+0x1de>
 801098e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010994:	9341      	str	r3, [sp, #260]	; 0x104
 8010996:	2300      	movs	r3, #0
 8010998:	e7c9      	b.n	801092e <__ssvfiscanf_r+0x1de>
 801099a:	2302      	movs	r3, #2
 801099c:	e7c7      	b.n	801092e <__ssvfiscanf_r+0x1de>
 801099e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80109a0:	06c3      	lsls	r3, r0, #27
 80109a2:	f53f aeff 	bmi.w	80107a4 <__ssvfiscanf_r+0x54>
 80109a6:	9b00      	ldr	r3, [sp, #0]
 80109a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80109aa:	1d19      	adds	r1, r3, #4
 80109ac:	9100      	str	r1, [sp, #0]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	07c0      	lsls	r0, r0, #31
 80109b2:	bf4c      	ite	mi
 80109b4:	801a      	strhmi	r2, [r3, #0]
 80109b6:	601a      	strpl	r2, [r3, #0]
 80109b8:	e6f4      	b.n	80107a4 <__ssvfiscanf_r+0x54>
 80109ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80109bc:	4621      	mov	r1, r4
 80109be:	4630      	mov	r0, r6
 80109c0:	4798      	blx	r3
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d0b7      	beq.n	8010936 <__ssvfiscanf_r+0x1e6>
 80109c6:	e79d      	b.n	8010904 <__ssvfiscanf_r+0x1b4>
 80109c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80109ca:	3201      	adds	r2, #1
 80109cc:	9245      	str	r2, [sp, #276]	; 0x114
 80109ce:	6862      	ldr	r2, [r4, #4]
 80109d0:	3a01      	subs	r2, #1
 80109d2:	2a00      	cmp	r2, #0
 80109d4:	6062      	str	r2, [r4, #4]
 80109d6:	dd02      	ble.n	80109de <__ssvfiscanf_r+0x28e>
 80109d8:	3301      	adds	r3, #1
 80109da:	6023      	str	r3, [r4, #0]
 80109dc:	e7ae      	b.n	801093c <__ssvfiscanf_r+0x1ec>
 80109de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80109e0:	4621      	mov	r1, r4
 80109e2:	4630      	mov	r0, r6
 80109e4:	4798      	blx	r3
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d0a8      	beq.n	801093c <__ssvfiscanf_r+0x1ec>
 80109ea:	e78b      	b.n	8010904 <__ssvfiscanf_r+0x1b4>
 80109ec:	2b04      	cmp	r3, #4
 80109ee:	dc06      	bgt.n	80109fe <__ssvfiscanf_r+0x2ae>
 80109f0:	466b      	mov	r3, sp
 80109f2:	4622      	mov	r2, r4
 80109f4:	a941      	add	r1, sp, #260	; 0x104
 80109f6:	4630      	mov	r0, r6
 80109f8:	f000 fa0e 	bl	8010e18 <_scanf_i>
 80109fc:	e7ac      	b.n	8010958 <__ssvfiscanf_r+0x208>
 80109fe:	4b0f      	ldr	r3, [pc, #60]	; (8010a3c <__ssvfiscanf_r+0x2ec>)
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f43f aecf 	beq.w	80107a4 <__ssvfiscanf_r+0x54>
 8010a06:	466b      	mov	r3, sp
 8010a08:	4622      	mov	r2, r4
 8010a0a:	a941      	add	r1, sp, #260	; 0x104
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	f7fd fa59 	bl	800dec4 <_scanf_float>
 8010a12:	e7a1      	b.n	8010958 <__ssvfiscanf_r+0x208>
 8010a14:	89a3      	ldrh	r3, [r4, #12]
 8010a16:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010a1a:	bf18      	it	ne
 8010a1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010a20:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8010a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010a2a:	e7f9      	b.n	8010a20 <__ssvfiscanf_r+0x2d0>
 8010a2c:	0801069d 	.word	0x0801069d
 8010a30:	08010717 	.word	0x08010717
 8010a34:	08013a89 	.word	0x08013a89
 8010a38:	08013e02 	.word	0x08013e02
 8010a3c:	0800dec5 	.word	0x0800dec5

08010a40 <_printf_common>:
 8010a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a44:	4616      	mov	r6, r2
 8010a46:	4699      	mov	r9, r3
 8010a48:	688a      	ldr	r2, [r1, #8]
 8010a4a:	690b      	ldr	r3, [r1, #16]
 8010a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a50:	4293      	cmp	r3, r2
 8010a52:	bfb8      	it	lt
 8010a54:	4613      	movlt	r3, r2
 8010a56:	6033      	str	r3, [r6, #0]
 8010a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a5c:	4607      	mov	r7, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	b10a      	cbz	r2, 8010a66 <_printf_common+0x26>
 8010a62:	3301      	adds	r3, #1
 8010a64:	6033      	str	r3, [r6, #0]
 8010a66:	6823      	ldr	r3, [r4, #0]
 8010a68:	0699      	lsls	r1, r3, #26
 8010a6a:	bf42      	ittt	mi
 8010a6c:	6833      	ldrmi	r3, [r6, #0]
 8010a6e:	3302      	addmi	r3, #2
 8010a70:	6033      	strmi	r3, [r6, #0]
 8010a72:	6825      	ldr	r5, [r4, #0]
 8010a74:	f015 0506 	ands.w	r5, r5, #6
 8010a78:	d106      	bne.n	8010a88 <_printf_common+0x48>
 8010a7a:	f104 0a19 	add.w	sl, r4, #25
 8010a7e:	68e3      	ldr	r3, [r4, #12]
 8010a80:	6832      	ldr	r2, [r6, #0]
 8010a82:	1a9b      	subs	r3, r3, r2
 8010a84:	42ab      	cmp	r3, r5
 8010a86:	dc26      	bgt.n	8010ad6 <_printf_common+0x96>
 8010a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a8c:	1e13      	subs	r3, r2, #0
 8010a8e:	6822      	ldr	r2, [r4, #0]
 8010a90:	bf18      	it	ne
 8010a92:	2301      	movne	r3, #1
 8010a94:	0692      	lsls	r2, r2, #26
 8010a96:	d42b      	bmi.n	8010af0 <_printf_common+0xb0>
 8010a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a9c:	4649      	mov	r1, r9
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	47c0      	blx	r8
 8010aa2:	3001      	adds	r0, #1
 8010aa4:	d01e      	beq.n	8010ae4 <_printf_common+0xa4>
 8010aa6:	6823      	ldr	r3, [r4, #0]
 8010aa8:	68e5      	ldr	r5, [r4, #12]
 8010aaa:	6832      	ldr	r2, [r6, #0]
 8010aac:	f003 0306 	and.w	r3, r3, #6
 8010ab0:	2b04      	cmp	r3, #4
 8010ab2:	bf08      	it	eq
 8010ab4:	1aad      	subeq	r5, r5, r2
 8010ab6:	68a3      	ldr	r3, [r4, #8]
 8010ab8:	6922      	ldr	r2, [r4, #16]
 8010aba:	bf0c      	ite	eq
 8010abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ac0:	2500      	movne	r5, #0
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	bfc4      	itt	gt
 8010ac6:	1a9b      	subgt	r3, r3, r2
 8010ac8:	18ed      	addgt	r5, r5, r3
 8010aca:	2600      	movs	r6, #0
 8010acc:	341a      	adds	r4, #26
 8010ace:	42b5      	cmp	r5, r6
 8010ad0:	d11a      	bne.n	8010b08 <_printf_common+0xc8>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e008      	b.n	8010ae8 <_printf_common+0xa8>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	4652      	mov	r2, sl
 8010ada:	4649      	mov	r1, r9
 8010adc:	4638      	mov	r0, r7
 8010ade:	47c0      	blx	r8
 8010ae0:	3001      	adds	r0, #1
 8010ae2:	d103      	bne.n	8010aec <_printf_common+0xac>
 8010ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aec:	3501      	adds	r5, #1
 8010aee:	e7c6      	b.n	8010a7e <_printf_common+0x3e>
 8010af0:	18e1      	adds	r1, r4, r3
 8010af2:	1c5a      	adds	r2, r3, #1
 8010af4:	2030      	movs	r0, #48	; 0x30
 8010af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010afa:	4422      	add	r2, r4
 8010afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b04:	3302      	adds	r3, #2
 8010b06:	e7c7      	b.n	8010a98 <_printf_common+0x58>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	4622      	mov	r2, r4
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	4638      	mov	r0, r7
 8010b10:	47c0      	blx	r8
 8010b12:	3001      	adds	r0, #1
 8010b14:	d0e6      	beq.n	8010ae4 <_printf_common+0xa4>
 8010b16:	3601      	adds	r6, #1
 8010b18:	e7d9      	b.n	8010ace <_printf_common+0x8e>
	...

08010b1c <_printf_i>:
 8010b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b20:	460c      	mov	r4, r1
 8010b22:	4691      	mov	r9, r2
 8010b24:	7e27      	ldrb	r7, [r4, #24]
 8010b26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b28:	2f78      	cmp	r7, #120	; 0x78
 8010b2a:	4680      	mov	r8, r0
 8010b2c:	469a      	mov	sl, r3
 8010b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b32:	d807      	bhi.n	8010b44 <_printf_i+0x28>
 8010b34:	2f62      	cmp	r7, #98	; 0x62
 8010b36:	d80a      	bhi.n	8010b4e <_printf_i+0x32>
 8010b38:	2f00      	cmp	r7, #0
 8010b3a:	f000 80d8 	beq.w	8010cee <_printf_i+0x1d2>
 8010b3e:	2f58      	cmp	r7, #88	; 0x58
 8010b40:	f000 80a3 	beq.w	8010c8a <_printf_i+0x16e>
 8010b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b4c:	e03a      	b.n	8010bc4 <_printf_i+0xa8>
 8010b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b52:	2b15      	cmp	r3, #21
 8010b54:	d8f6      	bhi.n	8010b44 <_printf_i+0x28>
 8010b56:	a001      	add	r0, pc, #4	; (adr r0, 8010b5c <_printf_i+0x40>)
 8010b58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010b5c:	08010bb5 	.word	0x08010bb5
 8010b60:	08010bc9 	.word	0x08010bc9
 8010b64:	08010b45 	.word	0x08010b45
 8010b68:	08010b45 	.word	0x08010b45
 8010b6c:	08010b45 	.word	0x08010b45
 8010b70:	08010b45 	.word	0x08010b45
 8010b74:	08010bc9 	.word	0x08010bc9
 8010b78:	08010b45 	.word	0x08010b45
 8010b7c:	08010b45 	.word	0x08010b45
 8010b80:	08010b45 	.word	0x08010b45
 8010b84:	08010b45 	.word	0x08010b45
 8010b88:	08010cd5 	.word	0x08010cd5
 8010b8c:	08010bf9 	.word	0x08010bf9
 8010b90:	08010cb7 	.word	0x08010cb7
 8010b94:	08010b45 	.word	0x08010b45
 8010b98:	08010b45 	.word	0x08010b45
 8010b9c:	08010cf7 	.word	0x08010cf7
 8010ba0:	08010b45 	.word	0x08010b45
 8010ba4:	08010bf9 	.word	0x08010bf9
 8010ba8:	08010b45 	.word	0x08010b45
 8010bac:	08010b45 	.word	0x08010b45
 8010bb0:	08010cbf 	.word	0x08010cbf
 8010bb4:	680b      	ldr	r3, [r1, #0]
 8010bb6:	1d1a      	adds	r2, r3, #4
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	600a      	str	r2, [r1, #0]
 8010bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e0a3      	b.n	8010d10 <_printf_i+0x1f4>
 8010bc8:	6825      	ldr	r5, [r4, #0]
 8010bca:	6808      	ldr	r0, [r1, #0]
 8010bcc:	062e      	lsls	r6, r5, #24
 8010bce:	f100 0304 	add.w	r3, r0, #4
 8010bd2:	d50a      	bpl.n	8010bea <_printf_i+0xce>
 8010bd4:	6805      	ldr	r5, [r0, #0]
 8010bd6:	600b      	str	r3, [r1, #0]
 8010bd8:	2d00      	cmp	r5, #0
 8010bda:	da03      	bge.n	8010be4 <_printf_i+0xc8>
 8010bdc:	232d      	movs	r3, #45	; 0x2d
 8010bde:	426d      	negs	r5, r5
 8010be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010be4:	485e      	ldr	r0, [pc, #376]	; (8010d60 <_printf_i+0x244>)
 8010be6:	230a      	movs	r3, #10
 8010be8:	e019      	b.n	8010c1e <_printf_i+0x102>
 8010bea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010bee:	6805      	ldr	r5, [r0, #0]
 8010bf0:	600b      	str	r3, [r1, #0]
 8010bf2:	bf18      	it	ne
 8010bf4:	b22d      	sxthne	r5, r5
 8010bf6:	e7ef      	b.n	8010bd8 <_printf_i+0xbc>
 8010bf8:	680b      	ldr	r3, [r1, #0]
 8010bfa:	6825      	ldr	r5, [r4, #0]
 8010bfc:	1d18      	adds	r0, r3, #4
 8010bfe:	6008      	str	r0, [r1, #0]
 8010c00:	0628      	lsls	r0, r5, #24
 8010c02:	d501      	bpl.n	8010c08 <_printf_i+0xec>
 8010c04:	681d      	ldr	r5, [r3, #0]
 8010c06:	e002      	b.n	8010c0e <_printf_i+0xf2>
 8010c08:	0669      	lsls	r1, r5, #25
 8010c0a:	d5fb      	bpl.n	8010c04 <_printf_i+0xe8>
 8010c0c:	881d      	ldrh	r5, [r3, #0]
 8010c0e:	4854      	ldr	r0, [pc, #336]	; (8010d60 <_printf_i+0x244>)
 8010c10:	2f6f      	cmp	r7, #111	; 0x6f
 8010c12:	bf0c      	ite	eq
 8010c14:	2308      	moveq	r3, #8
 8010c16:	230a      	movne	r3, #10
 8010c18:	2100      	movs	r1, #0
 8010c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c1e:	6866      	ldr	r6, [r4, #4]
 8010c20:	60a6      	str	r6, [r4, #8]
 8010c22:	2e00      	cmp	r6, #0
 8010c24:	bfa2      	ittt	ge
 8010c26:	6821      	ldrge	r1, [r4, #0]
 8010c28:	f021 0104 	bicge.w	r1, r1, #4
 8010c2c:	6021      	strge	r1, [r4, #0]
 8010c2e:	b90d      	cbnz	r5, 8010c34 <_printf_i+0x118>
 8010c30:	2e00      	cmp	r6, #0
 8010c32:	d04d      	beq.n	8010cd0 <_printf_i+0x1b4>
 8010c34:	4616      	mov	r6, r2
 8010c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8010c3e:	5dc7      	ldrb	r7, [r0, r7]
 8010c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c44:	462f      	mov	r7, r5
 8010c46:	42bb      	cmp	r3, r7
 8010c48:	460d      	mov	r5, r1
 8010c4a:	d9f4      	bls.n	8010c36 <_printf_i+0x11a>
 8010c4c:	2b08      	cmp	r3, #8
 8010c4e:	d10b      	bne.n	8010c68 <_printf_i+0x14c>
 8010c50:	6823      	ldr	r3, [r4, #0]
 8010c52:	07df      	lsls	r7, r3, #31
 8010c54:	d508      	bpl.n	8010c68 <_printf_i+0x14c>
 8010c56:	6923      	ldr	r3, [r4, #16]
 8010c58:	6861      	ldr	r1, [r4, #4]
 8010c5a:	4299      	cmp	r1, r3
 8010c5c:	bfde      	ittt	le
 8010c5e:	2330      	movle	r3, #48	; 0x30
 8010c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c64:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010c68:	1b92      	subs	r2, r2, r6
 8010c6a:	6122      	str	r2, [r4, #16]
 8010c6c:	f8cd a000 	str.w	sl, [sp]
 8010c70:	464b      	mov	r3, r9
 8010c72:	aa03      	add	r2, sp, #12
 8010c74:	4621      	mov	r1, r4
 8010c76:	4640      	mov	r0, r8
 8010c78:	f7ff fee2 	bl	8010a40 <_printf_common>
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	d14c      	bne.n	8010d1a <_printf_i+0x1fe>
 8010c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c84:	b004      	add	sp, #16
 8010c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c8a:	4835      	ldr	r0, [pc, #212]	; (8010d60 <_printf_i+0x244>)
 8010c8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	680e      	ldr	r6, [r1, #0]
 8010c94:	061f      	lsls	r7, r3, #24
 8010c96:	f856 5b04 	ldr.w	r5, [r6], #4
 8010c9a:	600e      	str	r6, [r1, #0]
 8010c9c:	d514      	bpl.n	8010cc8 <_printf_i+0x1ac>
 8010c9e:	07d9      	lsls	r1, r3, #31
 8010ca0:	bf44      	itt	mi
 8010ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8010ca6:	6023      	strmi	r3, [r4, #0]
 8010ca8:	b91d      	cbnz	r5, 8010cb2 <_printf_i+0x196>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	f023 0320 	bic.w	r3, r3, #32
 8010cb0:	6023      	str	r3, [r4, #0]
 8010cb2:	2310      	movs	r3, #16
 8010cb4:	e7b0      	b.n	8010c18 <_printf_i+0xfc>
 8010cb6:	6823      	ldr	r3, [r4, #0]
 8010cb8:	f043 0320 	orr.w	r3, r3, #32
 8010cbc:	6023      	str	r3, [r4, #0]
 8010cbe:	2378      	movs	r3, #120	; 0x78
 8010cc0:	4828      	ldr	r0, [pc, #160]	; (8010d64 <_printf_i+0x248>)
 8010cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cc6:	e7e3      	b.n	8010c90 <_printf_i+0x174>
 8010cc8:	065e      	lsls	r6, r3, #25
 8010cca:	bf48      	it	mi
 8010ccc:	b2ad      	uxthmi	r5, r5
 8010cce:	e7e6      	b.n	8010c9e <_printf_i+0x182>
 8010cd0:	4616      	mov	r6, r2
 8010cd2:	e7bb      	b.n	8010c4c <_printf_i+0x130>
 8010cd4:	680b      	ldr	r3, [r1, #0]
 8010cd6:	6826      	ldr	r6, [r4, #0]
 8010cd8:	6960      	ldr	r0, [r4, #20]
 8010cda:	1d1d      	adds	r5, r3, #4
 8010cdc:	600d      	str	r5, [r1, #0]
 8010cde:	0635      	lsls	r5, r6, #24
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	d501      	bpl.n	8010ce8 <_printf_i+0x1cc>
 8010ce4:	6018      	str	r0, [r3, #0]
 8010ce6:	e002      	b.n	8010cee <_printf_i+0x1d2>
 8010ce8:	0671      	lsls	r1, r6, #25
 8010cea:	d5fb      	bpl.n	8010ce4 <_printf_i+0x1c8>
 8010cec:	8018      	strh	r0, [r3, #0]
 8010cee:	2300      	movs	r3, #0
 8010cf0:	6123      	str	r3, [r4, #16]
 8010cf2:	4616      	mov	r6, r2
 8010cf4:	e7ba      	b.n	8010c6c <_printf_i+0x150>
 8010cf6:	680b      	ldr	r3, [r1, #0]
 8010cf8:	1d1a      	adds	r2, r3, #4
 8010cfa:	600a      	str	r2, [r1, #0]
 8010cfc:	681e      	ldr	r6, [r3, #0]
 8010cfe:	6862      	ldr	r2, [r4, #4]
 8010d00:	2100      	movs	r1, #0
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7ef fa84 	bl	8000210 <memchr>
 8010d08:	b108      	cbz	r0, 8010d0e <_printf_i+0x1f2>
 8010d0a:	1b80      	subs	r0, r0, r6
 8010d0c:	6060      	str	r0, [r4, #4]
 8010d0e:	6863      	ldr	r3, [r4, #4]
 8010d10:	6123      	str	r3, [r4, #16]
 8010d12:	2300      	movs	r3, #0
 8010d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d18:	e7a8      	b.n	8010c6c <_printf_i+0x150>
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	4632      	mov	r2, r6
 8010d1e:	4649      	mov	r1, r9
 8010d20:	4640      	mov	r0, r8
 8010d22:	47d0      	blx	sl
 8010d24:	3001      	adds	r0, #1
 8010d26:	d0ab      	beq.n	8010c80 <_printf_i+0x164>
 8010d28:	6823      	ldr	r3, [r4, #0]
 8010d2a:	079b      	lsls	r3, r3, #30
 8010d2c:	d413      	bmi.n	8010d56 <_printf_i+0x23a>
 8010d2e:	68e0      	ldr	r0, [r4, #12]
 8010d30:	9b03      	ldr	r3, [sp, #12]
 8010d32:	4298      	cmp	r0, r3
 8010d34:	bfb8      	it	lt
 8010d36:	4618      	movlt	r0, r3
 8010d38:	e7a4      	b.n	8010c84 <_printf_i+0x168>
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	4632      	mov	r2, r6
 8010d3e:	4649      	mov	r1, r9
 8010d40:	4640      	mov	r0, r8
 8010d42:	47d0      	blx	sl
 8010d44:	3001      	adds	r0, #1
 8010d46:	d09b      	beq.n	8010c80 <_printf_i+0x164>
 8010d48:	3501      	adds	r5, #1
 8010d4a:	68e3      	ldr	r3, [r4, #12]
 8010d4c:	9903      	ldr	r1, [sp, #12]
 8010d4e:	1a5b      	subs	r3, r3, r1
 8010d50:	42ab      	cmp	r3, r5
 8010d52:	dcf2      	bgt.n	8010d3a <_printf_i+0x21e>
 8010d54:	e7eb      	b.n	8010d2e <_printf_i+0x212>
 8010d56:	2500      	movs	r5, #0
 8010d58:	f104 0619 	add.w	r6, r4, #25
 8010d5c:	e7f5      	b.n	8010d4a <_printf_i+0x22e>
 8010d5e:	bf00      	nop
 8010d60:	08013e0d 	.word	0x08013e0d
 8010d64:	08013e1e 	.word	0x08013e1e

08010d68 <_scanf_chars>:
 8010d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d6c:	4615      	mov	r5, r2
 8010d6e:	688a      	ldr	r2, [r1, #8]
 8010d70:	4680      	mov	r8, r0
 8010d72:	460c      	mov	r4, r1
 8010d74:	b932      	cbnz	r2, 8010d84 <_scanf_chars+0x1c>
 8010d76:	698a      	ldr	r2, [r1, #24]
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	bf0c      	ite	eq
 8010d7c:	2201      	moveq	r2, #1
 8010d7e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8010d82:	608a      	str	r2, [r1, #8]
 8010d84:	6822      	ldr	r2, [r4, #0]
 8010d86:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010e14 <_scanf_chars+0xac>
 8010d8a:	06d1      	lsls	r1, r2, #27
 8010d8c:	bf5f      	itttt	pl
 8010d8e:	681a      	ldrpl	r2, [r3, #0]
 8010d90:	1d11      	addpl	r1, r2, #4
 8010d92:	6019      	strpl	r1, [r3, #0]
 8010d94:	6816      	ldrpl	r6, [r2, #0]
 8010d96:	2700      	movs	r7, #0
 8010d98:	69a0      	ldr	r0, [r4, #24]
 8010d9a:	b188      	cbz	r0, 8010dc0 <_scanf_chars+0x58>
 8010d9c:	2801      	cmp	r0, #1
 8010d9e:	d107      	bne.n	8010db0 <_scanf_chars+0x48>
 8010da0:	682b      	ldr	r3, [r5, #0]
 8010da2:	781a      	ldrb	r2, [r3, #0]
 8010da4:	6963      	ldr	r3, [r4, #20]
 8010da6:	5c9b      	ldrb	r3, [r3, r2]
 8010da8:	b953      	cbnz	r3, 8010dc0 <_scanf_chars+0x58>
 8010daa:	bb27      	cbnz	r7, 8010df6 <_scanf_chars+0x8e>
 8010dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010db0:	2802      	cmp	r0, #2
 8010db2:	d120      	bne.n	8010df6 <_scanf_chars+0x8e>
 8010db4:	682b      	ldr	r3, [r5, #0]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010dbc:	071b      	lsls	r3, r3, #28
 8010dbe:	d41a      	bmi.n	8010df6 <_scanf_chars+0x8e>
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	06da      	lsls	r2, r3, #27
 8010dc4:	bf5e      	ittt	pl
 8010dc6:	682b      	ldrpl	r3, [r5, #0]
 8010dc8:	781b      	ldrbpl	r3, [r3, #0]
 8010dca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010dce:	682a      	ldr	r2, [r5, #0]
 8010dd0:	686b      	ldr	r3, [r5, #4]
 8010dd2:	3201      	adds	r2, #1
 8010dd4:	602a      	str	r2, [r5, #0]
 8010dd6:	68a2      	ldr	r2, [r4, #8]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	3a01      	subs	r2, #1
 8010ddc:	606b      	str	r3, [r5, #4]
 8010dde:	3701      	adds	r7, #1
 8010de0:	60a2      	str	r2, [r4, #8]
 8010de2:	b142      	cbz	r2, 8010df6 <_scanf_chars+0x8e>
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dcd7      	bgt.n	8010d98 <_scanf_chars+0x30>
 8010de8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010dec:	4629      	mov	r1, r5
 8010dee:	4640      	mov	r0, r8
 8010df0:	4798      	blx	r3
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d0d0      	beq.n	8010d98 <_scanf_chars+0x30>
 8010df6:	6823      	ldr	r3, [r4, #0]
 8010df8:	f013 0310 	ands.w	r3, r3, #16
 8010dfc:	d105      	bne.n	8010e0a <_scanf_chars+0xa2>
 8010dfe:	68e2      	ldr	r2, [r4, #12]
 8010e00:	3201      	adds	r2, #1
 8010e02:	60e2      	str	r2, [r4, #12]
 8010e04:	69a2      	ldr	r2, [r4, #24]
 8010e06:	b102      	cbz	r2, 8010e0a <_scanf_chars+0xa2>
 8010e08:	7033      	strb	r3, [r6, #0]
 8010e0a:	6923      	ldr	r3, [r4, #16]
 8010e0c:	441f      	add	r7, r3
 8010e0e:	6127      	str	r7, [r4, #16]
 8010e10:	2000      	movs	r0, #0
 8010e12:	e7cb      	b.n	8010dac <_scanf_chars+0x44>
 8010e14:	08013a89 	.word	0x08013a89

08010e18 <_scanf_i>:
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	4698      	mov	r8, r3
 8010e1e:	4b74      	ldr	r3, [pc, #464]	; (8010ff0 <_scanf_i+0x1d8>)
 8010e20:	460c      	mov	r4, r1
 8010e22:	4682      	mov	sl, r0
 8010e24:	4616      	mov	r6, r2
 8010e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e2a:	b087      	sub	sp, #28
 8010e2c:	ab03      	add	r3, sp, #12
 8010e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010e32:	4b70      	ldr	r3, [pc, #448]	; (8010ff4 <_scanf_i+0x1dc>)
 8010e34:	69a1      	ldr	r1, [r4, #24]
 8010e36:	4a70      	ldr	r2, [pc, #448]	; (8010ff8 <_scanf_i+0x1e0>)
 8010e38:	2903      	cmp	r1, #3
 8010e3a:	bf18      	it	ne
 8010e3c:	461a      	movne	r2, r3
 8010e3e:	68a3      	ldr	r3, [r4, #8]
 8010e40:	9201      	str	r2, [sp, #4]
 8010e42:	1e5a      	subs	r2, r3, #1
 8010e44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010e48:	bf88      	it	hi
 8010e4a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010e4e:	4627      	mov	r7, r4
 8010e50:	bf82      	ittt	hi
 8010e52:	eb03 0905 	addhi.w	r9, r3, r5
 8010e56:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010e5a:	60a3      	strhi	r3, [r4, #8]
 8010e5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010e60:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010e64:	bf98      	it	ls
 8010e66:	f04f 0900 	movls.w	r9, #0
 8010e6a:	6023      	str	r3, [r4, #0]
 8010e6c:	463d      	mov	r5, r7
 8010e6e:	f04f 0b00 	mov.w	fp, #0
 8010e72:	6831      	ldr	r1, [r6, #0]
 8010e74:	ab03      	add	r3, sp, #12
 8010e76:	7809      	ldrb	r1, [r1, #0]
 8010e78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010e7c:	2202      	movs	r2, #2
 8010e7e:	f7ef f9c7 	bl	8000210 <memchr>
 8010e82:	b328      	cbz	r0, 8010ed0 <_scanf_i+0xb8>
 8010e84:	f1bb 0f01 	cmp.w	fp, #1
 8010e88:	d159      	bne.n	8010f3e <_scanf_i+0x126>
 8010e8a:	6862      	ldr	r2, [r4, #4]
 8010e8c:	b92a      	cbnz	r2, 8010e9a <_scanf_i+0x82>
 8010e8e:	6822      	ldr	r2, [r4, #0]
 8010e90:	2308      	movs	r3, #8
 8010e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e96:	6063      	str	r3, [r4, #4]
 8010e98:	6022      	str	r2, [r4, #0]
 8010e9a:	6822      	ldr	r2, [r4, #0]
 8010e9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010ea0:	6022      	str	r2, [r4, #0]
 8010ea2:	68a2      	ldr	r2, [r4, #8]
 8010ea4:	1e51      	subs	r1, r2, #1
 8010ea6:	60a1      	str	r1, [r4, #8]
 8010ea8:	b192      	cbz	r2, 8010ed0 <_scanf_i+0xb8>
 8010eaa:	6832      	ldr	r2, [r6, #0]
 8010eac:	1c51      	adds	r1, r2, #1
 8010eae:	6031      	str	r1, [r6, #0]
 8010eb0:	7812      	ldrb	r2, [r2, #0]
 8010eb2:	f805 2b01 	strb.w	r2, [r5], #1
 8010eb6:	6872      	ldr	r2, [r6, #4]
 8010eb8:	3a01      	subs	r2, #1
 8010eba:	2a00      	cmp	r2, #0
 8010ebc:	6072      	str	r2, [r6, #4]
 8010ebe:	dc07      	bgt.n	8010ed0 <_scanf_i+0xb8>
 8010ec0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010ec4:	4631      	mov	r1, r6
 8010ec6:	4650      	mov	r0, sl
 8010ec8:	4790      	blx	r2
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	f040 8085 	bne.w	8010fda <_scanf_i+0x1c2>
 8010ed0:	f10b 0b01 	add.w	fp, fp, #1
 8010ed4:	f1bb 0f03 	cmp.w	fp, #3
 8010ed8:	d1cb      	bne.n	8010e72 <_scanf_i+0x5a>
 8010eda:	6863      	ldr	r3, [r4, #4]
 8010edc:	b90b      	cbnz	r3, 8010ee2 <_scanf_i+0xca>
 8010ede:	230a      	movs	r3, #10
 8010ee0:	6063      	str	r3, [r4, #4]
 8010ee2:	6863      	ldr	r3, [r4, #4]
 8010ee4:	4945      	ldr	r1, [pc, #276]	; (8010ffc <_scanf_i+0x1e4>)
 8010ee6:	6960      	ldr	r0, [r4, #20]
 8010ee8:	1ac9      	subs	r1, r1, r3
 8010eea:	f000 f8a5 	bl	8011038 <__sccl>
 8010eee:	f04f 0b00 	mov.w	fp, #0
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	6822      	ldr	r2, [r4, #0]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d03d      	beq.n	8010f76 <_scanf_i+0x15e>
 8010efa:	6831      	ldr	r1, [r6, #0]
 8010efc:	6960      	ldr	r0, [r4, #20]
 8010efe:	f891 c000 	ldrb.w	ip, [r1]
 8010f02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d035      	beq.n	8010f76 <_scanf_i+0x15e>
 8010f0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010f0e:	d124      	bne.n	8010f5a <_scanf_i+0x142>
 8010f10:	0510      	lsls	r0, r2, #20
 8010f12:	d522      	bpl.n	8010f5a <_scanf_i+0x142>
 8010f14:	f10b 0b01 	add.w	fp, fp, #1
 8010f18:	f1b9 0f00 	cmp.w	r9, #0
 8010f1c:	d003      	beq.n	8010f26 <_scanf_i+0x10e>
 8010f1e:	3301      	adds	r3, #1
 8010f20:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8010f24:	60a3      	str	r3, [r4, #8]
 8010f26:	6873      	ldr	r3, [r6, #4]
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	6073      	str	r3, [r6, #4]
 8010f2e:	dd1b      	ble.n	8010f68 <_scanf_i+0x150>
 8010f30:	6833      	ldr	r3, [r6, #0]
 8010f32:	3301      	adds	r3, #1
 8010f34:	6033      	str	r3, [r6, #0]
 8010f36:	68a3      	ldr	r3, [r4, #8]
 8010f38:	3b01      	subs	r3, #1
 8010f3a:	60a3      	str	r3, [r4, #8]
 8010f3c:	e7d9      	b.n	8010ef2 <_scanf_i+0xda>
 8010f3e:	f1bb 0f02 	cmp.w	fp, #2
 8010f42:	d1ae      	bne.n	8010ea2 <_scanf_i+0x8a>
 8010f44:	6822      	ldr	r2, [r4, #0]
 8010f46:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010f4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010f4e:	d1bf      	bne.n	8010ed0 <_scanf_i+0xb8>
 8010f50:	2310      	movs	r3, #16
 8010f52:	6063      	str	r3, [r4, #4]
 8010f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f58:	e7a2      	b.n	8010ea0 <_scanf_i+0x88>
 8010f5a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010f5e:	6022      	str	r2, [r4, #0]
 8010f60:	780b      	ldrb	r3, [r1, #0]
 8010f62:	f805 3b01 	strb.w	r3, [r5], #1
 8010f66:	e7de      	b.n	8010f26 <_scanf_i+0x10e>
 8010f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f6c:	4631      	mov	r1, r6
 8010f6e:	4650      	mov	r0, sl
 8010f70:	4798      	blx	r3
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d0df      	beq.n	8010f36 <_scanf_i+0x11e>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	05d9      	lsls	r1, r3, #23
 8010f7a:	d50d      	bpl.n	8010f98 <_scanf_i+0x180>
 8010f7c:	42bd      	cmp	r5, r7
 8010f7e:	d909      	bls.n	8010f94 <_scanf_i+0x17c>
 8010f80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f88:	4632      	mov	r2, r6
 8010f8a:	4650      	mov	r0, sl
 8010f8c:	4798      	blx	r3
 8010f8e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8010f92:	464d      	mov	r5, r9
 8010f94:	42bd      	cmp	r5, r7
 8010f96:	d028      	beq.n	8010fea <_scanf_i+0x1d2>
 8010f98:	6822      	ldr	r2, [r4, #0]
 8010f9a:	f012 0210 	ands.w	r2, r2, #16
 8010f9e:	d113      	bne.n	8010fc8 <_scanf_i+0x1b0>
 8010fa0:	702a      	strb	r2, [r5, #0]
 8010fa2:	6863      	ldr	r3, [r4, #4]
 8010fa4:	9e01      	ldr	r6, [sp, #4]
 8010fa6:	4639      	mov	r1, r7
 8010fa8:	4650      	mov	r0, sl
 8010faa:	47b0      	blx	r6
 8010fac:	f8d8 3000 	ldr.w	r3, [r8]
 8010fb0:	6821      	ldr	r1, [r4, #0]
 8010fb2:	1d1a      	adds	r2, r3, #4
 8010fb4:	f8c8 2000 	str.w	r2, [r8]
 8010fb8:	f011 0f20 	tst.w	r1, #32
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	d00f      	beq.n	8010fe0 <_scanf_i+0x1c8>
 8010fc0:	6018      	str	r0, [r3, #0]
 8010fc2:	68e3      	ldr	r3, [r4, #12]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	60e3      	str	r3, [r4, #12]
 8010fc8:	1bed      	subs	r5, r5, r7
 8010fca:	44ab      	add	fp, r5
 8010fcc:	6925      	ldr	r5, [r4, #16]
 8010fce:	445d      	add	r5, fp
 8010fd0:	6125      	str	r5, [r4, #16]
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	b007      	add	sp, #28
 8010fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fda:	f04f 0b00 	mov.w	fp, #0
 8010fde:	e7ca      	b.n	8010f76 <_scanf_i+0x15e>
 8010fe0:	07ca      	lsls	r2, r1, #31
 8010fe2:	bf4c      	ite	mi
 8010fe4:	8018      	strhmi	r0, [r3, #0]
 8010fe6:	6018      	strpl	r0, [r3, #0]
 8010fe8:	e7eb      	b.n	8010fc2 <_scanf_i+0x1aa>
 8010fea:	2001      	movs	r0, #1
 8010fec:	e7f2      	b.n	8010fd4 <_scanf_i+0x1bc>
 8010fee:	bf00      	nop
 8010ff0:	08012e8c 	.word	0x08012e8c
 8010ff4:	080111a5 	.word	0x080111a5
 8010ff8:	0800f259 	.word	0x0800f259
 8010ffc:	08013e48 	.word	0x08013e48

08011000 <_read_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d07      	ldr	r5, [pc, #28]	; (8011020 <_read_r+0x20>)
 8011004:	4604      	mov	r4, r0
 8011006:	4608      	mov	r0, r1
 8011008:	4611      	mov	r1, r2
 801100a:	2200      	movs	r2, #0
 801100c:	602a      	str	r2, [r5, #0]
 801100e:	461a      	mov	r2, r3
 8011010:	f000 ee3a 	blx	8011c88 <___read_veneer>
 8011014:	1c43      	adds	r3, r0, #1
 8011016:	d102      	bne.n	801101e <_read_r+0x1e>
 8011018:	682b      	ldr	r3, [r5, #0]
 801101a:	b103      	cbz	r3, 801101e <_read_r+0x1e>
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	bd38      	pop	{r3, r4, r5, pc}
 8011020:	2000a0a4 	.word	0x2000a0a4
 8011024:	00000000 	.word	0x00000000

08011028 <nan>:
 8011028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011030 <nan+0x8>
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	00000000 	.word	0x00000000
 8011034:	7ff80000 	.word	0x7ff80000

08011038 <__sccl>:
 8011038:	b570      	push	{r4, r5, r6, lr}
 801103a:	780b      	ldrb	r3, [r1, #0]
 801103c:	4604      	mov	r4, r0
 801103e:	2b5e      	cmp	r3, #94	; 0x5e
 8011040:	bf0b      	itete	eq
 8011042:	784b      	ldrbeq	r3, [r1, #1]
 8011044:	1c48      	addne	r0, r1, #1
 8011046:	1c88      	addeq	r0, r1, #2
 8011048:	2200      	movne	r2, #0
 801104a:	bf08      	it	eq
 801104c:	2201      	moveq	r2, #1
 801104e:	1e61      	subs	r1, r4, #1
 8011050:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011054:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011058:	42a9      	cmp	r1, r5
 801105a:	d1fb      	bne.n	8011054 <__sccl+0x1c>
 801105c:	b90b      	cbnz	r3, 8011062 <__sccl+0x2a>
 801105e:	3801      	subs	r0, #1
 8011060:	bd70      	pop	{r4, r5, r6, pc}
 8011062:	f082 0101 	eor.w	r1, r2, #1
 8011066:	54e1      	strb	r1, [r4, r3]
 8011068:	1c42      	adds	r2, r0, #1
 801106a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801106e:	2d2d      	cmp	r5, #45	; 0x2d
 8011070:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8011074:	4610      	mov	r0, r2
 8011076:	d006      	beq.n	8011086 <__sccl+0x4e>
 8011078:	2d5d      	cmp	r5, #93	; 0x5d
 801107a:	d0f1      	beq.n	8011060 <__sccl+0x28>
 801107c:	b90d      	cbnz	r5, 8011082 <__sccl+0x4a>
 801107e:	4630      	mov	r0, r6
 8011080:	e7ee      	b.n	8011060 <__sccl+0x28>
 8011082:	462b      	mov	r3, r5
 8011084:	e7ef      	b.n	8011066 <__sccl+0x2e>
 8011086:	7816      	ldrb	r6, [r2, #0]
 8011088:	2e5d      	cmp	r6, #93	; 0x5d
 801108a:	d0fa      	beq.n	8011082 <__sccl+0x4a>
 801108c:	42b3      	cmp	r3, r6
 801108e:	dcf8      	bgt.n	8011082 <__sccl+0x4a>
 8011090:	4618      	mov	r0, r3
 8011092:	3001      	adds	r0, #1
 8011094:	4286      	cmp	r6, r0
 8011096:	5421      	strb	r1, [r4, r0]
 8011098:	dcfb      	bgt.n	8011092 <__sccl+0x5a>
 801109a:	43d8      	mvns	r0, r3
 801109c:	4430      	add	r0, r6
 801109e:	1c5d      	adds	r5, r3, #1
 80110a0:	42b3      	cmp	r3, r6
 80110a2:	bfa8      	it	ge
 80110a4:	2000      	movge	r0, #0
 80110a6:	182b      	adds	r3, r5, r0
 80110a8:	3202      	adds	r2, #2
 80110aa:	e7de      	b.n	801106a <__sccl+0x32>

080110ac <_strtoul_l.isra.0>:
 80110ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110b0:	4e3b      	ldr	r6, [pc, #236]	; (80111a0 <_strtoul_l.isra.0+0xf4>)
 80110b2:	4686      	mov	lr, r0
 80110b4:	468c      	mov	ip, r1
 80110b6:	4660      	mov	r0, ip
 80110b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80110bc:	5da5      	ldrb	r5, [r4, r6]
 80110be:	f015 0508 	ands.w	r5, r5, #8
 80110c2:	d1f8      	bne.n	80110b6 <_strtoul_l.isra.0+0xa>
 80110c4:	2c2d      	cmp	r4, #45	; 0x2d
 80110c6:	d134      	bne.n	8011132 <_strtoul_l.isra.0+0x86>
 80110c8:	f89c 4000 	ldrb.w	r4, [ip]
 80110cc:	f04f 0801 	mov.w	r8, #1
 80110d0:	f100 0c02 	add.w	ip, r0, #2
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d05e      	beq.n	8011196 <_strtoul_l.isra.0+0xea>
 80110d8:	2b10      	cmp	r3, #16
 80110da:	d10c      	bne.n	80110f6 <_strtoul_l.isra.0+0x4a>
 80110dc:	2c30      	cmp	r4, #48	; 0x30
 80110de:	d10a      	bne.n	80110f6 <_strtoul_l.isra.0+0x4a>
 80110e0:	f89c 0000 	ldrb.w	r0, [ip]
 80110e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80110e8:	2858      	cmp	r0, #88	; 0x58
 80110ea:	d14f      	bne.n	801118c <_strtoul_l.isra.0+0xe0>
 80110ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80110f0:	2310      	movs	r3, #16
 80110f2:	f10c 0c02 	add.w	ip, ip, #2
 80110f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80110fa:	2500      	movs	r5, #0
 80110fc:	fbb7 f7f3 	udiv	r7, r7, r3
 8011100:	fb03 f907 	mul.w	r9, r3, r7
 8011104:	ea6f 0909 	mvn.w	r9, r9
 8011108:	4628      	mov	r0, r5
 801110a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801110e:	2e09      	cmp	r6, #9
 8011110:	d818      	bhi.n	8011144 <_strtoul_l.isra.0+0x98>
 8011112:	4634      	mov	r4, r6
 8011114:	42a3      	cmp	r3, r4
 8011116:	dd24      	ble.n	8011162 <_strtoul_l.isra.0+0xb6>
 8011118:	2d00      	cmp	r5, #0
 801111a:	db1f      	blt.n	801115c <_strtoul_l.isra.0+0xb0>
 801111c:	4287      	cmp	r7, r0
 801111e:	d31d      	bcc.n	801115c <_strtoul_l.isra.0+0xb0>
 8011120:	d101      	bne.n	8011126 <_strtoul_l.isra.0+0x7a>
 8011122:	45a1      	cmp	r9, r4
 8011124:	db1a      	blt.n	801115c <_strtoul_l.isra.0+0xb0>
 8011126:	fb00 4003 	mla	r0, r0, r3, r4
 801112a:	2501      	movs	r5, #1
 801112c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011130:	e7eb      	b.n	801110a <_strtoul_l.isra.0+0x5e>
 8011132:	2c2b      	cmp	r4, #43	; 0x2b
 8011134:	bf08      	it	eq
 8011136:	f89c 4000 	ldrbeq.w	r4, [ip]
 801113a:	46a8      	mov	r8, r5
 801113c:	bf08      	it	eq
 801113e:	f100 0c02 	addeq.w	ip, r0, #2
 8011142:	e7c7      	b.n	80110d4 <_strtoul_l.isra.0+0x28>
 8011144:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8011148:	2e19      	cmp	r6, #25
 801114a:	d801      	bhi.n	8011150 <_strtoul_l.isra.0+0xa4>
 801114c:	3c37      	subs	r4, #55	; 0x37
 801114e:	e7e1      	b.n	8011114 <_strtoul_l.isra.0+0x68>
 8011150:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8011154:	2e19      	cmp	r6, #25
 8011156:	d804      	bhi.n	8011162 <_strtoul_l.isra.0+0xb6>
 8011158:	3c57      	subs	r4, #87	; 0x57
 801115a:	e7db      	b.n	8011114 <_strtoul_l.isra.0+0x68>
 801115c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011160:	e7e4      	b.n	801112c <_strtoul_l.isra.0+0x80>
 8011162:	2d00      	cmp	r5, #0
 8011164:	da07      	bge.n	8011176 <_strtoul_l.isra.0+0xca>
 8011166:	2322      	movs	r3, #34	; 0x22
 8011168:	f8ce 3000 	str.w	r3, [lr]
 801116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011170:	b942      	cbnz	r2, 8011184 <_strtoul_l.isra.0+0xd8>
 8011172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011176:	f1b8 0f00 	cmp.w	r8, #0
 801117a:	d000      	beq.n	801117e <_strtoul_l.isra.0+0xd2>
 801117c:	4240      	negs	r0, r0
 801117e:	2a00      	cmp	r2, #0
 8011180:	d0f7      	beq.n	8011172 <_strtoul_l.isra.0+0xc6>
 8011182:	b10d      	cbz	r5, 8011188 <_strtoul_l.isra.0+0xdc>
 8011184:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8011188:	6011      	str	r1, [r2, #0]
 801118a:	e7f2      	b.n	8011172 <_strtoul_l.isra.0+0xc6>
 801118c:	2430      	movs	r4, #48	; 0x30
 801118e:	2b00      	cmp	r3, #0
 8011190:	d1b1      	bne.n	80110f6 <_strtoul_l.isra.0+0x4a>
 8011192:	2308      	movs	r3, #8
 8011194:	e7af      	b.n	80110f6 <_strtoul_l.isra.0+0x4a>
 8011196:	2c30      	cmp	r4, #48	; 0x30
 8011198:	d0a2      	beq.n	80110e0 <_strtoul_l.isra.0+0x34>
 801119a:	230a      	movs	r3, #10
 801119c:	e7ab      	b.n	80110f6 <_strtoul_l.isra.0+0x4a>
 801119e:	bf00      	nop
 80111a0:	08013a89 	.word	0x08013a89

080111a4 <_strtoul_r>:
 80111a4:	f7ff bf82 	b.w	80110ac <_strtoul_l.isra.0>

080111a8 <__submore>:
 80111a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ac:	460c      	mov	r4, r1
 80111ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80111b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111b4:	4299      	cmp	r1, r3
 80111b6:	d11d      	bne.n	80111f4 <__submore+0x4c>
 80111b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80111bc:	f7fc fe28 	bl	800de10 <_malloc_r>
 80111c0:	b918      	cbnz	r0, 80111ca <__submore+0x22>
 80111c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80111d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80111d4:	6360      	str	r0, [r4, #52]	; 0x34
 80111d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80111da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80111de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80111e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80111e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80111ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80111ee:	6020      	str	r0, [r4, #0]
 80111f0:	2000      	movs	r0, #0
 80111f2:	e7e8      	b.n	80111c6 <__submore+0x1e>
 80111f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80111f6:	0077      	lsls	r7, r6, #1
 80111f8:	463a      	mov	r2, r7
 80111fa:	f000 fa1e 	bl	801163a <_realloc_r>
 80111fe:	4605      	mov	r5, r0
 8011200:	2800      	cmp	r0, #0
 8011202:	d0de      	beq.n	80111c2 <__submore+0x1a>
 8011204:	eb00 0806 	add.w	r8, r0, r6
 8011208:	4601      	mov	r1, r0
 801120a:	4632      	mov	r2, r6
 801120c:	4640      	mov	r0, r8
 801120e:	f7fc fd89 	bl	800dd24 <memcpy>
 8011212:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011216:	f8c4 8000 	str.w	r8, [r4]
 801121a:	e7e9      	b.n	80111f0 <__submore+0x48>

0801121c <__ascii_wctomb>:
 801121c:	b149      	cbz	r1, 8011232 <__ascii_wctomb+0x16>
 801121e:	2aff      	cmp	r2, #255	; 0xff
 8011220:	bf85      	ittet	hi
 8011222:	238a      	movhi	r3, #138	; 0x8a
 8011224:	6003      	strhi	r3, [r0, #0]
 8011226:	700a      	strbls	r2, [r1, #0]
 8011228:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801122c:	bf98      	it	ls
 801122e:	2001      	movls	r0, #1
 8011230:	4770      	bx	lr
 8011232:	4608      	mov	r0, r1
 8011234:	4770      	bx	lr
	...

08011238 <__assert_func>:
 8011238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801123a:	4614      	mov	r4, r2
 801123c:	461a      	mov	r2, r3
 801123e:	4b09      	ldr	r3, [pc, #36]	; (8011264 <__assert_func+0x2c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4605      	mov	r5, r0
 8011244:	68d8      	ldr	r0, [r3, #12]
 8011246:	b14c      	cbz	r4, 801125c <__assert_func+0x24>
 8011248:	4b07      	ldr	r3, [pc, #28]	; (8011268 <__assert_func+0x30>)
 801124a:	9100      	str	r1, [sp, #0]
 801124c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011250:	4906      	ldr	r1, [pc, #24]	; (801126c <__assert_func+0x34>)
 8011252:	462b      	mov	r3, r5
 8011254:	f000 f9a6 	bl	80115a4 <fiprintf>
 8011258:	f000 fc2e 	bl	8011ab8 <abort>
 801125c:	4b04      	ldr	r3, [pc, #16]	; (8011270 <__assert_func+0x38>)
 801125e:	461c      	mov	r4, r3
 8011260:	e7f3      	b.n	801124a <__assert_func+0x12>
 8011262:	bf00      	nop
 8011264:	200001dc 	.word	0x200001dc
 8011268:	08013e4a 	.word	0x08013e4a
 801126c:	08013e57 	.word	0x08013e57
 8011270:	08013e85 	.word	0x08013e85

08011274 <__sflush_r>:
 8011274:	898a      	ldrh	r2, [r1, #12]
 8011276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127a:	4605      	mov	r5, r0
 801127c:	0710      	lsls	r0, r2, #28
 801127e:	460c      	mov	r4, r1
 8011280:	d458      	bmi.n	8011334 <__sflush_r+0xc0>
 8011282:	684b      	ldr	r3, [r1, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	dc05      	bgt.n	8011294 <__sflush_r+0x20>
 8011288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801128a:	2b00      	cmp	r3, #0
 801128c:	dc02      	bgt.n	8011294 <__sflush_r+0x20>
 801128e:	2000      	movs	r0, #0
 8011290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011296:	2e00      	cmp	r6, #0
 8011298:	d0f9      	beq.n	801128e <__sflush_r+0x1a>
 801129a:	2300      	movs	r3, #0
 801129c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112a0:	682f      	ldr	r7, [r5, #0]
 80112a2:	602b      	str	r3, [r5, #0]
 80112a4:	d032      	beq.n	801130c <__sflush_r+0x98>
 80112a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	075a      	lsls	r2, r3, #29
 80112ac:	d505      	bpl.n	80112ba <__sflush_r+0x46>
 80112ae:	6863      	ldr	r3, [r4, #4]
 80112b0:	1ac0      	subs	r0, r0, r3
 80112b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112b4:	b10b      	cbz	r3, 80112ba <__sflush_r+0x46>
 80112b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112b8:	1ac0      	subs	r0, r0, r3
 80112ba:	2300      	movs	r3, #0
 80112bc:	4602      	mov	r2, r0
 80112be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112c0:	6a21      	ldr	r1, [r4, #32]
 80112c2:	4628      	mov	r0, r5
 80112c4:	47b0      	blx	r6
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	d106      	bne.n	80112da <__sflush_r+0x66>
 80112cc:	6829      	ldr	r1, [r5, #0]
 80112ce:	291d      	cmp	r1, #29
 80112d0:	d82c      	bhi.n	801132c <__sflush_r+0xb8>
 80112d2:	4a2a      	ldr	r2, [pc, #168]	; (801137c <__sflush_r+0x108>)
 80112d4:	40ca      	lsrs	r2, r1
 80112d6:	07d6      	lsls	r6, r2, #31
 80112d8:	d528      	bpl.n	801132c <__sflush_r+0xb8>
 80112da:	2200      	movs	r2, #0
 80112dc:	6062      	str	r2, [r4, #4]
 80112de:	04d9      	lsls	r1, r3, #19
 80112e0:	6922      	ldr	r2, [r4, #16]
 80112e2:	6022      	str	r2, [r4, #0]
 80112e4:	d504      	bpl.n	80112f0 <__sflush_r+0x7c>
 80112e6:	1c42      	adds	r2, r0, #1
 80112e8:	d101      	bne.n	80112ee <__sflush_r+0x7a>
 80112ea:	682b      	ldr	r3, [r5, #0]
 80112ec:	b903      	cbnz	r3, 80112f0 <__sflush_r+0x7c>
 80112ee:	6560      	str	r0, [r4, #84]	; 0x54
 80112f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112f2:	602f      	str	r7, [r5, #0]
 80112f4:	2900      	cmp	r1, #0
 80112f6:	d0ca      	beq.n	801128e <__sflush_r+0x1a>
 80112f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112fc:	4299      	cmp	r1, r3
 80112fe:	d002      	beq.n	8011306 <__sflush_r+0x92>
 8011300:	4628      	mov	r0, r5
 8011302:	f7fc fd35 	bl	800dd70 <_free_r>
 8011306:	2000      	movs	r0, #0
 8011308:	6360      	str	r0, [r4, #52]	; 0x34
 801130a:	e7c1      	b.n	8011290 <__sflush_r+0x1c>
 801130c:	6a21      	ldr	r1, [r4, #32]
 801130e:	2301      	movs	r3, #1
 8011310:	4628      	mov	r0, r5
 8011312:	47b0      	blx	r6
 8011314:	1c41      	adds	r1, r0, #1
 8011316:	d1c7      	bne.n	80112a8 <__sflush_r+0x34>
 8011318:	682b      	ldr	r3, [r5, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d0c4      	beq.n	80112a8 <__sflush_r+0x34>
 801131e:	2b1d      	cmp	r3, #29
 8011320:	d001      	beq.n	8011326 <__sflush_r+0xb2>
 8011322:	2b16      	cmp	r3, #22
 8011324:	d101      	bne.n	801132a <__sflush_r+0xb6>
 8011326:	602f      	str	r7, [r5, #0]
 8011328:	e7b1      	b.n	801128e <__sflush_r+0x1a>
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011330:	81a3      	strh	r3, [r4, #12]
 8011332:	e7ad      	b.n	8011290 <__sflush_r+0x1c>
 8011334:	690f      	ldr	r7, [r1, #16]
 8011336:	2f00      	cmp	r7, #0
 8011338:	d0a9      	beq.n	801128e <__sflush_r+0x1a>
 801133a:	0793      	lsls	r3, r2, #30
 801133c:	680e      	ldr	r6, [r1, #0]
 801133e:	bf08      	it	eq
 8011340:	694b      	ldreq	r3, [r1, #20]
 8011342:	600f      	str	r7, [r1, #0]
 8011344:	bf18      	it	ne
 8011346:	2300      	movne	r3, #0
 8011348:	eba6 0807 	sub.w	r8, r6, r7
 801134c:	608b      	str	r3, [r1, #8]
 801134e:	f1b8 0f00 	cmp.w	r8, #0
 8011352:	dd9c      	ble.n	801128e <__sflush_r+0x1a>
 8011354:	6a21      	ldr	r1, [r4, #32]
 8011356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011358:	4643      	mov	r3, r8
 801135a:	463a      	mov	r2, r7
 801135c:	4628      	mov	r0, r5
 801135e:	47b0      	blx	r6
 8011360:	2800      	cmp	r0, #0
 8011362:	dc06      	bgt.n	8011372 <__sflush_r+0xfe>
 8011364:	89a3      	ldrh	r3, [r4, #12]
 8011366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801136a:	81a3      	strh	r3, [r4, #12]
 801136c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011370:	e78e      	b.n	8011290 <__sflush_r+0x1c>
 8011372:	4407      	add	r7, r0
 8011374:	eba8 0800 	sub.w	r8, r8, r0
 8011378:	e7e9      	b.n	801134e <__sflush_r+0xda>
 801137a:	bf00      	nop
 801137c:	20400001 	.word	0x20400001

08011380 <_fflush_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	690b      	ldr	r3, [r1, #16]
 8011384:	4605      	mov	r5, r0
 8011386:	460c      	mov	r4, r1
 8011388:	b913      	cbnz	r3, 8011390 <_fflush_r+0x10>
 801138a:	2500      	movs	r5, #0
 801138c:	4628      	mov	r0, r5
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	b118      	cbz	r0, 801139a <_fflush_r+0x1a>
 8011392:	6983      	ldr	r3, [r0, #24]
 8011394:	b90b      	cbnz	r3, 801139a <_fflush_r+0x1a>
 8011396:	f000 f887 	bl	80114a8 <__sinit>
 801139a:	4b14      	ldr	r3, [pc, #80]	; (80113ec <_fflush_r+0x6c>)
 801139c:	429c      	cmp	r4, r3
 801139e:	d11b      	bne.n	80113d8 <_fflush_r+0x58>
 80113a0:	686c      	ldr	r4, [r5, #4]
 80113a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d0ef      	beq.n	801138a <_fflush_r+0xa>
 80113aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113ac:	07d0      	lsls	r0, r2, #31
 80113ae:	d404      	bmi.n	80113ba <_fflush_r+0x3a>
 80113b0:	0599      	lsls	r1, r3, #22
 80113b2:	d402      	bmi.n	80113ba <_fflush_r+0x3a>
 80113b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113b6:	f7fe fb28 	bl	800fa0a <__retarget_lock_acquire_recursive>
 80113ba:	4628      	mov	r0, r5
 80113bc:	4621      	mov	r1, r4
 80113be:	f7ff ff59 	bl	8011274 <__sflush_r>
 80113c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113c4:	07da      	lsls	r2, r3, #31
 80113c6:	4605      	mov	r5, r0
 80113c8:	d4e0      	bmi.n	801138c <_fflush_r+0xc>
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	059b      	lsls	r3, r3, #22
 80113ce:	d4dd      	bmi.n	801138c <_fflush_r+0xc>
 80113d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d2:	f7fe fb1b 	bl	800fa0c <__retarget_lock_release_recursive>
 80113d6:	e7d9      	b.n	801138c <_fflush_r+0xc>
 80113d8:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <_fflush_r+0x70>)
 80113da:	429c      	cmp	r4, r3
 80113dc:	d101      	bne.n	80113e2 <_fflush_r+0x62>
 80113de:	68ac      	ldr	r4, [r5, #8]
 80113e0:	e7df      	b.n	80113a2 <_fflush_r+0x22>
 80113e2:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <_fflush_r+0x74>)
 80113e4:	429c      	cmp	r4, r3
 80113e6:	bf08      	it	eq
 80113e8:	68ec      	ldreq	r4, [r5, #12]
 80113ea:	e7da      	b.n	80113a2 <_fflush_r+0x22>
 80113ec:	08013ea8 	.word	0x08013ea8
 80113f0:	08013ec8 	.word	0x08013ec8
 80113f4:	08013e88 	.word	0x08013e88

080113f8 <std>:
 80113f8:	2300      	movs	r3, #0
 80113fa:	b510      	push	{r4, lr}
 80113fc:	4604      	mov	r4, r0
 80113fe:	e9c0 3300 	strd	r3, r3, [r0]
 8011402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011406:	6083      	str	r3, [r0, #8]
 8011408:	8181      	strh	r1, [r0, #12]
 801140a:	6643      	str	r3, [r0, #100]	; 0x64
 801140c:	81c2      	strh	r2, [r0, #14]
 801140e:	6183      	str	r3, [r0, #24]
 8011410:	4619      	mov	r1, r3
 8011412:	2208      	movs	r2, #8
 8011414:	305c      	adds	r0, #92	; 0x5c
 8011416:	f7fc fc93 	bl	800dd40 <memset>
 801141a:	4b05      	ldr	r3, [pc, #20]	; (8011430 <std+0x38>)
 801141c:	6263      	str	r3, [r4, #36]	; 0x24
 801141e:	4b05      	ldr	r3, [pc, #20]	; (8011434 <std+0x3c>)
 8011420:	62a3      	str	r3, [r4, #40]	; 0x28
 8011422:	4b05      	ldr	r3, [pc, #20]	; (8011438 <std+0x40>)
 8011424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011426:	4b05      	ldr	r3, [pc, #20]	; (801143c <std+0x44>)
 8011428:	6224      	str	r4, [r4, #32]
 801142a:	6323      	str	r3, [r4, #48]	; 0x30
 801142c:	bd10      	pop	{r4, pc}
 801142e:	bf00      	nop
 8011430:	0800e3a9 	.word	0x0800e3a9
 8011434:	0800e3cf 	.word	0x0800e3cf
 8011438:	0800e407 	.word	0x0800e407
 801143c:	0800e42b 	.word	0x0800e42b

08011440 <_cleanup_r>:
 8011440:	4901      	ldr	r1, [pc, #4]	; (8011448 <_cleanup_r+0x8>)
 8011442:	f000 b8c1 	b.w	80115c8 <_fwalk_reent>
 8011446:	bf00      	nop
 8011448:	08011381 	.word	0x08011381

0801144c <__sfmoreglue>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	1e4a      	subs	r2, r1, #1
 8011450:	2568      	movs	r5, #104	; 0x68
 8011452:	4355      	muls	r5, r2
 8011454:	460e      	mov	r6, r1
 8011456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801145a:	f7fc fcd9 	bl	800de10 <_malloc_r>
 801145e:	4604      	mov	r4, r0
 8011460:	b140      	cbz	r0, 8011474 <__sfmoreglue+0x28>
 8011462:	2100      	movs	r1, #0
 8011464:	e9c0 1600 	strd	r1, r6, [r0]
 8011468:	300c      	adds	r0, #12
 801146a:	60a0      	str	r0, [r4, #8]
 801146c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011470:	f7fc fc66 	bl	800dd40 <memset>
 8011474:	4620      	mov	r0, r4
 8011476:	bd70      	pop	{r4, r5, r6, pc}

08011478 <__sfp_lock_acquire>:
 8011478:	4801      	ldr	r0, [pc, #4]	; (8011480 <__sfp_lock_acquire+0x8>)
 801147a:	f7fe bac6 	b.w	800fa0a <__retarget_lock_acquire_recursive>
 801147e:	bf00      	nop
 8011480:	2000a0a0 	.word	0x2000a0a0

08011484 <__sfp_lock_release>:
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <__sfp_lock_release+0x8>)
 8011486:	f7fe bac1 	b.w	800fa0c <__retarget_lock_release_recursive>
 801148a:	bf00      	nop
 801148c:	2000a0a0 	.word	0x2000a0a0

08011490 <__sinit_lock_acquire>:
 8011490:	4801      	ldr	r0, [pc, #4]	; (8011498 <__sinit_lock_acquire+0x8>)
 8011492:	f7fe baba 	b.w	800fa0a <__retarget_lock_acquire_recursive>
 8011496:	bf00      	nop
 8011498:	2000a09b 	.word	0x2000a09b

0801149c <__sinit_lock_release>:
 801149c:	4801      	ldr	r0, [pc, #4]	; (80114a4 <__sinit_lock_release+0x8>)
 801149e:	f7fe bab5 	b.w	800fa0c <__retarget_lock_release_recursive>
 80114a2:	bf00      	nop
 80114a4:	2000a09b 	.word	0x2000a09b

080114a8 <__sinit>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	4604      	mov	r4, r0
 80114ac:	f7ff fff0 	bl	8011490 <__sinit_lock_acquire>
 80114b0:	69a3      	ldr	r3, [r4, #24]
 80114b2:	b11b      	cbz	r3, 80114bc <__sinit+0x14>
 80114b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b8:	f7ff bff0 	b.w	801149c <__sinit_lock_release>
 80114bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114c0:	6523      	str	r3, [r4, #80]	; 0x50
 80114c2:	4b13      	ldr	r3, [pc, #76]	; (8011510 <__sinit+0x68>)
 80114c4:	4a13      	ldr	r2, [pc, #76]	; (8011514 <__sinit+0x6c>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80114ca:	42a3      	cmp	r3, r4
 80114cc:	bf04      	itt	eq
 80114ce:	2301      	moveq	r3, #1
 80114d0:	61a3      	streq	r3, [r4, #24]
 80114d2:	4620      	mov	r0, r4
 80114d4:	f000 f820 	bl	8011518 <__sfp>
 80114d8:	6060      	str	r0, [r4, #4]
 80114da:	4620      	mov	r0, r4
 80114dc:	f000 f81c 	bl	8011518 <__sfp>
 80114e0:	60a0      	str	r0, [r4, #8]
 80114e2:	4620      	mov	r0, r4
 80114e4:	f000 f818 	bl	8011518 <__sfp>
 80114e8:	2200      	movs	r2, #0
 80114ea:	60e0      	str	r0, [r4, #12]
 80114ec:	2104      	movs	r1, #4
 80114ee:	6860      	ldr	r0, [r4, #4]
 80114f0:	f7ff ff82 	bl	80113f8 <std>
 80114f4:	68a0      	ldr	r0, [r4, #8]
 80114f6:	2201      	movs	r2, #1
 80114f8:	2109      	movs	r1, #9
 80114fa:	f7ff ff7d 	bl	80113f8 <std>
 80114fe:	68e0      	ldr	r0, [r4, #12]
 8011500:	2202      	movs	r2, #2
 8011502:	2112      	movs	r1, #18
 8011504:	f7ff ff78 	bl	80113f8 <std>
 8011508:	2301      	movs	r3, #1
 801150a:	61a3      	str	r3, [r4, #24]
 801150c:	e7d2      	b.n	80114b4 <__sinit+0xc>
 801150e:	bf00      	nop
 8011510:	08013b8c 	.word	0x08013b8c
 8011514:	08011441 	.word	0x08011441

08011518 <__sfp>:
 8011518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151a:	4607      	mov	r7, r0
 801151c:	f7ff ffac 	bl	8011478 <__sfp_lock_acquire>
 8011520:	4b1e      	ldr	r3, [pc, #120]	; (801159c <__sfp+0x84>)
 8011522:	681e      	ldr	r6, [r3, #0]
 8011524:	69b3      	ldr	r3, [r6, #24]
 8011526:	b913      	cbnz	r3, 801152e <__sfp+0x16>
 8011528:	4630      	mov	r0, r6
 801152a:	f7ff ffbd 	bl	80114a8 <__sinit>
 801152e:	3648      	adds	r6, #72	; 0x48
 8011530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011534:	3b01      	subs	r3, #1
 8011536:	d503      	bpl.n	8011540 <__sfp+0x28>
 8011538:	6833      	ldr	r3, [r6, #0]
 801153a:	b30b      	cbz	r3, 8011580 <__sfp+0x68>
 801153c:	6836      	ldr	r6, [r6, #0]
 801153e:	e7f7      	b.n	8011530 <__sfp+0x18>
 8011540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011544:	b9d5      	cbnz	r5, 801157c <__sfp+0x64>
 8011546:	4b16      	ldr	r3, [pc, #88]	; (80115a0 <__sfp+0x88>)
 8011548:	60e3      	str	r3, [r4, #12]
 801154a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801154e:	6665      	str	r5, [r4, #100]	; 0x64
 8011550:	f7fe fa5a 	bl	800fa08 <__retarget_lock_init_recursive>
 8011554:	f7ff ff96 	bl	8011484 <__sfp_lock_release>
 8011558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801155c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011560:	6025      	str	r5, [r4, #0]
 8011562:	61a5      	str	r5, [r4, #24]
 8011564:	2208      	movs	r2, #8
 8011566:	4629      	mov	r1, r5
 8011568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801156c:	f7fc fbe8 	bl	800dd40 <memset>
 8011570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011578:	4620      	mov	r0, r4
 801157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801157c:	3468      	adds	r4, #104	; 0x68
 801157e:	e7d9      	b.n	8011534 <__sfp+0x1c>
 8011580:	2104      	movs	r1, #4
 8011582:	4638      	mov	r0, r7
 8011584:	f7ff ff62 	bl	801144c <__sfmoreglue>
 8011588:	4604      	mov	r4, r0
 801158a:	6030      	str	r0, [r6, #0]
 801158c:	2800      	cmp	r0, #0
 801158e:	d1d5      	bne.n	801153c <__sfp+0x24>
 8011590:	f7ff ff78 	bl	8011484 <__sfp_lock_release>
 8011594:	230c      	movs	r3, #12
 8011596:	603b      	str	r3, [r7, #0]
 8011598:	e7ee      	b.n	8011578 <__sfp+0x60>
 801159a:	bf00      	nop
 801159c:	08013b8c 	.word	0x08013b8c
 80115a0:	ffff0001 	.word	0xffff0001

080115a4 <fiprintf>:
 80115a4:	b40e      	push	{r1, r2, r3}
 80115a6:	b503      	push	{r0, r1, lr}
 80115a8:	4601      	mov	r1, r0
 80115aa:	ab03      	add	r3, sp, #12
 80115ac:	4805      	ldr	r0, [pc, #20]	; (80115c4 <fiprintf+0x20>)
 80115ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80115b2:	6800      	ldr	r0, [r0, #0]
 80115b4:	9301      	str	r3, [sp, #4]
 80115b6:	f000 f88f 	bl	80116d8 <_vfiprintf_r>
 80115ba:	b002      	add	sp, #8
 80115bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80115c0:	b003      	add	sp, #12
 80115c2:	4770      	bx	lr
 80115c4:	200001dc 	.word	0x200001dc

080115c8 <_fwalk_reent>:
 80115c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115cc:	4606      	mov	r6, r0
 80115ce:	4688      	mov	r8, r1
 80115d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115d4:	2700      	movs	r7, #0
 80115d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115da:	f1b9 0901 	subs.w	r9, r9, #1
 80115de:	d505      	bpl.n	80115ec <_fwalk_reent+0x24>
 80115e0:	6824      	ldr	r4, [r4, #0]
 80115e2:	2c00      	cmp	r4, #0
 80115e4:	d1f7      	bne.n	80115d6 <_fwalk_reent+0xe>
 80115e6:	4638      	mov	r0, r7
 80115e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ec:	89ab      	ldrh	r3, [r5, #12]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d907      	bls.n	8011602 <_fwalk_reent+0x3a>
 80115f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115f6:	3301      	adds	r3, #1
 80115f8:	d003      	beq.n	8011602 <_fwalk_reent+0x3a>
 80115fa:	4629      	mov	r1, r5
 80115fc:	4630      	mov	r0, r6
 80115fe:	47c0      	blx	r8
 8011600:	4307      	orrs	r7, r0
 8011602:	3568      	adds	r5, #104	; 0x68
 8011604:	e7e9      	b.n	80115da <_fwalk_reent+0x12>

08011606 <memmove>:
 8011606:	4288      	cmp	r0, r1
 8011608:	b510      	push	{r4, lr}
 801160a:	eb01 0402 	add.w	r4, r1, r2
 801160e:	d902      	bls.n	8011616 <memmove+0x10>
 8011610:	4284      	cmp	r4, r0
 8011612:	4623      	mov	r3, r4
 8011614:	d807      	bhi.n	8011626 <memmove+0x20>
 8011616:	1e43      	subs	r3, r0, #1
 8011618:	42a1      	cmp	r1, r4
 801161a:	d008      	beq.n	801162e <memmove+0x28>
 801161c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011620:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011624:	e7f8      	b.n	8011618 <memmove+0x12>
 8011626:	4402      	add	r2, r0
 8011628:	4601      	mov	r1, r0
 801162a:	428a      	cmp	r2, r1
 801162c:	d100      	bne.n	8011630 <memmove+0x2a>
 801162e:	bd10      	pop	{r4, pc}
 8011630:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011634:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011638:	e7f7      	b.n	801162a <memmove+0x24>

0801163a <_realloc_r>:
 801163a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163c:	4607      	mov	r7, r0
 801163e:	4614      	mov	r4, r2
 8011640:	460e      	mov	r6, r1
 8011642:	b921      	cbnz	r1, 801164e <_realloc_r+0x14>
 8011644:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011648:	4611      	mov	r1, r2
 801164a:	f7fc bbe1 	b.w	800de10 <_malloc_r>
 801164e:	b922      	cbnz	r2, 801165a <_realloc_r+0x20>
 8011650:	f7fc fb8e 	bl	800dd70 <_free_r>
 8011654:	4625      	mov	r5, r4
 8011656:	4628      	mov	r0, r5
 8011658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801165a:	f000 fa99 	bl	8011b90 <_malloc_usable_size_r>
 801165e:	42a0      	cmp	r0, r4
 8011660:	d20f      	bcs.n	8011682 <_realloc_r+0x48>
 8011662:	4621      	mov	r1, r4
 8011664:	4638      	mov	r0, r7
 8011666:	f7fc fbd3 	bl	800de10 <_malloc_r>
 801166a:	4605      	mov	r5, r0
 801166c:	2800      	cmp	r0, #0
 801166e:	d0f2      	beq.n	8011656 <_realloc_r+0x1c>
 8011670:	4631      	mov	r1, r6
 8011672:	4622      	mov	r2, r4
 8011674:	f7fc fb56 	bl	800dd24 <memcpy>
 8011678:	4631      	mov	r1, r6
 801167a:	4638      	mov	r0, r7
 801167c:	f7fc fb78 	bl	800dd70 <_free_r>
 8011680:	e7e9      	b.n	8011656 <_realloc_r+0x1c>
 8011682:	4635      	mov	r5, r6
 8011684:	e7e7      	b.n	8011656 <_realloc_r+0x1c>

08011686 <__sfputc_r>:
 8011686:	6893      	ldr	r3, [r2, #8]
 8011688:	3b01      	subs	r3, #1
 801168a:	2b00      	cmp	r3, #0
 801168c:	b410      	push	{r4}
 801168e:	6093      	str	r3, [r2, #8]
 8011690:	da08      	bge.n	80116a4 <__sfputc_r+0x1e>
 8011692:	6994      	ldr	r4, [r2, #24]
 8011694:	42a3      	cmp	r3, r4
 8011696:	db01      	blt.n	801169c <__sfputc_r+0x16>
 8011698:	290a      	cmp	r1, #10
 801169a:	d103      	bne.n	80116a4 <__sfputc_r+0x1e>
 801169c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116a0:	f000 b94a 	b.w	8011938 <__swbuf_r>
 80116a4:	6813      	ldr	r3, [r2, #0]
 80116a6:	1c58      	adds	r0, r3, #1
 80116a8:	6010      	str	r0, [r2, #0]
 80116aa:	7019      	strb	r1, [r3, #0]
 80116ac:	4608      	mov	r0, r1
 80116ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <__sfputs_r>:
 80116b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b6:	4606      	mov	r6, r0
 80116b8:	460f      	mov	r7, r1
 80116ba:	4614      	mov	r4, r2
 80116bc:	18d5      	adds	r5, r2, r3
 80116be:	42ac      	cmp	r4, r5
 80116c0:	d101      	bne.n	80116c6 <__sfputs_r+0x12>
 80116c2:	2000      	movs	r0, #0
 80116c4:	e007      	b.n	80116d6 <__sfputs_r+0x22>
 80116c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ca:	463a      	mov	r2, r7
 80116cc:	4630      	mov	r0, r6
 80116ce:	f7ff ffda 	bl	8011686 <__sfputc_r>
 80116d2:	1c43      	adds	r3, r0, #1
 80116d4:	d1f3      	bne.n	80116be <__sfputs_r+0xa>
 80116d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080116d8 <_vfiprintf_r>:
 80116d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116dc:	460d      	mov	r5, r1
 80116de:	b09d      	sub	sp, #116	; 0x74
 80116e0:	4614      	mov	r4, r2
 80116e2:	4698      	mov	r8, r3
 80116e4:	4606      	mov	r6, r0
 80116e6:	b118      	cbz	r0, 80116f0 <_vfiprintf_r+0x18>
 80116e8:	6983      	ldr	r3, [r0, #24]
 80116ea:	b90b      	cbnz	r3, 80116f0 <_vfiprintf_r+0x18>
 80116ec:	f7ff fedc 	bl	80114a8 <__sinit>
 80116f0:	4b89      	ldr	r3, [pc, #548]	; (8011918 <_vfiprintf_r+0x240>)
 80116f2:	429d      	cmp	r5, r3
 80116f4:	d11b      	bne.n	801172e <_vfiprintf_r+0x56>
 80116f6:	6875      	ldr	r5, [r6, #4]
 80116f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116fa:	07d9      	lsls	r1, r3, #31
 80116fc:	d405      	bmi.n	801170a <_vfiprintf_r+0x32>
 80116fe:	89ab      	ldrh	r3, [r5, #12]
 8011700:	059a      	lsls	r2, r3, #22
 8011702:	d402      	bmi.n	801170a <_vfiprintf_r+0x32>
 8011704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011706:	f7fe f980 	bl	800fa0a <__retarget_lock_acquire_recursive>
 801170a:	89ab      	ldrh	r3, [r5, #12]
 801170c:	071b      	lsls	r3, r3, #28
 801170e:	d501      	bpl.n	8011714 <_vfiprintf_r+0x3c>
 8011710:	692b      	ldr	r3, [r5, #16]
 8011712:	b9eb      	cbnz	r3, 8011750 <_vfiprintf_r+0x78>
 8011714:	4629      	mov	r1, r5
 8011716:	4630      	mov	r0, r6
 8011718:	f000 f960 	bl	80119dc <__swsetup_r>
 801171c:	b1c0      	cbz	r0, 8011750 <_vfiprintf_r+0x78>
 801171e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011720:	07dc      	lsls	r4, r3, #31
 8011722:	d50e      	bpl.n	8011742 <_vfiprintf_r+0x6a>
 8011724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011728:	b01d      	add	sp, #116	; 0x74
 801172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	4b7b      	ldr	r3, [pc, #492]	; (801191c <_vfiprintf_r+0x244>)
 8011730:	429d      	cmp	r5, r3
 8011732:	d101      	bne.n	8011738 <_vfiprintf_r+0x60>
 8011734:	68b5      	ldr	r5, [r6, #8]
 8011736:	e7df      	b.n	80116f8 <_vfiprintf_r+0x20>
 8011738:	4b79      	ldr	r3, [pc, #484]	; (8011920 <_vfiprintf_r+0x248>)
 801173a:	429d      	cmp	r5, r3
 801173c:	bf08      	it	eq
 801173e:	68f5      	ldreq	r5, [r6, #12]
 8011740:	e7da      	b.n	80116f8 <_vfiprintf_r+0x20>
 8011742:	89ab      	ldrh	r3, [r5, #12]
 8011744:	0598      	lsls	r0, r3, #22
 8011746:	d4ed      	bmi.n	8011724 <_vfiprintf_r+0x4c>
 8011748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801174a:	f7fe f95f 	bl	800fa0c <__retarget_lock_release_recursive>
 801174e:	e7e9      	b.n	8011724 <_vfiprintf_r+0x4c>
 8011750:	2300      	movs	r3, #0
 8011752:	9309      	str	r3, [sp, #36]	; 0x24
 8011754:	2320      	movs	r3, #32
 8011756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801175a:	f8cd 800c 	str.w	r8, [sp, #12]
 801175e:	2330      	movs	r3, #48	; 0x30
 8011760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011924 <_vfiprintf_r+0x24c>
 8011764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011768:	f04f 0901 	mov.w	r9, #1
 801176c:	4623      	mov	r3, r4
 801176e:	469a      	mov	sl, r3
 8011770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011774:	b10a      	cbz	r2, 801177a <_vfiprintf_r+0xa2>
 8011776:	2a25      	cmp	r2, #37	; 0x25
 8011778:	d1f9      	bne.n	801176e <_vfiprintf_r+0x96>
 801177a:	ebba 0b04 	subs.w	fp, sl, r4
 801177e:	d00b      	beq.n	8011798 <_vfiprintf_r+0xc0>
 8011780:	465b      	mov	r3, fp
 8011782:	4622      	mov	r2, r4
 8011784:	4629      	mov	r1, r5
 8011786:	4630      	mov	r0, r6
 8011788:	f7ff ff94 	bl	80116b4 <__sfputs_r>
 801178c:	3001      	adds	r0, #1
 801178e:	f000 80aa 	beq.w	80118e6 <_vfiprintf_r+0x20e>
 8011792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011794:	445a      	add	r2, fp
 8011796:	9209      	str	r2, [sp, #36]	; 0x24
 8011798:	f89a 3000 	ldrb.w	r3, [sl]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 80a2 	beq.w	80118e6 <_vfiprintf_r+0x20e>
 80117a2:	2300      	movs	r3, #0
 80117a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117ac:	f10a 0a01 	add.w	sl, sl, #1
 80117b0:	9304      	str	r3, [sp, #16]
 80117b2:	9307      	str	r3, [sp, #28]
 80117b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117b8:	931a      	str	r3, [sp, #104]	; 0x68
 80117ba:	4654      	mov	r4, sl
 80117bc:	2205      	movs	r2, #5
 80117be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c2:	4858      	ldr	r0, [pc, #352]	; (8011924 <_vfiprintf_r+0x24c>)
 80117c4:	f7ee fd24 	bl	8000210 <memchr>
 80117c8:	9a04      	ldr	r2, [sp, #16]
 80117ca:	b9d8      	cbnz	r0, 8011804 <_vfiprintf_r+0x12c>
 80117cc:	06d1      	lsls	r1, r2, #27
 80117ce:	bf44      	itt	mi
 80117d0:	2320      	movmi	r3, #32
 80117d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117d6:	0713      	lsls	r3, r2, #28
 80117d8:	bf44      	itt	mi
 80117da:	232b      	movmi	r3, #43	; 0x2b
 80117dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117e0:	f89a 3000 	ldrb.w	r3, [sl]
 80117e4:	2b2a      	cmp	r3, #42	; 0x2a
 80117e6:	d015      	beq.n	8011814 <_vfiprintf_r+0x13c>
 80117e8:	9a07      	ldr	r2, [sp, #28]
 80117ea:	4654      	mov	r4, sl
 80117ec:	2000      	movs	r0, #0
 80117ee:	f04f 0c0a 	mov.w	ip, #10
 80117f2:	4621      	mov	r1, r4
 80117f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117f8:	3b30      	subs	r3, #48	; 0x30
 80117fa:	2b09      	cmp	r3, #9
 80117fc:	d94e      	bls.n	801189c <_vfiprintf_r+0x1c4>
 80117fe:	b1b0      	cbz	r0, 801182e <_vfiprintf_r+0x156>
 8011800:	9207      	str	r2, [sp, #28]
 8011802:	e014      	b.n	801182e <_vfiprintf_r+0x156>
 8011804:	eba0 0308 	sub.w	r3, r0, r8
 8011808:	fa09 f303 	lsl.w	r3, r9, r3
 801180c:	4313      	orrs	r3, r2
 801180e:	9304      	str	r3, [sp, #16]
 8011810:	46a2      	mov	sl, r4
 8011812:	e7d2      	b.n	80117ba <_vfiprintf_r+0xe2>
 8011814:	9b03      	ldr	r3, [sp, #12]
 8011816:	1d19      	adds	r1, r3, #4
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	9103      	str	r1, [sp, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	bfbb      	ittet	lt
 8011820:	425b      	neglt	r3, r3
 8011822:	f042 0202 	orrlt.w	r2, r2, #2
 8011826:	9307      	strge	r3, [sp, #28]
 8011828:	9307      	strlt	r3, [sp, #28]
 801182a:	bfb8      	it	lt
 801182c:	9204      	strlt	r2, [sp, #16]
 801182e:	7823      	ldrb	r3, [r4, #0]
 8011830:	2b2e      	cmp	r3, #46	; 0x2e
 8011832:	d10c      	bne.n	801184e <_vfiprintf_r+0x176>
 8011834:	7863      	ldrb	r3, [r4, #1]
 8011836:	2b2a      	cmp	r3, #42	; 0x2a
 8011838:	d135      	bne.n	80118a6 <_vfiprintf_r+0x1ce>
 801183a:	9b03      	ldr	r3, [sp, #12]
 801183c:	1d1a      	adds	r2, r3, #4
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	9203      	str	r2, [sp, #12]
 8011842:	2b00      	cmp	r3, #0
 8011844:	bfb8      	it	lt
 8011846:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801184a:	3402      	adds	r4, #2
 801184c:	9305      	str	r3, [sp, #20]
 801184e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011934 <_vfiprintf_r+0x25c>
 8011852:	7821      	ldrb	r1, [r4, #0]
 8011854:	2203      	movs	r2, #3
 8011856:	4650      	mov	r0, sl
 8011858:	f7ee fcda 	bl	8000210 <memchr>
 801185c:	b140      	cbz	r0, 8011870 <_vfiprintf_r+0x198>
 801185e:	2340      	movs	r3, #64	; 0x40
 8011860:	eba0 000a 	sub.w	r0, r0, sl
 8011864:	fa03 f000 	lsl.w	r0, r3, r0
 8011868:	9b04      	ldr	r3, [sp, #16]
 801186a:	4303      	orrs	r3, r0
 801186c:	3401      	adds	r4, #1
 801186e:	9304      	str	r3, [sp, #16]
 8011870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011874:	482c      	ldr	r0, [pc, #176]	; (8011928 <_vfiprintf_r+0x250>)
 8011876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801187a:	2206      	movs	r2, #6
 801187c:	f7ee fcc8 	bl	8000210 <memchr>
 8011880:	2800      	cmp	r0, #0
 8011882:	d03f      	beq.n	8011904 <_vfiprintf_r+0x22c>
 8011884:	4b29      	ldr	r3, [pc, #164]	; (801192c <_vfiprintf_r+0x254>)
 8011886:	bb1b      	cbnz	r3, 80118d0 <_vfiprintf_r+0x1f8>
 8011888:	9b03      	ldr	r3, [sp, #12]
 801188a:	3307      	adds	r3, #7
 801188c:	f023 0307 	bic.w	r3, r3, #7
 8011890:	3308      	adds	r3, #8
 8011892:	9303      	str	r3, [sp, #12]
 8011894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011896:	443b      	add	r3, r7
 8011898:	9309      	str	r3, [sp, #36]	; 0x24
 801189a:	e767      	b.n	801176c <_vfiprintf_r+0x94>
 801189c:	fb0c 3202 	mla	r2, ip, r2, r3
 80118a0:	460c      	mov	r4, r1
 80118a2:	2001      	movs	r0, #1
 80118a4:	e7a5      	b.n	80117f2 <_vfiprintf_r+0x11a>
 80118a6:	2300      	movs	r3, #0
 80118a8:	3401      	adds	r4, #1
 80118aa:	9305      	str	r3, [sp, #20]
 80118ac:	4619      	mov	r1, r3
 80118ae:	f04f 0c0a 	mov.w	ip, #10
 80118b2:	4620      	mov	r0, r4
 80118b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118b8:	3a30      	subs	r2, #48	; 0x30
 80118ba:	2a09      	cmp	r2, #9
 80118bc:	d903      	bls.n	80118c6 <_vfiprintf_r+0x1ee>
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0c5      	beq.n	801184e <_vfiprintf_r+0x176>
 80118c2:	9105      	str	r1, [sp, #20]
 80118c4:	e7c3      	b.n	801184e <_vfiprintf_r+0x176>
 80118c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80118ca:	4604      	mov	r4, r0
 80118cc:	2301      	movs	r3, #1
 80118ce:	e7f0      	b.n	80118b2 <_vfiprintf_r+0x1da>
 80118d0:	ab03      	add	r3, sp, #12
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	462a      	mov	r2, r5
 80118d6:	4b16      	ldr	r3, [pc, #88]	; (8011930 <_vfiprintf_r+0x258>)
 80118d8:	a904      	add	r1, sp, #16
 80118da:	4630      	mov	r0, r6
 80118dc:	f3af 8000 	nop.w
 80118e0:	4607      	mov	r7, r0
 80118e2:	1c78      	adds	r0, r7, #1
 80118e4:	d1d6      	bne.n	8011894 <_vfiprintf_r+0x1bc>
 80118e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118e8:	07d9      	lsls	r1, r3, #31
 80118ea:	d405      	bmi.n	80118f8 <_vfiprintf_r+0x220>
 80118ec:	89ab      	ldrh	r3, [r5, #12]
 80118ee:	059a      	lsls	r2, r3, #22
 80118f0:	d402      	bmi.n	80118f8 <_vfiprintf_r+0x220>
 80118f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118f4:	f7fe f88a 	bl	800fa0c <__retarget_lock_release_recursive>
 80118f8:	89ab      	ldrh	r3, [r5, #12]
 80118fa:	065b      	lsls	r3, r3, #25
 80118fc:	f53f af12 	bmi.w	8011724 <_vfiprintf_r+0x4c>
 8011900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011902:	e711      	b.n	8011728 <_vfiprintf_r+0x50>
 8011904:	ab03      	add	r3, sp, #12
 8011906:	9300      	str	r3, [sp, #0]
 8011908:	462a      	mov	r2, r5
 801190a:	4b09      	ldr	r3, [pc, #36]	; (8011930 <_vfiprintf_r+0x258>)
 801190c:	a904      	add	r1, sp, #16
 801190e:	4630      	mov	r0, r6
 8011910:	f7ff f904 	bl	8010b1c <_printf_i>
 8011914:	e7e4      	b.n	80118e0 <_vfiprintf_r+0x208>
 8011916:	bf00      	nop
 8011918:	08013ea8 	.word	0x08013ea8
 801191c:	08013ec8 	.word	0x08013ec8
 8011920:	08013e88 	.word	0x08013e88
 8011924:	08013dfc 	.word	0x08013dfc
 8011928:	08013e06 	.word	0x08013e06
 801192c:	00000000 	.word	0x00000000
 8011930:	080116b5 	.word	0x080116b5
 8011934:	08013e02 	.word	0x08013e02

08011938 <__swbuf_r>:
 8011938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193a:	460e      	mov	r6, r1
 801193c:	4614      	mov	r4, r2
 801193e:	4605      	mov	r5, r0
 8011940:	b118      	cbz	r0, 801194a <__swbuf_r+0x12>
 8011942:	6983      	ldr	r3, [r0, #24]
 8011944:	b90b      	cbnz	r3, 801194a <__swbuf_r+0x12>
 8011946:	f7ff fdaf 	bl	80114a8 <__sinit>
 801194a:	4b21      	ldr	r3, [pc, #132]	; (80119d0 <__swbuf_r+0x98>)
 801194c:	429c      	cmp	r4, r3
 801194e:	d12b      	bne.n	80119a8 <__swbuf_r+0x70>
 8011950:	686c      	ldr	r4, [r5, #4]
 8011952:	69a3      	ldr	r3, [r4, #24]
 8011954:	60a3      	str	r3, [r4, #8]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	071a      	lsls	r2, r3, #28
 801195a:	d52f      	bpl.n	80119bc <__swbuf_r+0x84>
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	b36b      	cbz	r3, 80119bc <__swbuf_r+0x84>
 8011960:	6923      	ldr	r3, [r4, #16]
 8011962:	6820      	ldr	r0, [r4, #0]
 8011964:	1ac0      	subs	r0, r0, r3
 8011966:	6963      	ldr	r3, [r4, #20]
 8011968:	b2f6      	uxtb	r6, r6
 801196a:	4283      	cmp	r3, r0
 801196c:	4637      	mov	r7, r6
 801196e:	dc04      	bgt.n	801197a <__swbuf_r+0x42>
 8011970:	4621      	mov	r1, r4
 8011972:	4628      	mov	r0, r5
 8011974:	f7ff fd04 	bl	8011380 <_fflush_r>
 8011978:	bb30      	cbnz	r0, 80119c8 <__swbuf_r+0x90>
 801197a:	68a3      	ldr	r3, [r4, #8]
 801197c:	3b01      	subs	r3, #1
 801197e:	60a3      	str	r3, [r4, #8]
 8011980:	6823      	ldr	r3, [r4, #0]
 8011982:	1c5a      	adds	r2, r3, #1
 8011984:	6022      	str	r2, [r4, #0]
 8011986:	701e      	strb	r6, [r3, #0]
 8011988:	6963      	ldr	r3, [r4, #20]
 801198a:	3001      	adds	r0, #1
 801198c:	4283      	cmp	r3, r0
 801198e:	d004      	beq.n	801199a <__swbuf_r+0x62>
 8011990:	89a3      	ldrh	r3, [r4, #12]
 8011992:	07db      	lsls	r3, r3, #31
 8011994:	d506      	bpl.n	80119a4 <__swbuf_r+0x6c>
 8011996:	2e0a      	cmp	r6, #10
 8011998:	d104      	bne.n	80119a4 <__swbuf_r+0x6c>
 801199a:	4621      	mov	r1, r4
 801199c:	4628      	mov	r0, r5
 801199e:	f7ff fcef 	bl	8011380 <_fflush_r>
 80119a2:	b988      	cbnz	r0, 80119c8 <__swbuf_r+0x90>
 80119a4:	4638      	mov	r0, r7
 80119a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119a8:	4b0a      	ldr	r3, [pc, #40]	; (80119d4 <__swbuf_r+0x9c>)
 80119aa:	429c      	cmp	r4, r3
 80119ac:	d101      	bne.n	80119b2 <__swbuf_r+0x7a>
 80119ae:	68ac      	ldr	r4, [r5, #8]
 80119b0:	e7cf      	b.n	8011952 <__swbuf_r+0x1a>
 80119b2:	4b09      	ldr	r3, [pc, #36]	; (80119d8 <__swbuf_r+0xa0>)
 80119b4:	429c      	cmp	r4, r3
 80119b6:	bf08      	it	eq
 80119b8:	68ec      	ldreq	r4, [r5, #12]
 80119ba:	e7ca      	b.n	8011952 <__swbuf_r+0x1a>
 80119bc:	4621      	mov	r1, r4
 80119be:	4628      	mov	r0, r5
 80119c0:	f000 f80c 	bl	80119dc <__swsetup_r>
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d0cb      	beq.n	8011960 <__swbuf_r+0x28>
 80119c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80119cc:	e7ea      	b.n	80119a4 <__swbuf_r+0x6c>
 80119ce:	bf00      	nop
 80119d0:	08013ea8 	.word	0x08013ea8
 80119d4:	08013ec8 	.word	0x08013ec8
 80119d8:	08013e88 	.word	0x08013e88

080119dc <__swsetup_r>:
 80119dc:	4b32      	ldr	r3, [pc, #200]	; (8011aa8 <__swsetup_r+0xcc>)
 80119de:	b570      	push	{r4, r5, r6, lr}
 80119e0:	681d      	ldr	r5, [r3, #0]
 80119e2:	4606      	mov	r6, r0
 80119e4:	460c      	mov	r4, r1
 80119e6:	b125      	cbz	r5, 80119f2 <__swsetup_r+0x16>
 80119e8:	69ab      	ldr	r3, [r5, #24]
 80119ea:	b913      	cbnz	r3, 80119f2 <__swsetup_r+0x16>
 80119ec:	4628      	mov	r0, r5
 80119ee:	f7ff fd5b 	bl	80114a8 <__sinit>
 80119f2:	4b2e      	ldr	r3, [pc, #184]	; (8011aac <__swsetup_r+0xd0>)
 80119f4:	429c      	cmp	r4, r3
 80119f6:	d10f      	bne.n	8011a18 <__swsetup_r+0x3c>
 80119f8:	686c      	ldr	r4, [r5, #4]
 80119fa:	89a3      	ldrh	r3, [r4, #12]
 80119fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a00:	0719      	lsls	r1, r3, #28
 8011a02:	d42c      	bmi.n	8011a5e <__swsetup_r+0x82>
 8011a04:	06dd      	lsls	r5, r3, #27
 8011a06:	d411      	bmi.n	8011a2c <__swsetup_r+0x50>
 8011a08:	2309      	movs	r3, #9
 8011a0a:	6033      	str	r3, [r6, #0]
 8011a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a10:	81a3      	strh	r3, [r4, #12]
 8011a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a16:	e03e      	b.n	8011a96 <__swsetup_r+0xba>
 8011a18:	4b25      	ldr	r3, [pc, #148]	; (8011ab0 <__swsetup_r+0xd4>)
 8011a1a:	429c      	cmp	r4, r3
 8011a1c:	d101      	bne.n	8011a22 <__swsetup_r+0x46>
 8011a1e:	68ac      	ldr	r4, [r5, #8]
 8011a20:	e7eb      	b.n	80119fa <__swsetup_r+0x1e>
 8011a22:	4b24      	ldr	r3, [pc, #144]	; (8011ab4 <__swsetup_r+0xd8>)
 8011a24:	429c      	cmp	r4, r3
 8011a26:	bf08      	it	eq
 8011a28:	68ec      	ldreq	r4, [r5, #12]
 8011a2a:	e7e6      	b.n	80119fa <__swsetup_r+0x1e>
 8011a2c:	0758      	lsls	r0, r3, #29
 8011a2e:	d512      	bpl.n	8011a56 <__swsetup_r+0x7a>
 8011a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a32:	b141      	cbz	r1, 8011a46 <__swsetup_r+0x6a>
 8011a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a38:	4299      	cmp	r1, r3
 8011a3a:	d002      	beq.n	8011a42 <__swsetup_r+0x66>
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f7fc f997 	bl	800dd70 <_free_r>
 8011a42:	2300      	movs	r3, #0
 8011a44:	6363      	str	r3, [r4, #52]	; 0x34
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a4c:	81a3      	strh	r3, [r4, #12]
 8011a4e:	2300      	movs	r3, #0
 8011a50:	6063      	str	r3, [r4, #4]
 8011a52:	6923      	ldr	r3, [r4, #16]
 8011a54:	6023      	str	r3, [r4, #0]
 8011a56:	89a3      	ldrh	r3, [r4, #12]
 8011a58:	f043 0308 	orr.w	r3, r3, #8
 8011a5c:	81a3      	strh	r3, [r4, #12]
 8011a5e:	6923      	ldr	r3, [r4, #16]
 8011a60:	b94b      	cbnz	r3, 8011a76 <__swsetup_r+0x9a>
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a6c:	d003      	beq.n	8011a76 <__swsetup_r+0x9a>
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4630      	mov	r0, r6
 8011a72:	f000 f84d 	bl	8011b10 <__smakebuf_r>
 8011a76:	89a0      	ldrh	r0, [r4, #12]
 8011a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a7c:	f010 0301 	ands.w	r3, r0, #1
 8011a80:	d00a      	beq.n	8011a98 <__swsetup_r+0xbc>
 8011a82:	2300      	movs	r3, #0
 8011a84:	60a3      	str	r3, [r4, #8]
 8011a86:	6963      	ldr	r3, [r4, #20]
 8011a88:	425b      	negs	r3, r3
 8011a8a:	61a3      	str	r3, [r4, #24]
 8011a8c:	6923      	ldr	r3, [r4, #16]
 8011a8e:	b943      	cbnz	r3, 8011aa2 <__swsetup_r+0xc6>
 8011a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a94:	d1ba      	bne.n	8011a0c <__swsetup_r+0x30>
 8011a96:	bd70      	pop	{r4, r5, r6, pc}
 8011a98:	0781      	lsls	r1, r0, #30
 8011a9a:	bf58      	it	pl
 8011a9c:	6963      	ldrpl	r3, [r4, #20]
 8011a9e:	60a3      	str	r3, [r4, #8]
 8011aa0:	e7f4      	b.n	8011a8c <__swsetup_r+0xb0>
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	e7f7      	b.n	8011a96 <__swsetup_r+0xba>
 8011aa6:	bf00      	nop
 8011aa8:	200001dc 	.word	0x200001dc
 8011aac:	08013ea8 	.word	0x08013ea8
 8011ab0:	08013ec8 	.word	0x08013ec8
 8011ab4:	08013e88 	.word	0x08013e88

08011ab8 <abort>:
 8011ab8:	b508      	push	{r3, lr}
 8011aba:	2006      	movs	r0, #6
 8011abc:	f000 f898 	bl	8011bf0 <raise>
 8011ac0:	2001      	movs	r0, #1
 8011ac2:	f7f4 ff01 	bl	80068c8 <_exit>

08011ac6 <__swhatbuf_r>:
 8011ac6:	b570      	push	{r4, r5, r6, lr}
 8011ac8:	460e      	mov	r6, r1
 8011aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ace:	2900      	cmp	r1, #0
 8011ad0:	b096      	sub	sp, #88	; 0x58
 8011ad2:	4614      	mov	r4, r2
 8011ad4:	461d      	mov	r5, r3
 8011ad6:	da07      	bge.n	8011ae8 <__swhatbuf_r+0x22>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	602b      	str	r3, [r5, #0]
 8011adc:	89b3      	ldrh	r3, [r6, #12]
 8011ade:	061a      	lsls	r2, r3, #24
 8011ae0:	d410      	bmi.n	8011b04 <__swhatbuf_r+0x3e>
 8011ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ae6:	e00e      	b.n	8011b06 <__swhatbuf_r+0x40>
 8011ae8:	466a      	mov	r2, sp
 8011aea:	f000 f89d 	bl	8011c28 <_fstat_r>
 8011aee:	2800      	cmp	r0, #0
 8011af0:	dbf2      	blt.n	8011ad8 <__swhatbuf_r+0x12>
 8011af2:	9a01      	ldr	r2, [sp, #4]
 8011af4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011af8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011afc:	425a      	negs	r2, r3
 8011afe:	415a      	adcs	r2, r3
 8011b00:	602a      	str	r2, [r5, #0]
 8011b02:	e7ee      	b.n	8011ae2 <__swhatbuf_r+0x1c>
 8011b04:	2340      	movs	r3, #64	; 0x40
 8011b06:	2000      	movs	r0, #0
 8011b08:	6023      	str	r3, [r4, #0]
 8011b0a:	b016      	add	sp, #88	; 0x58
 8011b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b10 <__smakebuf_r>:
 8011b10:	898b      	ldrh	r3, [r1, #12]
 8011b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b14:	079d      	lsls	r5, r3, #30
 8011b16:	4606      	mov	r6, r0
 8011b18:	460c      	mov	r4, r1
 8011b1a:	d507      	bpl.n	8011b2c <__smakebuf_r+0x1c>
 8011b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b20:	6023      	str	r3, [r4, #0]
 8011b22:	6123      	str	r3, [r4, #16]
 8011b24:	2301      	movs	r3, #1
 8011b26:	6163      	str	r3, [r4, #20]
 8011b28:	b002      	add	sp, #8
 8011b2a:	bd70      	pop	{r4, r5, r6, pc}
 8011b2c:	ab01      	add	r3, sp, #4
 8011b2e:	466a      	mov	r2, sp
 8011b30:	f7ff ffc9 	bl	8011ac6 <__swhatbuf_r>
 8011b34:	9900      	ldr	r1, [sp, #0]
 8011b36:	4605      	mov	r5, r0
 8011b38:	4630      	mov	r0, r6
 8011b3a:	f7fc f969 	bl	800de10 <_malloc_r>
 8011b3e:	b948      	cbnz	r0, 8011b54 <__smakebuf_r+0x44>
 8011b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b44:	059a      	lsls	r2, r3, #22
 8011b46:	d4ef      	bmi.n	8011b28 <__smakebuf_r+0x18>
 8011b48:	f023 0303 	bic.w	r3, r3, #3
 8011b4c:	f043 0302 	orr.w	r3, r3, #2
 8011b50:	81a3      	strh	r3, [r4, #12]
 8011b52:	e7e3      	b.n	8011b1c <__smakebuf_r+0xc>
 8011b54:	4b0d      	ldr	r3, [pc, #52]	; (8011b8c <__smakebuf_r+0x7c>)
 8011b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	6020      	str	r0, [r4, #0]
 8011b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b60:	81a3      	strh	r3, [r4, #12]
 8011b62:	9b00      	ldr	r3, [sp, #0]
 8011b64:	6163      	str	r3, [r4, #20]
 8011b66:	9b01      	ldr	r3, [sp, #4]
 8011b68:	6120      	str	r0, [r4, #16]
 8011b6a:	b15b      	cbz	r3, 8011b84 <__smakebuf_r+0x74>
 8011b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b70:	4630      	mov	r0, r6
 8011b72:	f000 f86b 	bl	8011c4c <_isatty_r>
 8011b76:	b128      	cbz	r0, 8011b84 <__smakebuf_r+0x74>
 8011b78:	89a3      	ldrh	r3, [r4, #12]
 8011b7a:	f023 0303 	bic.w	r3, r3, #3
 8011b7e:	f043 0301 	orr.w	r3, r3, #1
 8011b82:	81a3      	strh	r3, [r4, #12]
 8011b84:	89a0      	ldrh	r0, [r4, #12]
 8011b86:	4305      	orrs	r5, r0
 8011b88:	81a5      	strh	r5, [r4, #12]
 8011b8a:	e7cd      	b.n	8011b28 <__smakebuf_r+0x18>
 8011b8c:	08011441 	.word	0x08011441

08011b90 <_malloc_usable_size_r>:
 8011b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b94:	1f18      	subs	r0, r3, #4
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bfbc      	itt	lt
 8011b9a:	580b      	ldrlt	r3, [r1, r0]
 8011b9c:	18c0      	addlt	r0, r0, r3
 8011b9e:	4770      	bx	lr

08011ba0 <_raise_r>:
 8011ba0:	291f      	cmp	r1, #31
 8011ba2:	b538      	push	{r3, r4, r5, lr}
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	d904      	bls.n	8011bb4 <_raise_r+0x14>
 8011baa:	2316      	movs	r3, #22
 8011bac:	6003      	str	r3, [r0, #0]
 8011bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011bb6:	b112      	cbz	r2, 8011bbe <_raise_r+0x1e>
 8011bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bbc:	b94b      	cbnz	r3, 8011bd2 <_raise_r+0x32>
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f000 f830 	bl	8011c24 <_getpid_r>
 8011bc4:	462a      	mov	r2, r5
 8011bc6:	4601      	mov	r1, r0
 8011bc8:	4620      	mov	r0, r4
 8011bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bce:	f000 b817 	b.w	8011c00 <_kill_r>
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d00a      	beq.n	8011bec <_raise_r+0x4c>
 8011bd6:	1c59      	adds	r1, r3, #1
 8011bd8:	d103      	bne.n	8011be2 <_raise_r+0x42>
 8011bda:	2316      	movs	r3, #22
 8011bdc:	6003      	str	r3, [r0, #0]
 8011bde:	2001      	movs	r0, #1
 8011be0:	e7e7      	b.n	8011bb2 <_raise_r+0x12>
 8011be2:	2400      	movs	r4, #0
 8011be4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011be8:	4628      	mov	r0, r5
 8011bea:	4798      	blx	r3
 8011bec:	2000      	movs	r0, #0
 8011bee:	e7e0      	b.n	8011bb2 <_raise_r+0x12>

08011bf0 <raise>:
 8011bf0:	4b02      	ldr	r3, [pc, #8]	; (8011bfc <raise+0xc>)
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	6818      	ldr	r0, [r3, #0]
 8011bf6:	f7ff bfd3 	b.w	8011ba0 <_raise_r>
 8011bfa:	bf00      	nop
 8011bfc:	200001dc 	.word	0x200001dc

08011c00 <_kill_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4d07      	ldr	r5, [pc, #28]	; (8011c20 <_kill_r+0x20>)
 8011c04:	2300      	movs	r3, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	4608      	mov	r0, r1
 8011c0a:	4611      	mov	r1, r2
 8011c0c:	602b      	str	r3, [r5, #0]
 8011c0e:	f7f4 fe53 	bl	80068b8 <_kill>
 8011c12:	1c43      	adds	r3, r0, #1
 8011c14:	d102      	bne.n	8011c1c <_kill_r+0x1c>
 8011c16:	682b      	ldr	r3, [r5, #0]
 8011c18:	b103      	cbz	r3, 8011c1c <_kill_r+0x1c>
 8011c1a:	6023      	str	r3, [r4, #0]
 8011c1c:	bd38      	pop	{r3, r4, r5, pc}
 8011c1e:	bf00      	nop
 8011c20:	2000a0a4 	.word	0x2000a0a4

08011c24 <_getpid_r>:
 8011c24:	f7f4 be46 	b.w	80068b4 <_getpid>

08011c28 <_fstat_r>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4d07      	ldr	r5, [pc, #28]	; (8011c48 <_fstat_r+0x20>)
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4604      	mov	r4, r0
 8011c30:	4608      	mov	r0, r1
 8011c32:	4611      	mov	r1, r2
 8011c34:	602b      	str	r3, [r5, #0]
 8011c36:	f7f4 fe6e 	bl	8006916 <_fstat>
 8011c3a:	1c43      	adds	r3, r0, #1
 8011c3c:	d102      	bne.n	8011c44 <_fstat_r+0x1c>
 8011c3e:	682b      	ldr	r3, [r5, #0]
 8011c40:	b103      	cbz	r3, 8011c44 <_fstat_r+0x1c>
 8011c42:	6023      	str	r3, [r4, #0]
 8011c44:	bd38      	pop	{r3, r4, r5, pc}
 8011c46:	bf00      	nop
 8011c48:	2000a0a4 	.word	0x2000a0a4

08011c4c <_isatty_r>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	4d06      	ldr	r5, [pc, #24]	; (8011c68 <_isatty_r+0x1c>)
 8011c50:	2300      	movs	r3, #0
 8011c52:	4604      	mov	r4, r0
 8011c54:	4608      	mov	r0, r1
 8011c56:	602b      	str	r3, [r5, #0]
 8011c58:	f7f4 fe62 	bl	8006920 <_isatty>
 8011c5c:	1c43      	adds	r3, r0, #1
 8011c5e:	d102      	bne.n	8011c66 <_isatty_r+0x1a>
 8011c60:	682b      	ldr	r3, [r5, #0]
 8011c62:	b103      	cbz	r3, 8011c66 <_isatty_r+0x1a>
 8011c64:	6023      	str	r3, [r4, #0]
 8011c66:	bd38      	pop	{r3, r4, r5, pc}
 8011c68:	2000a0a4 	.word	0x2000a0a4

08011c6c <_init>:
 8011c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6e:	bf00      	nop
 8011c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c72:	bc08      	pop	{r3}
 8011c74:	469e      	mov	lr, r3
 8011c76:	4770      	bx	lr

08011c78 <_fini>:
 8011c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c7a:	bf00      	nop
 8011c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c7e:	bc08      	pop	{r3}
 8011c80:	469e      	mov	lr, r3
 8011c82:	4770      	bx	lr
 8011c84:	0000      	movs	r0, r0
	...

08011c88 <___read_veneer>:
 8011c88:	e51ff004 	ldr	pc, [pc, #-4]	; 8011c8c <___read_veneer+0x4>
 8011c8c:	20000058 	.word	0x20000058

08011c90 <___write_veneer>:
 8011c90:	e51ff004 	ldr	pc, [pc, #-4]	; 8011c94 <___write_veneer+0x4>
 8011c94:	2000005c 	.word	0x2000005c
